
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a204  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c4  0800a3c4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a550  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a550  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001332d  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003454  00000000  00000000  000334da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca6  00000000  00000000  00038818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ad  00000000  00000000  000504be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee3  00000000  00000000  0006576b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec64e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004378  00000000  00000000  000ec6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a328 	.word	0x0800a328

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a328 	.word	0x0800a328

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe42 	bl	8001746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f91f 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa81 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa61 	bl	8000f90 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f803 	bl	8009ad8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9cf 	bl	8000e74 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f965 	bl	8000da4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	487d      	ldr	r0, [pc, #500]	; (8000cd0 <main+0x218>)
 8000adc:	f004 fa02 	bl	8004ee4 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	487b      	ldr	r0, [pc, #492]	; (8000cd0 <main+0x218>)
 8000ae4:	f004 fa90 	bl	8005008 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4879      	ldr	r0, [pc, #484]	; (8000cd0 <main+0x218>)
 8000aec:	f004 fa8c 	bl	8005008 <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c78      	ldr	r4, [pc, #480]	; (8000cd4 <main+0x21c>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a78      	ldr	r2, [pc, #480]	; (8000cd8 <main+0x220>)
 8000af6:	4979      	ldr	r1, [pc, #484]	; (8000cdc <main+0x224>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc77 	bl	80013ec <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
  	  event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a6f      	ldr	r2, [pc, #444]	; (8000ce0 <main+0x228>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <main+0x22c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <main+0x228>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 8094 	bhi.w	8000c72 <main+0x1ba>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000b7d 	.word	0x08000b7d
 8000b60:	08000c6b 	.word	0x08000c6b
		case EVENT_WAIT:
			asm("NOP");
 8000b64:	bf00      	nop
			break;
 8000b66:	e084      	b.n	8000c72 <main+0x1ba>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b68:	2202      	movs	r2, #2
 8000b6a:	495c      	ldr	r1, [pc, #368]	; (8000cdc <main+0x224>)
 8000b6c:	485e      	ldr	r0, [pc, #376]	; (8000ce8 <main+0x230>)
 8000b6e:	f000 ff9f 	bl	8001ab0 <HAL_ADC_Start_DMA>
			break;
 8000b72:	e07e      	b.n	8000c72 <main+0x1ba>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f000 fa4b 	bl	8001010 <write_next_event_state>
			break;
 8000b7a:	e07a      	b.n	8000c72 <main+0x1ba>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b7c:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <main+0x21c>)
 8000b7e:	f000 fc81 	bl	8001484 <Joystick_Update>
			uint8_t invert_x = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b8e:	4b57      	ldr	r3, [pc, #348]	; (8000cec <main+0x234>)
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <main+0x234>)
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b96:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <main+0xf0>
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <main+0x21c>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	e001      	b.n	8000bac <main+0xf4>
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <main+0x21c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <main+0x21c>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <main+0x21c>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <main+0x238>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bcc:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <main+0x238>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bd6:	f7ff fd9b 	bl	8000710 <__aeabi_fcmpgt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <main+0x13c>
 8000be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	4619      	mov	r1, r3
 8000be8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bea:	f7ff fd73 	bl	80006d4 <__aeabi_fcmplt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d013      	beq.n	8000c1c <main+0x164>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <main+0x238>)
 8000bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bfa:	b29c      	uxth	r4, r3
 8000bfc:	493d      	ldr	r1, [pc, #244]	; (8000cf4 <main+0x23c>)
 8000bfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c00:	f7ff fbca 	bl	8000398 <__aeabi_fmul>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd8c 	bl	8000724 <__aeabi_f2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4423      	add	r3, r4
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <main+0x238>)
 8000c1a:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c20:	f7ff fd76 	bl	8000710 <__aeabi_fcmpgt>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10a      	bne.n	8000c40 <main+0x188>
 8000c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c30:	4619      	mov	r1, r3
 8000c32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c34:	f7ff fd4e 	bl	80006d4 <__aeabi_fcmplt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <main+0x188>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c3e:	e018      	b.n	8000c72 <main+0x1ba>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <main+0x238>)
 8000c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c46:	b29c      	uxth	r4, r3
 8000c48:	492b      	ldr	r1, [pc, #172]	; (8000cf8 <main+0x240>)
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fba4 	bl	8000398 <__aeabi_fmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd66 	bl	8000724 <__aeabi_f2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4423      	add	r3, r4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <main+0x238>)
 8000c66:	809a      	strh	r2, [r3, #4]
			break;
 8000c68:	e003      	b.n	8000c72 <main+0x1ba>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <main+0x238>)
 8000c6c:	f000 fa14 	bl	8001098 <Send_HID_Data>
			break;
 8000c70:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <main+0x22c>)
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <main+0x244>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d00d      	beq.n	8000c9a <main+0x1e2>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <main+0x22c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	425a      	negs	r2, r3
 8000c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c8e:	bf58      	it	pl
 8000c90:	4253      	negpl	r3, r2
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <main+0x22c>)
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e002      	b.n	8000ca0 <main+0x1e8>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f9b8 	bl	8001010 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0x244>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <main+0x22c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d306      	bcc.n	8000cba <main+0x202>
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <main+0x244>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <main+0x22c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	e007      	b.n	8000cca <main+0x212>
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <main+0x244>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <main+0x22c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <main+0x248>)
 8000ccc:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cce:	e734      	b.n	8000b3a <main+0x82>
 8000cd0:	20000238 	.word	0x20000238
 8000cd4:	20000300 	.word	0x20000300
 8000cd8:	200002fe 	.word	0x200002fe
 8000cdc:	200002fc 	.word	0x200002fc
 8000ce0:	20000278 	.word	0x20000278
 8000ce4:	200002f8 	.word	0x200002f8
 8000ce8:	200001a0 	.word	0x200001a0
 8000cec:	3d4ccccd 	.word	0x3d4ccccd
 8000cf0:	2000033c 	.word	0x2000033c
 8000cf4:	c6fffe00 	.word	0xc6fffe00
 8000cf8:	46fffe00 	.word	0x46fffe00
 8000cfc:	200002f9 	.word	0x200002f9
 8000d00:	200002fa 	.word	0x200002fa

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	; 0x48
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2234      	movs	r2, #52	; 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f009 fb00 	bl	800a318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemClock_Config+0x9c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <SystemClock_Config+0x9c>)
 8000d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d34:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d36:	2303      	movs	r3, #3
 8000d38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d42:	2310      	movs	r3, #16
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fabb 	bl	80042dc <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d6c:	f000 f9f6 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2303      	movs	r3, #3
 8000d76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fdd7 	bl	800493c <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d94:	f000 f9e2 	bl	800115c <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3748      	adds	r7, #72	; 0x48
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000db6:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <MX_ADC_Init+0xcc>)
 8000db8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e06:	2210      	movs	r2, #16
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e18:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e1a:	f000 fd03 	bl	8001824 <HAL_ADC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e24:	f000 f99a 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e3a:	f000 ffe3 	bl	8001e04 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e44:	f000 f98a 	bl	800115c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e56:	f000 ffd5 	bl	8001e04 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e60:	f000 f97c 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001a0 	.word	0x200001a0
 8000e70:	40012400 	.word	0x40012400

08000e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000eb4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ec8:	f003 ffcc 	bl	8004e64 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ed2:	f000 f943 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	482a      	ldr	r0, [pc, #168]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ee4:	f004 faa0 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eee:	f000 f935 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ef2:	4826      	ldr	r0, [pc, #152]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ef4:	f004 f840 	bl	8004f78 <HAL_TIM_OC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000efe:	f000 f92d 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f12:	f004 fd83 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f1c:	f000 f91e 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f20:	2310      	movs	r3, #16
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f24:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f3a:	f004 fa1d 	bl	8005378 <HAL_TIM_OC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f44:	f000 f90a 	bl	800115c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f58:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2204      	movs	r2, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f66:	f004 fa07 	bl	8005378 <HAL_TIM_OC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f70:	f000 f8f4 	bl	800115c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	699a      	ldr	r2, [r3, #24]
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f82:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000238 	.word	0x20000238

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200b      	movs	r0, #11
 8000fb4:	f001 fa2f 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fb8:	200b      	movs	r0, #11
 8000fba:	f001 fa48 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_GPIO_Init+0x40>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <MX_GPIO_Init+0x40>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_GPIO_Init+0x40>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_GPIO_Init+0x40>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <MX_GPIO_Init+0x40>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_GPIO_Init+0x40>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40023800 	.word	0x40023800

08001010 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <write_next_event_state+0x3c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	425a      	negs	r2, r3
 8001022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800102a:	bf58      	it	pl
 800102c:	4253      	negpl	r3, r2
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <write_next_event_state+0x3c>)
 8001032:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <write_next_event_state+0x3c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <write_next_event_state+0x40>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	5453      	strb	r3, [r2, r1]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002f9 	.word	0x200002f9
 8001050:	20000278 	.word	0x20000278

08001054 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <HAL_TIM_OC_DelayElapsedCallback+0x16>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d004      	beq.n	8001072 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 8001068:	e007      	b.n	800107a <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ffd0 	bl	8001010 <write_next_event_state>
			break;
 8001070:	e003      	b.n	800107a <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 8001072:	2002      	movs	r0, #2
 8001074:	f7ff ffcc 	bl	8001010 <write_next_event_state>
			break;
 8001078:	bf00      	nop
	}
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff ffc0 	bl	8001010 <write_next_event_state>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <Send_HID_Data>:

uint8_t Send_HID_Data(Controller_HandleTypeDef* controller){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <Send_HID_Data+0xbc>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <Send_HID_Data+0xbc>)
 80010ae:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <Send_HID_Data+0xbc>)
 80010bc:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <Send_HID_Data+0xbc>)
 80010c8:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d0:	121b      	asrs	r3, r3, #8
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <Send_HID_Data+0xbc>)
 80010d8:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <Send_HID_Data+0xbc>)
 80010e4:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ec:	121b      	asrs	r3, r3, #8
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <Send_HID_Data+0xbc>)
 80010f4:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Send_HID_Data+0xbc>)
 8001100:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b21b      	sxth	r3, r3
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <Send_HID_Data+0xbc>)
 8001110:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <Send_HID_Data+0xbc>)
 800111c:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001124:	121b      	asrs	r3, r3, #8
 8001126:	b21b      	sxth	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <Send_HID_Data+0xbc>)
 800112c:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7a9a      	ldrb	r2, [r3, #10]
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <Send_HID_Data+0xbc>)
 8001134:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7ada      	ldrb	r2, [r3, #11]
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <Send_HID_Data+0xbc>)
 800113c:	731a      	strb	r2, [r3, #12]
	return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 800113e:	220d      	movs	r2, #13
 8001140:	4904      	ldr	r1, [pc, #16]	; (8001154 <Send_HID_Data+0xbc>)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <Send_HID_Data+0xc0>)
 8001144:	f007 fbd4 	bl	80088f0 <USBD_CUSTOM_HID_SendReport>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000348 	.word	0x20000348
 8001158:	20000360 	.word	0x20000360

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_MspInit+0x58>)
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <HAL_MspInit+0x58>)
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	6253      	str	r3, [r2, #36]	; 0x24
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_MspInit+0x58>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_MspInit+0x58>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_MspInit+0x58>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_MspInit+0x58>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_MspInit+0x58>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_MspInit+0x58>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_MspInit+0x58>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a2d      	ldr	r2, [pc, #180]	; (8001298 <HAL_ADC_MspInit+0xd4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d154      	bne.n	8001290 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_ADC_MspInit+0xd8>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a2c      	ldr	r2, [pc, #176]	; (800129c <HAL_ADC_MspInit+0xd8>)
 80011ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <HAL_ADC_MspInit+0xd8>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_ADC_MspInit+0xd8>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_ADC_MspInit+0xd8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_ADC_MspInit+0xd8>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001216:	2303      	movs	r3, #3
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	481d      	ldr	r0, [pc, #116]	; (80012a0 <HAL_ADC_MspInit+0xdc>)
 800122a:	f001 fac1 	bl	80027b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_ADC_MspInit+0xe4>)
 8001232:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001254:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001264:	480f      	ldr	r0, [pc, #60]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001266:	f001 f90d 	bl	8002484 <HAL_DMA_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001270:	f7ff ff74 	bl	800115c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_ADC_MspInit+0xe0>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2101      	movs	r1, #1
 8001284:	2012      	movs	r0, #18
 8001286:	f001 f8c6 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800128a:	2012      	movs	r0, #18
 800128c:	f001 f8df 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40012400 	.word	0x40012400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	200001f4 	.word	0x200001f4
 80012a8:	40026008 	.word	0x40026008

080012ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d113      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_TIM_Base_MspInit+0x44>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	201c      	movs	r0, #28
 80012dc:	f001 f89b 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e0:	201c      	movs	r0, #28
 80012e2:	f001 f8b4 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 fa57 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Channel1_IRQHandler+0x10>)
 800134a:	f001 f953 	bl	80025f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001f4 	.word	0x200001f4

08001358 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <ADC1_IRQHandler+0x10>)
 800135e:	f000 fc35 	bl	8001bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001a0 	.word	0x200001a0

0800136c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <USB_LP_IRQHandler+0x10>)
 8001372:	f001 fca1 	bl	8002cb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200007fc 	.word	0x200007fc

08001380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM2_IRQHandler+0x10>)
 8001386:	f003 ff1b 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000238 	.word	0x20000238

08001394 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c6:	f7ff ffe5 	bl	8001394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f008 ff81 	bl	800a2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff fb73 	bl	8000ab8 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013dc:	0800a3cc 	.word	0x0800a3cc
  ldr r2, =_sbss
 80013e0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013e4:	20000b10 	.word	0x20000b10

080013e8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <COMP_IRQHandler>
	...

080013ec <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 80013ec:	b4b0      	push	{r4, r5, r7}
 80013ee:	b095      	sub	sp, #84	; 0x54
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001406:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <Joystick_Init+0x90>)
 800140e:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <Joystick_Init+0x94>)
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <Joystick_Init+0x90>)
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <Joystick_Init+0x94>)
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 800144e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	461d      	mov	r5, r3
 8001458:	f107 0414 	add.w	r4, r7, #20
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001468:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800146c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	3754      	adds	r7, #84	; 0x54
 8001474:	46bd      	mov	sp, r7
 8001476:	bcb0      	pop	{r4, r5, r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	3ccccccd 	.word	0x3ccccccd
 8001480:	3f8ccccd 	.word	0x3f8ccccd

08001484 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d062      	beq.n	800156c <Joystick_Update+0xe8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d05e      	beq.n	800156c <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	891b      	ldrh	r3, [r3, #8]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ff18 	bl	80002e8 <__aeabi_ui2f>
 80014b8:	4604      	mov	r4, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014c4:	f7fe fe5e 	bl	8000184 <__aeabi_fsub>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7fe ff63 	bl	8000398 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461c      	mov	r4, r3
 80014d6:	8bfb      	ldrh	r3, [r7, #30]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff05 	bl	80002e8 <__aeabi_ui2f>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7fe ff56 	bl	8000398 <__aeabi_fmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7fe fe49 	bl	8000188 <__addsf3>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f939 	bl	8000770 <__aeabi_f2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8c1b      	ldrh	r3, [r3, #32]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe feec 	bl	80002e8 <__aeabi_ui2f>
 8001510:	4604      	mov	r4, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800151c:	f7fe fe32 	bl	8000184 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	4620      	mov	r0, r4
 8001526:	f7fe ff37 	bl	8000398 <__aeabi_fmul>
 800152a:	4603      	mov	r3, r0
 800152c:	461c      	mov	r4, r3
 800152e:	8bbb      	ldrh	r3, [r7, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fed9 	bl	80002e8 <__aeabi_ui2f>
 8001536:	4602      	mov	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7fe ff2a 	bl	8000398 <__aeabi_fmul>
 8001544:	4603      	mov	r3, r0
 8001546:	4619      	mov	r1, r3
 8001548:	4620      	mov	r0, r4
 800154a:	f7fe fe1d 	bl	8000188 <__addsf3>
 800154e:	4603      	mov	r3, r0
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f90d 	bl	8000770 <__aeabi_f2uiz>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	865a      	strh	r2, [r3, #50]	; 0x32
 800156a:	e008      	b.n	800157e <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	891b      	ldrh	r3, [r3, #8]
 8001582:	8bfa      	ldrh	r2, [r7, #30]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29b      	uxth	r3, r3
 8001588:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8c1b      	ldrh	r3, [r3, #32]
 800158e:	8bba      	ldrh	r2, [r7, #28]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	8bfa      	ldrh	r2, [r7, #30]
 800159c:	4293      	cmp	r3, r2
 800159e:	bf28      	it	cs
 80015a0:	4613      	movcs	r3, r2
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	88db      	ldrh	r3, [r3, #6]
 80015ac:	8bfa      	ldrh	r2, [r7, #30]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	bf38      	it	cc
 80015b2:	4613      	movcc	r3, r2
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	8b9b      	ldrh	r3, [r3, #28]
 80015be:	8bba      	ldrh	r2, [r7, #28]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf28      	it	cs
 80015c4:	4613      	movcs	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8bdb      	ldrh	r3, [r3, #30]
 80015d0:	8bba      	ldrh	r2, [r7, #28]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	bf38      	it	cc
 80015d6:	4613      	movcc	r3, r2
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 80015de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd15      	ble.n	8001612 <Joystick_Update+0x18e>
 80015e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe80 	bl	80002f0 <__aeabi_i2f>
 80015f0:	4604      	mov	r4, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	88db      	ldrh	r3, [r3, #6]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	891b      	ldrh	r3, [r3, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fe76 	bl	80002f0 <__aeabi_i2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	4620      	mov	r0, r4
 800160a:	f7fe ff79 	bl	8000500 <__aeabi_fdiv>
 800160e:	4603      	mov	r3, r0
 8001610:	e016      	b.n	8001640 <Joystick_Update+0x1bc>
 8001612:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe6a 	bl	80002f0 <__aeabi_i2f>
 800161c:	4603      	mov	r3, r0
 800161e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	889b      	ldrh	r3, [r3, #4]
 8001626:	461a      	mov	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	891b      	ldrh	r3, [r3, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fe5e 	bl	80002f0 <__aeabi_i2f>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	4620      	mov	r0, r4
 800163a:	f7fe ff61 	bl	8000500 <__aeabi_fdiv>
 800163e:	4603      	mov	r3, r0
 8001640:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001642:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd15      	ble.n	8001676 <Joystick_Update+0x1f2>
 800164a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fe4e 	bl	80002f0 <__aeabi_i2f>
 8001654:	4604      	mov	r4, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8bdb      	ldrh	r3, [r3, #30]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8c1b      	ldrh	r3, [r3, #32]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fe44 	bl	80002f0 <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4620      	mov	r0, r4
 800166e:	f7fe ff47 	bl	8000500 <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	e016      	b.n	80016a4 <Joystick_Update+0x220>
 8001676:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fe38 	bl	80002f0 <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8b9b      	ldrh	r3, [r3, #28]
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	8c1b      	ldrh	r3, [r3, #32]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe2c 	bl	80002f0 <__aeabi_i2f>
 8001698:	4603      	mov	r3, r0
 800169a:	4619      	mov	r1, r3
 800169c:	4620      	mov	r0, r4
 800169e:	f7fe ff2f 	bl	8000500 <__aeabi_fdiv>
 80016a2:	4603      	mov	r3, r0
 80016a4:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff f830 	bl	8000710 <__aeabi_fcmpgt>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <Joystick_Update+0x236>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	e002      	b.n	80016c0 <Joystick_Update+0x23c>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f7ff f822 	bl	8000710 <__aeabi_fcmpgt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <Joystick_Update+0x252>
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	e002      	b.n	80016dc <Joystick_Update+0x258>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016dc:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4619      	mov	r1, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff f813 	bl	8000710 <__aeabi_fcmpgt>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00a      	beq.n	8001706 <Joystick_Update+0x282>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	4619      	mov	r1, r3
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7fe ffec 	bl	80006d4 <__aeabi_fcmplt>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <Joystick_Update+0x282>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	e001      	b.n	800170a <Joystick_Update+0x286>
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7fe fffb 	bl	8000710 <__aeabi_fcmpgt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00a      	beq.n	8001736 <Joystick_Update+0x2b2>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7fe ffd4 	bl	80006d4 <__aeabi_fcmplt>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <Joystick_Update+0x2b2>
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	e001      	b.n	800173a <Joystick_Update+0x2b6>
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800173e:	bf00      	nop
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}

08001746 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fe55 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f80e 	bl	8001778 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fcfe 	bl	8001168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_InitTick+0x68>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d022      	beq.n	80017d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_InitTick+0x6c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_InitTick+0x68>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001798:	fbb1 f3f3 	udiv	r3, r1, r3
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fe62 	bl	800246a <HAL_SYSTICK_Config>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10f      	bne.n	80017cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d809      	bhi.n	80017c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b2:	2200      	movs	r2, #0
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ba:	f000 fe2c 	bl	8002416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0x70>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e007      	b.n	80017d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e004      	b.n	80017d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e001      	b.n	80017d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_IncTick+0x1c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x20>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a03      	ldr	r2, [pc, #12]	; (8001808 <HAL_IncTick+0x1c>)
 80017fc:	6013      	str	r3, [r2, #0]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000358 	.word	0x20000358
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <HAL_GetTick+0x10>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000358 	.word	0x20000358

08001824 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e127      	b.n	8001a94 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001860:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <HAL_ADC_Init+0x278>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a8d      	ldr	r2, [pc, #564]	; (8001a9c <HAL_ADC_Init+0x278>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_ADC_Init+0x278>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fca3 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 80ff 	bne.w	8001a8a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	f043 0202 	orr.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018a0:	4b7f      	ldr	r3, [pc, #508]	; (8001aa0 <HAL_ADC_Init+0x27c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	497c      	ldr	r1, [pc, #496]	; (8001aa0 <HAL_ADC_Init+0x27c>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018ba:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c2:	4619      	mov	r1, r3
 80018c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80018de:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001906:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	4313      	orrs	r3, r2
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	2b10      	cmp	r3, #16
 8001914:	d007      	beq.n	8001926 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800191e:	4313      	orrs	r3, r2
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	4313      	orrs	r3, r2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b40      	cmp	r3, #64	; 0x40
 8001932:	d04f      	beq.n	80019d4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193a:	4313      	orrs	r3, r2
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001946:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6912      	ldr	r2, [r2, #16]
 800194c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001950:	d003      	beq.n	800195a <HAL_ADC_Init+0x136>
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6912      	ldr	r2, [r2, #16]
 8001956:	2a01      	cmp	r2, #1
 8001958:	d102      	bne.n	8001960 <HAL_ADC_Init+0x13c>
 800195a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195e:	e000      	b.n	8001962 <HAL_ADC_Init+0x13e>
 8001960:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001962:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001966:	4313      	orrs	r3, r2
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d125      	bne.n	80019c0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	3b01      	subs	r3, #1
 8001984:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001988:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	617a      	str	r2, [r7, #20]
  return result;
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	fab2 f282 	clz	r2, r2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	4093      	lsls	r3, r2
 800199c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a2:	4313      	orrs	r3, r2
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
 80019a6:	e00b      	b.n	80019c0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_ADC_Init+0x280>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_ADC_Init+0x284>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f0:	d003      	beq.n	80019fa <HAL_ADC_Init+0x1d6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d119      	bne.n	8001a2e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	fa92 f2a2 	rbit	r2, r2
 8001a16:	60fa      	str	r2, [r7, #12]
  return result;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	fa03 f202 	lsl.w	r2, r3, r2
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	e007      	b.n	8001a3e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_ADC_Init+0x288>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d10b      	bne.n	8001a66 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f023 0303 	bic.w	r3, r3, #3
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a64:	e014      	b.n	8001a90 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f023 0312 	bic.w	r3, r3, #18
 8001a6e:	f043 0210 	orr.w	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3738      	adds	r7, #56	; 0x38
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40012700 	.word	0x40012700
 8001aa4:	fcfc16ff 	.word	0xfcfc16ff
 8001aa8:	c0fff18d 	.word	0xc0fff18d
 8001aac:	bf80fffe 	.word	0xbf80fffe

08001ab0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Start_DMA+0x1e>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e074      	b.n	8001bb8 <HAL_ADC_Start_DMA+0x108>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fae4 	bl	80020a4 <ADC_Enable>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d167      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b24:	d106      	bne.n	8001b34 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2a:	f023 0206 	bic.w	r2, r3, #6
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	651a      	str	r2, [r3, #80]	; 0x50
 8001b32:	e002      	b.n	8001b3a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_ADC_Start_DMA+0x110>)
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_ADC_Start_DMA+0x114>)
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_ADC_Start_DMA+0x118>)
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3358      	adds	r3, #88	; 0x58
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f000 fcce 	bl	8002534 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	0800215d 	.word	0x0800215d
 8001bc4:	08002205 	.word	0x08002205
 8001bc8:	08002221 	.word	0x08002221

08001bcc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d14e      	bne.n	8001c80 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d147      	bne.n	8001c80 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12c      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d127      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d119      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0220 	bic.w	r2, r2, #32
 8001c4a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fa06 	bl	8001082 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0212 	mvn.w	r2, #18
 8001c7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d15c      	bne.n	8001d48 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d155      	bne.n	8001d48 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d13a      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d12c      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d125      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11e      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d119      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d12:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fa8b 	bl	8002254 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 020c 	mvn.w	r2, #12
 8001d46:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d114      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d10d      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f834 	bl	8001dde <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0201 	mvn.w	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d8e:	d119      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d112      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da2:	f043 0202 	orr.w	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0220 	mvn.w	r2, #32
 8001db2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f81b 	bl	8001df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f06f 0220 	mvn.w	r2, #32
 8001dc2:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x20>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e134      	b.n	800208e <HAL_ADC_ConfigChannel+0x28a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b06      	cmp	r3, #6
 8001e32:	d81c      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	3b05      	subs	r3, #5
 8001e46:	221f      	movs	r2, #31
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b05      	subs	r3, #5
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6c:	e07e      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d81c      	bhi.n	8001eb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b23      	subs	r3, #35	; 0x23
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4019      	ands	r1, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b23      	subs	r3, #35	; 0x23
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eae:	e05d      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	d81c      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b41      	subs	r3, #65	; 0x41
 8001eca:	221f      	movs	r2, #31
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4019      	ands	r1, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b41      	subs	r3, #65	; 0x41
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef0:	e03c      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b18      	cmp	r3, #24
 8001ef8:	d81c      	bhi.n	8001f34 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b5f      	subs	r3, #95	; 0x5f
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	4019      	ands	r1, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b5f      	subs	r3, #95	; 0x5f
 8001f26:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34
 8001f32:	e01b      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b7d      	subs	r3, #125	; 0x7d
 8001f46:	221f      	movs	r2, #31
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4019      	ands	r1, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b7d      	subs	r3, #125	; 0x7d
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d81a      	bhi.n	8001faa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6959      	ldr	r1, [r3, #20]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	2207      	movs	r2, #7
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4019      	ands	r1, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6898      	ldr	r0, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	e042      	b.n	8002030 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b13      	cmp	r3, #19
 8001fb0:	d81c      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b1e      	subs	r3, #30
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4019      	ands	r1, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6898      	ldr	r0, [r3, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b1e      	subs	r3, #30
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e021      	b.n	8002030 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b1a      	cmp	r3, #26
 8001ff2:	d81c      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68d9      	ldr	r1, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	3b3c      	subs	r3, #60	; 0x3c
 8002006:	2207      	movs	r2, #7
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	4019      	ands	r1, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	3b3c      	subs	r3, #60	; 0x3c
 8002020:	fa00 f203 	lsl.w	r2, r0, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	e000      	b.n	8002030 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800202e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d003      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800203c:	2b11      	cmp	r3, #17
 800203e:	d121      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_ADC_ConfigChannel+0x294>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11b      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_ADC_ConfigChannel+0x294>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_ADC_ConfigChannel+0x294>)
 8002052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002056:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b10      	cmp	r3, #16
 800205e:	d111      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_ADC_ConfigChannel+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9a      	lsrs	r2, r3, #18
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002076:	e002      	b.n	800207e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3b01      	subs	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f9      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40012700 	.word	0x40012700
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d043      	beq.n	800214a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <ADC_Enable+0xb0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <ADC_Enable+0xb4>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	0c9a      	lsrs	r2, r3, #18
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020e6:	e002      	b.n	80020ee <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80020f4:	f7ff fb8c 	bl	8001810 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020fa:	e01f      	b.n	800213c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80020fc:	f7ff fb88 	bl	8001810 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d918      	bls.n	800213c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d011      	beq.n	800213c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e007      	b.n	800214c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d1d8      	bne.n	80020fc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002172:	2b00      	cmp	r3, #0
 8002174:	d13d      	bne.n	80021f2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d12c      	bne.n	80021ea <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d127      	bne.n	80021ea <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0220 	bic.w	r2, r2, #32
 80021c4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7fe ff49 	bl	8001082 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021f0:	e004      	b.n	80021fc <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fdda 	bl	8001dcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fdd2 	bl	8001df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4906      	ldr	r1, [pc, #24]	; (8002300 <__NVIC_EnableIRQ+0x34>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff90 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff2d 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff42 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff90 	bl	8002358 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5f 	bl	8002304 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff35 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e043      	b.n	800251e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_DMA_Init+0xa4>)
 800249e:	4413      	add	r3, r2
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_DMA_Init+0xa8>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	009a      	lsls	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_DMA_Init+0xac>)
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	bffd9ff8 	.word	0xbffd9ff8
 800252c:	cccccccd 	.word	0xcccccccd
 8002530:	40026000 	.word	0x40026000

08002534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Start_IT+0x20>
 8002550:	2302      	movs	r3, #2
 8002552:	e04b      	b.n	80025ec <HAL_DMA_Start_IT+0xb8>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d13a      	bne.n	80025de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f8e0 	bl	8002752 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 020e 	orr.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 020a 	orr.w	r2, r2, #10
 80025ca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e005      	b.n	80025ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f003 031c 	and.w	r3, r3, #28
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <HAL_DMA_IRQHandler+0x7a>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d021      	beq.n	800266e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f003 021c 	and.w	r2, r3, #28
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	2104      	movs	r1, #4
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d071      	beq.n	8002748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800266c:	e06c      	b.n	8002748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 031c 	and.w	r3, r3, #28
 8002676:	2202      	movs	r2, #2
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02e      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xec>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d029      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020a 	bic.w	r2, r2, #10
 80026a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 021c 	and.w	r2, r3, #28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2102      	movs	r1, #2
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d038      	beq.n	8002748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026de:	e033      	b.n	8002748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 031c 	and.w	r3, r3, #28
 80026e8:	2208      	movs	r2, #8
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02a      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d025      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020e 	bic.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 021c 	and.w	r2, r3, #28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002748:	bf00      	nop
 800274a:	bf00      	nop
}
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f003 021c 	and.w	r2, r3, #28
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d108      	bne.n	8002796 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002794:	e007      	b.n	80027a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027c6:	e154      	b.n	8002a72 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8146 	beq.w	8002a6c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d005      	beq.n	80027f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800282e:	2201      	movs	r2, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0201 	and.w	r2, r3, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b03      	cmp	r3, #3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d123      	bne.n	80028ea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3208      	adds	r2, #8
 80028e4:	6939      	ldr	r1, [r7, #16]
 80028e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a0 	beq.w	8002a6c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_GPIO_Init+0x2e0>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x2e0>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <HAL_GPIO_Init+0x2e0>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002944:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_GPIO_Init+0x2e4>)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d019      	beq.n	80029a4 <HAL_GPIO_Init+0x1f4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4a      	ldr	r2, [pc, #296]	; (8002a9c <HAL_GPIO_Init+0x2ec>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_GPIO_Init+0x1f0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a49      	ldr	r2, [pc, #292]	; (8002aa0 <HAL_GPIO_Init+0x2f0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_Init+0x1ec>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_GPIO_Init+0x2f4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1e8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_GPIO_Init+0x2f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_Init+0x1e4>
 8002990:	2304      	movs	r3, #4
 8002992:	e008      	b.n	80029a6 <HAL_GPIO_Init+0x1f6>
 8002994:	2305      	movs	r3, #5
 8002996:	e006      	b.n	80029a6 <HAL_GPIO_Init+0x1f6>
 8002998:	2303      	movs	r3, #3
 800299a:	e004      	b.n	80029a6 <HAL_GPIO_Init+0x1f6>
 800299c:	2302      	movs	r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x1f6>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_GPIO_Init+0x1f6>
 80029a4:	2300      	movs	r3, #0
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b6:	4937      	ldr	r1, [pc, #220]	; (8002a94 <HAL_GPIO_Init+0x2e4>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f aea3 	bne.w	80027c8 <HAL_GPIO_Init+0x18>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b08b      	sub	sp, #44	; 0x2c
 8002ab4:	af06      	add	r7, sp, #24
 8002ab6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0d0      	b.n	8002c64 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f007 f976 	bl	8009dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f80b 	bl	8005b04 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e04c      	b.n	8002b8e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3301      	adds	r3, #1
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	b298      	uxth	r0, r3
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3336      	adds	r3, #54	; 0x36
 8002b32:	4602      	mov	r2, r0
 8002b34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	3303      	adds	r3, #3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	3338      	adds	r3, #56	; 0x38
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	333c      	adds	r3, #60	; 0x3c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	3340      	adds	r3, #64	; 0x40
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3ad      	bcc.n	8002af4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e044      	b.n	8002c28 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3b5      	bcc.n	8002b9e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	687e      	ldr	r6, [r7, #4]
 8002c3a:	466d      	mov	r5, sp
 8002c3c:	f106 0410 	add.w	r4, r6, #16
 8002c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	602b      	str	r3, [r5, #0]
 8002c48:	1d33      	adds	r3, r6, #4
 8002c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f002 ff73 	bl	8005b38 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_PCD_Start+0x16>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e016      	b.n	8002cb0 <HAL_PCD_Start+0x44>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 ff22 	bl	8005ad8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c94:	2101      	movs	r1, #1
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f007 f878 	bl	8009d8c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f005 fc07 	bl	80084b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f005 fbff 	bl	80084c8 <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fade 	bl	8003298 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fbf1 	bl	80084c8 <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	d112      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d04:	b292      	uxth	r2, r2
 8002d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f007 f8d7 	bl	8009ebe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d10:	2100      	movs	r1, #0
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8c7 	bl	8002ea6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 fbd3 	bl	80084c8 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d10b      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d40:	b292      	uxth	r2, r2
 8002d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 fbbc 	bl	80084c8 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	d10b      	bne.n	8002d74 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f005 fba5 	bl	80084c8 <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d126      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0204 	bic.w	r2, r2, #4
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0208 	bic.w	r2, r2, #8
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f007 f8b8 	bl	8009f30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 fb73 	bl	80084c8 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dec:	d126      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0208 	orr.w	r2, r2, #8
 8002e00:	b292      	uxth	r2, r2
 8002e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0204 	orr.w	r2, r2, #4
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f007 f860 	bl	8009efc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f005 fb41 	bl	80084c8 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d10e      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e64:	b292      	uxth	r2, r2
 8002e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f007 f819 	bl	8009ea2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f005 fb27 	bl	80084c8 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e84:	d10b      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_SetAddress+0x1a>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e013      	b.n	8002ee8 <HAL_PCD_SetAddress+0x42>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 fad8 	bl	800848e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	70fb      	strb	r3, [r7, #3]
 8002f02:	460b      	mov	r3, r1
 8002f04:	803b      	strh	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0e      	bge.n	8002f34 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f5e:	883a      	ldrh	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	78ba      	ldrb	r2, [r7, #2]
 8002f68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f7c:	78bb      	ldrb	r3, [r7, #2]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_PCD_EP_Open+0xa6>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e00e      	b.n	8002fb4 <HAL_PCD_EP_Open+0xc4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fde7 	bl	8005b78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da0e      	bge.n	8002fee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	705a      	strb	r2, [r3, #1]
 8002fec:	e00e      	b.n	800300c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 0207 	and.w	r2, r3, #7
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_PCD_EP_Close+0x6a>
 8003022:	2302      	movs	r3, #2
 8003024:	e00e      	b.n	8003044 <HAL_PCD_EP_Close+0x88>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68f9      	ldr	r1, [r7, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	f003 f909 	bl	800624c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	460b      	mov	r3, r1
 800305a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305c:	7afb      	ldrb	r3, [r7, #11]
 800305e:	f003 0207 	and.w	r2, r3, #7
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	b2da      	uxtb	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fabb 	bl	8006624 <USB_EPStartXfer>
 80030ae:	e005      	b.n	80030bc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fab4 	bl	8006624 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6979      	ldr	r1, [r7, #20]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fa78 	bl	8006624 <USB_EPStartXfer>
 8003134:	e005      	b.n	8003142 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fa71 	bl	8006624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d901      	bls.n	800316a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e03e      	b.n	80031e8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	da0e      	bge.n	8003190 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	705a      	strb	r2, [r3, #1]
 800318e:	e00c      	b.n	80031aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_PCD_EP_SetStall+0x7e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e00e      	b.n	80031e8 <HAL_PCD_EP_SetStall+0x9c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68f9      	ldr	r1, [r7, #12]
 80031d8:	4618      	mov	r0, r3
 80031da:	f005 f85b 	bl	8008294 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 020f 	and.w	r2, r3, #15
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d901      	bls.n	800320e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e040      	b.n	8003290 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da0e      	bge.n	8003234 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
 8003232:	e00e      	b.n	8003252 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_PCD_EP_ClrStall+0x82>
 800326e:	2302      	movs	r3, #2
 8003270:	e00e      	b.n	8003290 <HAL_PCD_EP_ClrStall+0xa0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	4618      	mov	r0, r3
 8003282:	f005 f857 	bl	8008334 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a0:	e2ec      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032aa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8161 	bne.w	8003584 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d152      	bne.n	8003372 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	81fb      	strh	r3, [r7, #14]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3328      	adds	r3, #40	; 0x28
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	3302      	adds	r3, #2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	441a      	add	r2, r3
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003330:	2100      	movs	r1, #0
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f006 fd9b 	bl	8009e6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 829b 	beq.w	800387c <PCD_EP_ISR_Handler+0x5e4>
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8296 	bne.w	800387c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b292      	uxth	r2, r2
 8003364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003370:	e284      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003388:	2b00      	cmp	r3, #0
 800338a:	d034      	beq.n	80033f6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	3306      	adds	r3, #6
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f005 f8d0 	bl	8008570 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033dc:	4013      	ands	r3, r2
 80033de:	823b      	strh	r3, [r7, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	8a3a      	ldrh	r2, [r7, #16]
 80033e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ea:	b292      	uxth	r2, r2
 80033ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f006 fd10 	bl	8009e14 <HAL_PCD_SetupStageCallback>
 80033f4:	e242      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f280 823e 	bge.w	800387c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29a      	uxth	r2, r3
 8003408:	f640 738f 	movw	r3, #3983	; 0xf8f
 800340c:	4013      	ands	r3, r2
 800340e:	83bb      	strh	r3, [r7, #28]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	8bba      	ldrh	r2, [r7, #28]
 8003416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800341a:	b292      	uxth	r2, r2
 800341c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003426:	b29b      	uxth	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	3306      	adds	r3, #6
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d019      	beq.n	8003486 <PCD_EP_ISR_Handler+0x1ee>
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	6959      	ldr	r1, [r3, #20]
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800346a:	b29b      	uxth	r3, r3
 800346c:	f005 f880 	bl	8008570 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	441a      	add	r2, r3
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 fcd9 	bl	8009e38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 81f2 	bne.w	800387c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d112      	bne.n	80034e6 <PCD_EP_ISR_Handler+0x24e>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034de:	b29a      	uxth	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	e02f      	b.n	8003546 <PCD_EP_ISR_Handler+0x2ae>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b3e      	cmp	r3, #62	; 0x3e
 80034ec:	d813      	bhi.n	8003516 <PCD_EP_ISR_Handler+0x27e>
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <PCD_EP_ISR_Handler+0x270>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	3301      	adds	r3, #1
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	b29b      	uxth	r3, r3
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	b29a      	uxth	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	e017      	b.n	8003546 <PCD_EP_ISR_Handler+0x2ae>
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <PCD_EP_ISR_Handler+0x298>
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3b01      	subs	r3, #1
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	b29b      	uxth	r3, r3
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	b29b      	uxth	r3, r3
 8003538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003540:	b29a      	uxth	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	827b      	strh	r3, [r7, #18]
 8003558:	8a7b      	ldrh	r3, [r7, #18]
 800355a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800355e:	827b      	strh	r3, [r7, #18]
 8003560:	8a7b      	ldrh	r3, [r7, #18]
 8003562:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003566:	827b      	strh	r3, [r7, #18]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	8a7b      	ldrh	r3, [r7, #18]
 800356e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357e:	b29b      	uxth	r3, r3
 8003580:	8013      	strh	r3, [r2, #0]
 8003582:	e17b      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003596:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800359a:	2b00      	cmp	r3, #0
 800359c:	f280 80ea 	bge.w	8003774 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035b6:	4013      	ands	r3, r2
 80035b8:	853b      	strh	r3, [r7, #40]	; 0x28
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ce:	b292      	uxth	r2, r2
 80035d0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	7b1b      	ldrb	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d122      	bne.n	8003636 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	3306      	adds	r3, #6
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003618:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800361a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8087 	beq.w	8003730 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	6959      	ldr	r1, [r3, #20]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	88da      	ldrh	r2, [r3, #6]
 800362e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003630:	f004 ff9e 	bl	8008570 <USB_ReadPMA>
 8003634:	e07c      	b.n	8003730 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	78db      	ldrb	r3, [r3, #3]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d108      	bne.n	8003650 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800363e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003640:	461a      	mov	r2, r3
 8003642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f927 	bl	8003898 <HAL_PCD_EP_DB_Receive>
 800364a:	4603      	mov	r3, r0
 800364c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800364e:	e06f      	b.n	8003730 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	847b      	strh	r3, [r7, #34]	; 0x22
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800367c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d021      	beq.n	80036ee <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	3302      	adds	r3, #2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02a      	beq.n	8003730 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	6959      	ldr	r1, [r3, #20]
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	891a      	ldrh	r2, [r3, #8]
 80036e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036e8:	f004 ff42 	bl	8008570 <USB_ReadPMA>
 80036ec:	e020      	b.n	8003730 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	3306      	adds	r3, #6
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003716:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	895a      	ldrh	r2, [r3, #10]
 800372a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800372c:	f004 ff20 	bl	8008570 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003736:	441a      	add	r2, r3
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003742:	441a      	add	r2, r3
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <PCD_EP_ISR_Handler+0x4c2>
 8003750:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	429a      	cmp	r2, r3
 8003758:	d206      	bcs.n	8003768 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f006 fb69 	bl	8009e38 <HAL_PCD_DataOutStageCallback>
 8003766:	e005      	b.n	8003774 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f002 ff58 	bl	8006624 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003774:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d07e      	beq.n	800387c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800377e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ac:	843b      	strh	r3, [r7, #32]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	8c3b      	ldrh	r3, [r7, #32]
 80037be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d00c      	beq.n	80037ec <PCD_EP_ISR_Handler+0x554>
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d146      	bne.n	8003870 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d141      	bne.n	8003870 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	3302      	adds	r3, #2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003814:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	8bfb      	ldrh	r3, [r7, #30]
 800381c:	429a      	cmp	r2, r3
 800381e:	d906      	bls.n	800382e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	8bfb      	ldrh	r3, [r7, #30]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	e002      	b.n	8003834 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f006 fb13 	bl	8009e6e <HAL_PCD_DataInStageCallback>
 8003848:	e018      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	8bfb      	ldrh	r3, [r7, #30]
 8003850:	441a      	add	r2, r3
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	8bfb      	ldrh	r3, [r7, #30]
 800385c:	441a      	add	r2, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fedb 	bl	8006624 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800386e:	e005      	b.n	800387c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003872:	461a      	mov	r2, r3
 8003874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f91b 	bl	8003ab2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003884:	b29b      	uxth	r3, r3
 8003886:	b21b      	sxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	f6ff ad0a 	blt.w	80032a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3738      	adds	r7, #56	; 0x38
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d07e      	beq.n	80039ae <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	3302      	adds	r3, #2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	8b7b      	ldrh	r3, [r7, #26]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d306      	bcc.n	80038f2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	8b7b      	ldrh	r3, [r7, #26]
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	619a      	str	r2, [r3, #24]
 80038f0:	e002      	b.n	80038f8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d123      	bne.n	8003948 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	833b      	strh	r3, [r7, #24]
 800391c:	8b3b      	ldrh	r3, [r7, #24]
 800391e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003922:	833b      	strh	r3, [r7, #24]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	8b3b      	ldrh	r3, [r7, #24]
 8003934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	b29b      	uxth	r3, r3
 8003946:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01f      	beq.n	8003992 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	82fb      	strh	r3, [r7, #22]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800398e:	b29b      	uxth	r3, r3
 8003990:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8087 	beq.w	8003aa8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6959      	ldr	r1, [r3, #20]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	891a      	ldrh	r2, [r3, #8]
 80039a6:	8b7b      	ldrh	r3, [r7, #26]
 80039a8:	f004 fde2 	bl	8008570 <USB_ReadPMA>
 80039ac:	e07c      	b.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	3306      	adds	r3, #6
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d306      	bcc.n	80039f0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	1ad2      	subs	r2, r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	619a      	str	r2, [r3, #24]
 80039ee:	e002      	b.n	80039f6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d123      	bne.n	8003a46 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	83fb      	strh	r3, [r7, #30]
 8003a1a:	8bfb      	ldrh	r3, [r7, #30]
 8003a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a20:	83fb      	strh	r3, [r7, #30]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	8bfb      	ldrh	r3, [r7, #30]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11f      	bne.n	8003a90 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	83bb      	strh	r3, [r7, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	8bbb      	ldrh	r3, [r7, #28]
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6959      	ldr	r1, [r3, #20]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	895a      	ldrh	r2, [r3, #10]
 8003aa2:	8b7b      	ldrh	r3, [r7, #26]
 8003aa4:	f004 fd64 	bl	8008570 <USB_ReadPMA>
    }
  }

  return count;
 8003aa8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b0a2      	sub	sp, #136	; 0x88
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 81c7 	beq.w	8003e5a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d907      	bls.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b0c:	1ad2      	subs	r2, r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	619a      	str	r2, [r3, #24]
 8003b12:	e002      	b.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2200      	movs	r2, #0
 8003b18:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 80b9 	bne.w	8003c96 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d126      	bne.n	8003b7a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	4413      	add	r3, r2
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e01a      	b.n	8003bb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d116      	bne.n	8003bb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	4413      	add	r3, r2
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	011a      	lsls	r2, r3, #4
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2200      	movs	r2, #0
 8003bae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d126      	bne.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x15a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	011a      	lsls	r2, r3, #4
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e017      	b.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d113      	bne.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	4413      	add	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f006 f913 	bl	8009e6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 82d4 	beq.w	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	827b      	strh	r3, [r7, #18]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	8a7b      	ldrh	r3, [r7, #18]
 8003c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	8013      	strh	r3, [r2, #0]
 8003c94:	e2b2      	b.n	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d021      	beq.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	f040 8286 	bne.w	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d06:	441a      	add	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d309      	bcc.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e015      	b.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d42:	e009      	b.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d155      	bne.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	4413      	add	r3, r2
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	011a      	lsls	r2, r3, #4
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	4413      	add	r3, r2
 8003d82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
 8003d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d112      	bne.n	8003db4 <HAL_PCD_EP_DB_Transmit+0x302>
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e047      	b.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x392>
 8003db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db6:	2b3e      	cmp	r3, #62	; 0x3e
 8003db8:	d811      	bhi.n	8003dde <HAL_PCD_EP_DB_Transmit+0x32c>
 8003dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	3301      	adds	r3, #1
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e032      	b.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x392>
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x342>
 8003dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df0:	3b01      	subs	r3, #1
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e01b      	b.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d117      	bne.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e28:	4413      	add	r3, r2
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	011a      	lsls	r2, r3, #4
 8003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e34:	4413      	add	r3, r2
 8003e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6959      	ldr	r1, [r3, #20]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	891a      	ldrh	r2, [r3, #8]
 8003e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f004 fb47 	bl	80084e6 <USB_WritePMA>
 8003e58:	e1d0      	b.n	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3306      	adds	r3, #6
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d307      	bcc.n	8003ea2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	e002      	b.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 80c4 	bne.w	800403a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d126      	bne.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x456>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	4413      	add	r3, r2
 8003ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	011a      	lsls	r2, r3, #4
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	4413      	add	r3, r2
 8003edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e01a      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d116      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	4413      	add	r3, r2
 8003f26:	677b      	str	r3, [r7, #116]	; 0x74
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f36:	673b      	str	r3, [r7, #112]	; 0x70
 8003f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12f      	bne.n	8003fac <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f64:	4413      	add	r3, r2
 8003f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	011a      	lsls	r2, r3, #4
 8003f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	e017      	b.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d113      	bne.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc2:	4413      	add	r3, r2
 8003fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	011a      	lsls	r2, r3, #4
 8003fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fce:	4413      	add	r3, r2
 8003fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fd8:	2200      	movs	r2, #0
 8003fda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f005 ff43 	bl	8009e6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 8104 	bne.w	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	8013      	strh	r3, [r2, #0]
 8004038:	e0e0      	b.n	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d121      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004084:	b29b      	uxth	r3, r3
 8004086:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 80b4 	bne.w	80041fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800409c:	441a      	add	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040aa:	441a      	add	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d309      	bcc.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c8:	1ad2      	subs	r2, r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	621a      	str	r2, [r3, #32]
 80040ce:	e015      	b.n	80040fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80040d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040e6:	e009      	b.n	80040fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d155      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x704>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411e:	4413      	add	r3, r2
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	011a      	lsls	r2, r3, #4
 8004128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412a:	4413      	add	r3, r2
 800412c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004130:	65bb      	str	r3, [r7, #88]	; 0x58
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	2b00      	cmp	r3, #0
 8004136:	d112      	bne.n	800415e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004142:	b29a      	uxth	r2, r3
 8004144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004156:	b29a      	uxth	r2, r3
 8004158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415a:	801a      	strh	r2, [r3, #0]
 800415c:	e044      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x736>
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	2b3e      	cmp	r3, #62	; 0x3e
 8004162:	d811      	bhi.n	8004188 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	657b      	str	r3, [r7, #84]	; 0x54
 800416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004176:	3301      	adds	r3, #1
 8004178:	657b      	str	r3, [r7, #84]	; 0x54
 800417a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417c:	b29b      	uxth	r3, r3
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	b29a      	uxth	r2, r3
 8004182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e02f      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	657b      	str	r3, [r7, #84]	; 0x54
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419a:	3b01      	subs	r3, #1
 800419c:	657b      	str	r3, [r7, #84]	; 0x54
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	e018      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	785b      	ldrb	r3, [r3, #1]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d114      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041cc:	4413      	add	r3, r2
 80041ce:	667b      	str	r3, [r7, #100]	; 0x64
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d8:	4413      	add	r3, r2
 80041da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
 80041e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6959      	ldr	r1, [r3, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	895a      	ldrh	r2, [r3, #10]
 80041f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f004 f975 	bl	80084e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004216:	823b      	strh	r3, [r7, #16]
 8004218:	8a3b      	ldrh	r3, [r7, #16]
 800421a:	f083 0310 	eor.w	r3, r3, #16
 800421e:	823b      	strh	r3, [r7, #16]
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	f083 0320 	eor.w	r3, r3, #32
 8004226:	823b      	strh	r3, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	8a3b      	ldrh	r3, [r7, #16]
 8004238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3788      	adds	r7, #136	; 0x88
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	817b      	strh	r3, [r7, #10]
 8004264:	4613      	mov	r3, r2
 8004266:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004268:	897b      	ldrh	r3, [r7, #10]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004274:	897b      	ldrh	r3, [r7, #10]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e009      	b.n	80042a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800428c:	897a      	ldrh	r2, [r7, #10]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042a0:	893b      	ldrh	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	80da      	strh	r2, [r3, #6]
 80042b4:	e00b      	b.n	80042ce <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2201      	movs	r2, #1
 80042ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	b29a      	uxth	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e31d      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4b94      	ldr	r3, [pc, #592]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4b91      	ldr	r3, [pc, #580]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004300:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07b      	beq.n	8004406 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d006      	beq.n	8004322 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d10b      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004322:	4b87      	ldr	r3, [pc, #540]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d06a      	beq.n	8004404 <HAL_RCC_OscConfig+0x128>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d166      	bne.n	8004404 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e2f7      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x74>
 8004342:	4b7f      	ldr	r3, [pc, #508]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a7e      	ldr	r2, [pc, #504]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e02d      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x96>
 8004358:	4b79      	ldr	r3, [pc, #484]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a78      	ldr	r2, [pc, #480]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e01c      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0xb8>
 800437a:	4b71      	ldr	r3, [pc, #452]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a70      	ldr	r2, [pc, #448]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6e      	ldr	r3, [pc, #440]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6d      	ldr	r2, [pc, #436]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xd0>
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a69      	ldr	r2, [pc, #420]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b67      	ldr	r3, [pc, #412]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a66      	ldr	r2, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fd fa2c 	bl	8001810 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fd fa28 	bl	8001810 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e2ad      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ce:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xe0>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fd fa18 	bl	8001810 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fd fa14 	bl	8001810 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e299      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043f6:	4b52      	ldr	r3, [pc, #328]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x108>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d05a      	beq.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d119      	bne.n	8004452 <HAL_RCC_OscConfig+0x176>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x160>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e276      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	493d      	ldr	r1, [pc, #244]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004450:	e03a      	b.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445a:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <HAL_RCC_OscConfig+0x268>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd f9d6 	bl	8001810 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd f9d2 	bl	8001810 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e257      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	492a      	ldr	r1, [pc, #168]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
 800449a:	e015      	b.n	80044c8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_RCC_OscConfig+0x268>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fd f9b5 	bl	8001810 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd f9b1 	bl	8001810 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e236      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044bc:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80b8 	beq.w	8004646 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d170      	bne.n	80045be <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_OscConfig+0x218>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e21a      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004500:	429a      	cmp	r2, r3
 8004502:	d921      	bls.n	8004548 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fc4b 	bl	8004da4 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e208      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4906      	ldr	r1, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	061b      	lsls	r3, r3, #24
 8004538:	4901      	ldr	r1, [pc, #4]	; (8004540 <HAL_RCC_OscConfig+0x264>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
 800453e:	e020      	b.n	8004582 <HAL_RCC_OscConfig+0x2a6>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004548:	4b99      	ldr	r3, [pc, #612]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4996      	ldr	r1, [pc, #600]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455a:	4b95      	ldr	r3, [pc, #596]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	4991      	ldr	r1, [pc, #580]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fc16 	bl	8004da4 <RCC_SetFlashLatencyFromMSIRange>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1d3      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	0b5b      	lsrs	r3, r3, #13
 8004588:	3301      	adds	r3, #1
 800458a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004592:	4a87      	ldr	r2, [pc, #540]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	0912      	lsrs	r2, r2, #4
 8004598:	f002 020f 	and.w	r2, r2, #15
 800459c:	4985      	ldr	r1, [pc, #532]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800459e:	5c8a      	ldrb	r2, [r1, r2]
 80045a0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045a2:	4a85      	ldr	r2, [pc, #532]	; (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80045a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4e0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd f8e4 	bl	8001778 <HAL_InitTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d045      	beq.n	8004646 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	e1b5      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d029      	beq.n	800461a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c6:	4b7e      	ldr	r3, [pc, #504]	; (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd f920 	bl	8001810 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d4:	f7fd f91c 	bl	8001810 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1a1      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045e6:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b6f      	ldr	r3, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	496c      	ldr	r1, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	4967      	ldr	r1, [pc, #412]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	e015      	b.n	8004646 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800461a:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x4e4>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fd f8f6 	bl	8001810 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004628:	f7fd f8f2 	bl	8001810 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e177      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800463a:	4b5d      	ldr	r3, [pc, #372]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d030      	beq.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465a:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x4e8>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fd f8d6 	bl	8001810 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd f8d2 	bl	8001810 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e157      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467a:	4b4d      	ldr	r3, [pc, #308]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x38c>
 8004686:	e015      	b.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b4e      	ldr	r3, [pc, #312]	; (80047c4 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468e:	f7fd f8bf 	bl	8001810 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004696:	f7fd f8bb 	bl	8001810 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e140      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046a8:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80b5 	beq.w	800482c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	4a36      	ldr	r2, [pc, #216]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6253      	str	r3, [r2, #36]	; 0x24
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a32      	ldr	r2, [pc, #200]	; (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7fd f883 	bl	8001810 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fd f87f 	bl	8001810 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e104      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x466>
 8004734:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473e:	6353      	str	r3, [r2, #52]	; 0x34
 8004740:	e02d      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x488>
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004754:	6353      	str	r3, [r2, #52]	; 0x34
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004760:	6353      	str	r3, [r2, #52]	; 0x34
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x4aa>
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004776:	6353      	str	r3, [r2, #52]	; 0x34
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6353      	str	r3, [r2, #52]	; 0x34
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x4c2>
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	6353      	str	r3, [r2, #52]	; 0x34
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 8004798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800479c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d024      	beq.n	80047f0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd f833 	bl	8001810 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ac:	e019      	b.n	80047e2 <HAL_RCC_OscConfig+0x506>
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	0800a3ac 	.word	0x0800a3ac
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004
 80047c0:	42470020 	.word	0x42470020
 80047c4:	42470680 	.word	0x42470680
 80047c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fd f820 	bl	8001810 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0a3      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e2:	4b54      	ldr	r3, [pc, #336]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCC_OscConfig+0x4f0>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f0:	f7fd f80e 	bl	8001810 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fd f80a 	bl	8001810 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e08d      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800480e:	4b49      	ldr	r3, [pc, #292]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d105      	bne.n	800482c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004820:	4b44      	ldr	r3, [pc, #272]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	4a43      	ldr	r2, [pc, #268]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d079      	beq.n	8004928 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d056      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b02      	cmp	r3, #2
 8004840:	d13b      	bne.n	80048ba <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x65c>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc ffe2 	bl	8001810 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc ffde 	bl	8001810 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e063      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004862:	4b34      	ldr	r3, [pc, #208]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4319      	orrs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	430b      	orrs	r3, r1
 8004886:	492b      	ldr	r1, [pc, #172]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCC_OscConfig+0x65c>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fc ffbd 	bl	8001810 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489a:	f7fc ffb9 	bl	8001810 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e03e      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x5be>
 80048b8:	e036      	b.n	8004928 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCC_OscConfig+0x65c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fc ffa6 	bl	8001810 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fc ffa2 	bl	8001810 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e027      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5ec>
 80048e6:	e01f      	b.n	8004928 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <HAL_RCC_OscConfig+0x658>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	429a      	cmp	r2, r3
 8004906:	d10d      	bne.n	8004924 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	42470060 	.word	0x42470060

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e11a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b8f      	ldr	r3, [pc, #572]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d919      	bls.n	8004992 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d105      	bne.n	8004970 <HAL_RCC_ClockConfig+0x34>
 8004964:	4b8a      	ldr	r3, [pc, #552]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a89      	ldr	r2, [pc, #548]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b87      	ldr	r3, [pc, #540]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	4985      	ldr	r1, [pc, #532]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	4b83      	ldr	r3, [pc, #524]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0f9      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499e:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	497a      	ldr	r1, [pc, #488]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 808e 	beq.w	8004ada <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d121      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0d7      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049de:	4b6d      	ldr	r3, [pc, #436]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d115      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0cb      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0bf      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a06:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0b7      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	495c      	ldr	r1, [pc, #368]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fc fef2 	bl	8001810 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fc feea 	bl	8001810 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e09b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4e:	4b51      	ldr	r3, [pc, #324]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d1ee      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xfc>
 8004a5a:	e03e      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d112      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a66:	f7fc fed3 	bl	8001810 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e084      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d1ee      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x12a>
 8004a88:	e027      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d11d      	bne.n	8004ace <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fc febc 	bl	8001810 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e06d      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d1ee      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x158>
 8004ab6:	e010      	b.n	8004ada <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fc feaa 	bl	8001810 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e05b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d219      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCC_ClockConfig+0x1be>
 8004aee:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004af4:	f043 0304 	orr.w	r3, r3, #4
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	4923      	ldr	r1, [pc, #140]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_ClockConfig+0x254>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e034      	b.n	8004b86 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4917      	ldr	r1, [pc, #92]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	490f      	ldr	r1, [pc, #60]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5a:	f000 f823 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_ClockConfig+0x258>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	490b      	ldr	r1, [pc, #44]	; (8004b98 <HAL_RCC_ClockConfig+0x25c>)
 8004b6c:	5ccb      	ldrb	r3, [r1, r3]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RCC_ClockConfig+0x260>)
 8004b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x264>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fdfc 	bl	8001778 <HAL_InitTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b84:	7afb      	ldrb	r3, [r7, #11]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023c00 	.word	0x40023c00
 8004b94:	40023800 	.word	0x40023800
 8004b98:	0800a3ac 	.word	0x0800a3ac
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba8:	b092      	sub	sp, #72	; 0x48
 8004baa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bac:	4b79      	ldr	r3, [pc, #484]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	f200 80d5 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x1c8>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x28>
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2e>
 8004bca:	e0cf      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bd0:	e0da      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd2:	4b72      	ldr	r3, [pc, #456]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bd6:	e0d7      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	0c9b      	lsrs	r3, r3, #18
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004be2:	5c9b      	ldrb	r3, [r3, r2]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	0d9b      	lsrs	r3, r3, #22
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf2:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d05d      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	4611      	mov	r1, r2
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1c:	0150      	lsls	r0, r2, #5
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4621      	mov	r1, r4
 8004c24:	1a51      	subs	r1, r2, r1
 8004c26:	6139      	str	r1, [r7, #16]
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	018b      	lsls	r3, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c46:	4651      	mov	r1, sl
 8004c48:	018a      	lsls	r2, r1, #6
 8004c4a:	46d4      	mov	ip, sl
 8004c4c:	ebb2 080c 	subs.w	r8, r2, ip
 8004c50:	4659      	mov	r1, fp
 8004c52:	eb63 0901 	sbc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	462b      	mov	r3, r5
 8004c78:	eb49 0303 	adc.w	r3, r9, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	024b      	lsls	r3, r1, #9
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	4604      	mov	r4, r0
 8004c94:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004c98:	4601      	mov	r1, r0
 8004c9a:	024a      	lsls	r2, r1, #9
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cac:	f7fb fd80 	bl	80007b0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb8:	e055      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	464b      	mov	r3, r9
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	46c4      	mov	ip, r8
 8004ce0:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	468c      	mov	ip, r1
 8004cea:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cfa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d02:	ebb2 040a 	subs.w	r4, r2, sl
 8004d06:	eb63 050b 	sbc.w	r5, r3, fp
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	00eb      	lsls	r3, r5, #3
 8004d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d18:	00e2      	lsls	r2, r4, #3
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	18e3      	adds	r3, r4, r3
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	460b      	mov	r3, r1
 8004d26:	eb45 0303 	adc.w	r3, r5, r3
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d38:	4629      	mov	r1, r5
 8004d3a:	028b      	lsls	r3, r1, #10
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4604      	mov	r4, r0
 8004d42:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d46:	4601      	mov	r1, r0
 8004d48:	028a      	lsls	r2, r1, #10
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	2200      	movs	r2, #0
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5a:	f7fb fd29 	bl	80007b0 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4613      	mov	r3, r2
 8004d64:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d68:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d6a:	e00d      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0b5b      	lsrs	r3, r3, #13
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3748      	adds	r7, #72	; 0x48
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200
 8004da0:	0800a3a0 	.word	0x0800a3a0

08004da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004db0:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d12c      	bne.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dbc:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004dc8:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e016      	b.n	8004e02 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6253      	str	r3, [r2, #36]	; 0x24
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004df4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df6:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e08:	d105      	bne.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e10:	d101      	bne.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e12:	2301      	movs	r3, #1
 8004e14:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d105      	bne.n	8004e28 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 0201 	bic.w	r2, r3, #1
 8004e30:	490b      	ldr	r1, [pc, #44]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d001      	beq.n	8004e4a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	40023c00 	.word	0x40023c00

08004e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e031      	b.n	8004eda <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc fa0e 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f000 fba8 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e032      	b.n	8004f62 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0c:	d00e      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <HAL_TIM_Base_Start+0x88>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_TIM_Base_Start+0x8c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Start+0x48>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <HAL_TIM_Base_Start+0x90>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d111      	bne.n	8004f50 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d010      	beq.n	8004f60 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	e007      	b.n	8004f60 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40010800 	.word	0x40010800

08004f78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e031      	b.n	8004fee <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f829 	bl	8004ff6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f000 fb1e 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_TIM_OC_Start_IT+0x24>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e022      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x6a>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d109      	bne.n	8005046 <HAL_TIM_OC_Start_IT+0x3e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e015      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x6a>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b08      	cmp	r3, #8
 800504a:	d109      	bne.n	8005060 <HAL_TIM_OC_Start_IT+0x58>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e008      	b.n	8005072 <HAL_TIM_OC_Start_IT+0x6a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e097      	b.n	80051aa <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_TIM_OC_Start_IT+0x82>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005088:	e013      	b.n	80050b2 <HAL_TIM_OC_Start_IT+0xaa>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d104      	bne.n	800509a <HAL_TIM_OC_Start_IT+0x92>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005098:	e00b      	b.n	80050b2 <HAL_TIM_OC_Start_IT+0xaa>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d104      	bne.n	80050aa <HAL_TIM_OC_Start_IT+0xa2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050a8:	e003      	b.n	80050b2 <HAL_TIM_OC_Start_IT+0xaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b0c      	cmp	r3, #12
 80050b6:	d841      	bhi.n	800513c <HAL_TIM_OC_Start_IT+0x134>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_TIM_OC_Start_IT+0xb8>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	0800513d 	.word	0x0800513d
 80050c8:	0800513d 	.word	0x0800513d
 80050cc:	0800513d 	.word	0x0800513d
 80050d0:	08005107 	.word	0x08005107
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	0800513d 	.word	0x0800513d
 80050e0:	08005119 	.word	0x08005119
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800512b 	.word	0x0800512b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0202 	orr.w	r2, r2, #2
 8005102:	60da      	str	r2, [r3, #12]
      break;
 8005104:	e01b      	b.n	800513e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0204 	orr.w	r2, r2, #4
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e012      	b.n	800513e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	60da      	str	r2, [r3, #12]
      break;
 8005128:	e009      	b.n	800513e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0210 	orr.w	r2, r2, #16
 8005138:	60da      	str	r2, [r3, #12]
      break;
 800513a:	e000      	b.n	800513e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800513c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2201      	movs	r2, #1
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fc43 	bl	80059d2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d00e      	beq.n	8005174 <HAL_TIM_OC_Start_IT+0x16c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <HAL_TIM_OC_Start_IT+0x1ac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_TIM_OC_Start_IT+0x16c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <HAL_TIM_OC_Start_IT+0x1b0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_TIM_OC_Start_IT+0x16c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a13      	ldr	r2, [pc, #76]	; (80051bc <HAL_TIM_OC_Start_IT+0x1b4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d111      	bne.n	8005198 <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b06      	cmp	r3, #6
 8005184:	d010      	beq.n	80051a8 <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	e007      	b.n	80051a8 <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40010800 	.word	0x40010800

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9dd 	bl	80055c2 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fb ff22 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f9df 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9b3 	bl	80055c2 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fef8 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f9b5 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f989 	bl	80055c2 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fb fece 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f98b 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95f 	bl	80055c2 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fb fea4 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f961 	bl	80055d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f936 	bl	80055b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f93b 	bl	80055e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_OC_ConfigChannel+0x1a>
 800538e:	2302      	movs	r3, #2
 8005390:	e046      	b.n	8005420 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d839      	bhi.n	8005414 <HAL_TIM_OC_ConfigChannel+0x9c>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005415 	.word	0x08005415
 80053b4:	08005415 	.word	0x08005415
 80053b8:	080053eb 	.word	0x080053eb
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005415 	.word	0x08005415
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	08005415 	.word	0x08005415
 80053d0:	08005415 	.word	0x08005415
 80053d4:	08005415 	.word	0x08005415
 80053d8:	08005407 	.word	0x08005407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f96a 	bl	80056bc <TIM_OC1_SetConfig>
      break;
 80053e8:	e015      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f99f 	bl	8005734 <TIM_OC2_SetConfig>
      break;
 80053f6:	e00e      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f9d6 	bl	80057b0 <TIM_OC3_SetConfig>
      break;
 8005404:	e007      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fa0c 	bl	800582a <TIM_OC4_SetConfig>
      break;
 8005412:	e000      	b.n	8005416 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIM_ConfigClockSource+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e0b3      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x180>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800545e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005478:	d03e      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0xd0>
 800547a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547e:	f200 8087 	bhi.w	8005590 <HAL_TIM_ConfigClockSource+0x168>
 8005482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005486:	f000 8085 	beq.w	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d87f      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 8005490:	2b70      	cmp	r3, #112	; 0x70
 8005492:	d01a      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0xa2>
 8005494:	2b70      	cmp	r3, #112	; 0x70
 8005496:	d87b      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d050      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x116>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d877      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 80054a0:	2b50      	cmp	r3, #80	; 0x50
 80054a2:	d03c      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xf6>
 80054a4:	2b50      	cmp	r3, #80	; 0x50
 80054a6:	d873      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d058      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x136>
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d86f      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d064      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x156>
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d86b      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d060      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x156>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d867      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x156>
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d05a      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054c8:	e062      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6899      	ldr	r1, [r3, #8]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f000 fa5b 	bl	8005994 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	609a      	str	r2, [r3, #8]
      break;
 80054f6:	e04e      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6899      	ldr	r1, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f000 fa44 	bl	8005994 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800551a:	609a      	str	r2, [r3, #8]
      break;
 800551c:	e03b      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	461a      	mov	r2, r3
 800552c:	f000 f9bb 	bl	80058a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2150      	movs	r1, #80	; 0x50
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fa12 	bl	8005960 <TIM_ITRx_SetConfig>
      break;
 800553c:	e02b      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6859      	ldr	r1, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	461a      	mov	r2, r3
 800554c:	f000 f9d9 	bl	8005902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2160      	movs	r1, #96	; 0x60
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fa02 	bl	8005960 <TIM_ITRx_SetConfig>
      break;
 800555c:	e01b      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	461a      	mov	r2, r3
 800556c:	f000 f99b 	bl	80058a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2140      	movs	r1, #64	; 0x40
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f9f2 	bl	8005960 <TIM_ITRx_SetConfig>
      break;
 800557c:	e00b      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f000 f9e9 	bl	8005960 <TIM_ITRx_SetConfig>
        break;
 800558e:	e002      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0x28>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <TIM_Base_SetConfig+0xb0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0x28>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <TIM_Base_SetConfig+0xb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d108      	bne.n	8005632 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d013      	beq.n	8005662 <TIM_Base_SetConfig+0x6a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_Base_SetConfig+0xb0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00f      	beq.n	8005662 <TIM_Base_SetConfig+0x6a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_Base_SetConfig+0xb4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00b      	beq.n	8005662 <TIM_Base_SetConfig+0x6a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <TIM_Base_SetConfig+0xb8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d007      	beq.n	8005662 <TIM_Base_SetConfig+0x6a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_Base_SetConfig+0xbc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_Base_SetConfig+0x6a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_Base_SetConfig+0xc0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d108      	bne.n	8005674 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	615a      	str	r2, [r3, #20]
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40010800 	.word	0x40010800
 80056b4:	40010c00 	.word	0x40010c00
 80056b8:	40011000 	.word	0x40011000

080056bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 0302 	bic.w	r3, r3, #2
 8005704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005858:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	031b      	lsls	r3, r3, #12
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 0201 	bic.w	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 030a 	bic.w	r3, r3, #10
 80058e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0210 	bic.w	r2, r3, #16
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	f043 0307 	orr.w	r3, r3, #7
 8005982:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2201      	movs	r2, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	401a      	ands	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e046      	b.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d00e      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d009      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10c      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40010800 	.word	0x40010800

08005ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4013      	ands	r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b38:	b084      	sub	sp, #16
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	f107 0014 	add.w	r0, r7, #20
 8005b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	b004      	add	sp, #16
 8005b76:	4770      	bx	lr

08005b78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b09b      	sub	sp, #108	; 0x6c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	78db      	ldrb	r3, [r3, #3]
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d81f      	bhi.n	8005bea <USB_ActivateEndpoint+0x72>
 8005baa:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <USB_ActivateEndpoint+0x38>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bc1 	.word	0x08005bc1
 8005bb4:	08005bdd 	.word	0x08005bdd
 8005bb8:	08005bf3 	.word	0x08005bf3
 8005bbc:	08005bcf 	.word	0x08005bcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005bc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005bcc:	e012      	b.n	8005bf4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005bd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005bda:	e00b      	b.n	8005bf4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005be4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005be8:	e004      	b.n	8005bf4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005bf0:	e000      	b.n	8005bf4 <USB_ActivateEndpoint+0x7c>
      break;
 8005bf2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	441a      	add	r2, r3
 8005c44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	7b1b      	ldrb	r3, [r3, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 8149 	bne.w	8005ef8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8084 	beq.w	8005d78 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	011a      	lsls	r2, r3, #4
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	88db      	ldrh	r3, [r3, #6]
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	81fb      	strh	r3, [r7, #14]
 8005cb2:	89fb      	ldrh	r3, [r7, #14]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <USB_ActivateEndpoint+0x17c>
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	81bb      	strh	r3, [r7, #12]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	89bb      	ldrh	r3, [r7, #12]
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	78db      	ldrb	r3, [r3, #3]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d020      	beq.n	8005d3e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d12:	813b      	strh	r3, [r7, #8]
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	f083 0320 	eor.w	r3, r3, #32
 8005d1a:	813b      	strh	r3, [r7, #8]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	893b      	ldrh	r3, [r7, #8]
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]
 8005d3c:	e27f      	b.n	800623e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	817b      	strh	r3, [r7, #10]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	897b      	ldrh	r3, [r7, #10]
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
 8005d76:	e262      	b.n	800623e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	4413      	add	r3, r2
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	88db      	ldrh	r3, [r3, #6]
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	461a      	mov	r2, r3
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	4413      	add	r3, r2
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	4413      	add	r3, r2
 8005dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dce:	623b      	str	r3, [r7, #32]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d112      	bne.n	8005dfe <USB_ActivateEndpoint+0x286>
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e02f      	b.n	8005e5e <USB_ActivateEndpoint+0x2e6>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b3e      	cmp	r3, #62	; 0x3e
 8005e04:	d813      	bhi.n	8005e2e <USB_ActivateEndpoint+0x2b6>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <USB_ActivateEndpoint+0x2a8>
 8005e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	e017      	b.n	8005e5e <USB_ActivateEndpoint+0x2e6>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <USB_ActivateEndpoint+0x2d0>
 8005e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e44:	3b01      	subs	r3, #1
 8005e46:	663b      	str	r3, [r7, #96]	; 0x60
 8005e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	83fb      	strh	r3, [r7, #30]
 8005e6c:	8bfb      	ldrh	r3, [r7, #30]
 8005e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01b      	beq.n	8005eae <USB_ActivateEndpoint+0x336>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	83bb      	strh	r3, [r7, #28]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	8bbb      	ldrh	r3, [r7, #28]
 8005e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec4:	837b      	strh	r3, [r7, #26]
 8005ec6:	8b7b      	ldrh	r3, [r7, #26]
 8005ec8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ecc:	837b      	strh	r3, [r7, #26]
 8005ece:	8b7b      	ldrh	r3, [r7, #26]
 8005ed0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ed4:	837b      	strh	r3, [r7, #26]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	8b7b      	ldrh	r3, [r7, #26]
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]
 8005ef6:	e1a2      	b.n	800623e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f44:	4413      	add	r3, r2
 8005f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	011a      	lsls	r2, r3, #4
 8005f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f56:	657b      	str	r3, [r7, #84]	; 0x54
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	891b      	ldrh	r3, [r3, #8]
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f78:	4413      	add	r3, r2
 8005f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	895b      	ldrh	r3, [r3, #10]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8091 	bne.w	80060c8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005fb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <USB_ActivateEndpoint+0x47e>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	873b      	strh	r3, [r7, #56]	; 0x38
 8006004:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <USB_ActivateEndpoint+0x4ce>
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006024:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800605e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006060:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006064:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006068:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800606c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80060b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8013      	strh	r3, [r2, #0]
 80060c6:	e0ba      	b.n	800623e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01d      	beq.n	8006120 <USB_ActivateEndpoint+0x5a8>
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	441a      	add	r2, r3
 8006108:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006130:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01d      	beq.n	8006178 <USB_ActivateEndpoint+0x600>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	78db      	ldrb	r3, [r3, #3]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d024      	beq.n	80061ca <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006196:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800619a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800619e:	f083 0320 	eor.w	r3, r3, #32
 80061a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	441a      	add	r2, r3
 80061b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
 80061c8:	e01d      	b.n	8006206 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800623e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006242:	4618      	mov	r0, r3
 8006244:	376c      	adds	r7, #108	; 0x6c
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800624c:	b480      	push	{r7}
 800624e:	b08d      	sub	sp, #52	; 0x34
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	7b1b      	ldrb	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 808e 	bne.w	800637c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d044      	beq.n	80062f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	81bb      	strh	r3, [r7, #12]
 8006276:	89bb      	ldrh	r3, [r7, #12]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <USB_DeactivateEndpoint+0x6c>
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	817b      	strh	r3, [r7, #10]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	897b      	ldrh	r3, [r7, #10]
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ce:	813b      	strh	r3, [r7, #8]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
 80062f0:	e192      	b.n	8006618 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	827b      	strh	r3, [r7, #18]
 8006300:	8a7b      	ldrh	r3, [r7, #18]
 8006302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <USB_DeactivateEndpoint+0xf6>
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	823b      	strh	r3, [r7, #16]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	8a3b      	ldrh	r3, [r7, #16]
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	81fb      	strh	r3, [r7, #14]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]
 800637a:	e14d      	b.n	8006618 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 80a5 	bne.w	80064d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	843b      	strh	r3, [r7, #32]
 8006394:	8c3b      	ldrh	r3, [r7, #32]
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01b      	beq.n	80063d6 <USB_DeactivateEndpoint+0x18a>
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	83fb      	strh	r3, [r7, #30]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8bfb      	ldrh	r3, [r7, #30]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	83bb      	strh	r3, [r7, #28]
 80063e4:	8bbb      	ldrh	r3, [r7, #28]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <USB_DeactivateEndpoint+0x1da>
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006404:	837b      	strh	r3, [r7, #26]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8b7b      	ldrh	r3, [r7, #26]
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	833b      	strh	r3, [r7, #24]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	8b3b      	ldrh	r3, [r7, #24]
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006474:	82fb      	strh	r3, [r7, #22]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8afb      	ldrh	r3, [r7, #22]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ac:	82bb      	strh	r3, [r7, #20]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	8abb      	ldrh	r3, [r7, #20]
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
 80064ce:	e0a3      	b.n	8006618 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <USB_DeactivateEndpoint+0x2d4>
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800652e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <USB_DeactivateEndpoint+0x324>
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	441a      	add	r2, r3
 8006592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	b29b      	uxth	r3, r3
 80065de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3734      	adds	r7, #52	; 0x34
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b0cc      	sub	sp, #304	; 0x130
 8006628:	af00      	add	r7, sp, #0
 800662a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006632:	6018      	str	r0, [r3, #0]
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b01      	cmp	r3, #1
 800664c:	f041 817d 	bne.w	800794a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d908      	bls.n	800667e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800666c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800667c:	e007      	b.n	800668e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800667e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800668e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	7b1b      	ldrb	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d152      	bne.n	8006744 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6959      	ldr	r1, [r3, #20]
 80066aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	88da      	ldrh	r2, [r3, #6]
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066c4:	6800      	ldr	r0, [r0, #0]
 80066c6:	f001 ff0e 	bl	80084e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066fc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	440a      	add	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	011a      	lsls	r2, r3, #4
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4413      	add	r3, r2
 8006720:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	b29a      	uxth	r2, r3
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	f001 b8b5 	b.w	80078ae <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b02      	cmp	r3, #2
 8006752:	f040 84c6 	bne.w	80070e2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	f240 8443 	bls.w	8006ffa <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e0:	1ad2      	subs	r2, r2, r3
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 823e 	beq.w	8006c92 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800681e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006822:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	785b      	ldrb	r3, [r3, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f040 809a 	bne.w	8006970 <USB_EPStartXfer+0x34c>
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006844:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006848:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	4619      	mov	r1, r3
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	440a      	add	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4413      	add	r3, r2
 8006892:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d122      	bne.n	80068ee <USB_EPStartXfer+0x2ca>
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e079      	b.n	80069e2 <USB_EPStartXfer+0x3be>
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	2b3e      	cmp	r3, #62	; 0x3e
 80068f4:	d81b      	bhi.n	800692e <USB_EPStartXfer+0x30a>
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <USB_EPStartXfer+0x2f2>
 800690c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29a      	uxth	r2, r3
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	e059      	b.n	80069e2 <USB_EPStartXfer+0x3be>
 800692e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <USB_EPStartXfer+0x32a>
 8006944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006948:	3b01      	subs	r3, #1
 800694a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800694e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006952:	b29b      	uxth	r3, r3
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006960:	b29a      	uxth	r2, r3
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	801a      	strh	r2, [r3, #0]
 800696e:	e038      	b.n	80069e2 <USB_EPStartXfer+0x3be>
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d130      	bne.n	80069e2 <USB_EPStartXfer+0x3be>
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698e:	b29b      	uxth	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800699a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800699e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	440a      	add	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80069c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	895b      	ldrh	r3, [r3, #10]
 80069ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6959      	ldr	r1, [r3, #20]
 80069fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a10:	6800      	ldr	r0, [r0, #0]
 8006a12:	f001 fd68 	bl	80084e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a26:	441a      	add	r2, r3
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d90f      	bls.n	8006a70 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	621a      	str	r2, [r3, #32]
 8006a6e:	e00e      	b.n	8006a8e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 809a 	bne.w	8006bd4 <USB_EPStartXfer+0x5b0>
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006aa8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ace:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	440a      	add	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	011a      	lsls	r2, r3, #4
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d122      	bne.n	8006b52 <USB_EPStartXfer+0x52e>
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	e083      	b.n	8006c5a <USB_EPStartXfer+0x636>
 8006b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b56:	2b3e      	cmp	r3, #62	; 0x3e
 8006b58:	d81b      	bhi.n	8006b92 <USB_EPStartXfer+0x56e>
 8006b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <USB_EPStartXfer+0x556>
 8006b70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	029b      	lsls	r3, r3, #10
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e063      	b.n	8006c5a <USB_EPStartXfer+0x636>
 8006b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <USB_EPStartXfer+0x58e>
 8006ba8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bac:	3b01      	subs	r3, #1
 8006bae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	029b      	lsls	r3, r3, #10
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e042      	b.n	8006c5a <USB_EPStartXfer+0x636>
 8006bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d13a      	bne.n	8006c5a <USB_EPStartXfer+0x636>
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006bec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bf0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c16:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	011a      	lsls	r2, r3, #4
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	891b      	ldrh	r3, [r3, #8]
 8006c66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c88:	6800      	ldr	r0, [r0, #0]
 8006c8a:	f001 fc2c 	bl	80084e6 <USB_WritePMA>
 8006c8e:	f000 be0e 	b.w	80078ae <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d16d      	bne.n	8006d7e <USB_EPStartXfer+0x75a>
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc2:	4413      	add	r3, r2
 8006cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	011a      	lsls	r2, r3, #4
 8006cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d112      	bne.n	8006d0c <USB_EPStartXfer+0x6e8>
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e063      	b.n	8006dd4 <USB_EPStartXfer+0x7b0>
 8006d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d10:	2b3e      	cmp	r3, #62	; 0x3e
 8006d12:	d817      	bhi.n	8006d44 <USB_EPStartXfer+0x720>
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <USB_EPStartXfer+0x710>
 8006d2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d40:	801a      	strh	r2, [r3, #0]
 8006d42:	e047      	b.n	8006dd4 <USB_EPStartXfer+0x7b0>
 8006d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <USB_EPStartXfer+0x740>
 8006d5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e02a      	b.n	8006dd4 <USB_EPStartXfer+0x7b0>
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d122      	bne.n	8006dd4 <USB_EPStartXfer+0x7b0>
 8006d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	653b      	str	r3, [r7, #80]	; 0x50
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	461a      	mov	r2, r3
 8006dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dae:	4413      	add	r3, r2
 8006db0:	653b      	str	r3, [r7, #80]	; 0x50
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	011a      	lsls	r2, r3, #4
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	891b      	ldrh	r3, [r3, #8]
 8006de0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6959      	ldr	r1, [r3, #20]
 8006df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dfa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dfe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	f001 fb6f 	bl	80084e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e18:	441a      	add	r2, r3
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d90f      	bls.n	8006e62 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	621a      	str	r2, [r3, #32]
 8006e60:	e00e      	b.n	8006e80 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d16d      	bne.n	8006f78 <USB_EPStartXfer+0x954>
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	4413      	add	r3, r2
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	011a      	lsls	r2, r3, #4
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d112      	bne.n	8006f06 <USB_EPStartXfer+0x8e2>
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e05d      	b.n	8006fc2 <USB_EPStartXfer+0x99e>
 8006f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0c:	d817      	bhi.n	8006f3e <USB_EPStartXfer+0x91a>
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <USB_EPStartXfer+0x90a>
 8006f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e041      	b.n	8006fc2 <USB_EPStartXfer+0x99e>
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USB_EPStartXfer+0x93a>
 8006f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e024      	b.n	8006fc2 <USB_EPStartXfer+0x99e>
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d11c      	bne.n	8006fc2 <USB_EPStartXfer+0x99e>
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9c:	4413      	add	r3, r2
 8006f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	895b      	ldrh	r3, [r3, #10]
 8006fce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fe8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ff0:	6800      	ldr	r0, [r0, #0]
 8006ff2:	f001 fa78 	bl	80084e6 <USB_WritePMA>
 8006ff6:	f000 bc5a 	b.w	80078ae <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800702c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007030:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	441a      	add	r2, r3
 800704e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	b29b      	uxth	r3, r3
 8007064:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007086:	4413      	add	r3, r2
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709a:	4413      	add	r3, r2
 800709c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	891b      	ldrh	r3, [r3, #8]
 80070b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6959      	ldr	r1, [r3, #20]
 80070c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	f001 fa03 	bl	80084e6 <USB_WritePMA>
 80070e0:	e3e5      	b.n	80078ae <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007108:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800710c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800713e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 81bc 	beq.w	80074fc <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d16d      	bne.n	800727e <USB_EPStartXfer+0xc5a>
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c2:	4413      	add	r3, r2
 80071c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	011a      	lsls	r2, r3, #4
 80071d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071dc:	677b      	str	r3, [r7, #116]	; 0x74
 80071de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d112      	bne.n	800720c <USB_EPStartXfer+0xbe8>
 80071e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e060      	b.n	80072ce <USB_EPStartXfer+0xcaa>
 800720c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007210:	2b3e      	cmp	r3, #62	; 0x3e
 8007212:	d817      	bhi.n	8007244 <USB_EPStartXfer+0xc20>
 8007214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800721e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <USB_EPStartXfer+0xc10>
 800722a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007234:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007238:	b29b      	uxth	r3, r3
 800723a:	029b      	lsls	r3, r3, #10
 800723c:	b29a      	uxth	r2, r3
 800723e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e044      	b.n	80072ce <USB_EPStartXfer+0xcaa>
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800724e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <USB_EPStartXfer+0xc40>
 800725a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800725e:	3b01      	subs	r3, #1
 8007260:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007264:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007268:	b29b      	uxth	r3, r3
 800726a:	029b      	lsls	r3, r3, #10
 800726c:	b29b      	uxth	r3, r3
 800726e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007276:	b29a      	uxth	r2, r3
 8007278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e027      	b.n	80072ce <USB_EPStartXfer+0xcaa>
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11f      	bne.n	80072ce <USB_EPStartXfer+0xcaa>
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729c:	b29b      	uxth	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072a4:	4413      	add	r3, r2
 80072a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	011a      	lsls	r2, r3, #4
 80072b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072bc:	4413      	add	r3, r2
 80072be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	895b      	ldrh	r3, [r3, #10]
 80072da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6959      	ldr	r1, [r3, #20]
 80072ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f001 f8f2 	bl	80084e6 <USB_WritePMA>
          ep->xfer_buff += len;
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007312:	441a      	add	r2, r3
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d90f      	bls.n	800735c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	621a      	str	r2, [r3, #32]
 800735a:	e00e      	b.n	800737a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800735c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800737a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8295 	beq.w	80078ae <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d16d      	bne.n	8007470 <USB_EPStartXfer+0xe4c>
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073b4:	4413      	add	r3, r2
 80073b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ce:	667b      	str	r3, [r7, #100]	; 0x64
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d112      	bne.n	80073fe <USB_EPStartXfer+0xdda>
 80073d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e063      	b.n	80074c6 <USB_EPStartXfer+0xea2>
 80073fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007402:	2b3e      	cmp	r3, #62	; 0x3e
 8007404:	d817      	bhi.n	8007436 <USB_EPStartXfer+0xe12>
 8007406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <USB_EPStartXfer+0xe02>
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29a      	uxth	r2, r3
 8007430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e047      	b.n	80074c6 <USB_EPStartXfer+0xea2>
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USB_EPStartXfer+0xe32>
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	3b01      	subs	r3, #1
 8007452:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	b29b      	uxth	r3, r3
 800745c:	029b      	lsls	r3, r3, #10
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e02a      	b.n	80074c6 <USB_EPStartXfer+0xea2>
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d122      	bne.n	80074c6 <USB_EPStartXfer+0xea2>
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	673b      	str	r3, [r7, #112]	; 0x70
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074a0:	4413      	add	r3, r2
 80074a2:	673b      	str	r3, [r7, #112]	; 0x70
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	011a      	lsls	r2, r3, #4
 80074b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b4:	4413      	add	r3, r2
 80074b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	891b      	ldrh	r3, [r3, #8]
 80074d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6959      	ldr	r1, [r3, #20]
 80074e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074f4:	6800      	ldr	r0, [r0, #0]
 80074f6:	f000 fff6 	bl	80084e6 <USB_WritePMA>
 80074fa:	e1d8      	b.n	80078ae <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d178      	bne.n	80075fe <USB_EPStartXfer+0xfda>
 800750c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007528:	b29b      	uxth	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007530:	4413      	add	r3, r2
 8007532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	011a      	lsls	r2, r3, #4
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007548:	4413      	add	r3, r2
 800754a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800754e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d116      	bne.n	8007588 <USB_EPStartXfer+0xf64>
 800755a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e06b      	b.n	8007660 <USB_EPStartXfer+0x103c>
 8007588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758c:	2b3e      	cmp	r3, #62	; 0x3e
 800758e:	d818      	bhi.n	80075c2 <USB_EPStartXfer+0xf9e>
 8007590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800759a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <USB_EPStartXfer+0xf8c>
 80075a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075aa:	3301      	adds	r3, #1
 80075ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	029b      	lsls	r3, r3, #10
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e04e      	b.n	8007660 <USB_EPStartXfer+0x103c>
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <USB_EPStartXfer+0xfbe>
 80075d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075dc:	3b01      	subs	r3, #1
 80075de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e030      	b.n	8007660 <USB_EPStartXfer+0x103c>
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d128      	bne.n	8007660 <USB_EPStartXfer+0x103c>
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007632:	4413      	add	r3, r2
 8007634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	011a      	lsls	r2, r3, #4
 8007646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800764a:	4413      	add	r3, r2
 800764c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007658:	b29a      	uxth	r2, r3
 800765a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800765e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	891b      	ldrh	r3, [r3, #8]
 800766c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6959      	ldr	r1, [r3, #20]
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	b29b      	uxth	r3, r3
 8007682:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007686:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800768a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	f000 ff29 	bl	80084e6 <USB_WritePMA>
          ep->xfer_buff += len;
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a4:	441a      	add	r2, r3
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90f      	bls.n	80076ee <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	621a      	str	r2, [r3, #32]
 80076ec:	e00e      	b.n	800770c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80076ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2200      	movs	r2, #0
 800770a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 80cc 	beq.w	80078ae <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d178      	bne.n	8007826 <USB_EPStartXfer+0x1202>
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007750:	b29b      	uxth	r3, r3
 8007752:	461a      	mov	r2, r3
 8007754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007758:	4413      	add	r3, r2
 800775a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800775e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	011a      	lsls	r2, r3, #4
 800776c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007770:	4413      	add	r3, r2
 8007772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d116      	bne.n	80077b0 <USB_EPStartXfer+0x118c>
 8007782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800778e:	b29a      	uxth	r2, r3
 8007790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e064      	b.n	800787a <USB_EPStartXfer+0x1256>
 80077b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b4:	2b3e      	cmp	r3, #62	; 0x3e
 80077b6:	d818      	bhi.n	80077ea <USB_EPStartXfer+0x11c6>
 80077b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <USB_EPStartXfer+0x11b4>
 80077ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d2:	3301      	adds	r3, #1
 80077d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077dc:	b29b      	uxth	r3, r3
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	e047      	b.n	800787a <USB_EPStartXfer+0x1256>
 80077ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <USB_EPStartXfer+0x11e6>
 8007800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007804:	3b01      	subs	r3, #1
 8007806:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800780a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780e:	b29b      	uxth	r3, r3
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e029      	b.n	800787a <USB_EPStartXfer+0x1256>
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d121      	bne.n	800787a <USB_EPStartXfer+0x1256>
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007844:	b29b      	uxth	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800784c:	4413      	add	r3, r2
 800784e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	011a      	lsls	r2, r3, #4
 8007860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007864:	4413      	add	r3, r2
 8007866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800786a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800786e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800787a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	895b      	ldrh	r3, [r3, #10]
 8007886:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6959      	ldr	r1, [r3, #20]
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789a:	b29b      	uxth	r3, r3
 800789c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078a8:	6800      	ldr	r0, [r0, #0]
 80078aa:	f000 fe1c 	bl	80084e6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078d0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078dc:	8013      	strh	r3, [r2, #0]
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078ea:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078ee:	8812      	ldrh	r2, [r2, #0]
 80078f0:	f082 0210 	eor.w	r2, r2, #16
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007902:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007906:	8812      	ldrh	r2, [r2, #0]
 8007908:	f082 0220 	eor.w	r2, r2, #32
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]
 8007946:	f000 bc9f 	b.w	8008288 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800794a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	7b1b      	ldrb	r3, [r3, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80ae 	bne.w	8007ab8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	429a      	cmp	r2, r3
 8007976:	d917      	bls.n	80079a8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	619a      	str	r2, [r3, #24]
 80079a6:	e00e      	b.n	80079c6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80079b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079ea:	4413      	add	r3, r2
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	011a      	lsls	r2, r3, #4
 80079fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a02:	4413      	add	r3, r2
 8007a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d116      	bne.n	8007a42 <USB_EPStartXfer+0x141e>
 8007a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e3e8      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
 8007a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a46:	2b3e      	cmp	r3, #62	; 0x3e
 8007a48:	d818      	bhi.n	8007a7c <USB_EPStartXfer+0x1458>
 8007a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <USB_EPStartXfer+0x1446>
 8007a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a64:	3301      	adds	r3, #1
 8007a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e3cb      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <USB_EPStartXfer+0x1478>
 8007a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a96:	3b01      	subs	r3, #1
 8007a98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	e3ad      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	78db      	ldrb	r3, [r3, #3]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	f040 8200 	bne.w	8007eca <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8091 	bne.w	8007bfe <USB_EPStartXfer+0x15da>
 8007adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b00:	4413      	add	r3, r2
 8007b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	011a      	lsls	r2, r3, #4
 8007b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d116      	bne.n	8007b60 <USB_EPStartXfer+0x153c>
 8007b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	e083      	b.n	8007c68 <USB_EPStartXfer+0x1644>
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6e:	d820      	bhi.n	8007bb2 <USB_EPStartXfer+0x158e>
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x157c>
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e05a      	b.n	8007c68 <USB_EPStartXfer+0x1644>
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USB_EPStartXfer+0x15be>
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e034      	b.n	8007c68 <USB_EPStartXfer+0x1644>
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d12c      	bne.n	8007c68 <USB_EPStartXfer+0x1644>
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c32:	4413      	add	r3, r2
 8007c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	011a      	lsls	r2, r3, #4
 8007c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f040 8091 	bne.w	8007daa <USB_EPStartXfer+0x1786>
 8007c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cac:	4413      	add	r3, r2
 8007cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	011a      	lsls	r2, r3, #4
 8007cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d116      	bne.n	8007d0c <USB_EPStartXfer+0x16e8>
 8007cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cf0:	801a      	strh	r2, [r3, #0]
 8007cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e07c      	b.n	8007e06 <USB_EPStartXfer+0x17e2>
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b3e      	cmp	r3, #62	; 0x3e
 8007d1a:	d820      	bhi.n	8007d5e <USB_EPStartXfer+0x173a>
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <USB_EPStartXfer+0x1728>
 8007d42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d46:	3301      	adds	r3, #1
 8007d48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	029b      	lsls	r3, r3, #10
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	e053      	b.n	8007e06 <USB_EPStartXfer+0x17e2>
 8007d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f003 031f 	and.w	r3, r3, #31
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <USB_EPStartXfer+0x176a>
 8007d84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	029b      	lsls	r3, r3, #10
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	e02d      	b.n	8007e06 <USB_EPStartXfer+0x17e2>
 8007daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d125      	bne.n	8007e06 <USB_EPStartXfer+0x17e2>
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	011a      	lsls	r2, r3, #4
 8007de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007de8:	4413      	add	r3, r2
 8007dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e04:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 81fe 	beq.w	8008214 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e38:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USB_EPStartXfer+0x182c>
 8007e44:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e50:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f040 81db 	bne.w	8008214 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e5e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 81d4 	bne.w	8008214 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]
 8007ec8:	e1a4      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	78db      	ldrb	r3, [r3, #3]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f040 819a 	bne.w	8008210 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d917      	bls.n	8007f28 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	619a      	str	r2, [r3, #24]
 8007f26:	e00e      	b.n	8007f46 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d178      	bne.n	8008048 <USB_EPStartXfer+0x1a24>
 8007f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	011a      	lsls	r2, r3, #4
 8007f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f92:	4413      	add	r3, r2
 8007f94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d116      	bne.n	8007fd2 <USB_EPStartXfer+0x19ae>
 8007fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e06b      	b.n	80080aa <USB_EPStartXfer+0x1a86>
 8007fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fd8:	d818      	bhi.n	800800c <USB_EPStartXfer+0x19e8>
 8007fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <USB_EPStartXfer+0x19d6>
 8007ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	029b      	lsls	r3, r3, #10
 8008002:	b29a      	uxth	r2, r3
 8008004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	e04e      	b.n	80080aa <USB_EPStartXfer+0x1a86>
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <USB_EPStartXfer+0x1a08>
 8008022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008026:	3b01      	subs	r3, #1
 8008028:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800802c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008030:	b29b      	uxth	r3, r3
 8008032:	029b      	lsls	r3, r3, #10
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e030      	b.n	80080aa <USB_EPStartXfer+0x1a86>
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d128      	bne.n	80080aa <USB_EPStartXfer+0x1a86>
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807c:	4413      	add	r3, r2
 800807e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	011a      	lsls	r2, r3, #4
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008094:	4413      	add	r3, r2
 8008096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800809a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d178      	bne.n	80081ba <USB_EPStartXfer+0x1b96>
 80080c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ec:	4413      	add	r3, r2
 80080ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	011a      	lsls	r2, r3, #4
 8008100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008104:	4413      	add	r3, r2
 8008106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800810a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d116      	bne.n	8008144 <USB_EPStartXfer+0x1b20>
 8008116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e067      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
 8008144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008148:	2b3e      	cmp	r3, #62	; 0x3e
 800814a:	d818      	bhi.n	800817e <USB_EPStartXfer+0x1b5a>
 800814c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008150:	085b      	lsrs	r3, r3, #1
 8008152:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <USB_EPStartXfer+0x1b48>
 8008162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008166:	3301      	adds	r3, #1
 8008168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800816c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008170:	b29b      	uxth	r3, r3
 8008172:	029b      	lsls	r3, r3, #10
 8008174:	b29a      	uxth	r2, r3
 8008176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	e04a      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
 800817e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <USB_EPStartXfer+0x1b7a>
 8008194:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008198:	3b01      	subs	r3, #1
 800819a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800819e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	029b      	lsls	r3, r3, #10
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e02c      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d124      	bne.n	8008214 <USB_EPStartXfer+0x1bf0>
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d8:	b29b      	uxth	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	011a      	lsls	r2, r3, #4
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f8:	4413      	add	r3, r2
 80081fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008206:	b29a      	uxth	r2, r3
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	e001      	b.n	8008214 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e03a      	b.n	800828a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800823e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008242:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008246:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800824a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800824e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008252:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	441a      	add	r2, r3
 8008270:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008284:	b29b      	uxth	r3, r3
 8008286:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d020      	beq.n	80082e8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082bc:	81bb      	strh	r3, [r7, #12]
 80082be:	89bb      	ldrh	r3, [r7, #12]
 80082c0:	f083 0310 	eor.w	r3, r3, #16
 80082c4:	81bb      	strh	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	441a      	add	r2, r3
 80082d0:	89bb      	ldrh	r3, [r7, #12]
 80082d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]
 80082e6:	e01f      	b.n	8008328 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	81fb      	strh	r3, [r7, #14]
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008306:	81fb      	strh	r3, [r7, #14]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	89fb      	ldrh	r3, [r7, #14]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	7b1b      	ldrb	r3, [r3, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f040 809d 	bne.w	8008482 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d04c      	beq.n	80083ea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	823b      	strh	r3, [r7, #16]
 800835e:	8a3b      	ldrh	r3, [r7, #16]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01b      	beq.n	80083a0 <USB_EPClearStall+0x6c>
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	81fb      	strh	r3, [r7, #14]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	89fb      	ldrh	r3, [r7, #14]
 800838c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800839c:	b29b      	uxth	r3, r3
 800839e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	78db      	ldrb	r3, [r3, #3]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d06c      	beq.n	8008482 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083be:	81bb      	strh	r3, [r7, #12]
 80083c0:	89bb      	ldrh	r3, [r7, #12]
 80083c2:	f083 0320 	eor.w	r3, r3, #32
 80083c6:	81bb      	strh	r3, [r7, #12]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	89bb      	ldrh	r3, [r7, #12]
 80083d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	8013      	strh	r3, [r2, #0]
 80083e8:	e04b      	b.n	8008482 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	82fb      	strh	r3, [r7, #22]
 80083f8:	8afb      	ldrh	r3, [r7, #22]
 80083fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01b      	beq.n	800843a <USB_EPClearStall+0x106>
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008418:	82bb      	strh	r3, [r7, #20]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	8abb      	ldrh	r3, [r7, #20]
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800844c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008450:	827b      	strh	r3, [r7, #18]
 8008452:	8a7b      	ldrh	r3, [r7, #18]
 8008454:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008458:	827b      	strh	r3, [r7, #18]
 800845a:	8a7b      	ldrh	r3, [r7, #18]
 800845c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008460:	827b      	strh	r3, [r7, #18]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	441a      	add	r2, r3
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847e:	b29b      	uxth	r3, r3
 8008480:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2280      	movs	r2, #128	; 0x80
 80084a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr

080084c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084da:	68fb      	ldr	r3, [r7, #12]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b08d      	sub	sp, #52	; 0x34
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	4611      	mov	r1, r2
 80084f2:	461a      	mov	r2, r3
 80084f4:	460b      	mov	r3, r1
 80084f6:	80fb      	strh	r3, [r7, #6]
 80084f8:	4613      	mov	r3, r2
 80084fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80084fc:	88bb      	ldrh	r3, [r7, #4]
 80084fe:	3301      	adds	r3, #1
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	005a      	lsls	r2, r3, #1
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008518:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851e:	e01e      	b.n	800855e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	3301      	adds	r3, #1
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	b29b      	uxth	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	b29a      	uxth	r2, r3
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	3302      	adds	r3, #2
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	3302      	adds	r3, #2
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	3301      	adds	r3, #1
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	3b01      	subs	r3, #1
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1dd      	bne.n	8008520 <USB_WritePMA+0x3a>
  }
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	3734      	adds	r7, #52	; 0x34
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008570:	b480      	push	{r7}
 8008572:	b08b      	sub	sp, #44	; 0x2c
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4611      	mov	r1, r2
 800857c:	461a      	mov	r2, r3
 800857e:	460b      	mov	r3, r1
 8008580:	80fb      	strh	r3, [r7, #6]
 8008582:	4613      	mov	r3, r2
 8008584:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008586:	88bb      	ldrh	r3, [r7, #4]
 8008588:	085b      	lsrs	r3, r3, #1
 800858a:	b29b      	uxth	r3, r3
 800858c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	005a      	lsls	r2, r3, #1
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
 80085a8:	e01b      	b.n	80085e2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	3302      	adds	r3, #2
 80085b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	3301      	adds	r3, #1
 80085c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	0a1b      	lsrs	r3, r3, #8
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	3302      	adds	r3, #2
 80085da:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	3b01      	subs	r3, #1
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e0      	bne.n	80085aa <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80085e8:	88bb      	ldrh	r3, [r7, #4]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	701a      	strb	r2, [r3, #0]
  }
}
 8008604:	bf00      	nop
 8008606:	372c      	adds	r7, #44	; 0x2c
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800861e:	2302      	movs	r3, #2
 8008620:	2203      	movs	r2, #3
 8008622:	2181      	movs	r1, #129	; 0x81
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fcfc 	bl	800a022 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008630:	2302      	movs	r3, #2
 8008632:	2203      	movs	r2, #3
 8008634:	2101      	movs	r1, #1
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fcf3 	bl	800a022 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8008644:	2024      	movs	r0, #36	; 0x24
 8008646:	f001 fe01 	bl	800a24c <USBD_static_malloc>
 800864a:	4602      	mov	r2, r0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	e012      	b.n	8008688 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008668:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	230d      	movs	r3, #13
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fdbe 	bl	800a204 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800869e:	2181      	movs	r1, #129	; 0x81
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fce4 	bl	800a06e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80086ac:	2101      	movs	r1, #1
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fcdd 	bl	800a06e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fdc4 	bl	800a264 <USBD_static_free>
    pdev->pClassData = NULL;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008700:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800871a:	2b00      	cmp	r3, #0
 800871c:	d051      	beq.n	80087c2 <USBD_CUSTOM_HID_Setup+0xd2>
 800871e:	2b20      	cmp	r3, #32
 8008720:	f040 80d8 	bne.w	80088d4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	3b02      	subs	r3, #2
 800872a:	2b09      	cmp	r3, #9
 800872c:	d841      	bhi.n	80087b2 <USBD_CUSTOM_HID_Setup+0xc2>
 800872e:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <USBD_CUSTOM_HID_Setup+0x44>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	0800878d 	.word	0x0800878d
 8008738:	0800876b 	.word	0x0800876b
 800873c:	080087b3 	.word	0x080087b3
 8008740:	080087b3 	.word	0x080087b3
 8008744:	080087b3 	.word	0x080087b3
 8008748:	080087b3 	.word	0x080087b3
 800874c:	080087b3 	.word	0x080087b3
 8008750:	0800879d 	.word	0x0800879d
 8008754:	0800877b 	.word	0x0800877b
 8008758:	0800875d 	.word	0x0800875d
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	611a      	str	r2, [r3, #16]
      break;
 8008768:	e02a      	b.n	80087c0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3310      	adds	r3, #16
 800876e:	2201      	movs	r2, #1
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f92b 	bl	80099ce <USBD_CtlSendData>
      break;
 8008778:	e022      	b.n	80087c0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	b29b      	uxth	r3, r3
 8008782:	b2db      	uxtb	r3, r3
 8008784:	461a      	mov	r2, r3
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	615a      	str	r2, [r3, #20]
      break;
 800878a:	e019      	b.n	80087c0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	3314      	adds	r3, #20
 8008790:	2201      	movs	r2, #1
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 f91a 	bl	80099ce <USBD_CtlSendData>
      break;
 800879a:	e011      	b.n	80087c0 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2201      	movs	r2, #1
 80087a0:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80087a2:	6939      	ldr	r1, [r7, #16]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	88db      	ldrh	r3, [r3, #6]
 80087a8:	461a      	mov	r2, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f93d 	bl	8009a2a <USBD_CtlPrepareRx>
      break;
 80087b0:	e006      	b.n	80087c0 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f8a0 	bl	80098fa <USBD_CtlError>
      ret = USBD_FAIL;
 80087ba:	2302      	movs	r3, #2
 80087bc:	75fb      	strb	r3, [r7, #23]
      break;
 80087be:	bf00      	nop
    }
    break;
 80087c0:	e08f      	b.n	80088e2 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b0b      	cmp	r3, #11
 80087c8:	d87c      	bhi.n	80088c4 <USBD_CUSTOM_HID_Setup+0x1d4>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <USBD_CUSTOM_HID_Setup+0xe0>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	08008801 	.word	0x08008801
 80087d4:	080088c5 	.word	0x080088c5
 80087d8:	080088c5 	.word	0x080088c5
 80087dc:	080088c5 	.word	0x080088c5
 80087e0:	080088c5 	.word	0x080088c5
 80087e4:	080088c5 	.word	0x080088c5
 80087e8:	08008829 	.word	0x08008829
 80087ec:	080088c5 	.word	0x080088c5
 80087f0:	080088c5 	.word	0x080088c5
 80087f4:	080088c5 	.word	0x080088c5
 80087f8:	08008877 	.word	0x08008877
 80087fc:	0800889f 	.word	0x0800889f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008806:	2b03      	cmp	r3, #3
 8008808:	d107      	bne.n	800881a <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800880a:	f107 030e 	add.w	r3, r7, #14
 800880e:	2202      	movs	r2, #2
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f8db 	bl	80099ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008818:	e05b      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 f86c 	bl	80098fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8008822:	2302      	movs	r3, #2
 8008824:	75fb      	strb	r3, [r7, #23]
      break;
 8008826:	e054      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	0a1b      	lsrs	r3, r3, #8
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b22      	cmp	r3, #34	; 0x22
 8008832:	d10b      	bne.n	800884c <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	88db      	ldrh	r3, [r3, #6]
 8008838:	2b41      	cmp	r3, #65	; 0x41
 800883a:	bf28      	it	cs
 800883c:	2341      	movcs	r3, #65	; 0x41
 800883e:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e00d      	b.n	8008868 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	2b21      	cmp	r3, #33	; 0x21
 8008856:	d107      	bne.n	8008868 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <USBD_CUSTOM_HID_Setup+0x1fc>)
 800885a:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	88db      	ldrh	r3, [r3, #6]
 8008860:	2b09      	cmp	r3, #9
 8008862:	bf28      	it	cs
 8008864:	2309      	movcs	r3, #9
 8008866:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8008868:	8bfb      	ldrh	r3, [r7, #30]
 800886a:	461a      	mov	r2, r3
 800886c:	69b9      	ldr	r1, [r7, #24]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 f8ad 	bl	80099ce <USBD_CtlSendData>
      break;
 8008874:	e02d      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800887c:	2b03      	cmp	r3, #3
 800887e:	d107      	bne.n	8008890 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	3318      	adds	r3, #24
 8008884:	2201      	movs	r2, #1
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f8a0 	bl	80099ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800888e:	e020      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 f831 	bl	80098fa <USBD_CtlError>
			  ret = USBD_FAIL;
 8008898:	2302      	movs	r3, #2
 800889a:	75fb      	strb	r3, [r7, #23]
      break;
 800889c:	e019      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d106      	bne.n	80088b6 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	885b      	ldrh	r3, [r3, #2]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	461a      	mov	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088b4:	e00d      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 f81e 	bl	80098fa <USBD_CtlError>
			  ret = USBD_FAIL;
 80088be:	2302      	movs	r3, #2
 80088c0:	75fb      	strb	r3, [r7, #23]
      break;
 80088c2:	e006      	b.n	80088d2 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f817 	bl	80098fa <USBD_CtlError>
      ret = USBD_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	75fb      	strb	r3, [r7, #23]
      break;
 80088d0:	bf00      	nop
    }
    break;
 80088d2:	e006      	b.n	80088e2 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f80f 	bl	80098fa <USBD_CtlError>
    ret = USBD_FAIL;
 80088dc:	2302      	movs	r3, #2
 80088de:	75fb      	strb	r3, [r7, #23]
    break;
 80088e0:	bf00      	nop
  }
  return ret;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3720      	adds	r7, #32
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	200000c8 	.word	0x200000c8

080088f0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008904:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800890c:	2b03      	cmp	r3, #3
 800890e:	d111      	bne.n	8008934 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	2181      	movs	r1, #129	; 0x81
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fc48 	bl	800a1be <USBD_LL_Transmit>
 800892e:	e001      	b.n	8008934 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2229      	movs	r2, #41	; 0x29
 800894c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800894e:	4b03      	ldr	r3, [pc, #12]	; (800895c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	20000044 	.word	0x20000044

08008960 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2229      	movs	r2, #41	; 0x29
 800896c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800896e:	4b03      	ldr	r3, [pc, #12]	; (800897c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	20000070 	.word	0x20000070

08008980 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2229      	movs	r2, #41	; 0x29
 800898c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800898e:	4b03      	ldr	r3, [pc, #12]	; (800899c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	bc80      	pop	{r7}
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	2000009c 	.word	0x2000009c

080089a0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089d6:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	7810      	ldrb	r0, [r2, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	7852      	ldrb	r2, [r2, #1]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	230d      	movs	r3, #13
 80089f0:	2101      	movs	r1, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fc06 	bl	800a204 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a10:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d10c      	bne.n	8008a34 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	7810      	ldrb	r0, [r2, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	7852      	ldrb	r2, [r2, #1]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	200000d4 	.word	0x200000d4

08008a60 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e01a      	b.n	8008ada <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	79fa      	ldrb	r2, [r7, #7]
 8008ad0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 fa3a 	bl	8009f4c <USBD_LL_Init>

  return USBD_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d006      	beq.n	8008b04 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
 8008b02:	e001      	b.n	8008b08 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b04:	2302      	movs	r3, #2
 8008b06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fa65 	bl	8009fec <USBD_LL_Start>

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr

08008b40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	4611      	mov	r1, r2
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	4611      	mov	r1, r2
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
  return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe63 	bl	8009882 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d016      	beq.n	8008c0e <USBD_LL_SetupStage+0x6a>
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d81c      	bhi.n	8008c1e <USBD_LL_SetupStage+0x7a>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <USBD_LL_SetupStage+0x4a>
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d008      	beq.n	8008bfe <USBD_LL_SetupStage+0x5a>
 8008bec:	e017      	b.n	8008c1e <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9c6 	bl	8008f88 <USBD_StdDevReq>
    break;
 8008bfc:	e01a      	b.n	8008c34 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa28 	bl	800905c <USBD_StdItfReq>
    break;
 8008c0c:	e012      	b.n	8008c34 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa68 	bl	80090ec <USBD_StdEPReq>
    break;
 8008c1c:	e00a      	b.n	8008c34 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fa3d 	bl	800a0ac <USBD_LL_StallEP>
    break;
 8008c32:	bf00      	nop
  }

  return USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	460b      	mov	r3, r1
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d14b      	bne.n	8008cea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c58:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d134      	bne.n	8008cce <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d919      	bls.n	8008ca4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	1ad2      	subs	r2, r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d203      	bcs.n	8008c92 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	e002      	b.n	8008c98 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fee2 	bl	8009a66 <USBD_CtlContinueRx>
 8008ca2:	e038      	b.n	8008d16 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d105      	bne.n	8008cc6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fedf 	bl	8009a8a <USBD_CtlSendStatus>
 8008ccc:	e023      	b.n	8008d16 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008cd4:	2b05      	cmp	r3, #5
 8008cd6:	d11e      	bne.n	8008d16 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f001 f9e2 	bl	800a0ac <USBD_LL_StallEP>
 8008ce8:	e015      	b.n	8008d16 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00d      	beq.n	8008d12 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	d108      	bne.n	8008d12 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	7afa      	ldrb	r2, [r7, #11]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	4798      	blx	r3
 8008d10:	e001      	b.n	8008d16 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d12:	2302      	movs	r3, #2
 8008d14:	e000      	b.n	8008d18 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d17f      	bne.n	8008e34 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3314      	adds	r3, #20
 8008d38:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d15c      	bne.n	8008dfe <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d915      	bls.n	8008d7c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fe4c 	bl	8009a06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	2200      	movs	r2, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f001 fa45 	bl	800a204 <USBD_LL_PrepareReceive>
 8008d7a:	e04e      	b.n	8008e1a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6912      	ldr	r2, [r2, #16]
 8008d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d88:	fb01 f202 	mul.w	r2, r1, r2
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d11c      	bne.n	8008dcc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d316      	bcc.n	8008dcc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d20f      	bcs.n	8008dcc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dac:	2200      	movs	r2, #0
 8008dae:	2100      	movs	r1, #0
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fe28 	bl	8009a06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f001 fa1d 	bl	800a204 <USBD_LL_PrepareReceive>
 8008dca:	e026      	b.n	8008e1a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00a      	beq.n	8008dee <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d105      	bne.n	8008dee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008dee:	2180      	movs	r1, #128	; 0x80
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f001 f95b 	bl	800a0ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fe5a 	bl	8009ab0 <USBD_CtlReceiveStatus>
 8008dfc:	e00d      	b.n	8008e1a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d004      	beq.n	8008e12 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d103      	bne.n	8008e1a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f001 f949 	bl	800a0ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d11d      	bne.n	8008e60 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff fe81 	bl	8008b2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008e32:	e015      	b.n	8008e60 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00d      	beq.n	8008e5c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d108      	bne.n	8008e5c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	7afa      	ldrb	r2, [r7, #11]
 8008e54:	4611      	mov	r1, r2
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3
 8008e5a:	e001      	b.n	8008e60 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e000      	b.n	8008e62 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e72:	2340      	movs	r3, #64	; 0x40
 8008e74:	2200      	movs	r2, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f8d2 	bl	800a022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2240      	movs	r2, #64	; 0x40
 8008e8a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	2200      	movs	r2, #0
 8008e92:	2180      	movs	r1, #128	; 0x80
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f8c4 	bl	800a022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2240      	movs	r2, #64	; 0x40
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6852      	ldr	r2, [r2, #4]
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	4611      	mov	r1, r2
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4798      	blx	r3
  }

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2204      	movs	r2, #4
 8008f22:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr

08008f32 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d10b      	bne.n	8008f7c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	d005      	beq.n	8008fae <USBD_StdDevReq+0x26>
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d84f      	bhi.n	8009046 <USBD_StdDevReq+0xbe>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <USBD_StdDevReq+0x36>
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d14b      	bne.n	8009046 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
    break;
 8008fbc:	e048      	b.n	8009050 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b09      	cmp	r3, #9
 8008fc4:	d839      	bhi.n	800903a <USBD_StdDevReq+0xb2>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <USBD_StdDevReq+0x44>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	0800901d 	.word	0x0800901d
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	0800903b 	.word	0x0800903b
 8008fd8:	08009027 	.word	0x08009027
 8008fdc:	0800903b 	.word	0x0800903b
 8008fe0:	08008fff 	.word	0x08008fff
 8008fe4:	08008ff5 	.word	0x08008ff5
 8008fe8:	0800903b 	.word	0x0800903b
 8008fec:	08009013 	.word	0x08009013
 8008ff0:	08009009 	.word	0x08009009
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9da 	bl	80093b0 <USBD_GetDescriptor>
      break;
 8008ffc:	e022      	b.n	8009044 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 facf 	bl	80095a4 <USBD_SetAddress>
      break;
 8009006:	e01d      	b.n	8009044 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fb0e 	bl	800962c <USBD_SetConfig>
      break;
 8009010:	e018      	b.n	8009044 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fb97 	bl	8009748 <USBD_GetConfig>
      break;
 800901a:	e013      	b.n	8009044 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fbc7 	bl	80097b2 <USBD_GetStatus>
      break;
 8009024:	e00e      	b.n	8009044 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fbf5 	bl	8009818 <USBD_SetFeature>
      break;
 800902e:	e009      	b.n	8009044 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fc04 	bl	8009840 <USBD_ClrFeature>
      break;
 8009038:	e004      	b.n	8009044 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc5c 	bl	80098fa <USBD_CtlError>
      break;
 8009042:	bf00      	nop
    }
    break;
 8009044:	e004      	b.n	8009050 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fc56 	bl	80098fa <USBD_CtlError>
    break;
 800904e:	bf00      	nop
  }

  return ret;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop

0800905c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d005      	beq.n	8009082 <USBD_StdItfReq+0x26>
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d82e      	bhi.n	80090d8 <USBD_StdItfReq+0x7c>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <USBD_StdItfReq+0x26>
 800907e:	2b20      	cmp	r3, #32
 8009080:	d12a      	bne.n	80090d8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009088:	3b01      	subs	r3, #1
 800908a:	2b02      	cmp	r3, #2
 800908c:	d81d      	bhi.n	80090ca <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	889b      	ldrh	r3, [r3, #4]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d813      	bhi.n	80090c0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	4798      	blx	r3
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	88db      	ldrh	r3, [r3, #6]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d110      	bne.n	80090d4 <USBD_StdItfReq+0x78>
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10d      	bne.n	80090d4 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fce6 	bl	8009a8a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80090be:	e009      	b.n	80090d4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fc19 	bl	80098fa <USBD_CtlError>
      break;
 80090c8:	e004      	b.n	80090d4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fc14 	bl	80098fa <USBD_CtlError>
      break;
 80090d2:	e000      	b.n	80090d6 <USBD_StdItfReq+0x7a>
      break;
 80090d4:	bf00      	nop
    }
    break;
 80090d6:	e004      	b.n	80090e2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc0d 	bl	80098fa <USBD_CtlError>
    break;
 80090e0:	bf00      	nop
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	889b      	ldrh	r3, [r3, #4]
 80090fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009108:	2b40      	cmp	r3, #64	; 0x40
 800910a:	d007      	beq.n	800911c <USBD_StdEPReq+0x30>
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	f200 8144 	bhi.w	800939a <USBD_StdEPReq+0x2ae>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <USBD_StdEPReq+0x40>
 8009116:	2b20      	cmp	r3, #32
 8009118:	f040 813f 	bne.w	800939a <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
    break;
 800912a:	e13b      	b.n	80093a4 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009134:	2b20      	cmp	r3, #32
 8009136:	d10a      	bne.n	800914e <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]

      return ret;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	e12b      	b.n	80093a6 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d007      	beq.n	8009166 <USBD_StdEPReq+0x7a>
 8009156:	2b03      	cmp	r3, #3
 8009158:	f300 8119 	bgt.w	800938e <USBD_StdEPReq+0x2a2>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d072      	beq.n	8009246 <USBD_StdEPReq+0x15a>
 8009160:	2b01      	cmp	r3, #1
 8009162:	d03a      	beq.n	80091da <USBD_StdEPReq+0xee>
 8009164:	e113      	b.n	800938e <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800916c:	2b02      	cmp	r3, #2
 800916e:	d002      	beq.n	8009176 <USBD_StdEPReq+0x8a>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d015      	beq.n	80091a0 <USBD_StdEPReq+0xb4>
 8009174:	e02b      	b.n	80091ce <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <USBD_StdEPReq+0xaa>
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b80      	cmp	r3, #128	; 0x80
 8009180:	d009      	beq.n	8009196 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 ff90 	bl	800a0ac <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 ff8c 	bl	800a0ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009194:	e020      	b.n	80091d8 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fbae 	bl	80098fa <USBD_CtlError>
        break;
 800919e:	e01b      	b.n	80091d8 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	885b      	ldrh	r3, [r3, #2]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10e      	bne.n	80091c6 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <USBD_StdEPReq+0xda>
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b80      	cmp	r3, #128	; 0x80
 80091b2:	d008      	beq.n	80091c6 <USBD_StdEPReq+0xda>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	88db      	ldrh	r3, [r3, #6]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 ff73 	bl	800a0ac <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc5f 	bl	8009a8a <USBD_CtlSendStatus>

        break;
 80091cc:	e004      	b.n	80091d8 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fb92 	bl	80098fa <USBD_CtlError>
        break;
 80091d6:	bf00      	nop
      }
      break;
 80091d8:	e0de      	b.n	8009398 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d002      	beq.n	80091ea <USBD_StdEPReq+0xfe>
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d015      	beq.n	8009214 <USBD_StdEPReq+0x128>
 80091e8:	e026      	b.n	8009238 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <USBD_StdEPReq+0x11e>
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b80      	cmp	r3, #128	; 0x80
 80091f4:	d009      	beq.n	800920a <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 ff56 	bl	800a0ac <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009200:	2180      	movs	r1, #128	; 0x80
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 ff52 	bl	800a0ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009208:	e01c      	b.n	8009244 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb74 	bl	80098fa <USBD_CtlError>
        break;
 8009212:	e017      	b.n	8009244 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d112      	bne.n	8009242 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 ff5d 	bl	800a0ea <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fc2a 	bl	8009a8a <USBD_CtlSendStatus>
        }
        break;
 8009236:	e004      	b.n	8009242 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb5d 	bl	80098fa <USBD_CtlError>
        break;
 8009240:	e000      	b.n	8009244 <USBD_StdEPReq+0x158>
        break;
 8009242:	bf00      	nop
      }
      break;
 8009244:	e0a8      	b.n	8009398 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800924c:	2b02      	cmp	r3, #2
 800924e:	d002      	beq.n	8009256 <USBD_StdEPReq+0x16a>
 8009250:	2b03      	cmp	r3, #3
 8009252:	d031      	beq.n	80092b8 <USBD_StdEPReq+0x1cc>
 8009254:	e095      	b.n	8009382 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <USBD_StdEPReq+0x180>
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b80      	cmp	r3, #128	; 0x80
 8009260:	d004      	beq.n	800926c <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fb48 	bl	80098fa <USBD_CtlError>
          break;
 800926a:	e08f      	b.n	800938c <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800926c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da0b      	bge.n	800928c <USBD_StdEPReq+0x1a0>
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	3310      	adds	r3, #16
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	e00a      	b.n	80092a2 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2202      	movs	r2, #2
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fb8c 	bl	80099ce <USBD_CtlSendData>
          break;
 80092b6:	e069      	b.n	800938c <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80092b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da11      	bge.n	80092e4 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	3318      	adds	r3, #24
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d117      	bne.n	800930a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fb0c 	bl	80098fa <USBD_CtlError>
            break;
 80092e2:	e053      	b.n	800938c <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 faf9 	bl	80098fa <USBD_CtlError>
            break;
 8009308:	e040      	b.n	800938c <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800930a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	da0b      	bge.n	800932a <USBD_StdEPReq+0x23e>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	3310      	adds	r3, #16
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	3304      	adds	r3, #4
 8009328:	e00a      	b.n	8009340 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	4413      	add	r3, r2
 8009340:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <USBD_StdEPReq+0x262>
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d103      	bne.n	8009356 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e00e      	b.n	8009374 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fee4 	bl	800a128 <USBD_LL_IsStallEP>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2201      	movs	r2, #1
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e002      	b.n	8009374 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2202      	movs	r2, #2
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb27 	bl	80099ce <USBD_CtlSendData>
          break;
 8009380:	e004      	b.n	800938c <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fab8 	bl	80098fa <USBD_CtlError>
        break;
 800938a:	bf00      	nop
      }
      break;
 800938c:	e004      	b.n	8009398 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fab2 	bl	80098fa <USBD_CtlError>
      break;
 8009396:	bf00      	nop
    }
    break;
 8009398:	e004      	b.n	80093a4 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 faac 	bl	80098fa <USBD_CtlError>
    break;
 80093a2:	bf00      	nop
  }

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	885b      	ldrh	r3, [r3, #2]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	2b06      	cmp	r3, #6
 80093c6:	f200 80c9 	bhi.w	800955c <USBD_GetDescriptor+0x1ac>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <USBD_GetDescriptor+0x20>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	080093ed 	.word	0x080093ed
 80093d4:	08009405 	.word	0x08009405
 80093d8:	08009445 	.word	0x08009445
 80093dc:	0800955d 	.word	0x0800955d
 80093e0:	0800955d 	.word	0x0800955d
 80093e4:	08009509 	.word	0x08009509
 80093e8:	0800952f 	.word	0x0800952f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	f107 010a 	add.w	r1, r7, #10
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	60f8      	str	r0, [r7, #12]
    break;
 8009402:	e0b0      	b.n	8009566 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7c1b      	ldrb	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10d      	bne.n	8009428 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009414:	f107 020a 	add.w	r2, r7, #10
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	2202      	movs	r2, #2
 8009424:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009426:	e09e      	b.n	8009566 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	f107 020a 	add.w	r2, r7, #10
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	2202      	movs	r2, #2
 8009440:	701a      	strb	r2, [r3, #0]
    break;
 8009442:	e090      	b.n	8009566 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b05      	cmp	r3, #5
 800944c:	d856      	bhi.n	80094fc <USBD_GetDescriptor+0x14c>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <USBD_GetDescriptor+0xa4>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	0800946d 	.word	0x0800946d
 8009458:	08009485 	.word	0x08009485
 800945c:	0800949d 	.word	0x0800949d
 8009460:	080094b5 	.word	0x080094b5
 8009464:	080094cd 	.word	0x080094cd
 8009468:	080094e5 	.word	0x080094e5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 010a 	add.w	r1, r7, #10
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
      break;
 8009482:	e040      	b.n	8009506 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f107 010a 	add.w	r1, r7, #10
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	60f8      	str	r0, [r7, #12]
      break;
 800949a:	e034      	b.n	8009506 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 010a 	add.w	r1, r7, #10
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      break;
 80094b2:	e028      	b.n	8009506 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 010a 	add.w	r1, r7, #10
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
      break;
 80094ca:	e01c      	b.n	8009506 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7c12      	ldrb	r2, [r2, #16]
 80094d8:	f107 010a 	add.w	r1, r7, #10
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
 80094e0:	60f8      	str	r0, [r7, #12]
      break;
 80094e2:	e010      	b.n	8009506 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	7c12      	ldrb	r2, [r2, #16]
 80094f0:	f107 010a 	add.w	r1, r7, #10
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      break;
 80094fa:	e004      	b.n	8009506 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9fb 	bl	80098fa <USBD_CtlError>
      return;
 8009504:	e04b      	b.n	800959e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009506:	e02e      	b.n	8009566 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7c1b      	ldrb	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	f107 020a 	add.w	r2, r7, #10
 800951c:	4610      	mov	r0, r2
 800951e:	4798      	blx	r3
 8009520:	60f8      	str	r0, [r7, #12]
      break;
 8009522:	e020      	b.n	8009566 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9e7 	bl	80098fa <USBD_CtlError>
      return;
 800952c:	e037      	b.n	800959e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	7c1b      	ldrb	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10d      	bne.n	8009552 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f107 020a 	add.w	r2, r7, #10
 8009542:	4610      	mov	r0, r2
 8009544:	4798      	blx	r3
 8009546:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	2207      	movs	r2, #7
 800954e:	701a      	strb	r2, [r3, #0]
      break;
 8009550:	e009      	b.n	8009566 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f9d0 	bl	80098fa <USBD_CtlError>
      return;
 800955a:	e020      	b.n	800959e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9cb 	bl	80098fa <USBD_CtlError>
    return;
 8009564:	e01b      	b.n	800959e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009566:	897b      	ldrh	r3, [r7, #10]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d011      	beq.n	8009590 <USBD_GetDescriptor+0x1e0>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	88db      	ldrh	r3, [r3, #6]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00d      	beq.n	8009590 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	88da      	ldrh	r2, [r3, #6]
 8009578:	897b      	ldrh	r3, [r7, #10]
 800957a:	4293      	cmp	r3, r2
 800957c:	bf28      	it	cs
 800957e:	4613      	movcs	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009584:	897b      	ldrh	r3, [r7, #10]
 8009586:	461a      	mov	r2, r3
 8009588:	68f9      	ldr	r1, [r7, #12]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa1f 	bl	80099ce <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	88db      	ldrh	r3, [r3, #6]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa76 	bl	8009a8a <USBD_CtlSendStatus>
  }
}
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	889b      	ldrh	r3, [r3, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d130      	bne.n	8009618 <USBD_SetAddress+0x74>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d12c      	bne.n	8009618 <USBD_SetAddress+0x74>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	2b7f      	cmp	r3, #127	; 0x7f
 80095c4:	d828      	bhi.n	8009618 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	885b      	ldrh	r3, [r3, #2]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d104      	bne.n	80095e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f98b 	bl	80098fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e4:	e01d      	b.n	8009622 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7bfa      	ldrb	r2, [r7, #15]
 80095ea:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fdc4 	bl	800a180 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa46 	bl	8009a8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960c:	e009      	b.n	8009622 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009616:	e004      	b.n	8009622 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f96d 	bl	80098fa <USBD_CtlError>
  }
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	885b      	ldrh	r3, [r3, #2]
 800963a:	b2da      	uxtb	r2, r3
 800963c:	4b41      	ldr	r3, [pc, #260]	; (8009744 <USBD_SetConfig+0x118>)
 800963e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009640:	4b40      	ldr	r3, [pc, #256]	; (8009744 <USBD_SetConfig+0x118>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d904      	bls.n	8009652 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f955 	bl	80098fa <USBD_CtlError>
 8009650:	e075      	b.n	800973e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009658:	2b02      	cmp	r3, #2
 800965a:	d002      	beq.n	8009662 <USBD_SetConfig+0x36>
 800965c:	2b03      	cmp	r3, #3
 800965e:	d023      	beq.n	80096a8 <USBD_SetConfig+0x7c>
 8009660:	e062      	b.n	8009728 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009662:	4b38      	ldr	r3, [pc, #224]	; (8009744 <USBD_SetConfig+0x118>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01a      	beq.n	80096a0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800966a:	4b36      	ldr	r3, [pc, #216]	; (8009744 <USBD_SetConfig+0x118>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2203      	movs	r2, #3
 8009678:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800967c:	4b31      	ldr	r3, [pc, #196]	; (8009744 <USBD_SetConfig+0x118>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff fa5c 	bl	8008b40 <USBD_SetClassConfig>
 8009688:	4603      	mov	r3, r0
 800968a:	2b02      	cmp	r3, #2
 800968c:	d104      	bne.n	8009698 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f932 	bl	80098fa <USBD_CtlError>
          return;
 8009696:	e052      	b.n	800973e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f9f6 	bl	8009a8a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800969e:	e04e      	b.n	800973e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f9f2 	bl	8009a8a <USBD_CtlSendStatus>
      break;
 80096a6:	e04a      	b.n	800973e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096a8:	4b26      	ldr	r3, [pc, #152]	; (8009744 <USBD_SetConfig+0x118>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d112      	bne.n	80096d6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80096b8:	4b22      	ldr	r3, [pc, #136]	; (8009744 <USBD_SetConfig+0x118>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	461a      	mov	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80096c2:	4b20      	ldr	r3, [pc, #128]	; (8009744 <USBD_SetConfig+0x118>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fa58 	bl	8008b7e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f9db 	bl	8009a8a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80096d4:	e033      	b.n	800973e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80096d6:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <USBD_SetConfig+0x118>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d01d      	beq.n	8009720 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff fa46 	bl	8008b7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096f2:	4b14      	ldr	r3, [pc, #80]	; (8009744 <USBD_SetConfig+0x118>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096fc:	4b11      	ldr	r3, [pc, #68]	; (8009744 <USBD_SetConfig+0x118>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fa1c 	bl	8008b40 <USBD_SetClassConfig>
 8009708:	4603      	mov	r3, r0
 800970a:	2b02      	cmp	r3, #2
 800970c:	d104      	bne.n	8009718 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8f2 	bl	80098fa <USBD_CtlError>
          return;
 8009716:	e012      	b.n	800973e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f9b6 	bl	8009a8a <USBD_CtlSendStatus>
      break;
 800971e:	e00e      	b.n	800973e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f9b2 	bl	8009a8a <USBD_CtlSendStatus>
      break;
 8009726:	e00a      	b.n	800973e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8e5 	bl	80098fa <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009730:	4b04      	ldr	r3, [pc, #16]	; (8009744 <USBD_SetConfig+0x118>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fa21 	bl	8008b7e <USBD_ClrClassConfig>
      break;
 800973c:	bf00      	nop
    }
  }
}
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	2000035c 	.word	0x2000035c

08009748 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	88db      	ldrh	r3, [r3, #6]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d004      	beq.n	8009764 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f8cc 	bl	80098fa <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009762:	e022      	b.n	80097aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800976a:	2b02      	cmp	r3, #2
 800976c:	dc02      	bgt.n	8009774 <USBD_GetConfig+0x2c>
 800976e:	2b00      	cmp	r3, #0
 8009770:	dc03      	bgt.n	800977a <USBD_GetConfig+0x32>
 8009772:	e015      	b.n	80097a0 <USBD_GetConfig+0x58>
 8009774:	2b03      	cmp	r3, #3
 8009776:	d00b      	beq.n	8009790 <USBD_GetConfig+0x48>
 8009778:	e012      	b.n	80097a0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3308      	adds	r3, #8
 8009784:	2201      	movs	r2, #1
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f920 	bl	80099ce <USBD_CtlSendData>
      break;
 800978e:	e00c      	b.n	80097aa <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	2201      	movs	r2, #1
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f918 	bl	80099ce <USBD_CtlSendData>
      break;
 800979e:	e004      	b.n	80097aa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8a9 	bl	80098fa <USBD_CtlError>
      break;
 80097a8:	bf00      	nop
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097c2:	3b01      	subs	r3, #1
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d81e      	bhi.n	8009806 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	88db      	ldrh	r3, [r3, #6]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d004      	beq.n	80097da <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f891 	bl	80098fa <USBD_CtlError>
      break;
 80097d8:	e01a      	b.n	8009810 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d005      	beq.n	80097f6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f043 0202 	orr.w	r2, r3, #2
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	330c      	adds	r3, #12
 80097fa:	2202      	movs	r2, #2
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f8e5 	bl	80099ce <USBD_CtlSendData>
    break;
 8009804:	e004      	b.n	8009810 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f876 	bl	80098fa <USBD_CtlError>
    break;
 800980e:	bf00      	nop
  }
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d106      	bne.n	8009838 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f929 	bl	8009a8a <USBD_CtlSendStatus>
  }

}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009850:	3b01      	subs	r3, #1
 8009852:	2b02      	cmp	r3, #2
 8009854:	d80b      	bhi.n	800986e <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d10c      	bne.n	8009878 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f90f 	bl	8009a8a <USBD_CtlSendStatus>
    }
    break;
 800986c:	e004      	b.n	8009878 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f842 	bl	80098fa <USBD_CtlError>
    break;
 8009876:	e000      	b.n	800987a <USBD_ClrFeature+0x3a>
    break;
 8009878:	bf00      	nop
  }
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	785a      	ldrb	r2, [r3, #1]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	3302      	adds	r3, #2
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	3303      	adds	r3, #3
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4413      	add	r3, r2
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3304      	adds	r3, #4
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	3305      	adds	r3, #5
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4413      	add	r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3306      	adds	r3, #6
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	3307      	adds	r3, #7
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	021b      	lsls	r3, r3, #8
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4413      	add	r3, r2
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	80da      	strh	r2, [r3, #6]

}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bc80      	pop	{r7}
 80098f8:	4770      	bx	lr

080098fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009904:	2180      	movs	r1, #128	; 0x80
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fbd0 	bl	800a0ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800990c:	2100      	movs	r1, #0
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fbcc 	bl	800a0ac <USBD_LL_StallEP>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d032      	beq.n	8009998 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f834 	bl	80099a0 <USBD_GetLen>
 8009938:	4603      	mov	r3, r0
 800993a:	3301      	adds	r3, #1
 800993c:	b29b      	uxth	r3, r3
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	75fa      	strb	r2, [r7, #23]
 800994c:	461a      	mov	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	7812      	ldrb	r2, [r2, #0]
 8009956:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	75fa      	strb	r2, [r7, #23]
 800995e:	461a      	mov	r2, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4413      	add	r3, r2
 8009964:	2203      	movs	r2, #3
 8009966:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009968:	e012      	b.n	8009990 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	60fa      	str	r2, [r7, #12]
 8009970:	7dfa      	ldrb	r2, [r7, #23]
 8009972:	1c51      	adds	r1, r2, #1
 8009974:	75f9      	strb	r1, [r7, #23]
 8009976:	4611      	mov	r1, r2
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	440a      	add	r2, r1
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	75fa      	strb	r2, [r7, #23]
 8009986:	461a      	mov	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4413      	add	r3, r2
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e8      	bne.n	800996a <USBD_GetString+0x4e>
    }
  }
}
 8009998:	bf00      	nop
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80099ac:	e005      	b.n	80099ba <USBD_GetLen+0x1a>
    {
        len++;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	3301      	adds	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3301      	adds	r3, #1
 80099b8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f5      	bne.n	80099ae <USBD_GetLen+0xe>
    }

    return len;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr

080099ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	4613      	mov	r3, r2
 80099da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2202      	movs	r2, #2
 80099e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80099e4:	88fa      	ldrh	r2, [r7, #6]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80099ea:	88fa      	ldrh	r2, [r7, #6]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fbe1 	bl	800a1be <USBD_LL_Transmit>

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	4613      	mov	r3, r2
 8009a12:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	2100      	movs	r1, #0
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 fbcf 	bl	800a1be <USBD_LL_Transmit>

  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	4613      	mov	r3, r2
 8009a36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009a48:	88fa      	ldrh	r2, [r7, #6]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	2100      	movs	r1, #0
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 fbd4 	bl	800a204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	4613      	mov	r3, r2
 8009a72:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a74:	88fb      	ldrh	r3, [r7, #6]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 fbc2 	bl	800a204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2204      	movs	r2, #4
 8009a96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fb8c 	bl	800a1be <USBD_LL_Transmit>

  return USBD_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2205      	movs	r2, #5
 8009abc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fb9c 	bl	800a204 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009adc:	2200      	movs	r2, #0
 8009ade:	4912      	ldr	r1, [pc, #72]	; (8009b28 <MX_USB_DEVICE_Init+0x50>)
 8009ae0:	4812      	ldr	r0, [pc, #72]	; (8009b2c <MX_USB_DEVICE_Init+0x54>)
 8009ae2:	f7fe ffd3 	bl	8008a8c <USBD_Init>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009aec:	f7f7 fb36 	bl	800115c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009af0:	490f      	ldr	r1, [pc, #60]	; (8009b30 <MX_USB_DEVICE_Init+0x58>)
 8009af2:	480e      	ldr	r0, [pc, #56]	; (8009b2c <MX_USB_DEVICE_Init+0x54>)
 8009af4:	f7fe fff5 	bl	8008ae2 <USBD_RegisterClass>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009afe:	f7f7 fb2d 	bl	800115c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b02:	490c      	ldr	r1, [pc, #48]	; (8009b34 <MX_USB_DEVICE_Init+0x5c>)
 8009b04:	4809      	ldr	r0, [pc, #36]	; (8009b2c <MX_USB_DEVICE_Init+0x54>)
 8009b06:	f7fe ffab 	bl	8008a60 <USBD_CUSTOM_HID_RegisterInterface>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b10:	f7f7 fb24 	bl	800115c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b14:	4805      	ldr	r0, [pc, #20]	; (8009b2c <MX_USB_DEVICE_Init+0x54>)
 8009b16:	f7fe fffd 	bl	8008b14 <USBD_Start>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b20:	f7f7 fb1c 	bl	800115c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b24:	bf00      	nop
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000134 	.word	0x20000134
 8009b2c:	20000360 	.word	0x20000360
 8009b30:	2000000c 	.word	0x2000000c
 8009b34:	20000124 	.word	0x20000124

08009b38 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr

08009b46 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009b46:	b480      	push	{r7}
 8009b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009b4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr

08009b54 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	460a      	mov	r2, r1
 8009b5e:	71fb      	strb	r3, [r7, #7]
 8009b60:	4613      	mov	r3, r2
 8009b62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009b64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr

08009b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2212      	movs	r2, #18
 8009b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b82:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000150 	.word	0x20000150

08009b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2204      	movs	r2, #4
 8009ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ba6:	4b03      	ldr	r3, [pc, #12]	; (8009bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bc80      	pop	{r7}
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20000164 	.word	0x20000164

08009bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4907      	ldr	r1, [pc, #28]	; (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
 8009bce:	4808      	ldr	r0, [pc, #32]	; (8009bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd0:	f7ff fea4 	bl	800991c <USBD_GetString>
 8009bd4:	e004      	b.n	8009be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	4904      	ldr	r1, [pc, #16]	; (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
 8009bda:	4805      	ldr	r0, [pc, #20]	; (8009bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bdc:	f7ff fe9e 	bl	800991c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009be0:	4b02      	ldr	r3, [pc, #8]	; (8009bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200005fc 	.word	0x200005fc
 8009bf0:	0800a340 	.word	0x0800a340

08009bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	4904      	ldr	r1, [pc, #16]	; (8009c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c04:	4804      	ldr	r0, [pc, #16]	; (8009c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c06:	f7ff fe89 	bl	800991c <USBD_GetString>
  return USBD_StrDesc;
 8009c0a:	4b02      	ldr	r3, [pc, #8]	; (8009c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200005fc 	.word	0x200005fc
 8009c18:	0800a360 	.word	0x0800a360

08009c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	221a      	movs	r2, #26
 8009c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c2e:	f000 f843 	bl	8009cb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c32:	4b02      	ldr	r3, [pc, #8]	; (8009c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000168 	.word	0x20000168

08009c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4907      	ldr	r1, [pc, #28]	; (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c56:	4808      	ldr	r0, [pc, #32]	; (8009c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c58:	f7ff fe60 	bl	800991c <USBD_GetString>
 8009c5c:	e004      	b.n	8009c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4904      	ldr	r1, [pc, #16]	; (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c62:	4805      	ldr	r0, [pc, #20]	; (8009c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c64:	f7ff fe5a 	bl	800991c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c68:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	200005fc 	.word	0x200005fc
 8009c78:	0800a374 	.word	0x0800a374

08009c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4907      	ldr	r1, [pc, #28]	; (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c92:	4808      	ldr	r0, [pc, #32]	; (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c94:	f7ff fe42 	bl	800991c <USBD_GetString>
 8009c98:	e004      	b.n	8009ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4904      	ldr	r1, [pc, #16]	; (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c9e:	4805      	ldr	r0, [pc, #20]	; (8009cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ca0:	f7ff fe3c 	bl	800991c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200005fc 	.word	0x200005fc
 8009cb4:	0800a388 	.word	0x0800a388

08009cb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <Get_SerialNum+0x44>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <Get_SerialNum+0x48>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cca:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <Get_SerialNum+0x4c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cde:	2208      	movs	r2, #8
 8009ce0:	4909      	ldr	r1, [pc, #36]	; (8009d08 <Get_SerialNum+0x50>)
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 f814 	bl	8009d10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ce8:	2204      	movs	r2, #4
 8009cea:	4908      	ldr	r1, [pc, #32]	; (8009d0c <Get_SerialNum+0x54>)
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f000 f80f 	bl	8009d10 <IntToUnicode>
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	1ff80050 	.word	0x1ff80050
 8009d00:	1ff80054 	.word	0x1ff80054
 8009d04:	1ff80058 	.word	0x1ff80058
 8009d08:	2000016a 	.word	0x2000016a
 8009d0c:	2000017a 	.word	0x2000017a

08009d10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]
 8009d26:	e027      	b.n	8009d78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	0f1b      	lsrs	r3, r3, #28
 8009d2c:	2b09      	cmp	r3, #9
 8009d2e:	d80b      	bhi.n	8009d48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	0f1b      	lsrs	r3, r3, #28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	440b      	add	r3, r1
 8009d40:	3230      	adds	r2, #48	; 0x30
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	701a      	strb	r2, [r3, #0]
 8009d46:	e00a      	b.n	8009d5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4619      	mov	r1, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	440b      	add	r3, r1
 8009d58:	3237      	adds	r2, #55	; 0x37
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	3301      	adds	r3, #1
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	3301      	adds	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
 8009d78:	7dfa      	ldrb	r2, [r7, #23]
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d3d3      	bcc.n	8009d28 <IntToUnicode+0x18>
  }
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d106      	bne.n	8009dac <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <HAL_PCDEx_SetConnectionState+0x38>)
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <HAL_PCDEx_SetConnectionState+0x38>)
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009daa:	e005      	b.n	8009db8 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <HAL_PCDEx_SetConnectionState+0x38>)
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <HAL_PCDEx_SetConnectionState+0x38>)
 8009db2:	f023 0301 	bic.w	r3, r3, #1
 8009db6:	6053      	str	r3, [r2, #4]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40010000 	.word	0x40010000

08009dc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0d      	ldr	r2, [pc, #52]	; (8009e0c <HAL_PCD_MspInit+0x44>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d113      	bne.n	8009e02 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009dda:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <HAL_PCD_MspInit+0x48>)
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	4a0c      	ldr	r2, [pc, #48]	; (8009e10 <HAL_PCD_MspInit+0x48>)
 8009de0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009de4:	6253      	str	r3, [r2, #36]	; 0x24
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <HAL_PCD_MspInit+0x48>)
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	2014      	movs	r0, #20
 8009df8:	f7f8 fb0d 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009dfc:	2014      	movs	r0, #20
 8009dfe:	f7f8 fb26 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	40005c00 	.word	0x40005c00
 8009e10:	40023800 	.word	0x40023800

08009e14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fe feba 	bl	8008ba4 <USBD_LL_SetupStage>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	440b      	add	r3, r1
 8009e58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fe feec 	bl	8008c3e <USBD_LL_DataOutStage>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e80:	78fa      	ldrb	r2, [r7, #3]
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	440b      	add	r3, r1
 8009e8e:	333c      	adds	r3, #60	; 0x3c
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	4619      	mov	r1, r3
 8009e96:	f7fe ff43 	bl	8008d20 <USBD_LL_DataInStage>
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff f84e 	bl	8008f52 <USBD_LL_SOF>
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d001      	beq.n	8009ed6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ed2:	f7f7 f943 	bl	800115c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff f803 	bl	8008eec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe ffbc 	bl	8008e6a <USBD_LL_Reset>
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fffd 	bl	8008f0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <HAL_PCD_SuspendCallback+0x30>)
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	4a03      	ldr	r2, [pc, #12]	; (8009f2c <HAL_PCD_SuspendCallback+0x30>)
 8009f1e:	f043 0306 	orr.w	r3, r3, #6
 8009f22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	e000ed00 	.word	0xe000ed00

08009f30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe fff7 	bl	8008f32 <USBD_LL_Resume>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f54:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009f64:	4b1f      	ldr	r3, [pc, #124]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f66:	4a20      	ldr	r2, [pc, #128]	; (8009fe8 <USBD_LL_Init+0x9c>)
 8009f68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f6a:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f70:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f72:	2202      	movs	r2, #2
 8009f74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f76:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f78:	2202      	movs	r2, #2
 8009f7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f7c:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f82:	4b18      	ldr	r3, [pc, #96]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f88:	4816      	ldr	r0, [pc, #88]	; (8009fe4 <USBD_LL_Init+0x98>)
 8009f8a:	f7f8 fd91 	bl	8002ab0 <HAL_PCD_Init>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009f94:	f7f7 f8e2 	bl	800115c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f9e:	2318      	movs	r3, #24
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f7fa f957 	bl	8004256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fae:	2358      	movs	r3, #88	; 0x58
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2180      	movs	r1, #128	; 0x80
 8009fb4:	f7fa f94f 	bl	8004256 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fbe:	2398      	movs	r3, #152	; 0x98
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2181      	movs	r1, #129	; 0x81
 8009fc4:	f7fa f947 	bl	8004256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fce:	23d8      	movs	r3, #216	; 0xd8
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	f7fa f93f 	bl	8004256 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200007fc 	.word	0x200007fc
 8009fe8:	40005c00 	.word	0x40005c00

08009fec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a002:	4618      	mov	r0, r3
 800a004:	f7f8 fe32 	bl	8002c6c <HAL_PCD_Start>
 800a008:	4603      	mov	r3, r0
 800a00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f932 	bl	800a278 <USBD_Get_USB_Status>
 800a014:	4603      	mov	r3, r0
 800a016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a018:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	4608      	mov	r0, r1
 800a02c:	4611      	mov	r1, r2
 800a02e:	461a      	mov	r2, r3
 800a030:	4603      	mov	r3, r0
 800a032:	70fb      	strb	r3, [r7, #3]
 800a034:	460b      	mov	r3, r1
 800a036:	70bb      	strb	r3, [r7, #2]
 800a038:	4613      	mov	r3, r2
 800a03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a04a:	78bb      	ldrb	r3, [r7, #2]
 800a04c:	883a      	ldrh	r2, [r7, #0]
 800a04e:	78f9      	ldrb	r1, [r7, #3]
 800a050:	f7f8 ff4e 	bl	8002ef0 <HAL_PCD_EP_Open>
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 f90c 	bl	800a278 <USBD_Get_USB_Status>
 800a060:	4603      	mov	r3, r0
 800a062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a064:	7bbb      	ldrb	r3, [r7, #14]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	460b      	mov	r3, r1
 800a078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f8 ff95 	bl	8002fbc <HAL_PCD_EP_Close>
 800a092:	4603      	mov	r3, r0
 800a094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f8ed 	bl	800a278 <USBD_Get_USB_Status>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7f9 f83e 	bl	800314c <HAL_PCD_EP_SetStall>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 f8ce 	bl	800a278 <USBD_Get_USB_Status>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7f9 f871 	bl	80031f0 <HAL_PCD_EP_ClrStall>
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 f8af 	bl	800a278 <USBD_Get_USB_Status>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a13a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a140:	2b00      	cmp	r3, #0
 800a142:	da0c      	bge.n	800a15e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14a:	68f9      	ldr	r1, [r7, #12]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	440b      	add	r3, r1
 800a158:	3302      	adds	r3, #2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	e00b      	b.n	800a176 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a164:	68f9      	ldr	r1, [r7, #12]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a174:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bc80      	pop	{r7}
 800a17e:	4770      	bx	lr

0800a180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7f8 fe81 	bl	8002ea6 <HAL_PCD_SetAddress>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f864 	bl	800a278 <USBD_Get_USB_Status>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b086      	sub	sp, #24
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	72fb      	strb	r3, [r7, #11]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a1e0:	893b      	ldrh	r3, [r7, #8]
 800a1e2:	7af9      	ldrb	r1, [r7, #11]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	f7f8 ff6e 	bl	80030c6 <HAL_PCD_EP_Transmit>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 f841 	bl	800a278 <USBD_Get_USB_Status>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	461a      	mov	r2, r3
 800a210:	460b      	mov	r3, r1
 800a212:	72fb      	strb	r3, [r7, #11]
 800a214:	4613      	mov	r3, r2
 800a216:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a226:	893b      	ldrh	r3, [r7, #8]
 800a228:	7af9      	ldrb	r1, [r7, #11]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	f7f8 ff0e 	bl	800304c <HAL_PCD_EP_Receive>
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	4618      	mov	r0, r3
 800a238:	f000 f81e 	bl	800a278 <USBD_Get_USB_Status>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a240:	7dbb      	ldrb	r3, [r7, #22]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <USBD_static_malloc+0x14>)
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bc80      	pop	{r7}
 800a25e:	4770      	bx	lr
 800a260:	20000ae8 	.word	0x20000ae8

0800a264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]

}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr
	...

0800a278 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d817      	bhi.n	800a2bc <USBD_Get_USB_Status+0x44>
 800a28c:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <USBD_Get_USB_Status+0x1c>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2a5 	.word	0x0800a2a5
 800a298:	0800a2ab 	.word	0x0800a2ab
 800a29c:	0800a2b1 	.word	0x0800a2b1
 800a2a0:	0800a2b7 	.word	0x0800a2b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a8:	e00b      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ae:	e008      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b4:	e005      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ba:	e002      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c0:	bf00      	nop
  }
  return usb_status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bc80      	pop	{r7}
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop

0800a2d0 <__libc_init_array>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	2600      	movs	r6, #0
 800a2d4:	4d0c      	ldr	r5, [pc, #48]	; (800a308 <__libc_init_array+0x38>)
 800a2d6:	4c0d      	ldr	r4, [pc, #52]	; (800a30c <__libc_init_array+0x3c>)
 800a2d8:	1b64      	subs	r4, r4, r5
 800a2da:	10a4      	asrs	r4, r4, #2
 800a2dc:	42a6      	cmp	r6, r4
 800a2de:	d109      	bne.n	800a2f4 <__libc_init_array+0x24>
 800a2e0:	f000 f822 	bl	800a328 <_init>
 800a2e4:	2600      	movs	r6, #0
 800a2e6:	4d0a      	ldr	r5, [pc, #40]	; (800a310 <__libc_init_array+0x40>)
 800a2e8:	4c0a      	ldr	r4, [pc, #40]	; (800a314 <__libc_init_array+0x44>)
 800a2ea:	1b64      	subs	r4, r4, r5
 800a2ec:	10a4      	asrs	r4, r4, #2
 800a2ee:	42a6      	cmp	r6, r4
 800a2f0:	d105      	bne.n	800a2fe <__libc_init_array+0x2e>
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f8:	4798      	blx	r3
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	e7ee      	b.n	800a2dc <__libc_init_array+0xc>
 800a2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a302:	4798      	blx	r3
 800a304:	3601      	adds	r6, #1
 800a306:	e7f2      	b.n	800a2ee <__libc_init_array+0x1e>
 800a308:	0800a3c4 	.word	0x0800a3c4
 800a30c:	0800a3c4 	.word	0x0800a3c4
 800a310:	0800a3c4 	.word	0x0800a3c4
 800a314:	0800a3c8 	.word	0x0800a3c8

0800a318 <memset>:
 800a318:	4603      	mov	r3, r0
 800a31a:	4402      	add	r2, r0
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d100      	bne.n	800a322 <memset+0xa>
 800a320:	4770      	bx	lr
 800a322:	f803 1b01 	strb.w	r1, [r3], #1
 800a326:	e7f9      	b.n	800a31c <memset+0x4>

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
