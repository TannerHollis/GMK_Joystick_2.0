
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a434  0800a434  0001a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b0  0800a4b0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b8  0800a4b8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b8  0800a4b8  0001a4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000184  0800a644  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800a644  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013593  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341c  00000000  00000000  00033740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ceb  00000000  00000000  00038a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001536c  00000000  00000000  00050733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f3c  00000000  00000000  00065a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec9db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  000eca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a41c 	.word	0x0800a41c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a41c 	.word	0x0800a41c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe9e 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f9bf 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fb1f 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 faff 	bl	80010cc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f875 	bl	8009bbc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 fa6f 	bl	8000fb4 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 fa05 	bl	8000ee4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	489d      	ldr	r0, [pc, #628]	; (8000d50 <main+0x298>)
 8000adc:	f004 fa74 	bl	8004fc8 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	489b      	ldr	r0, [pc, #620]	; (8000d50 <main+0x298>)
 8000ae4:	f004 fb02 	bl	80050ec <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4899      	ldr	r0, [pc, #612]	; (8000d50 <main+0x298>)
 8000aec:	f004 fafe 	bl	80050ec <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c98      	ldr	r4, [pc, #608]	; (8000d54 <main+0x29c>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a98      	ldr	r2, [pc, #608]	; (8000d58 <main+0x2a0>)
 8000af6:	4999      	ldr	r1, [pc, #612]	; (8000d5c <main+0x2a4>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fcd3 	bl	80014a4 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  failed_tx = 0;
 8000b16:	4b92      	ldr	r3, [pc, #584]	; (8000d60 <main+0x2a8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
  failed_tx_max = 0;
 8000b1c:	4b91      	ldr	r3, [pc, #580]	; (8000d64 <main+0x2ac>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	801a      	strh	r2, [r3, #0]
  failed_tx_avg = 0;
 8000b22:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <main+0x2b0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b2e:	e009      	b.n	8000b44 <main+0x8c>
  	  event_state[i] = EVENT_WAIT;
 8000b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b34:	4a8d      	ldr	r2, [pc, #564]	; (8000d6c <main+0x2b4>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	daf1      	bge.n	8000b30 <main+0x78>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b4c:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <main+0x2b8>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b86      	ldr	r3, [pc, #536]	; (8000d6c <main+0x2b4>)
 8000b54:	5c9b      	ldrb	r3, [r3, r2]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	f200 8139 	bhi.w	8000dce <main+0x316>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <main+0xac>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b79 	.word	0x08000b79
 8000b68:	08000b95 	.word	0x08000b95
 8000b6c:	08000ba1 	.word	0x08000ba1
 8000b70:	08000ba9 	.word	0x08000ba9
 8000b74:	08000d33 	.word	0x08000d33
		case EVENT_WAIT:
			controller.buttons.a = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000b78:	2104      	movs	r1, #4
 8000b7a:	487e      	ldr	r0, [pc, #504]	; (8000d74 <main+0x2bc>)
 8000b7c:	f001 fff4 	bl	8002b68 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	b2d9      	uxtb	r1, r3
 8000b88:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <main+0x2c0>)
 8000b8a:	7853      	ldrb	r3, [r2, #1]
 8000b8c:	f361 1304 	bfi	r3, r1, #4, #1
 8000b90:	7053      	strb	r3, [r2, #1]
			break;
 8000b92:	e11c      	b.n	8000dce <main+0x316>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b94:	2202      	movs	r2, #2
 8000b96:	4971      	ldr	r1, [pc, #452]	; (8000d5c <main+0x2a4>)
 8000b98:	4878      	ldr	r0, [pc, #480]	; (8000d7c <main+0x2c4>)
 8000b9a:	f000 ffe5 	bl	8001b68 <HAL_ADC_Start_DMA>
			break;
 8000b9e:	e116      	b.n	8000dce <main+0x316>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000ba0:	2004      	movs	r0, #4
 8000ba2:	f000 fae9 	bl	8001178 <write_next_event_state>
			break;
 8000ba6:	e112      	b.n	8000dce <main+0x316>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000ba8:	486a      	ldr	r0, [pc, #424]	; (8000d54 <main+0x29c>)
 8000baa:	f000 fcc7 	bl	800153c <Joystick_Update>
			uint8_t invert_x = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000bba:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <main+0x2c8>)
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000bbe:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <main+0x2c8>)
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000bc2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d004      	beq.n	8000bd4 <main+0x11c>
 8000bca:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <main+0x29c>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	e001      	b.n	8000bd8 <main+0x120>
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <main+0x29c>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <main+0x134>
 8000be2:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <main+0x29c>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	e001      	b.n	8000bf0 <main+0x138>
 8000bec:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <main+0x29c>)
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bf2:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <main+0x2c0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bf8:	4b5f      	ldr	r3, [pc, #380]	; (8000d78 <main+0x2c0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000c00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c02:	f7ff fd85 	bl	8000710 <__aeabi_fcmpgt>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d109      	bne.n	8000c20 <main+0x168>
 8000c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c12:	4619      	mov	r1, r3
 8000c14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c16:	f7ff fd5d 	bl	80006d4 <__aeabi_fcmplt>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d013      	beq.n	8000c48 <main+0x190>
				controller.joysticks._bits[1] += (int16_t)(val_x * -(float)INT16_MAX);
 8000c20:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <main+0x2c0>)
 8000c22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c26:	b29c      	uxth	r4, r3
 8000c28:	4956      	ldr	r1, [pc, #344]	; (8000d84 <main+0x2cc>)
 8000c2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c2c:	f7ff fbb4 	bl	8000398 <__aeabi_fmul>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd76 	bl	8000724 <__aeabi_f2iz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4423      	add	r3, r4
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <main+0x2c0>)
 8000c46:	809a      	strh	r2, [r3, #4]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fd60 	bl	8000710 <__aeabi_fcmpgt>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <main+0x1b2>
 8000c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c60:	f7ff fd38 	bl	80006d4 <__aeabi_fcmplt>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d013      	beq.n	8000c92 <main+0x1da>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <main+0x2c0>)
 8000c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c70:	b29c      	uxth	r4, r3
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <main+0x2d0>)
 8000c74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c76:	f7ff fb8f 	bl	8000398 <__aeabi_fmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd51 	bl	8000724 <__aeabi_f2iz>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4423      	add	r3, r4
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <main+0x2c0>)
 8000c90:	805a      	strh	r2, [r3, #2]
			}
			hid_output_data.report_id = 1;
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <main+0x2d4>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
			hid_output_data.buttons[0] = lowByte(controller.buttons._bits);
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <main+0x2c0>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <main+0x2d4>)
 8000ca0:	705a      	strb	r2, [r3, #1]
			hid_output_data.buttons[1] = highByte(controller.buttons._bits);
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <main+0x2c0>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <main+0x2d4>)
 8000cae:	709a      	strb	r2, [r3, #2]
			hid_output_data.joysticks[0] = lowByte(controller.joysticks.left.x);
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <main+0x2c0>)
 8000cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <main+0x2d4>)
 8000cba:	70da      	strb	r2, [r3, #3]
			hid_output_data.joysticks[1] = highByte(controller.joysticks.left.x);
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <main+0x2c0>)
 8000cbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cc2:	121b      	asrs	r3, r3, #8
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <main+0x2d4>)
 8000cca:	711a      	strb	r2, [r3, #4]
			hid_output_data.joysticks[2] = lowByte(controller.joysticks.left.y);
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <main+0x2c0>)
 8000cce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <main+0x2d4>)
 8000cd6:	715a      	strb	r2, [r3, #5]
			hid_output_data.joysticks[3] = highByte(controller.joysticks.left.y);
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <main+0x2c0>)
 8000cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cde:	121b      	asrs	r3, r3, #8
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <main+0x2d4>)
 8000ce6:	719a      	strb	r2, [r3, #6]
			hid_output_data.joysticks[4] = lowByte(controller.joysticks.right.x);
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <main+0x2c0>)
 8000cea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <main+0x2d4>)
 8000cf2:	71da      	strb	r2, [r3, #7]
			hid_output_data.joysticks[5] = highByte(controller.joysticks.right.x);
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0x2c0>)
 8000cf6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cfa:	121b      	asrs	r3, r3, #8
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <main+0x2d4>)
 8000d02:	721a      	strb	r2, [r3, #8]
			hid_output_data.joysticks[6] = lowByte(controller.joysticks.right.y);
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <main+0x2c0>)
 8000d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <main+0x2d4>)
 8000d0e:	725a      	strb	r2, [r3, #9]
			hid_output_data.joysticks[7] = highByte(controller.joysticks.right.y);
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <main+0x2c0>)
 8000d12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d16:	121b      	asrs	r3, r3, #8
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <main+0x2d4>)
 8000d1e:	729a      	strb	r2, [r3, #10]
			hid_output_data.triggers[0] = controller.triggers.left;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <main+0x2c0>)
 8000d22:	7a9a      	ldrb	r2, [r3, #10]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <main+0x2d4>)
 8000d26:	72da      	strb	r2, [r3, #11]
			hid_output_data.triggers[1] = controller.triggers.right;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <main+0x2c0>)
 8000d2a:	7ada      	ldrb	r2, [r3, #11]
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <main+0x2d4>)
 8000d2e:	731a      	strb	r2, [r3, #12]
			break;
 8000d30:	e04d      	b.n	8000dce <main+0x316>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			if(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&hid_output_data, sizeof(hid_output_data)) == USBD_OK)
 8000d32:	220d      	movs	r2, #13
 8000d34:	4915      	ldr	r1, [pc, #84]	; (8000d8c <main+0x2d4>)
 8000d36:	4816      	ldr	r0, [pc, #88]	; (8000d90 <main+0x2d8>)
 8000d38:	f007 fe4c 	bl	80089d4 <USBD_CUSTOM_HID_SendReport>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d128      	bne.n	8000d94 <main+0x2dc>
			{
				write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000d42:	2004      	movs	r0, #4
 8000d44:	f000 fa18 	bl	8001178 <write_next_event_state>
				failed_tx = 0;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <main+0x2a8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
			{
				failed_tx++;
				failed_tx_max = (failed_tx > failed_tx_max) ? failed_tx : failed_tx_max;
				failed_tx_avg = (failed_tx_max + failed_tx) / 2;
			}
			break;
 8000d4e:	e03d      	b.n	8000dcc <main+0x314>
 8000d50:	20000238 	.word	0x20000238
 8000d54:	20000308 	.word	0x20000308
 8000d58:	20000306 	.word	0x20000306
 8000d5c:	20000304 	.word	0x20000304
 8000d60:	20000278 	.word	0x20000278
 8000d64:	2000027a 	.word	0x2000027a
 8000d68:	2000027c 	.word	0x2000027c
 8000d6c:	20000280 	.word	0x20000280
 8000d70:	20000300 	.word	0x20000300
 8000d74:	40020000 	.word	0x40020000
 8000d78:	20000344 	.word	0x20000344
 8000d7c:	200001a0 	.word	0x200001a0
 8000d80:	3d4ccccd 	.word	0x3d4ccccd
 8000d84:	c6fffe00 	.word	0xc6fffe00
 8000d88:	46fffe00 	.word	0x46fffe00
 8000d8c:	20000350 	.word	0x20000350
 8000d90:	20000368 	.word	0x20000368
				failed_tx++;
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <main+0x374>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <main+0x374>)
 8000d9e:	801a      	strh	r2, [r3, #0]
				failed_tx_max = (failed_tx > failed_tx_max) ? failed_tx : failed_tx_max;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <main+0x378>)
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <main+0x374>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	bf38      	it	cc
 8000dac:	4613      	movcc	r3, r2
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <main+0x378>)
 8000db2:	801a      	strh	r2, [r3, #0]
				failed_tx_avg = (failed_tx_max + failed_tx) / 2;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <main+0x378>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <main+0x374>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	0fda      	lsrs	r2, r3, #31
 8000dc2:	4413      	add	r3, r2
 8000dc4:	105b      	asrs	r3, r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <main+0x37c>)
 8000dca:	801a      	strh	r2, [r3, #0]
			break;
 8000dcc:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <main+0x380>)
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <main+0x384>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d00d      	beq.n	8000df6 <main+0x33e>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <main+0x380>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	425a      	negs	r2, r3
 8000de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dea:	bf58      	it	pl
 8000dec:	4253      	negpl	r3, r2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <main+0x380>)
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e002      	b.n	8000dfc <main+0x344>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f9be 	bl	8001178 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <main+0x384>)
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <main+0x380>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d306      	bcc.n	8000e16 <main+0x35e>
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <main+0x384>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <main+0x380>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	e007      	b.n	8000e26 <main+0x36e>
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <main+0x384>)
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <main+0x380>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <main+0x388>)
 8000e28:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000e2a:	e68f      	b.n	8000b4c <main+0x94>
 8000e2c:	20000278 	.word	0x20000278
 8000e30:	2000027a 	.word	0x2000027a
 8000e34:	2000027c 	.word	0x2000027c
 8000e38:	20000300 	.word	0x20000300
 8000e3c:	20000301 	.word	0x20000301
 8000e40:	20000302 	.word	0x20000302

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b092      	sub	sp, #72	; 0x48
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2234      	movs	r2, #52	; 0x34
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f009 fada 	bl	800a40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <SystemClock_Config+0x9c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <SystemClock_Config+0x9c>)
 8000e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e74:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e76:	2303      	movs	r3, #3
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e82:	2310      	movs	r3, #16
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e96:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fa8d 	bl	80043c0 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000eac:	f000 f9a8 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fda9 	bl	8004a20 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed4:	f000 f994 	bl	8001200 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3748      	adds	r7, #72	; 0x48
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC_Init+0xc8>)
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <MX_ADC_Init+0xcc>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_ADC_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f12:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f58:	f000 fcc0 	bl	80018dc <HAL_ADC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8000f62:	f000 f94d 	bl	8001200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_9CYCLES;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f78:	f000 ffa0 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8000f82:	f000 f93d 	bl	8001200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC_Init+0xc8>)
 8000f94:	f000 ff92 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000f9e:	f000 f92f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001a0 	.word	0x200001a0
 8000fb0:	40012400 	.word	0x40012400

08000fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <MX_TIM2_Init+0x114>)
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <MX_TIM2_Init+0x114>)
 8000fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <MX_TIM2_Init+0x114>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32-1;
 8000ff4:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <MX_TIM2_Init+0x114>)
 8000ff6:	221f      	movs	r2, #31
 8000ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <MX_TIM2_Init+0x114>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001006:	4830      	ldr	r0, [pc, #192]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001008:	f003 ff9e 	bl	8004f48 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001012:	f000 f8f5 	bl	8001200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4619      	mov	r1, r3
 8001022:	4829      	ldr	r0, [pc, #164]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001024:	f004 fa72 	bl	800550c <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800102e:	f000 f8e7 	bl	8001200 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001032:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001034:	f004 f812 	bl	800505c <HAL_TIM_OC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800103e:	f000 f8df 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001052:	f004 fd55 	bl	8005b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800105c:	f000 f8d0 	bl	8001200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001060:	2310      	movs	r3, #16
 8001062:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16-1;
 8001064:	230f      	movs	r3, #15
 8001066:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001078:	f004 f9f0 	bl	800545c <HAL_TIM_OC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001082:	f000 f8bd 	bl	8001200 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_TIM2_Init+0x114>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_TIM2_Init+0x114>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0208 	orr.w	r2, r2, #8
 8001094:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32-1;
 8001096:	231f      	movs	r3, #31
 8001098:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	2204      	movs	r2, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_TIM2_Init+0x114>)
 80010a2:	f004 f9db 	bl	800545c <HAL_TIM_OC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80010ac:	f000 f8a8 	bl	8001200 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <MX_TIM2_Init+0x114>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <MX_TIM2_Init+0x114>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000238 	.word	0x20000238

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_DMA_Init+0x38>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <MX_DMA_Init+0x38>)
 80010d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_DMA_Init+0x38>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200b      	movs	r0, #11
 80010f0:	f001 f9ed 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f4:	200b      	movs	r0, #11
 80010f6:	f001 fa06 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_GPIO_Init+0x68>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <MX_GPIO_Init+0x68>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_GPIO_Init+0x68>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_GPIO_Init+0x68>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <MX_GPIO_Init+0x68>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_GPIO_Init+0x68>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800114e:	2304      	movs	r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4619      	mov	r1, r3
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_GPIO_Init+0x6c>)
 8001162:	f001 fb81 	bl	8002868 <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <write_next_event_state+0x3c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	425a      	negs	r2, r3
 800118a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800118e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001192:	bf58      	it	pl
 8001194:	4253      	negpl	r3, r2
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <write_next_event_state+0x3c>)
 800119a:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <write_next_event_state+0x3c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <write_next_event_state+0x40>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	5453      	strb	r3, [r2, r1]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000301 	.word	0x20000301
 80011b8:	20000280 	.word	0x20000280

080011bc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d002      	beq.n	80011d2 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d004      	beq.n	80011da <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 80011d0:	e007      	b.n	80011e2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff ffd0 	bl	8001178 <write_next_event_state>
			break;
 80011d8:	e003      	b.n	80011e2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f7ff ffcc 	bl	8001178 <write_next_event_state>
			break;
 80011e0:	bf00      	nop
	}
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f7ff ffc0 	bl	8001178 <write_next_event_state>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_MspInit+0x58>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_MspInit+0x58>)
 8001218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800121c:	6253      	str	r3, [r2, #36]	; 0x24
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_MspInit+0x58>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_MspInit+0x58>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_MspInit+0x58>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_MspInit+0x58>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_MspInit+0x58>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_MspInit+0x58>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6253      	str	r3, [r2, #36]	; 0x24
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_MspInit+0x58>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a2d      	ldr	r2, [pc, #180]	; (800133c <HAL_ADC_MspInit+0xd4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d154      	bne.n	8001334 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 8001290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ba:	2303      	movs	r3, #3
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <HAL_ADC_MspInit+0xdc>)
 80012ce:	f001 facb 	bl	8002868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_ADC_MspInit+0xe4>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 8001302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001306:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 800130a:	f001 f917 	bl	800253c <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001314:	f7ff ff74 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2012      	movs	r0, #18
 800132a:	f001 f8d0 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800132e:	2012      	movs	r0, #18
 8001330:	f001 f8e9 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40012400 	.word	0x40012400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	200001f4 	.word	0x200001f4
 800134c:	40026008 	.word	0x40026008

08001350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d113      	bne.n	800138a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_TIM_Base_MspInit+0x44>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_TIM_Base_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6253      	str	r3, [r2, #36]	; 0x24
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_Base_MspInit+0x44>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201c      	movs	r0, #28
 8001380:	f001 f8a5 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001384:	201c      	movs	r0, #28
 8001386:	f001 f8be 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 fa61 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Channel1_IRQHandler+0x10>)
 80013ee:	f001 f95d 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001f4 	.word	0x200001f4

080013fc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <ADC1_IRQHandler+0x10>)
 8001402:	f000 fc3f 	bl	8001c84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001a0 	.word	0x200001a0

08001410 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USB_HP_IRQHandler+0x10>)
 8001416:	f001 fcc2 	bl	8002d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000804 	.word	0x20000804

08001424 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <USB_LP_IRQHandler+0x10>)
 800142a:	f001 fcb8 	bl	8002d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000804 	.word	0x20000804

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM2_IRQHandler+0x10>)
 800143e:	f003 ff31 	bl	80052a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000238 	.word	0x20000238

0800144c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	; (800149c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147e:	f7ff ffe5 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001482:	f008 ff9f 	bl	800a3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f7ff fb17 	bl	8000ab8 <main>
  bx lr
 800148a:	4770      	bx	lr
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001494:	0800a4c0 	.word	0x0800a4c0
  ldr r2, =_sbss
 8001498:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800149c:	20000b18 	.word	0x20000b18

080014a0 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <COMP_IRQHandler>
	...

080014a4 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 80014a4:	b4b0      	push	{r4, r5, r7}
 80014a6:	b095      	sub	sp, #84	; 0x54
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 80014ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014be:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <Joystick_Init+0x90>)
 80014c6:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <Joystick_Init+0x94>)
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 80014d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014da:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 80014dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e0:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <Joystick_Init+0x90>)
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <Joystick_Init+0x94>)
 80014ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001506:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	461d      	mov	r5, r3
 8001510:	f107 0414 	add.w	r4, r7, #20
 8001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	3754      	adds	r7, #84	; 0x54
 800152c:	46bd      	mov	sp, r7
 800152e:	bcb0      	pop	{r4, r5, r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	3ccccccd 	.word	0x3ccccccd
 8001538:	3f8ccccd 	.word	0x3f8ccccd

0800153c <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800155a:	2b00      	cmp	r3, #0
 800155c:	d062      	beq.n	8001624 <Joystick_Update+0xe8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001562:	2b00      	cmp	r3, #0
 8001564:	d05e      	beq.n	8001624 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	891b      	ldrh	r3, [r3, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe febc 	bl	80002e8 <__aeabi_ui2f>
 8001570:	4604      	mov	r4, r0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800157c:	f7fe fe02 	bl	8000184 <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
 8001582:	4619      	mov	r1, r3
 8001584:	4620      	mov	r0, r4
 8001586:	f7fe ff07 	bl	8000398 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	8bfb      	ldrh	r3, [r7, #30]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fea9 	bl	80002e8 <__aeabi_ui2f>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7fe fefa 	bl	8000398 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7fe fded 	bl	8000188 <__addsf3>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f8dd 	bl	8000770 <__aeabi_f2uiz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8c1b      	ldrh	r3, [r3, #32]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe90 	bl	80002e8 <__aeabi_ui2f>
 80015c8:	4604      	mov	r4, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015d4:	f7fe fdd6 	bl	8000184 <__aeabi_fsub>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	4620      	mov	r0, r4
 80015de:	f7fe fedb 	bl	8000398 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461c      	mov	r4, r3
 80015e6:	8bbb      	ldrh	r3, [r7, #28]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fe7d 	bl	80002e8 <__aeabi_ui2f>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f7fe fece 	bl	8000398 <__aeabi_fmul>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4619      	mov	r1, r3
 8001600:	4620      	mov	r0, r4
 8001602:	f7fe fdc1 	bl	8000188 <__addsf3>
 8001606:	4603      	mov	r3, r0
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f8b1 	bl	8000770 <__aeabi_f2uiz>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	865a      	strh	r2, [r3, #50]	; 0x32
 8001622:	e008      	b.n	8001636 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	891b      	ldrh	r3, [r3, #8]
 800163a:	8bfa      	ldrh	r2, [r7, #30]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	8c1b      	ldrh	r3, [r3, #32]
 8001646:	8bba      	ldrh	r2, [r7, #28]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	b29b      	uxth	r3, r3
 800164c:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	889b      	ldrh	r3, [r3, #4]
 8001652:	8bfa      	ldrh	r2, [r7, #30]
 8001654:	4293      	cmp	r3, r2
 8001656:	bf28      	it	cs
 8001658:	4613      	movcs	r3, r2
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	88db      	ldrh	r3, [r3, #6]
 8001664:	8bfa      	ldrh	r2, [r7, #30]
 8001666:	4293      	cmp	r3, r2
 8001668:	bf38      	it	cc
 800166a:	4613      	movcc	r3, r2
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b9b      	ldrh	r3, [r3, #28]
 8001676:	8bba      	ldrh	r2, [r7, #28]
 8001678:	4293      	cmp	r3, r2
 800167a:	bf28      	it	cs
 800167c:	4613      	movcs	r3, r2
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	8bdb      	ldrh	r3, [r3, #30]
 8001688:	8bba      	ldrh	r2, [r7, #28]
 800168a:	4293      	cmp	r3, r2
 800168c:	bf38      	it	cc
 800168e:	4613      	movcc	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8001696:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd15      	ble.n	80016ca <Joystick_Update+0x18e>
 800169e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fe24 	bl	80002f0 <__aeabi_i2f>
 80016a8:	4604      	mov	r4, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	88db      	ldrh	r3, [r3, #6]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	891b      	ldrh	r3, [r3, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fe1a 	bl	80002f0 <__aeabi_i2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7fe ff1d 	bl	8000500 <__aeabi_fdiv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	e016      	b.n	80016f8 <Joystick_Update+0x1bc>
 80016ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fe0e 	bl	80002f0 <__aeabi_i2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	891b      	ldrh	r3, [r3, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fe02 	bl	80002f0 <__aeabi_i2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7fe ff05 	bl	8000500 <__aeabi_fdiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 80016fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	dd15      	ble.n	800172e <Joystick_Update+0x1f2>
 8001702:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fdf2 	bl	80002f0 <__aeabi_i2f>
 800170c:	4604      	mov	r4, r0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	8bdb      	ldrh	r3, [r3, #30]
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	8c1b      	ldrh	r3, [r3, #32]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fde8 	bl	80002f0 <__aeabi_i2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f7fe feeb 	bl	8000500 <__aeabi_fdiv>
 800172a:	4603      	mov	r3, r0
 800172c:	e016      	b.n	800175c <Joystick_Update+0x220>
 800172e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fddc 	bl	80002f0 <__aeabi_i2f>
 8001738:	4603      	mov	r3, r0
 800173a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8b9b      	ldrh	r3, [r3, #28]
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8c1b      	ldrh	r3, [r3, #32]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdd0 	bl	80002f0 <__aeabi_i2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	4620      	mov	r0, r4
 8001756:	f7fe fed3 	bl	8000500 <__aeabi_fdiv>
 800175a:	4603      	mov	r3, r0
 800175c:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7fe ffd4 	bl	8000710 <__aeabi_fcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <Joystick_Update+0x236>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	e002      	b.n	8001778 <Joystick_Update+0x23c>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001778:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	6938      	ldr	r0, [r7, #16]
 8001780:	f7fe ffc6 	bl	8000710 <__aeabi_fcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <Joystick_Update+0x252>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	e002      	b.n	8001794 <Joystick_Update+0x258>
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001794:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4619      	mov	r1, r3
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7fe ffb7 	bl	8000710 <__aeabi_fcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <Joystick_Update+0x282>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7fe ff90 	bl	80006d4 <__aeabi_fcmplt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <Joystick_Update+0x282>
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	e001      	b.n	80017c2 <Joystick_Update+0x286>
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f7fe ff9f 	bl	8000710 <__aeabi_fcmpgt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00a      	beq.n	80017ee <Joystick_Update+0x2b2>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	4619      	mov	r1, r3
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f7fe ff78 	bl	80006d4 <__aeabi_fcmplt>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <Joystick_Update+0x2b2>
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	e001      	b.n	80017f2 <Joystick_Update+0x2b6>
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80017f6:	bf00      	nop
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 fe55 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fcf4 	bl	800120c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_InitTick+0x68>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d022      	beq.n	800188a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_InitTick+0x6c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_InitTick+0x68>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001850:	fbb1 f3f3 	udiv	r3, r1, r3
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fe62 	bl	8002522 <HAL_SYSTICK_Config>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10f      	bne.n	8001884 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d809      	bhi.n	800187e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186a:	2200      	movs	r2, #0
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	f04f 30ff 	mov.w	r0, #4294967295
 8001872:	f000 fe2c 	bl	80024ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_InitTick+0x70>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e007      	b.n	800188e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e004      	b.n	800188e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e001      	b.n	800188e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000008 	.word	0x20000008
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x1c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x20>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_IncTick+0x1c>)
 80018b4:	6013      	str	r3, [r2, #0]
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000360 	.word	0x20000360
 80018c4:	20000008 	.word	0x20000008

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_GetTick+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000360 	.word	0x20000360

080018dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	; 0x38
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e127      	b.n	8001b4c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b8e      	ldr	r3, [pc, #568]	; (8001b54 <HAL_ADC_Init+0x278>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a8d      	ldr	r2, [pc, #564]	; (8001b54 <HAL_ADC_Init+0x278>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_ADC_Init+0x278>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fc99 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80ff 	bne.w	8001b42 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194c:	f023 0302 	bic.w	r3, r3, #2
 8001950:	f043 0202 	orr.w	r2, r3, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001958:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_ADC_Init+0x27c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	497c      	ldr	r1, [pc, #496]	; (8001b58 <HAL_ADC_Init+0x27c>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001972:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197a:	4619      	mov	r1, r3
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001996:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800199c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80019be:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80019c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c2:	4313      	orrs	r3, r2
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d007      	beq.n	80019de <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019da:	4313      	orrs	r3, r2
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e8:	2b40      	cmp	r3, #64	; 0x40
 80019ea:	d04f      	beq.n	8001a8c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f2:	4313      	orrs	r3, r2
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019fe:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6912      	ldr	r2, [r2, #16]
 8001a04:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_Init+0x136>
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6912      	ldr	r2, [r2, #16]
 8001a0e:	2a01      	cmp	r2, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_ADC_Init+0x13c>
 8001a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a16:	e000      	b.n	8001a1a <HAL_ADC_Init+0x13e>
 8001a18:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001a1a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d114      	bne.n	8001a60 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001a40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	fa92 f2a2 	rbit	r2, r2
 8001a48:	617a      	str	r2, [r7, #20]
  return result;
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	e00b      	b.n	8001a78 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f043 0220 	orr.w	r2, r3, #32
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_ADC_Init+0x280>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_ADC_Init+0x284>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_Init+0x1d6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d119      	bne.n	8001ae6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001ac6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	60fa      	str	r2, [r7, #12]
  return result;
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	fa03 f202 	lsl.w	r2, r3, r2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae4:	e007      	b.n	8001af6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_ADC_Init+0x288>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d10b      	bne.n	8001b1e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	f023 0303 	bic.w	r3, r3, #3
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b1c:	e014      	b.n	8001b48 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f023 0312 	bic.w	r3, r3, #18
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3738      	adds	r7, #56	; 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40012700 	.word	0x40012700
 8001b5c:	fcfc16ff 	.word	0xfcfc16ff
 8001b60:	c0fff18d 	.word	0xc0fff18d
 8001b64:	bf80fffe 	.word	0xbf80fffe

08001b68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x1e>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e074      	b.n	8001c70 <HAL_ADC_Start_DMA+0x108>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fae4 	bl	800215c <ADC_Enable>
 8001b94:	4603      	mov	r3, r0
 8001b96:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d167      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	f023 0206 	bic.w	r2, r3, #6
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	651a      	str	r2, [r3, #80]	; 0x50
 8001bea:	e002      	b.n	8001bf2 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_ADC_Start_DMA+0x110>)
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_ADC_Start_DMA+0x114>)
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_ADC_Start_DMA+0x118>)
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3358      	adds	r3, #88	; 0x58
 8001c46:	4619      	mov	r1, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f000 fcce 	bl	80025ec <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08002215 	.word	0x08002215
 8001c7c:	080022bd 	.word	0x080022bd
 8001c80:	080022d9 	.word	0x080022d9

08001c84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d14e      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d147      	bne.n	8001d38 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12c      	bne.n	8001d28 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d127      	bne.n	8001d28 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d119      	bne.n	8001d28 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0220 	bic.w	r2, r2, #32
 8001d02:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fa5e 	bl	80011ea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0212 	mvn.w	r2, #18
 8001d36:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b80      	cmp	r3, #128	; 0x80
 8001d44:	d15c      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d155      	bne.n	8001e00 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d13a      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d12c      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d125      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11e      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d119      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fa8b 	bl	800230c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 020c 	mvn.w	r2, #12
 8001dfe:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d114      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10d      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f834 	bl	8001e96 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0201 	mvn.w	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e46:	d119      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d112      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	f043 0202 	orr.w	r2, r3, #2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0220 	mvn.w	r2, #32
 8001e6a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f81b 	bl	8001ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0220 	mvn.w	r2, #32
 8001e7a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x20>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e134      	b.n	8002146 <HAL_ADC_ConfigChannel+0x28a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d81c      	bhi.n	8001f26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b05      	subs	r3, #5
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4019      	ands	r1, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b05      	subs	r3, #5
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
 8001f24:	e07e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d81c      	bhi.n	8001f68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b23      	subs	r3, #35	; 0x23
 8001f40:	221f      	movs	r2, #31
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	4019      	ands	r1, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b23      	subs	r3, #35	; 0x23
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f66:	e05d      	b.n	8002024 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d81c      	bhi.n	8001faa <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	; 0x41
 8001f82:	221f      	movs	r2, #31
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4019      	ands	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	; 0x41
 8001f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa8:	e03c      	b.n	8002024 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d81c      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b5f      	subs	r3, #95	; 0x5f
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4019      	ands	r1, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b5f      	subs	r3, #95	; 0x5f
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	e01b      	b.n	8002024 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b7d      	subs	r3, #125	; 0x7d
 8001ffe:	221f      	movs	r2, #31
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b7d      	subs	r3, #125	; 0x7d
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d81a      	bhi.n	8002062 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6959      	ldr	r1, [r3, #20]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	2207      	movs	r2, #7
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	4019      	ands	r1, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6898      	ldr	r0, [r3, #8]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	615a      	str	r2, [r3, #20]
 8002060:	e042      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b13      	cmp	r3, #19
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6919      	ldr	r1, [r3, #16]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	3b1e      	subs	r3, #30
 800207c:	2207      	movs	r2, #7
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6898      	ldr	r0, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	e021      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b1a      	cmp	r3, #26
 80020aa:	d81c      	bhi.n	80020e6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	3b3c      	subs	r3, #60	; 0x3c
 80020be:	2207      	movs	r2, #7
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6898      	ldr	r0, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	3b3c      	subs	r3, #60	; 0x3c
 80020d8:	fa00 f203 	lsl.w	r2, r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	e000      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80020e6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d003      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020f4:	2b11      	cmp	r3, #17
 80020f6:	d121      	bne.n	800213c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_ADC_ConfigChannel+0x294>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11b      	bne.n	800213c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_ADC_ConfigChannel+0x294>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_ADC_ConfigChannel+0x294>)
 800210a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800210e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b10      	cmp	r3, #16
 8002116:	d111      	bne.n	800213c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_ADC_ConfigChannel+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_ADC_ConfigChannel+0x29c>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9a      	lsrs	r2, r3, #18
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800212e:	e002      	b.n	8002136 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3b01      	subs	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40012700 	.word	0x40012700
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d043      	beq.n	8002202 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <ADC_Enable+0xb0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <ADC_Enable+0xb4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9a      	lsrs	r2, r3, #18
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800219e:	e002      	b.n	80021a6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f9      	bne.n	80021a0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80021ac:	f7ff fb8c 	bl	80018c8 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b2:	e01f      	b.n	80021f4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80021b4:	f7ff fb88 	bl	80018c8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d918      	bls.n	80021f4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d011      	beq.n	80021f4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d1d8      	bne.n	80021b4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d13d      	bne.n	80022aa <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12c      	bne.n	80022a2 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d127      	bne.n	80022a2 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800226a:	2b00      	cmp	r3, #0
 800226c:	d119      	bne.n	80022a2 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0220 	bic.w	r2, r2, #32
 800227c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7fe ffa1 	bl	80011ea <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80022a8:	e004      	b.n	80022b4 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff fdda 	bl	8001e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f6:	f043 0204 	orr.w	r2, r3, #4
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fdd2 	bl	8001ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4906      	ldr	r1, [pc, #24]	; (80023b8 <__NVIC_EnableIRQ+0x34>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff90 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff2d 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff42 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff90 	bl	8002410 <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5f 	bl	80023bc <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff35 	bl	8002384 <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e043      	b.n	80025d6 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_DMA_Init+0xa4>)
 8002556:	4413      	add	r3, r2
 8002558:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <HAL_DMA_Init+0xa8>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	009a      	lsls	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_DMA_Init+0xac>)
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	bffd9ff8 	.word	0xbffd9ff8
 80025e4:	cccccccd 	.word	0xcccccccd
 80025e8:	40026000 	.word	0x40026000

080025ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_DMA_Start_IT+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e04b      	b.n	80026a4 <HAL_DMA_Start_IT+0xb8>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d13a      	bne.n	8002696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f8e0 	bl	800280a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 020e 	orr.w	r2, r2, #14
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00f      	b.n	8002684 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 020a 	orr.w	r2, r2, #10
 8002682:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e005      	b.n	80026a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f003 031c 	and.w	r3, r3, #28
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d026      	beq.n	8002726 <HAL_DMA_IRQHandler+0x7a>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d021      	beq.n	8002726 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f003 021c 	and.w	r2, r3, #28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2104      	movs	r1, #4
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d071      	beq.n	8002800 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002724:	e06c      	b.n	8002800 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 031c 	and.w	r3, r3, #28
 800272e:	2202      	movs	r2, #2
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d02e      	beq.n	8002798 <HAL_DMA_IRQHandler+0xec>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d029      	beq.n	8002798 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 020a 	bic.w	r2, r2, #10
 8002760:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 021c 	and.w	r2, r3, #28
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2102      	movs	r1, #2
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d038      	beq.n	8002800 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002796:	e033      	b.n	8002800 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f003 031c 	and.w	r3, r3, #28
 80027a0:	2208      	movs	r2, #8
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d02a      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020e 	bic.w	r2, r2, #14
 80027c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 021c 	and.w	r2, r3, #28
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002800:	bf00      	nop
 8002802:	bf00      	nop
}
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f003 021c 	and.w	r2, r3, #28
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b10      	cmp	r3, #16
 800283a:	d108      	bne.n	800284e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800284c:	e007      	b.n	800285e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	60da      	str	r2, [r3, #12]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800287e:	e154      	b.n	8002b2a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8146 	beq.w	8002b24 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d005      	beq.n	80028b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d017      	beq.n	800294e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d123      	bne.n	80029a2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002966:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	6939      	ldr	r1, [r7, #16]
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80a0 	beq.w	8002b24 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e4:	4b58      	ldr	r3, [pc, #352]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_GPIO_Init+0x2e0>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x2e4>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_GPIO_Init+0x2e8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d019      	beq.n	8002a5c <HAL_GPIO_Init+0x1f4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <HAL_GPIO_Init+0x2ec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_GPIO_Init+0x1f0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_GPIO_Init+0x2f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00d      	beq.n	8002a54 <HAL_GPIO_Init+0x1ec>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <HAL_GPIO_Init+0x2f4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <HAL_GPIO_Init+0x1e8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a47      	ldr	r2, [pc, #284]	; (8002b60 <HAL_GPIO_Init+0x2f8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_GPIO_Init+0x1e4>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e008      	b.n	8002a5e <HAL_GPIO_Init+0x1f6>
 8002a4c:	2305      	movs	r3, #5
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x1f6>
 8002a50:	2303      	movs	r3, #3
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1f6>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1f6>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1f6>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_GPIO_Init+0x2e4>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002aa0:	4a30      	ldr	r2, [pc, #192]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aca:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_GPIO_Init+0x2fc>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f aea3 	bne.w	8002880 <HAL_GPIO_Init+0x18>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b98:	b08b      	sub	sp, #44	; 0x2c
 8002b9a:	af06      	add	r7, sp, #24
 8002b9c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0d0      	b.n	8002d4a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f007 f975 	bl	8009eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f80a 	bl	8005be8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e04c      	b.n	8002c74 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3301      	adds	r3, #1
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3336      	adds	r3, #54	; 0x36
 8002c18:	4602      	mov	r2, r0
 8002c1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	3338      	adds	r3, #56	; 0x38
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333c      	adds	r3, #60	; 0x3c
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	3340      	adds	r3, #64	; 0x40
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3ad      	bcc.n	8002bda <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e044      	b.n	8002d0e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3b5      	bcc.n	8002c84 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	687e      	ldr	r6, [r7, #4]
 8002d20:	466d      	mov	r5, sp
 8002d22:	f106 0410 	add.w	r4, r6, #16
 8002d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	1d33      	adds	r3, r6, #4
 8002d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d32:	6838      	ldr	r0, [r7, #0]
 8002d34:	f002 ff72 	bl	8005c1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_Start+0x16>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e016      	b.n	8002d96 <HAL_PCD_Start+0x44>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 ff21 	bl	8005bbc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f007 f877 	bl	8009e70 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 fc06 	bl	8008598 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 fbfe 	bl	80085ac <USB_ReadInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fade 	bl	800337e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f005 fbf0 	bl	80085ac <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d112      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dea:	b292      	uxth	r2, r2
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f007 f8de 	bl	8009fb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002df6:	2100      	movs	r1, #0
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f8c7 	bl	8002f8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f005 fbd2 	bl	80085ac <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e12:	d10b      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e26:	b292      	uxth	r2, r2
 8002e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fbbb 	bl	80085ac <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e40:	d10b      	bne.n	8002e5a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e54:	b292      	uxth	r2, r2
 8002e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 fba4 	bl	80085ac <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	d126      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	b292      	uxth	r2, r2
 8002e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0208 	bic.w	r2, r2, #8
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f007 f8bf 	bl	800a024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f005 fb72 	bl	80085ac <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed2:	d126      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	b292      	uxth	r2, r2
 8002f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0204 	orr.w	r2, r2, #4
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f007 f867 	bl	8009ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fb40 	bl	80085ac <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f36:	d10e      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f007 f820 	bl	8009f96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f005 fb26 	bl	80085ac <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	d10b      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_PCD_SetAddress+0x1a>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e013      	b.n	8002fce <HAL_PCD_SetAddress+0x42>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f005 fad7 	bl	8008572 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	4608      	mov	r0, r1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	70fb      	strb	r3, [r7, #3]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	803b      	strh	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da0e      	bge.n	800301a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	705a      	strb	r2, [r3, #1]
 8003018:	e00e      	b.n	8003038 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 0207 	and.w	r2, r3, #7
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003044:	883a      	ldrh	r2, [r7, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	78ba      	ldrb	r2, [r7, #2]
 800304e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d004      	beq.n	8003062 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003062:	78bb      	ldrb	r3, [r7, #2]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d102      	bne.n	800306e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_PCD_EP_Open+0xa6>
 8003078:	2302      	movs	r3, #2
 800307a:	e00e      	b.n	800309a <HAL_PCD_EP_Open+0xc4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f002 fde6 	bl	8005c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003098:	7afb      	ldrb	r3, [r7, #11]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da0e      	bge.n	80030d4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	705a      	strb	r2, [r3, #1]
 80030d2:	e00e      	b.n	80030f2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 0207 	and.w	r2, r3, #7
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_EP_Close+0x6a>
 8003108:	2302      	movs	r3, #2
 800310a:	e00e      	b.n	800312a <HAL_PCD_EP_Close+0x88>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 f908 	bl	8006330 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	460b      	mov	r3, r1
 8003140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	f003 0207 	and.w	r2, r3, #7
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	b2da      	uxtb	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6979      	ldr	r1, [r7, #20]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 faba 	bl	8006708 <USB_EPStartXfer>
 8003194:	e005      	b.n	80031a2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fab3 	bl	8006708 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	460b      	mov	r3, r1
 80031ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2201      	movs	r2, #1
 80031f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003204:	7afb      	ldrb	r3, [r7, #11]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fa77 	bl	8006708 <USB_EPStartXfer>
 800321a:	e005      	b.n	8003228 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fa70 	bl	8006708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 0207 	and.w	r2, r3, #7
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d901      	bls.n	8003250 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e03e      	b.n	80032ce <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da0e      	bge.n	8003276 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	705a      	strb	r2, [r3, #1]
 8003274:	e00c      	b.n	8003290 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_PCD_EP_SetStall+0x7e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e00e      	b.n	80032ce <HAL_PCD_EP_SetStall+0x9c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	4618      	mov	r0, r3
 80032c0:	f005 f85a 	bl	8008378 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d901      	bls.n	80032f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e040      	b.n	8003376 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da0e      	bge.n	800331a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
 8003318:	e00e      	b.n	8003338 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0207 	and.w	r2, r3, #7
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_PCD_EP_ClrStall+0x82>
 8003354:	2302      	movs	r3, #2
 8003356:	e00e      	b.n	8003376 <HAL_PCD_EP_ClrStall+0xa0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	4618      	mov	r0, r3
 8003368:	f005 f856 	bl	8008418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b08e      	sub	sp, #56	; 0x38
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003386:	e2ec      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003390:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800339e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 8161 	bne.w	800366a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d152      	bne.n	8003458 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	81fb      	strh	r3, [r7, #14]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3328      	adds	r3, #40	; 0x28
 80033da:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	3302      	adds	r3, #2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	441a      	add	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003416:	2100      	movs	r1, #0
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f006 fda2 	bl	8009f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 829b 	beq.w	8003962 <PCD_EP_ISR_Handler+0x5e4>
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8296 	bne.w	8003962 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b292      	uxth	r2, r2
 800344a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003456:	e284      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	2b00      	cmp	r3, #0
 8003470:	d034      	beq.n	80034dc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	3306      	adds	r3, #6
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f005 f8cf 	bl	8008654 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034c2:	4013      	ands	r3, r2
 80034c4:	823b      	strh	r3, [r7, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	8a3a      	ldrh	r2, [r7, #16]
 80034cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034d0:	b292      	uxth	r2, r2
 80034d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f006 fd17 	bl	8009f08 <HAL_PCD_SetupStageCallback>
 80034da:	e242      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f280 823e 	bge.w	8003962 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034f2:	4013      	ands	r3, r2
 80034f4:	83bb      	strh	r3, [r7, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	8bba      	ldrh	r2, [r7, #28]
 80034fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003500:	b292      	uxth	r2, r2
 8003502:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	3306      	adds	r3, #6
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d019      	beq.n	800356c <PCD_EP_ISR_Handler+0x1ee>
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	6959      	ldr	r1, [r3, #20]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003550:	b29b      	uxth	r3, r3
 8003552:	f005 f87f 	bl	8008654 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	441a      	add	r2, r3
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003564:	2100      	movs	r1, #0
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f006 fce0 	bl	8009f2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 81f2 	bne.w	8003962 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <PCD_EP_ISR_Handler+0x24e>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	e02f      	b.n	800362c <PCD_EP_ISR_Handler+0x2ae>
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b3e      	cmp	r3, #62	; 0x3e
 80035d2:	d813      	bhi.n	80035fc <PCD_EP_ISR_Handler+0x27e>
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <PCD_EP_ISR_Handler+0x270>
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	3301      	adds	r3, #1
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	e017      	b.n	800362c <PCD_EP_ISR_Handler+0x2ae>
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <PCD_EP_ISR_Handler+0x298>
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	3b01      	subs	r3, #1
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	b29b      	uxth	r3, r3
 800361a:	029b      	lsls	r3, r3, #10
 800361c:	b29b      	uxth	r3, r3
 800361e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003626:	b29a      	uxth	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	827b      	strh	r3, [r7, #18]
 800363e:	8a7b      	ldrh	r3, [r7, #18]
 8003640:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003644:	827b      	strh	r3, [r7, #18]
 8003646:	8a7b      	ldrh	r3, [r7, #18]
 8003648:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800364c:	827b      	strh	r3, [r7, #18]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	8a7b      	ldrh	r3, [r7, #18]
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]
 8003668:	e17b      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800367c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003680:	2b00      	cmp	r3, #0
 8003682:	f280 80ea 	bge.w	800385a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b29a      	uxth	r2, r3
 8003698:	f640 738f 	movw	r3, #3983	; 0xf8f
 800369c:	4013      	ands	r3, r2
 800369e:	853b      	strh	r3, [r7, #40]	; 0x28
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b4:	b292      	uxth	r2, r2
 80036b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d122      	bne.n	800371c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036de:	b29b      	uxth	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	3306      	adds	r3, #6
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8087 	beq.w	8003816 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	88da      	ldrh	r2, [r3, #6]
 8003714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003716:	f004 ff9d 	bl	8008654 <USB_ReadPMA>
 800371a:	e07c      	b.n	8003816 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d108      	bne.n	8003736 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003724:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003726:	461a      	mov	r2, r3
 8003728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f927 	bl	800397e <HAL_PCD_EP_DB_Receive>
 8003730:	4603      	mov	r3, r0
 8003732:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003734:	e06f      	b.n	8003816 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	847b      	strh	r3, [r7, #34]	; 0x22
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	441a      	add	r2, r3
 8003760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d021      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	3302      	adds	r3, #2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02a      	beq.n	8003816 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6959      	ldr	r1, [r3, #20]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	891a      	ldrh	r2, [r3, #8]
 80037cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ce:	f004 ff41 	bl	8008654 <USB_ReadPMA>
 80037d2:	e020      	b.n	8003816 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	3306      	adds	r3, #6
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	6959      	ldr	r1, [r3, #20]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	895a      	ldrh	r2, [r3, #10]
 8003810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003812:	f004 ff1f 	bl	8008654 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800381c:	441a      	add	r2, r3
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003828:	441a      	add	r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <PCD_EP_ISR_Handler+0x4c2>
 8003836:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d206      	bcs.n	800384e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f006 fb70 	bl	8009f2c <HAL_PCD_DataOutStageCallback>
 800384c:	e005      	b.n	800385a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003854:	4618      	mov	r0, r3
 8003856:	f002 ff57 	bl	8006708 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800385a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d07e      	beq.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003864:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	843b      	strh	r3, [r7, #32]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	8c3b      	ldrh	r3, [r7, #32]
 80038a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	78db      	ldrb	r3, [r3, #3]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d00c      	beq.n	80038d2 <PCD_EP_ISR_Handler+0x554>
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	78db      	ldrb	r3, [r3, #3]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d146      	bne.n	8003956 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d141      	bne.n	8003956 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	3302      	adds	r3, #2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	8bfb      	ldrh	r3, [r7, #30]
 8003902:	429a      	cmp	r2, r3
 8003904:	d906      	bls.n	8003914 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	8bfb      	ldrh	r3, [r7, #30]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	619a      	str	r2, [r3, #24]
 8003912:	e002      	b.n	800391a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f006 fb1a 	bl	8009f62 <HAL_PCD_DataInStageCallback>
 800392e:	e018      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	8bfb      	ldrh	r3, [r7, #30]
 8003936:	441a      	add	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	8bfb      	ldrh	r3, [r7, #30]
 8003942:	441a      	add	r2, r3
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394e:	4618      	mov	r0, r3
 8003950:	f002 feda 	bl	8006708 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003954:	e005      	b.n	8003962 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003958:	461a      	mov	r2, r3
 800395a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f91b 	bl	8003b98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800396a:	b29b      	uxth	r3, r3
 800396c:	b21b      	sxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	f6ff ad0a 	blt.w	8003388 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3738      	adds	r7, #56	; 0x38
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b088      	sub	sp, #32
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d07e      	beq.n	8003a94 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	3302      	adds	r3, #2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	8b7b      	ldrh	r3, [r7, #26]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d306      	bcc.n	80039d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	619a      	str	r2, [r3, #24]
 80039d6:	e002      	b.n	80039de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d123      	bne.n	8003a2e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a00:	833b      	strh	r3, [r7, #24]
 8003a02:	8b3b      	ldrh	r3, [r7, #24]
 8003a04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a08:	833b      	strh	r3, [r7, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	441a      	add	r2, r3
 8003a18:	8b3b      	ldrh	r3, [r7, #24]
 8003a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01f      	beq.n	8003a78 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	82fb      	strh	r3, [r7, #22]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	441a      	add	r2, r3
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a78:	8b7b      	ldrh	r3, [r7, #26]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8087 	beq.w	8003b8e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6959      	ldr	r1, [r3, #20]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	891a      	ldrh	r2, [r3, #8]
 8003a8c:	8b7b      	ldrh	r3, [r7, #26]
 8003a8e:	f004 fde1 	bl	8008654 <USB_ReadPMA>
 8003a92:	e07c      	b.n	8003b8e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3306      	adds	r3, #6
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003abc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	8b7b      	ldrh	r3, [r7, #26]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d306      	bcc.n	8003ad6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	8b7b      	ldrh	r3, [r7, #26]
 8003ace:	1ad2      	subs	r2, r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	619a      	str	r2, [r3, #24]
 8003ad4:	e002      	b.n	8003adc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d123      	bne.n	8003b2c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	83fb      	strh	r3, [r7, #30]
 8003b00:	8bfb      	ldrh	r3, [r7, #30]
 8003b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b06:	83fb      	strh	r3, [r7, #30]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	8bfb      	ldrh	r3, [r7, #30]
 8003b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11f      	bne.n	8003b76 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	83bb      	strh	r3, [r7, #28]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	441a      	add	r2, r3
 8003b60:	8bbb      	ldrh	r3, [r7, #28]
 8003b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b76:	8b7b      	ldrh	r3, [r7, #26]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6959      	ldr	r1, [r3, #20]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	895a      	ldrh	r2, [r3, #10]
 8003b88:	8b7b      	ldrh	r3, [r7, #26]
 8003b8a:	f004 fd63 	bl	8008654 <USB_ReadPMA>
    }
  }

  return count;
 8003b8e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0a2      	sub	sp, #136	; 0x88
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 81c7 	beq.w	8003f40 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d907      	bls.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf2:	1ad2      	subs	r2, r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	619a      	str	r2, [r3, #24]
 8003bf8:	e002      	b.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 80b9 	bne.w	8003d7c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d126      	bne.n	8003c60 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	4413      	add	r3, r2
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	e01a      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d116      	bne.n	8003c96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	4413      	add	r3, r2
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	2200      	movs	r2, #0
 8003c94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d126      	bne.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	011a      	lsls	r2, r3, #4
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	e017      	b.n	8003d22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d113      	bne.n	8003d22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	4413      	add	r3, r2
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	011a      	lsls	r2, r3, #4
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	4413      	add	r3, r2
 8003d16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f006 f91a 	bl	8009f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 82d4 	beq.w	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	827b      	strh	r3, [r7, #18]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]
 8003d7a:	e2b2      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d021      	beq.n	8003dca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 8286 	bne.w	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dde:	441a      	add	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dec:	441a      	add	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d309      	bcc.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	e015      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e28:	e009      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d155      	bne.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	4413      	add	r3, r2
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	011a      	lsls	r2, r3, #4
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	4413      	add	r3, r2
 8003e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d112      	bne.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x302>
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e047      	b.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9e:	d811      	bhi.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e032      	b.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_PCD_EP_DB_Transmit+0x342>
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e01b      	b.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d117      	bne.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	4413      	add	r3, r2
 8003f10:	643b      	str	r3, [r7, #64]	; 0x40
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	011a      	lsls	r2, r3, #4
 8003f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6959      	ldr	r1, [r3, #20]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	891a      	ldrh	r2, [r3, #8]
 8003f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f004 fb46 	bl	80085ca <USB_WritePMA>
 8003f3e:	e1d0      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	3306      	adds	r3, #6
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d307      	bcc.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f80:	1ad2      	subs	r2, r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	619a      	str	r2, [r3, #24]
 8003f86:	e002      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 80c4 	bne.w	8004120 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d126      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x456>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	4413      	add	r3, r2
 8003fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	011a      	lsls	r2, r3, #4
 8003fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e01a      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d116      	bne.n	8004024 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400a:	4413      	add	r3, r2
 800400c:	677b      	str	r3, [r7, #116]	; 0x74
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	011a      	lsls	r2, r3, #4
 8004014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004016:	4413      	add	r3, r2
 8004018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	2200      	movs	r2, #0
 8004022:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	67bb      	str	r3, [r7, #120]	; 0x78
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12f      	bne.n	8004092 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800404a:	4413      	add	r3, r2
 800404c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	011a      	lsls	r2, r3, #4
 8004056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800405a:	4413      	add	r3, r2
 800405c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004070:	b29a      	uxth	r2, r3
 8004072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004088:	b29a      	uxth	r2, r3
 800408a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	e017      	b.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d113      	bne.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a8:	4413      	add	r3, r2
 80040aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	011a      	lsls	r2, r3, #4
 80040b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b4:	4413      	add	r3, r2
 80040b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040be:	2200      	movs	r2, #0
 80040c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f005 ff4a 	bl	8009f62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 8104 	bne.w	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]
 800411e:	e0e0      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800415a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80b4 	bne.w	80042e2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004182:	441a      	add	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004190:	441a      	add	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d309      	bcc.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	621a      	str	r2, [r3, #32]
 80041b4:	e015      	b.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80041be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041cc:	e009      	b.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	667b      	str	r3, [r7, #100]	; 0x64
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d155      	bne.n	800429c <HAL_PCD_EP_DB_Transmit+0x704>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fe:	b29b      	uxth	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	4413      	add	r3, r2
 8004206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	011a      	lsls	r2, r3, #4
 800420e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004210:	4413      	add	r3, r2
 8004212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004216:	65bb      	str	r3, [r7, #88]	; 0x58
 8004218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421a:	2b00      	cmp	r3, #0
 800421c:	d112      	bne.n	8004244 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800421e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004228:	b29a      	uxth	r2, r3
 800422a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29a      	uxth	r2, r3
 800423e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	e044      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x736>
 8004244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004246:	2b3e      	cmp	r3, #62	; 0x3e
 8004248:	d811      	bhi.n	800426e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	657b      	str	r3, [r7, #84]	; 0x54
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800425a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425c:	3301      	adds	r3, #1
 800425e:	657b      	str	r3, [r7, #84]	; 0x54
 8004260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004262:	b29b      	uxth	r3, r3
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	b29a      	uxth	r2, r3
 8004268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e02f      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x736>
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
 8004274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	3b01      	subs	r3, #1
 8004282:	657b      	str	r3, [r7, #84]	; 0x54
 8004284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004286:	b29b      	uxth	r3, r3
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	b29b      	uxth	r3, r3
 800428c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004294:	b29a      	uxth	r2, r3
 8004296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	e018      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x736>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d114      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0x736>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b2:	4413      	add	r3, r2
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	011a      	lsls	r2, r3, #4
 80042bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042be:	4413      	add	r3, r2
 80042c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	895a      	ldrh	r2, [r3, #10]
 80042da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f004 f974 	bl	80085ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fc:	823b      	strh	r3, [r7, #16]
 80042fe:	8a3b      	ldrh	r3, [r7, #16]
 8004300:	f083 0310 	eor.w	r3, r3, #16
 8004304:	823b      	strh	r3, [r7, #16]
 8004306:	8a3b      	ldrh	r3, [r7, #16]
 8004308:	f083 0320 	eor.w	r3, r3, #32
 800430c:	823b      	strh	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	8a3b      	ldrh	r3, [r7, #16]
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3788      	adds	r7, #136	; 0x88
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	4613      	mov	r3, r2
 800434c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e009      	b.n	8004386 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004372:	897a      	ldrh	r2, [r7, #10]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2200      	movs	r2, #0
 8004390:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	b29a      	uxth	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	80da      	strh	r2, [r3, #6]
 800439a:	e00b      	b.n	80043b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2201      	movs	r2, #1
 80043a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e31d      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4b94      	ldr	r3, [pc, #592]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	4b91      	ldr	r3, [pc, #580]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d07b      	beq.n	80044ea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d006      	beq.n	8004406 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d10f      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004404:	d10b      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	4b87      	ldr	r3, [pc, #540]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d06a      	beq.n	80044e8 <HAL_RCC_OscConfig+0x128>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d166      	bne.n	80044e8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e2f7      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x74>
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7e      	ldr	r2, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e02d      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <HAL_RCC_OscConfig+0x96>
 800443c:	4b79      	ldr	r3, [pc, #484]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a78      	ldr	r2, [pc, #480]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xb8>
 800445e:	4b71      	ldr	r3, [pc, #452]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a70      	ldr	r2, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6e      	ldr	r3, [pc, #440]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6d      	ldr	r2, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a69      	ldr	r2, [pc, #420]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b67      	ldr	r3, [pc, #412]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd fa16 	bl	80018c8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fa12 	bl	80018c8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2ad      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe0>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fa02 	bl	80018c8 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd f9fe 	bl	80018c8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e299      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044da:	4b52      	ldr	r3, [pc, #328]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x108>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d05a      	beq.n	80045ac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d119      	bne.n	8004536 <HAL_RCC_OscConfig+0x176>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_OscConfig+0x160>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e276      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b40      	ldr	r3, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	493d      	ldr	r1, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004534:	e03a      	b.n	80045ac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453e:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <HAL_RCC_OscConfig+0x268>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd f9c0 	bl	80018c8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454c:	f7fd f9bc 	bl	80018c8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e257      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	492a      	ldr	r1, [pc, #168]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
 800457e:	e015      	b.n	80045ac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <HAL_RCC_OscConfig+0x268>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fd f99f 	bl	80018c8 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7fd f99b 	bl	80018c8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e236      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80b8 	beq.w	800472a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d170      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_OscConfig+0x218>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e21a      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d921      	bls.n	800462c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fc4b 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e208      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4906      	ldr	r1, [pc, #24]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	4901      	ldr	r1, [pc, #4]	; (8004624 <HAL_RCC_OscConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e020      	b.n	8004666 <HAL_RCC_OscConfig+0x2a6>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462c:	4b99      	ldr	r3, [pc, #612]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4996      	ldr	r1, [pc, #600]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800463e:	4b95      	ldr	r3, [pc, #596]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	4991      	ldr	r1, [pc, #580]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fc16 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1d3      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	3301      	adds	r3, #1
 800466e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004676:	4a87      	ldr	r2, [pc, #540]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	0912      	lsrs	r2, r2, #4
 800467c:	f002 020f 	and.w	r2, r2, #15
 8004680:	4985      	ldr	r1, [pc, #532]	; (8004898 <HAL_RCC_OscConfig+0x4d8>)
 8004682:	5c8a      	ldrb	r2, [r1, r2]
 8004684:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004686:	4a85      	ldr	r2, [pc, #532]	; (800489c <HAL_RCC_OscConfig+0x4dc>)
 8004688:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800468a:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd f8ce 	bl	8001830 <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d045      	beq.n	800472a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	e1b5      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d029      	beq.n	80046fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046aa:	4b7e      	ldr	r3, [pc, #504]	; (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd f90a 	bl	80018c8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b8:	f7fd f906 	bl	80018c8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1a1      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046ca:	4b72      	ldr	r3, [pc, #456]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	496c      	ldr	r1, [pc, #432]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	4967      	ldr	r1, [pc, #412]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046fe:	4b69      	ldr	r3, [pc, #420]	; (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd f8e0 	bl	80018c8 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd f8dc 	bl	80018c8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e177      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800471e:	4b5d      	ldr	r3, [pc, #372]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d030      	beq.n	8004798 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b5a      	ldr	r3, [pc, #360]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004744:	f7fd f8c0 	bl	80018c8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd f8bc 	bl	80018c8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e157      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800475e:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x38c>
 800476a:	e015      	b.n	8004798 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476c:	4b4e      	ldr	r3, [pc, #312]	; (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fd f8a9 	bl	80018c8 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477a:	f7fd f8a5 	bl	80018c8 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e140      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b5 	beq.w	8004910 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	4a36      	ldr	r2, [pc, #216]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6253      	str	r3, [r2, #36]	; 0x24
 80047c2:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d118      	bne.n	8004810 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b33      	ldr	r3, [pc, #204]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a32      	ldr	r2, [pc, #200]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd f86d 	bl	80018c8 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f2:	f7fd f869 	bl	80018c8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e104      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_RCC_OscConfig+0x4ec>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x466>
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6353      	str	r3, [r2, #52]	; 0x34
 8004824:	e02d      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x488>
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	6353      	str	r3, [r2, #52]	; 0x34
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	6353      	str	r3, [r2, #52]	; 0x34
 8004846:	e01c      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d10c      	bne.n	800486a <HAL_RCC_OscConfig+0x4aa>
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800485a:	6353      	str	r3, [r2, #52]	; 0x34
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	6353      	str	r3, [r2, #52]	; 0x34
 8004868:	e00b      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	6353      	str	r3, [r2, #52]	; 0x34
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	4a06      	ldr	r2, [pc, #24]	; (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800487c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004880:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d024      	beq.n	80048d4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fd f81d 	bl	80018c8 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004890:	e019      	b.n	80048c6 <HAL_RCC_OscConfig+0x506>
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	0800a4a0 	.word	0x0800a4a0
 800489c:	20000000 	.word	0x20000000
 80048a0:	20000004 	.word	0x20000004
 80048a4:	42470020 	.word	0x42470020
 80048a8:	42470680 	.word	0x42470680
 80048ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd f80a 	bl	80018c8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0a3      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c6:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCC_OscConfig+0x4f0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d4:	f7fc fff8 	bl	80018c8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fc fff4 	bl	80018c8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e08d      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048f2:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d079      	beq.n	8004a0c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d056      	beq.n	80049cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b02      	cmp	r3, #2
 8004924:	d13b      	bne.n	800499e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x65c>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fc ffcc 	bl	80018c8 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fc ffc8 	bl	80018c8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e063      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	4319      	orrs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	430b      	orrs	r3, r1
 800496a:	492b      	ldr	r1, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x65c>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004976:	f7fc ffa7 	bl	80018c8 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497e:	f7fc ffa3 	bl	80018c8 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e03e      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x5be>
 800499c:	e036      	b.n	8004a0c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <HAL_RCC_OscConfig+0x65c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fc ff90 	bl	80018c8 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fc ff8c 	bl	80018c8 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e027      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x5ec>
 80049ca:	e01f      	b.n	8004a0c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01a      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <HAL_RCC_OscConfig+0x658>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	42470060 	.word	0x42470060

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e11a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b8f      	ldr	r3, [pc, #572]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d919      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x34>
 8004a48:	4b8a      	ldr	r3, [pc, #552]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a89      	ldr	r2, [pc, #548]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b87      	ldr	r3, [pc, #540]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 0201 	bic.w	r2, r3, #1
 8004a5c:	4985      	ldr	r1, [pc, #532]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0f9      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a82:	4b7d      	ldr	r3, [pc, #500]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	497a      	ldr	r1, [pc, #488]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 808e 	beq.w	8004bbe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aaa:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d121      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0d7      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d115      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0cb      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ada:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0bf      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004aea:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0b7      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	495c      	ldr	r1, [pc, #368]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fc fedc 	bl	80018c8 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fc fed4 	bl	80018c8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e09b      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b32:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d1ee      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xfc>
 8004b3e:	e03e      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4a:	f7fc febd 	bl	80018c8 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e084      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b60:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d1ee      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x12a>
 8004b6c:	e027      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d11d      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fc fea6 	bl	80018c8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e06d      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	4b3a      	ldr	r3, [pc, #232]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d1ee      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x158>
 8004b9a:	e010      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fc fe94 	bl	80018c8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e05b      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d219      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <HAL_RCC_ClockConfig+0x1be>
 8004bd2:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	4923      	ldr	r1, [pc, #140]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e034      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490f      	ldr	r1, [pc, #60]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c3e:	f000 f823 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	490b      	ldr	r1, [pc, #44]	; (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fc fde6 	bl	8001830 <HAL_InitTick>
 8004c64:	4603      	mov	r3, r0
 8004c66:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c68:	7afb      	ldrb	r3, [r7, #11]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	0800a4a0 	.word	0x0800a4a0
 8004c80:	20000000 	.word	0x20000000
 8004c84:	20000004 	.word	0x20000004

08004c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c8c:	b092      	sub	sp, #72	; 0x48
 8004c8e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c90:	4b79      	ldr	r3, [pc, #484]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d00d      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x34>
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f200 80d5 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x28>
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x2e>
 8004cae:	e0cf      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004cb4:	e0da      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cb6:	4b72      	ldr	r3, [pc, #456]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004cba:	e0d7      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	0c9b      	lsrs	r3, r3, #18
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	0d9b      	lsrs	r3, r3, #22
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d05d      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d00:	0150      	lsls	r0, r2, #5
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4621      	mov	r1, r4
 8004d08:	1a51      	subs	r1, r2, r1
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	018b      	lsls	r3, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	018a      	lsls	r2, r1, #6
 8004d2e:	46d4      	mov	ip, sl
 8004d30:	ebb2 080c 	subs.w	r8, r2, ip
 8004d34:	4659      	mov	r1, fp
 8004d36:	eb63 0901 	sbc.w	r9, r3, r1
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4e:	4690      	mov	r8, r2
 8004d50:	4699      	mov	r9, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	eb18 0303 	adds.w	r3, r8, r3
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	eb49 0303 	adc.w	r3, r9, r3
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	024b      	lsls	r3, r1, #9
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	4604      	mov	r4, r0
 8004d78:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	024a      	lsls	r2, r1, #9
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	2200      	movs	r2, #0
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d90:	f7fb fd0e 	bl	80007b0 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9c:	e055      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	2200      	movs	r2, #0
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	627a      	str	r2, [r7, #36]	; 0x24
 8004da6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	0159      	lsls	r1, r3, #5
 8004db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dbc:	0150      	lsls	r0, r2, #5
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	46c4      	mov	ip, r8
 8004dc4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004dc8:	4640      	mov	r0, r8
 8004dca:	4649      	mov	r1, r9
 8004dcc:	468c      	mov	ip, r1
 8004dce:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dde:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004de2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004de6:	ebb2 040a 	subs.w	r4, r2, sl
 8004dea:	eb63 050b 	sbc.w	r5, r3, fp
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	00eb      	lsls	r3, r5, #3
 8004df8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dfc:	00e2      	lsls	r2, r4, #3
 8004dfe:	4614      	mov	r4, r2
 8004e00:	461d      	mov	r5, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	18e3      	adds	r3, r4, r3
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	eb45 0303 	adc.w	r3, r5, r3
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	028b      	lsls	r3, r1, #10
 8004e20:	4620      	mov	r0, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	4604      	mov	r4, r0
 8004e26:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	028a      	lsls	r2, r1, #10
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e3e:	f7fb fcb7 	bl	80007b0 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4613      	mov	r3, r2
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004e4e:	e00d      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	0b5b      	lsrs	r3, r3, #13
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3748      	adds	r7, #72	; 0x48
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	0800a494 	.word	0x0800a494

08004e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d12c      	bne.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ea0:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e016      	b.n	8004ee6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6253      	str	r3, [r2, #36]	; 0x24
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004ed8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004eec:	d105      	bne.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ef4:	d101      	bne.n	8004efa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f06:	f043 0304 	orr.w	r3, r3, #4
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 0201 	bic.w	r2, r3, #1
 8004f14:	490b      	ldr	r1, [pc, #44]	; (8004f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40007000 	.word	0x40007000
 8004f44:	40023c00 	.word	0x40023c00

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e031      	b.n	8004fbe <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc f9ee 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fba8 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start+0x48>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIM_Base_Start+0x88>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start+0x48>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <HAL_TIM_Base_Start+0x8c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start+0x48>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <HAL_TIM_Base_Start+0x90>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40010800 	.word	0x40010800

0800505c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e031      	b.n	80050d2 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f829 	bl	80050da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fb1e 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_TIM_OC_Start_IT+0x24>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e022      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6a>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d109      	bne.n	800512a <HAL_TIM_OC_Start_IT+0x3e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e015      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6a>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d109      	bne.n	8005144 <HAL_TIM_OC_Start_IT+0x58>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e008      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x6a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e097      	b.n	800528e <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <HAL_TIM_OC_Start_IT+0x82>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800516c:	e013      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xaa>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d104      	bne.n	800517e <HAL_TIM_OC_Start_IT+0x92>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800517c:	e00b      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xaa>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d104      	bne.n	800518e <HAL_TIM_OC_Start_IT+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800518c:	e003      	b.n	8005196 <HAL_TIM_OC_Start_IT+0xaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d841      	bhi.n	8005220 <HAL_TIM_OC_Start_IT+0x134>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <HAL_TIM_OC_Start_IT+0xb8>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	08005221 	.word	0x08005221
 80051ac:	08005221 	.word	0x08005221
 80051b0:	08005221 	.word	0x08005221
 80051b4:	080051eb 	.word	0x080051eb
 80051b8:	08005221 	.word	0x08005221
 80051bc:	08005221 	.word	0x08005221
 80051c0:	08005221 	.word	0x08005221
 80051c4:	080051fd 	.word	0x080051fd
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005221 	.word	0x08005221
 80051d0:	08005221 	.word	0x08005221
 80051d4:	0800520f 	.word	0x0800520f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0202 	orr.w	r2, r2, #2
 80051e6:	60da      	str	r2, [r3, #12]
      break;
 80051e8:	e01b      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0204 	orr.w	r2, r2, #4
 80051f8:	60da      	str	r2, [r3, #12]
      break;
 80051fa:	e012      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0208 	orr.w	r2, r2, #8
 800520a:	60da      	str	r2, [r3, #12]
      break;
 800520c:	e009      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0210 	orr.w	r2, r2, #16
 800521c:	60da      	str	r2, [r3, #12]
      break;
 800521e:	e000      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8005220:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc43 	bl	8005ab6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d00e      	beq.n	8005258 <HAL_TIM_OC_Start_IT+0x16c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_TIM_OC_Start_IT+0x1ac>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_TIM_OC_Start_IT+0x16c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <HAL_TIM_OC_Start_IT+0x1b0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_TIM_OC_Start_IT+0x16c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_TIM_OC_Start_IT+0x1b4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d111      	bne.n	800527c <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b06      	cmp	r3, #6
 8005268:	d010      	beq.n	800528c <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e007      	b.n	800528c <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40010800 	.word	0x40010800

080052a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0202 	mvn.w	r2, #2
 80052d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9dd 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb ff64 	bl	80011bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9df 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0204 	mvn.w	r2, #4
 8005324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9b3 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb ff3a 	bl	80011bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f9b5 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b08      	cmp	r3, #8
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0208 	mvn.w	r2, #8
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2204      	movs	r2, #4
 800537e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f989 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fb ff10 	bl	80011bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f98b 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0210 	mvn.w	r2, #16
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2208      	movs	r2, #8
 80053d2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f95f 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fee6 	bl	80011bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f961 	bl	80056b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0201 	mvn.w	r2, #1
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f936 	bl	8005694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f93b 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005472:	2302      	movs	r3, #2
 8005474:	e046      	b.n	8005504 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b0c      	cmp	r3, #12
 8005482:	d839      	bhi.n	80054f8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054c1 	.word	0x080054c1
 8005490:	080054f9 	.word	0x080054f9
 8005494:	080054f9 	.word	0x080054f9
 8005498:	080054f9 	.word	0x080054f9
 800549c:	080054cf 	.word	0x080054cf
 80054a0:	080054f9 	.word	0x080054f9
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054f9 	.word	0x080054f9
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	080054eb 	.word	0x080054eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f96a 	bl	80057a0 <TIM_OC1_SetConfig>
      break;
 80054cc:	e015      	b.n	80054fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f99f 	bl	8005818 <TIM_OC2_SetConfig>
      break;
 80054da:	e00e      	b.n	80054fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f9d6 	bl	8005894 <TIM_OC3_SetConfig>
      break;
 80054e8:	e007      	b.n	80054fa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fa0c 	bl	800590e <TIM_OC4_SetConfig>
      break;
 80054f6:	e000      	b.n	80054fa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80054f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIM_ConfigClockSource+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e0b3      	b.n	800568c <HAL_TIM_ConfigClockSource+0x180>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d03e      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xd0>
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	f200 8087 	bhi.w	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	f000 8085 	beq.w	8005678 <HAL_TIM_ConfigClockSource+0x16c>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d87f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005574:	2b70      	cmp	r3, #112	; 0x70
 8005576:	d01a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xa2>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d87b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800557c:	2b60      	cmp	r3, #96	; 0x60
 800557e:	d050      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x116>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d877      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d03c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xf6>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d873      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d058      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x136>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d86f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d064      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d86b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d060      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d867      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05c      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d05a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055ac:	e062      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f000 fa5b 	bl	8005a78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	609a      	str	r2, [r3, #8]
      break;
 80055da:	e04e      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f000 fa44 	bl	8005a78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fe:	609a      	str	r2, [r3, #8]
      break;
 8005600:	e03b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 f9bb 	bl	800598a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2150      	movs	r1, #80	; 0x50
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fa12 	bl	8005a44 <TIM_ITRx_SetConfig>
      break;
 8005620:	e02b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	461a      	mov	r2, r3
 8005630:	f000 f9d9 	bl	80059e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2160      	movs	r1, #96	; 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fa02 	bl	8005a44 <TIM_ITRx_SetConfig>
      break;
 8005640:	e01b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f99b 	bl	800598a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f9f2 	bl	8005a44 <TIM_ITRx_SetConfig>
      break;
 8005660:	e00b      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 f9e9 	bl	8005a44 <TIM_ITRx_SetConfig>
        break;
 8005672:	e002      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x28>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a25      	ldr	r2, [pc, #148]	; (800578c <TIM_Base_SetConfig+0xb0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x28>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <TIM_Base_SetConfig+0xb4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d013      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1a      	ldr	r2, [pc, #104]	; (800578c <TIM_Base_SetConfig+0xb0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <TIM_Base_SetConfig+0xb4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a18      	ldr	r2, [pc, #96]	; (8005794 <TIM_Base_SetConfig+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a17      	ldr	r2, [pc, #92]	; (8005798 <TIM_Base_SetConfig+0xbc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0x6a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a16      	ldr	r2, [pc, #88]	; (800579c <TIM_Base_SetConfig+0xc0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40010800 	.word	0x40010800
 8005798:	40010c00 	.word	0x40010c00
 800579c:	40011000 	.word	0x40011000

080057a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 0302 	bic.w	r3, r3, #2
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0210 	bic.w	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0320 	bic.w	r3, r3, #32
 8005862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590e:	b480      	push	{r7}
 8005910:	b087      	sub	sp, #28
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	031b      	lsls	r3, r3, #12
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f023 0201 	bic.w	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 030a 	bic.w	r3, r3, #10
 80059c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	621a      	str	r2, [r3, #32]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0210 	bic.w	r2, r3, #16
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	031b      	lsls	r3, r3, #12
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f043 0307 	orr.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	609a      	str	r2, [r3, #8]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	401a      	ands	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e046      	b.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10c      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40010800 	.word	0x40010800

08005bbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bcc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005bd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005bf0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005bf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4013      	ands	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	f107 0014 	add.w	r0, r7, #20
 8005c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	b004      	add	sp, #16
 8005c5a:	4770      	bx	lr

08005c5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b09b      	sub	sp, #108	; 0x6c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d81f      	bhi.n	8005cce <USB_ActivateEndpoint+0x72>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <USB_ActivateEndpoint+0x38>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cd7 	.word	0x08005cd7
 8005ca0:	08005cb3 	.word	0x08005cb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ca4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005cb0:	e012      	b.n	8005cd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005cba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005cbe:	e00b      	b.n	8005cd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ccc:	e004      	b.n	8005cd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005cd4:	e000      	b.n	8005cd8 <USB_ActivateEndpoint+0x7c>
      break;
 8005cd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	7b1b      	ldrb	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 8149 	bne.w	8005fdc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8084 	beq.w	8005e5c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	88db      	ldrh	r3, [r3, #6]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	81fb      	strh	r3, [r7, #14]
 8005d96:	89fb      	ldrh	r3, [r7, #14]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01b      	beq.n	8005dd8 <USB_ActivateEndpoint+0x17c>
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	81bb      	strh	r3, [r7, #12]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	441a      	add	r2, r3
 8005dc2:	89bb      	ldrh	r3, [r7, #12]
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d020      	beq.n	8005e22 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df6:	813b      	strh	r3, [r7, #8]
 8005df8:	893b      	ldrh	r3, [r7, #8]
 8005dfa:	f083 0320 	eor.w	r3, r3, #32
 8005dfe:	813b      	strh	r3, [r7, #8]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]
 8005e20:	e27f      	b.n	8006322 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e38:	817b      	strh	r3, [r7, #10]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	897b      	ldrh	r3, [r7, #10]
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
 8005e5a:	e262      	b.n	8006322 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	4413      	add	r3, r2
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	88db      	ldrh	r3, [r3, #6]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	4413      	add	r3, r2
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d112      	bne.n	8005ee2 <USB_ActivateEndpoint+0x286>
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e02f      	b.n	8005f42 <USB_ActivateEndpoint+0x2e6>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee8:	d813      	bhi.n	8005f12 <USB_ActivateEndpoint+0x2b6>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <USB_ActivateEndpoint+0x2a8>
 8005efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f00:	3301      	adds	r3, #1
 8005f02:	663b      	str	r3, [r7, #96]	; 0x60
 8005f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	029b      	lsls	r3, r3, #10
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e017      	b.n	8005f42 <USB_ActivateEndpoint+0x2e6>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d102      	bne.n	8005f2c <USB_ActivateEndpoint+0x2d0>
 8005f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	83fb      	strh	r3, [r7, #30]
 8005f50:	8bfb      	ldrh	r3, [r7, #30]
 8005f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <USB_ActivateEndpoint+0x336>
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	83bb      	strh	r3, [r7, #28]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	8bbb      	ldrh	r3, [r7, #28]
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa8:	837b      	strh	r3, [r7, #26]
 8005faa:	8b7b      	ldrh	r3, [r7, #26]
 8005fac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fb0:	837b      	strh	r3, [r7, #26]
 8005fb2:	8b7b      	ldrh	r3, [r7, #26]
 8005fb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fb8:	837b      	strh	r3, [r7, #26]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	8b7b      	ldrh	r3, [r7, #26]
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]
 8005fda:	e1a2      	b.n	8006322 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	441a      	add	r2, r3
 8006000:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	65bb      	str	r3, [r7, #88]	; 0x58
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006028:	4413      	add	r3, r2
 800602a:	65bb      	str	r3, [r7, #88]	; 0x58
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	011a      	lsls	r2, r3, #4
 8006032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006034:	4413      	add	r3, r2
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	657b      	str	r3, [r7, #84]	; 0x54
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	891b      	ldrh	r3, [r3, #8]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	653b      	str	r3, [r7, #80]	; 0x50
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605c:	4413      	add	r3, r2
 800605e:	653b      	str	r3, [r7, #80]	; 0x50
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	4413      	add	r3, r2
 800606a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	895b      	ldrh	r3, [r3, #10]
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 8091 	bne.w	80061ac <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006098:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800609a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01b      	beq.n	80060da <USB_ActivateEndpoint+0x47e>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80060e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <USB_ActivateEndpoint+0x4ce>
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	86fb      	strh	r3, [r7, #54]	; 0x36
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006140:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006142:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006144:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006148:	86bb      	strh	r3, [r7, #52]	; 0x34
 800614a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800614c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006150:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006188:	867b      	strh	r3, [r7, #50]	; 0x32
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
 80061aa:	e0ba      	b.n	8006322 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80061bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80061c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01d      	beq.n	8006204 <USB_ActivateEndpoint+0x5a8>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01d      	beq.n	800625c <USB_ActivateEndpoint+0x600>
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	441a      	add	r2, r3
 8006244:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d024      	beq.n	80062ae <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800627e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006282:	f083 0320 	eor.w	r3, r3, #32
 8006286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e01d      	b.n	80062ea <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006326:	4618      	mov	r0, r3
 8006328:	376c      	adds	r7, #108	; 0x6c
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006330:	b480      	push	{r7}
 8006332:	b08d      	sub	sp, #52	; 0x34
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	7b1b      	ldrb	r3, [r3, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 808e 	bne.w	8006460 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d044      	beq.n	80063d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	81bb      	strh	r3, [r7, #12]
 800635a:	89bb      	ldrh	r3, [r7, #12]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01b      	beq.n	800639c <USB_DeactivateEndpoint+0x6c>
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	817b      	strh	r3, [r7, #10]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006398:	b29b      	uxth	r3, r3
 800639a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b2:	813b      	strh	r3, [r7, #8]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8013      	strh	r3, [r2, #0]
 80063d4:	e192      	b.n	80066fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	827b      	strh	r3, [r7, #18]
 80063e4:	8a7b      	ldrh	r3, [r7, #18]
 80063e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01b      	beq.n	8006426 <USB_DeactivateEndpoint+0xf6>
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006404:	823b      	strh	r3, [r7, #16]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	8a3b      	ldrh	r3, [r7, #16]
 8006412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800641e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006422:	b29b      	uxth	r3, r3
 8006424:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	81fb      	strh	r3, [r7, #14]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]
 800645e:	e14d      	b.n	80066fc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 80a5 	bne.w	80065b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	843b      	strh	r3, [r7, #32]
 8006478:	8c3b      	ldrh	r3, [r7, #32]
 800647a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01b      	beq.n	80064ba <USB_DeactivateEndpoint+0x18a>
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006498:	83fb      	strh	r3, [r7, #30]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	83bb      	strh	r3, [r7, #28]
 80064c8:	8bbb      	ldrh	r3, [r7, #28]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01b      	beq.n	800650a <USB_DeactivateEndpoint+0x1da>
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e8:	837b      	strh	r3, [r7, #26]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	441a      	add	r2, r3
 80064f4:	8b7b      	ldrh	r3, [r7, #26]
 80064f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006506:	b29b      	uxth	r3, r3
 8006508:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006520:	833b      	strh	r3, [r7, #24]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	441a      	add	r2, r3
 800652c:	8b3b      	ldrh	r3, [r7, #24]
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	82fb      	strh	r3, [r7, #22]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	8afb      	ldrh	r3, [r7, #22]
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006590:	82bb      	strh	r3, [r7, #20]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	8abb      	ldrh	r3, [r7, #20]
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]
 80065b2:	e0a3      	b.n	80066fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <USB_DeactivateEndpoint+0x2d4>
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006612:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <USB_DeactivateEndpoint+0x324>
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	853b      	strh	r3, [r7, #40]	; 0x28
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006650:	b29b      	uxth	r3, r3
 8006652:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	b29b      	uxth	r3, r3
 800668a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	441a      	add	r2, r3
 80066ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	847b      	strh	r3, [r7, #34]	; 0x22
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3734      	adds	r7, #52	; 0x34
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b0cc      	sub	sp, #304	; 0x130
 800670c:	af00      	add	r7, sp, #0
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006716:	6018      	str	r0, [r3, #0]
 8006718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006720:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b01      	cmp	r3, #1
 8006730:	f041 817d 	bne.w	8007a2e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d908      	bls.n	8006762 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006760:	e007      	b.n	8006772 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	7b1b      	ldrb	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d152      	bne.n	8006828 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6959      	ldr	r1, [r3, #20]
 800678e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	88da      	ldrh	r2, [r3, #6]
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067a8:	6800      	ldr	r0, [r0, #0]
 80067aa:	f001 ff0e 	bl	80085ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80067b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4619      	mov	r1, r3
 80067d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80067dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	440a      	add	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	011a      	lsls	r2, r3, #4
 80067f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4413      	add	r3, r2
 8006804:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006816:	b29a      	uxth	r2, r3
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	f001 b8b5 	b.w	8007992 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	78db      	ldrb	r3, [r3, #3]
 8006834:	2b02      	cmp	r3, #2
 8006836:	f040 84c6 	bne.w	80071c6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800683a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	f240 8443 	bls.w	80070de <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 823e 	beq.w	8006d76 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006902:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006906:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 809a 	bne.w	8006a54 <USB_EPStartXfer+0x34c>
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800692c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006952:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	440a      	add	r2, r1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	011a      	lsls	r2, r3, #4
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4413      	add	r3, r2
 8006976:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d122      	bne.n	80069d2 <USB_EPStartXfer+0x2ca>
 800698c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006990:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	e079      	b.n	8006ac6 <USB_EPStartXfer+0x3be>
 80069d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d6:	2b3e      	cmp	r3, #62	; 0x3e
 80069d8:	d81b      	bhi.n	8006a12 <USB_EPStartXfer+0x30a>
 80069da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <USB_EPStartXfer+0x2f2>
 80069f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f4:	3301      	adds	r3, #1
 80069f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	029b      	lsls	r3, r3, #10
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e059      	b.n	8006ac6 <USB_EPStartXfer+0x3be>
 8006a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <USB_EPStartXfer+0x32a>
 8006a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e038      	b.n	8006ac6 <USB_EPStartXfer+0x3be>
 8006a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d130      	bne.n	8006ac6 <USB_EPStartXfer+0x3be>
 8006a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4619      	mov	r1, r3
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a82:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	440a      	add	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	011a      	lsls	r2, r3, #4
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	895b      	ldrh	r3, [r3, #10]
 8006ad2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6959      	ldr	r1, [r3, #20]
 8006ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006aec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006af0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006af4:	6800      	ldr	r0, [r0, #0]
 8006af6:	f001 fd68 	bl	80085ca <USB_WritePMA>
            ep->xfer_buff += len;
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	441a      	add	r2, r3
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d90f      	bls.n	8006b54 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	621a      	str	r2, [r3, #32]
 8006b52:	e00e      	b.n	8006b72 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 809a 	bne.w	8006cb8 <USB_EPStartXfer+0x5b0>
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006bb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bb6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	011a      	lsls	r2, r3, #4
 8006bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d122      	bne.n	8006c36 <USB_EPStartXfer+0x52e>
 8006bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e083      	b.n	8006d3e <USB_EPStartXfer+0x636>
 8006c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c3c:	d81b      	bhi.n	8006c76 <USB_EPStartXfer+0x56e>
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <USB_EPStartXfer+0x556>
 8006c54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e063      	b.n	8006d3e <USB_EPStartXfer+0x636>
 8006c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <USB_EPStartXfer+0x58e>
 8006c8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c90:	3b01      	subs	r3, #1
 8006c92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c96:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	029b      	lsls	r3, r3, #10
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	e042      	b.n	8006d3e <USB_EPStartXfer+0x636>
 8006cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d13a      	bne.n	8006d3e <USB_EPStartXfer+0x636>
 8006cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ccc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006cd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cd4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4619      	mov	r1, r3
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006cf6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cfa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	440a      	add	r2, r1
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	891b      	ldrh	r3, [r3, #8]
 8006d4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6959      	ldr	r1, [r3, #20]
 8006d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f001 fc2c 	bl	80085ca <USB_WritePMA>
 8006d72:	f000 be0e 	b.w	8007992 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d16d      	bne.n	8006e62 <USB_EPStartXfer+0x75a>
 8006d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da6:	4413      	add	r3, r2
 8006da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	011a      	lsls	r2, r3, #4
 8006db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dba:	4413      	add	r3, r2
 8006dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d112      	bne.n	8006df0 <USB_EPStartXfer+0x6e8>
 8006dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e063      	b.n	8006eb8 <USB_EPStartXfer+0x7b0>
 8006df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df4:	2b3e      	cmp	r3, #62	; 0x3e
 8006df6:	d817      	bhi.n	8006e28 <USB_EPStartXfer+0x720>
 8006df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <USB_EPStartXfer+0x710>
 8006e0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e12:	3301      	adds	r3, #1
 8006e14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	029b      	lsls	r3, r3, #10
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e047      	b.n	8006eb8 <USB_EPStartXfer+0x7b0>
 8006e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <USB_EPStartXfer+0x740>
 8006e3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	029b      	lsls	r3, r3, #10
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e02a      	b.n	8006eb8 <USB_EPStartXfer+0x7b0>
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d122      	bne.n	8006eb8 <USB_EPStartXfer+0x7b0>
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e92:	4413      	add	r3, r2
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	011a      	lsls	r2, r3, #4
 8006ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	891b      	ldrh	r3, [r3, #8]
 8006ec4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6959      	ldr	r1, [r3, #20]
 8006ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ede:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ee2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ee6:	6800      	ldr	r0, [r0, #0]
 8006ee8:	f001 fb6f 	bl	80085ca <USB_WritePMA>
            ep->xfer_buff += len;
 8006eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efc:	441a      	add	r2, r3
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d90f      	bls.n	8006f46 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6a1a      	ldr	r2, [r3, #32]
 8006f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	621a      	str	r2, [r3, #32]
 8006f44:	e00e      	b.n	8006f64 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d16d      	bne.n	800705c <USB_EPStartXfer+0x954>
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	4413      	add	r3, r2
 8006fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	011a      	lsls	r2, r3, #4
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d112      	bne.n	8006fea <USB_EPStartXfer+0x8e2>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e05d      	b.n	80070a6 <USB_EPStartXfer+0x99e>
 8006fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fee:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff0:	d817      	bhi.n	8007022 <USB_EPStartXfer+0x91a>
 8006ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d004      	beq.n	8007012 <USB_EPStartXfer+0x90a>
 8007008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800700c:	3301      	adds	r3, #1
 800700e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007016:	b29b      	uxth	r3, r3
 8007018:	029b      	lsls	r3, r3, #10
 800701a:	b29a      	uxth	r2, r3
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e041      	b.n	80070a6 <USB_EPStartXfer+0x99e>
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800702c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <USB_EPStartXfer+0x93a>
 8007038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800703c:	3b01      	subs	r3, #1
 800703e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007046:	b29b      	uxth	r3, r3
 8007048:	029b      	lsls	r3, r3, #10
 800704a:	b29b      	uxth	r3, r3
 800704c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007054:	b29a      	uxth	r2, r3
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	e024      	b.n	80070a6 <USB_EPStartXfer+0x99e>
 800705c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d11c      	bne.n	80070a6 <USB_EPStartXfer+0x99e>
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	4413      	add	r3, r2
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007094:	4413      	add	r3, r2
 8007096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	895b      	ldrh	r3, [r3, #10]
 80070b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6959      	ldr	r1, [r3, #20]
 80070c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070d4:	6800      	ldr	r0, [r0, #0]
 80070d6:	f001 fa78 	bl	80085ca <USB_WritePMA>
 80070da:	f000 bc5a 	b.w	8007992 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007114:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800714a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716a:	4413      	add	r3, r2
 800716c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	011a      	lsls	r2, r3, #4
 800717c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800717e:	4413      	add	r3, r2
 8007180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007184:	65bb      	str	r3, [r7, #88]	; 0x58
 8007186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718a:	b29a      	uxth	r2, r3
 800718c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800718e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	891b      	ldrh	r3, [r3, #8]
 800719c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6959      	ldr	r1, [r3, #20]
 80071ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071be:	6800      	ldr	r0, [r0, #0]
 80071c0:	f001 fa03 	bl	80085ca <USB_WritePMA>
 80071c4:	e3e5      	b.n	8007992 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80071f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800720e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007216:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800721a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721e:	b29b      	uxth	r3, r3
 8007220:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 81bc 	beq.w	80075e0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d16d      	bne.n	8007362 <USB_EPStartXfer+0xc5a>
 8007286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	67bb      	str	r3, [r7, #120]	; 0x78
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a6:	4413      	add	r3, r2
 80072a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	011a      	lsls	r2, r3, #4
 80072b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ba:	4413      	add	r3, r2
 80072bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c0:	677b      	str	r3, [r7, #116]	; 0x74
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d112      	bne.n	80072f0 <USB_EPStartXfer+0xbe8>
 80072ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e060      	b.n	80073b2 <USB_EPStartXfer+0xcaa>
 80072f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f4:	2b3e      	cmp	r3, #62	; 0x3e
 80072f6:	d817      	bhi.n	8007328 <USB_EPStartXfer+0xc20>
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <USB_EPStartXfer+0xc10>
 800730e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007312:	3301      	adds	r3, #1
 8007314:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007318:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800731c:	b29b      	uxth	r3, r3
 800731e:	029b      	lsls	r3, r3, #10
 8007320:	b29a      	uxth	r2, r3
 8007322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e044      	b.n	80073b2 <USB_EPStartXfer+0xcaa>
 8007328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <USB_EPStartXfer+0xc40>
 800733e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007342:	3b01      	subs	r3, #1
 8007344:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007348:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800734c:	b29b      	uxth	r3, r3
 800734e:	029b      	lsls	r3, r3, #10
 8007350:	b29b      	uxth	r3, r3
 8007352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735a:	b29a      	uxth	r2, r3
 800735c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e027      	b.n	80073b2 <USB_EPStartXfer+0xcaa>
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d11f      	bne.n	80073b2 <USB_EPStartXfer+0xcaa>
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007388:	4413      	add	r3, r2
 800738a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	011a      	lsls	r2, r3, #4
 800739c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	895b      	ldrh	r3, [r3, #10]
 80073be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6959      	ldr	r1, [r3, #20]
 80073ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073e0:	6800      	ldr	r0, [r0, #0]
 80073e2:	f001 f8f2 	bl	80085ca <USB_WritePMA>
          ep->xfer_buff += len;
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f6:	441a      	add	r2, r3
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d90f      	bls.n	8007440 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	621a      	str	r2, [r3, #32]
 800743e:	e00e      	b.n	800745e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8295 	beq.w	8007992 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d16d      	bne.n	8007554 <USB_EPStartXfer+0xe4c>
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	66bb      	str	r3, [r7, #104]	; 0x68
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007498:	4413      	add	r3, r2
 800749a:	66bb      	str	r3, [r7, #104]	; 0x68
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	011a      	lsls	r2, r3, #4
 80074aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074b2:	667b      	str	r3, [r7, #100]	; 0x64
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d112      	bne.n	80074e2 <USB_EPStartXfer+0xdda>
 80074bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074da:	b29a      	uxth	r2, r3
 80074dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e063      	b.n	80075aa <USB_EPStartXfer+0xea2>
 80074e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e6:	2b3e      	cmp	r3, #62	; 0x3e
 80074e8:	d817      	bhi.n	800751a <USB_EPStartXfer+0xe12>
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <USB_EPStartXfer+0xe02>
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007504:	3301      	adds	r3, #1
 8007506:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29a      	uxth	r2, r3
 8007514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	e047      	b.n	80075aa <USB_EPStartXfer+0xea2>
 800751a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <USB_EPStartXfer+0xe32>
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007534:	3b01      	subs	r3, #1
 8007536:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e02a      	b.n	80075aa <USB_EPStartXfer+0xea2>
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d122      	bne.n	80075aa <USB_EPStartXfer+0xea2>
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	673b      	str	r3, [r7, #112]	; 0x70
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007584:	4413      	add	r3, r2
 8007586:	673b      	str	r3, [r7, #112]	; 0x70
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007598:	4413      	add	r3, r2
 800759a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800759e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	891b      	ldrh	r3, [r3, #8]
 80075b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6959      	ldr	r1, [r3, #20]
 80075c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075d8:	6800      	ldr	r0, [r0, #0]
 80075da:	f000 fff6 	bl	80085ca <USB_WritePMA>
 80075de:	e1d8      	b.n	8007992 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d178      	bne.n	80076e2 <USB_EPStartXfer+0xfda>
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760c:	b29b      	uxth	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007614:	4413      	add	r3, r2
 8007616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	011a      	lsls	r2, r3, #4
 8007628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800762c:	4413      	add	r3, r2
 800762e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d116      	bne.n	800766c <USB_EPStartXfer+0xf64>
 800763e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764a:	b29a      	uxth	r2, r3
 800764c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e06b      	b.n	8007744 <USB_EPStartXfer+0x103c>
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	2b3e      	cmp	r3, #62	; 0x3e
 8007672:	d818      	bhi.n	80076a6 <USB_EPStartXfer+0xf9e>
 8007674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800767e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <USB_EPStartXfer+0xf8c>
 800768a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800768e:	3301      	adds	r3, #1
 8007690:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007694:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007698:	b29b      	uxth	r3, r3
 800769a:	029b      	lsls	r3, r3, #10
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e04e      	b.n	8007744 <USB_EPStartXfer+0x103c>
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80076b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <USB_EPStartXfer+0xfbe>
 80076bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80076c0:	3b01      	subs	r3, #1
 80076c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80076c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e030      	b.n	8007744 <USB_EPStartXfer+0x103c>
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d128      	bne.n	8007744 <USB_EPStartXfer+0x103c>
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007716:	4413      	add	r3, r2
 8007718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	011a      	lsls	r2, r3, #4
 800772a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800772e:	4413      	add	r3, r2
 8007730:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007742:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	891b      	ldrh	r3, [r3, #8]
 8007750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6959      	ldr	r1, [r3, #20]
 8007760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007764:	b29b      	uxth	r3, r3
 8007766:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800776a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800776e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007772:	6800      	ldr	r0, [r0, #0]
 8007774:	f000 ff29 	bl	80085ca <USB_WritePMA>
          ep->xfer_buff += len;
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	441a      	add	r2, r3
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90f      	bls.n	80077d2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	621a      	str	r2, [r3, #32]
 80077d0:	e00e      	b.n	80077f0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80077e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80cc 	beq.w	8007992 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d178      	bne.n	800790a <USB_EPStartXfer+0x1202>
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800783c:	4413      	add	r3, r2
 800783e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	011a      	lsls	r2, r3, #4
 8007850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007854:	4413      	add	r3, r2
 8007856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800785a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d116      	bne.n	8007894 <USB_EPStartXfer+0x118c>
 8007866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e064      	b.n	800795e <USB_EPStartXfer+0x1256>
 8007894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007898:	2b3e      	cmp	r3, #62	; 0x3e
 800789a:	d818      	bhi.n	80078ce <USB_EPStartXfer+0x11c6>
 800789c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <USB_EPStartXfer+0x11b4>
 80078b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e047      	b.n	800795e <USB_EPStartXfer+0x1256>
 80078ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <USB_EPStartXfer+0x11e6>
 80078e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e8:	3b01      	subs	r3, #1
 80078ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	029b      	lsls	r3, r3, #10
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e029      	b.n	800795e <USB_EPStartXfer+0x1256>
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d121      	bne.n	800795e <USB_EPStartXfer+0x1256>
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007928:	b29b      	uxth	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007930:	4413      	add	r3, r2
 8007932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	011a      	lsls	r2, r3, #4
 8007944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007948:	4413      	add	r3, r2
 800794a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800794e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800795c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800795e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	895b      	ldrh	r3, [r3, #10]
 800796a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6959      	ldr	r1, [r3, #20]
 800797a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797e:	b29b      	uxth	r3, r3
 8007980:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007984:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007988:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f000 fe1c 	bl	80085ca <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079b4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80079b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c0:	8013      	strh	r3, [r2, #0]
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80079ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079ce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80079d2:	8812      	ldrh	r2, [r2, #0]
 80079d4:	f082 0210 	eor.w	r2, r2, #16
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80079e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079e6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80079ea:	8812      	ldrh	r2, [r2, #0]
 80079ec:	f082 0220 	eor.w	r2, r2, #32
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a10:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]
 8007a2a:	f000 bc9f 	b.w	800836c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	7b1b      	ldrb	r3, [r3, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 80ae 	bne.w	8007b9c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699a      	ldr	r2, [r3, #24]
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d917      	bls.n	8007a8c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699a      	ldr	r2, [r3, #24]
 8007a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	619a      	str	r2, [r3, #24]
 8007a8a:	e00e      	b.n	8007aaa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ace:	4413      	add	r3, r2
 8007ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	011a      	lsls	r2, r3, #4
 8007ae2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d116      	bne.n	8007b26 <USB_EPStartXfer+0x141e>
 8007af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	e3e8      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
 8007b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2c:	d818      	bhi.n	8007b60 <USB_EPStartXfer+0x1458>
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <USB_EPStartXfer+0x1446>
 8007b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b48:	3301      	adds	r3, #1
 8007b4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	029b      	lsls	r3, r3, #10
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	e3cb      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
 8007b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <USB_EPStartXfer+0x1478>
 8007b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	029b      	lsls	r3, r3, #10
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e3ad      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	f040 8200 	bne.w	8007fae <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 8091 	bne.w	8007ce2 <USB_EPStartXfer+0x15da>
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007be4:	4413      	add	r3, r2
 8007be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	011a      	lsls	r2, r3, #4
 8007bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d116      	bne.n	8007c44 <USB_EPStartXfer+0x153c>
 8007c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e083      	b.n	8007d4c <USB_EPStartXfer+0x1644>
 8007c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b3e      	cmp	r3, #62	; 0x3e
 8007c52:	d820      	bhi.n	8007c96 <USB_EPStartXfer+0x158e>
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <USB_EPStartXfer+0x157c>
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7e:	3301      	adds	r3, #1
 8007c80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	029b      	lsls	r3, r3, #10
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e05a      	b.n	8007d4c <USB_EPStartXfer+0x1644>
 8007c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	095b      	lsrs	r3, r3, #5
 8007ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 031f 	and.w	r3, r3, #31
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <USB_EPStartXfer+0x15be>
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	029b      	lsls	r3, r3, #10
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e034      	b.n	8007d4c <USB_EPStartXfer+0x1644>
 8007ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d12c      	bne.n	8007d4c <USB_EPStartXfer+0x1644>
 8007cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d16:	4413      	add	r3, r2
 8007d18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	011a      	lsls	r2, r3, #4
 8007d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d2e:	4413      	add	r3, r2
 8007d30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d4a:	801a      	strh	r2, [r3, #0]
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 8091 	bne.w	8007e8e <USB_EPStartXfer+0x1786>
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d90:	4413      	add	r3, r2
 8007d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	011a      	lsls	r2, r3, #4
 8007da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007da8:	4413      	add	r3, r2
 8007daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d116      	bne.n	8007df0 <USB_EPStartXfer+0x16e8>
 8007dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e07c      	b.n	8007eea <USB_EPStartXfer+0x17e2>
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dfe:	d820      	bhi.n	8007e42 <USB_EPStartXfer+0x173a>
 8007e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USB_EPStartXfer+0x1728>
 8007e26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e3e:	801a      	strh	r2, [r3, #0]
 8007e40:	e053      	b.n	8007eea <USB_EPStartXfer+0x17e2>
 8007e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <USB_EPStartXfer+0x176a>
 8007e68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e02d      	b.n	8007eea <USB_EPStartXfer+0x17e2>
 8007e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d125      	bne.n	8007eea <USB_EPStartXfer+0x17e2>
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	011a      	lsls	r2, r3, #4
 8007ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ecc:	4413      	add	r3, r2
 8007ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ee8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 81fe 	beq.w	80082f8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f1c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <USB_EPStartXfer+0x182c>
 8007f28:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f34:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 81db 	bne.w	80082f8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f42:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 81d4 	bne.w	80082f8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	8013      	strh	r3, [r2, #0]
 8007fac:	e1a4      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	78db      	ldrb	r3, [r3, #3]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	f040 819a 	bne.w	80082f4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d917      	bls.n	800800c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	1ad2      	subs	r2, r2, r3
 8007ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	619a      	str	r2, [r3, #24]
 800800a:	e00e      	b.n	800802a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800801c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d178      	bne.n	800812c <USB_EPStartXfer+0x1a24>
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008056:	b29b      	uxth	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800805e:	4413      	add	r3, r2
 8008060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	011a      	lsls	r2, r3, #4
 8008072:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008076:	4413      	add	r3, r2
 8008078:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800807c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d116      	bne.n	80080b6 <USB_EPStartXfer+0x19ae>
 8008088:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	e06b      	b.n	800818e <USB_EPStartXfer+0x1a86>
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ba:	2b3e      	cmp	r3, #62	; 0x3e
 80080bc:	d818      	bhi.n	80080f0 <USB_EPStartXfer+0x19e8>
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <USB_EPStartXfer+0x19d6>
 80080d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d8:	3301      	adds	r3, #1
 80080da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	029b      	lsls	r3, r3, #10
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	e04e      	b.n	800818e <USB_EPStartXfer+0x1a86>
 80080f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f4:	095b      	lsrs	r3, r3, #5
 80080f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <USB_EPStartXfer+0x1a08>
 8008106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800810a:	3b01      	subs	r3, #1
 800810c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29b      	uxth	r3, r3
 800811a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	e030      	b.n	800818e <USB_EPStartXfer+0x1a86>
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d128      	bne.n	800818e <USB_EPStartXfer+0x1a86>
 800813c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800814a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008160:	4413      	add	r3, r2
 8008162:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	011a      	lsls	r2, r3, #4
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008178:	4413      	add	r3, r2
 800817a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800817e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008186:	b29a      	uxth	r2, r3
 8008188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d178      	bne.n	800829e <USB_EPStartXfer+0x1b96>
 80081ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	011a      	lsls	r2, r3, #4
 80081e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e8:	4413      	add	r3, r2
 80081ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d116      	bne.n	8008228 <USB_EPStartXfer+0x1b20>
 80081fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008206:	b29a      	uxth	r2, r3
 8008208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	e067      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
 8008228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822c:	2b3e      	cmp	r3, #62	; 0x3e
 800822e:	d818      	bhi.n	8008262 <USB_EPStartXfer+0x1b5a>
 8008230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USB_EPStartXfer+0x1b48>
 8008246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008254:	b29b      	uxth	r3, r3
 8008256:	029b      	lsls	r3, r3, #10
 8008258:	b29a      	uxth	r2, r3
 800825a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	e04a      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
 8008262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800826c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <USB_EPStartXfer+0x1b7a>
 8008278:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800827c:	3b01      	subs	r3, #1
 800827e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e02c      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d124      	bne.n	80082f8 <USB_EPStartXfer+0x1bf0>
 80082ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082bc:	b29b      	uxth	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c4:	4413      	add	r3, r2
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	011a      	lsls	r2, r3, #4
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082dc:	4413      	add	r3, r2
 80082de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	e001      	b.n	80082f8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e03a      	b.n	800836e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008322:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008326:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800832a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800832e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008336:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800833a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	441a      	add	r2, r3
 8008354:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008368:	b29b      	uxth	r3, r3
 800836a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d020      	beq.n	80083cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a0:	81bb      	strh	r3, [r7, #12]
 80083a2:	89bb      	ldrh	r3, [r7, #12]
 80083a4:	f083 0310 	eor.w	r3, r3, #16
 80083a8:	81bb      	strh	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	89bb      	ldrh	r3, [r7, #12]
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]
 80083ca:	e01f      	b.n	800840c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	81fb      	strh	r3, [r7, #14]
 80083e4:	89fb      	ldrh	r3, [r7, #14]
 80083e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083ea:	81fb      	strh	r3, [r7, #14]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	441a      	add	r2, r3
 80083f6:	89fb      	ldrh	r3, [r7, #14]
 80083f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008408:	b29b      	uxth	r3, r3
 800840a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	7b1b      	ldrb	r3, [r3, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f040 809d 	bne.w	8008566 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d04c      	beq.n	80084ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	823b      	strh	r3, [r7, #16]
 8008442:	8a3b      	ldrh	r3, [r7, #16]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <USB_EPClearStall+0x6c>
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	81fb      	strh	r3, [r7, #14]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	89fb      	ldrh	r3, [r7, #14]
 8008470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008480:	b29b      	uxth	r3, r3
 8008482:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	78db      	ldrb	r3, [r3, #3]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d06c      	beq.n	8008566 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a2:	81bb      	strh	r3, [r7, #12]
 80084a4:	89bb      	ldrh	r3, [r7, #12]
 80084a6:	f083 0320 	eor.w	r3, r3, #32
 80084aa:	81bb      	strh	r3, [r7, #12]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	89bb      	ldrh	r3, [r7, #12]
 80084b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	8013      	strh	r3, [r2, #0]
 80084cc:	e04b      	b.n	8008566 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	82fb      	strh	r3, [r7, #22]
 80084dc:	8afb      	ldrh	r3, [r7, #22]
 80084de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <USB_EPClearStall+0x106>
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	82bb      	strh	r3, [r7, #20]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	441a      	add	r2, r3
 8008508:	8abb      	ldrh	r3, [r7, #20]
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	827b      	strh	r3, [r7, #18]
 8008536:	8a7b      	ldrh	r3, [r7, #18]
 8008538:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800853c:	827b      	strh	r3, [r7, #18]
 800853e:	8a7b      	ldrh	r3, [r7, #18]
 8008540:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008544:	827b      	strh	r3, [r7, #18]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	8a7b      	ldrh	r3, [r7, #18]
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085be:	68fb      	ldr	r3, [r7, #12]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b08d      	sub	sp, #52	; 0x34
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	80fb      	strh	r3, [r7, #6]
 80085dc:	4613      	mov	r3, r2
 80085de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085e0:	88bb      	ldrh	r3, [r7, #4]
 80085e2:	3301      	adds	r3, #1
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085f0:	88fb      	ldrh	r3, [r7, #6]
 80085f2:	005a      	lsls	r2, r3, #1
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008602:	e01e      	b.n	8008642 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	3301      	adds	r3, #1
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	b29b      	uxth	r3, r3
 800861a:	461a      	mov	r2, r3
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	b29a      	uxth	r2, r3
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	3302      	adds	r3, #2
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	3302      	adds	r3, #2
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	3301      	adds	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	3b01      	subs	r3, #1
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1dd      	bne.n	8008604 <USB_WritePMA+0x3a>
  }
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	3734      	adds	r7, #52	; 0x34
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr

08008654 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008654:	b480      	push	{r7}
 8008656:	b08b      	sub	sp, #44	; 0x2c
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4611      	mov	r1, r2
 8008660:	461a      	mov	r2, r3
 8008662:	460b      	mov	r3, r1
 8008664:	80fb      	strh	r3, [r7, #6]
 8008666:	4613      	mov	r3, r2
 8008668:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800866a:	88bb      	ldrh	r3, [r7, #4]
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	b29b      	uxth	r3, r3
 8008670:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	005a      	lsls	r2, r3, #1
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008686:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
 800868c:	e01b      	b.n	80086c6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	3302      	adds	r3, #2
 800869a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	3301      	adds	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	0a1b      	lsrs	r3, r3, #8
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	3301      	adds	r3, #1
 80086b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	3302      	adds	r3, #2
 80086be:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	3b01      	subs	r3, #1
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e0      	bne.n	800868e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80086cc:	88bb      	ldrh	r3, [r7, #4]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	701a      	strb	r2, [r3, #0]
  }
}
 80086e8:	bf00      	nop
 80086ea:	372c      	adds	r7, #44	; 0x2c
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr

080086f2 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008702:	2302      	movs	r3, #2
 8008704:	2203      	movs	r2, #3
 8008706:	2181      	movs	r1, #129	; 0x81
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fd04 	bl	800a116 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008714:	2302      	movs	r3, #2
 8008716:	2203      	movs	r2, #3
 8008718:	2101      	movs	r1, #1
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fcfb 	bl	800a116 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8008728:	2024      	movs	r0, #36	; 0x24
 800872a:	f001 fe09 	bl	800a340 <USBD_static_malloc>
 800872e:	4602      	mov	r2, r0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	e012      	b.n	800876c <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800874c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	230d      	movs	r3, #13
 8008764:	2101      	movs	r1, #1
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fdc6 	bl	800a2f8 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008782:	2181      	movs	r1, #129	; 0x81
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fcec 	bl	800a162 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008790:	2101      	movs	r1, #1
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fce5 	bl	800a162 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00e      	beq.n	80087c8 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fdcc 	bl	800a358 <USBD_static_free>
    pdev->pClassData = NULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087e4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d051      	beq.n	80088a6 <USBD_CUSTOM_HID_Setup+0xd2>
 8008802:	2b20      	cmp	r3, #32
 8008804:	f040 80d8 	bne.w	80089b8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	3b02      	subs	r3, #2
 800880e:	2b09      	cmp	r3, #9
 8008810:	d841      	bhi.n	8008896 <USBD_CUSTOM_HID_Setup+0xc2>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <USBD_CUSTOM_HID_Setup+0x44>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	0800884f 	.word	0x0800884f
 8008820:	08008897 	.word	0x08008897
 8008824:	08008897 	.word	0x08008897
 8008828:	08008897 	.word	0x08008897
 800882c:	08008897 	.word	0x08008897
 8008830:	08008897 	.word	0x08008897
 8008834:	08008881 	.word	0x08008881
 8008838:	0800885f 	.word	0x0800885f
 800883c:	08008841 	.word	0x08008841
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	461a      	mov	r2, r3
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	611a      	str	r2, [r3, #16]
      break;
 800884c:	e02a      	b.n	80088a4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3310      	adds	r3, #16
 8008852:	2201      	movs	r2, #1
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f92b 	bl	8009ab2 <USBD_CtlSendData>
      break;
 800885c:	e022      	b.n	80088a4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	885b      	ldrh	r3, [r3, #2]
 8008862:	0a1b      	lsrs	r3, r3, #8
 8008864:	b29b      	uxth	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	615a      	str	r2, [r3, #20]
      break;
 800886e:	e019      	b.n	80088a4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3314      	adds	r3, #20
 8008874:	2201      	movs	r2, #1
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f91a 	bl	8009ab2 <USBD_CtlSendData>
      break;
 800887e:	e011      	b.n	80088a4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2201      	movs	r2, #1
 8008884:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8008886:	6939      	ldr	r1, [r7, #16]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	88db      	ldrh	r3, [r3, #6]
 800888c:	461a      	mov	r2, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 f93d 	bl	8009b0e <USBD_CtlPrepareRx>
      break;
 8008894:	e006      	b.n	80088a4 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f8a0 	bl	80099de <USBD_CtlError>
      ret = USBD_FAIL;
 800889e:	2302      	movs	r3, #2
 80088a0:	75fb      	strb	r3, [r7, #23]
      break;
 80088a2:	bf00      	nop
    }
    break;
 80088a4:	e08f      	b.n	80089c6 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b0b      	cmp	r3, #11
 80088ac:	d87c      	bhi.n	80089a8 <USBD_CUSTOM_HID_Setup+0x1d4>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <USBD_CUSTOM_HID_Setup+0xe0>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	080089a9 	.word	0x080089a9
 80088bc:	080089a9 	.word	0x080089a9
 80088c0:	080089a9 	.word	0x080089a9
 80088c4:	080089a9 	.word	0x080089a9
 80088c8:	080089a9 	.word	0x080089a9
 80088cc:	0800890d 	.word	0x0800890d
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	080089a9 	.word	0x080089a9
 80088d8:	080089a9 	.word	0x080089a9
 80088dc:	0800895b 	.word	0x0800895b
 80088e0:	08008983 	.word	0x08008983
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d107      	bne.n	80088fe <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80088ee:	f107 030e 	add.w	r3, r7, #14
 80088f2:	2202      	movs	r2, #2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f8db 	bl	8009ab2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088fc:	e05b      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f86c 	bl	80099de <USBD_CtlError>
			  ret = USBD_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	75fb      	strb	r3, [r7, #23]
      break;
 800890a:	e054      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b22      	cmp	r3, #34	; 0x22
 8008916:	d10b      	bne.n	8008930 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b41      	cmp	r3, #65	; 0x41
 800891e:	bf28      	it	cs
 8008920:	2341      	movcs	r3, #65	; 0x41
 8008922:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	e00d      	b.n	800894c <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	885b      	ldrh	r3, [r3, #2]
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	2b21      	cmp	r3, #33	; 0x21
 800893a:	d107      	bne.n	800894c <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800893c:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800893e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	88db      	ldrh	r3, [r3, #6]
 8008944:	2b09      	cmp	r3, #9
 8008946:	bf28      	it	cs
 8008948:	2309      	movcs	r3, #9
 800894a:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 800894c:	8bfb      	ldrh	r3, [r7, #30]
 800894e:	461a      	mov	r2, r3
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 f8ad 	bl	8009ab2 <USBD_CtlSendData>
      break;
 8008958:	e02d      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008960:	2b03      	cmp	r3, #3
 8008962:	d107      	bne.n	8008974 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3318      	adds	r3, #24
 8008968:	2201      	movs	r2, #1
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 f8a0 	bl	8009ab2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008972:	e020      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 f831 	bl	80099de <USBD_CtlError>
			  ret = USBD_FAIL;
 800897c:	2302      	movs	r3, #2
 800897e:	75fb      	strb	r3, [r7, #23]
      break;
 8008980:	e019      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008988:	2b03      	cmp	r3, #3
 800898a:	d106      	bne.n	800899a <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	461a      	mov	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008998:	e00d      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 f81e 	bl	80099de <USBD_CtlError>
			  ret = USBD_FAIL;
 80089a2:	2302      	movs	r3, #2
 80089a4:	75fb      	strb	r3, [r7, #23]
      break;
 80089a6:	e006      	b.n	80089b6 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f817 	bl	80099de <USBD_CtlError>
      ret = USBD_FAIL;
 80089b0:	2302      	movs	r3, #2
 80089b2:	75fb      	strb	r3, [r7, #23]
      break;
 80089b4:	bf00      	nop
    }
    break;
 80089b6:	e006      	b.n	80089c6 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 f80f 	bl	80099de <USBD_CtlError>
    ret = USBD_FAIL;
 80089c0:	2302      	movs	r3, #2
 80089c2:	75fb      	strb	r3, [r7, #23]
    break;
 80089c4:	bf00      	nop
  }
  return ret;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	200000c8 	.word	0x200000c8

080089d4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089e8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d111      	bne.n	8008a18 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	2181      	movs	r1, #129	; 0x81
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f001 fc50 	bl	800a2b2 <USBD_LL_Transmit>
 8008a12:	e001      	b.n	8008a18 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e000      	b.n	8008a1a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2229      	movs	r2, #41	; 0x29
 8008a30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000044 	.word	0x20000044

08008a44 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2229      	movs	r2, #41	; 0x29
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20000070 	.word	0x20000070

08008a64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2229      	movs	r2, #41	; 0x29
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	2000009c 	.word	0x2000009c

08008a84 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008aba:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	7810      	ldrb	r0, [r2, #0]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	7852      	ldrb	r2, [r2, #1]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	230d      	movs	r3, #13
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fc0e 	bl	800a2f8 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008af4:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10c      	bne.n	8008b18 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	7810      	ldrb	r0, [r2, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	7852      	ldrb	r2, [r2, #1]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	220a      	movs	r2, #10
 8008b30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008b32:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	200000d4 	.word	0x200000d4

08008b44 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr

08008b70 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b84:	2302      	movs	r3, #2
 8008b86:	e01a      	b.n	8008bbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f001 fa42 	bl	800a040 <USBD_LL_Init>

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e001      	b.n	8008bec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008be8:	2302      	movs	r3, #2
 8008bea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr

08008bf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fa6d 	bl	800a0e0 <USBD_LL_Start>

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bc80      	pop	{r7}
 8008c22:	4770      	bx	lr

08008c24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008c30:	2302      	movs	r3, #2
 8008c32:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00c      	beq.n	8008c58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
  return USBD_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fe63 	bl	8009966 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d016      	beq.n	8008cf2 <USBD_LL_SetupStage+0x6a>
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d81c      	bhi.n	8008d02 <USBD_LL_SetupStage+0x7a>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <USBD_LL_SetupStage+0x4a>
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d008      	beq.n	8008ce2 <USBD_LL_SetupStage+0x5a>
 8008cd0:	e017      	b.n	8008d02 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9c6 	bl	800906c <USBD_StdDevReq>
    break;
 8008ce0:	e01a      	b.n	8008d18 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa28 	bl	8009140 <USBD_StdItfReq>
    break;
 8008cf0:	e012      	b.n	8008d18 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa68 	bl	80091d0 <USBD_StdEPReq>
    break;
 8008d00:	e00a      	b.n	8008d18 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008d08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fa45 	bl	800a1a0 <USBD_LL_StallEP>
    break;
 8008d16:	bf00      	nop
  }

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d14b      	bne.n	8008dce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008d3c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d134      	bne.n	8008db2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d919      	bls.n	8008d88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d203      	bcs.n	8008d76 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	e002      	b.n	8008d7c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fee2 	bl	8009b4a <USBD_CtlContinueRx>
 8008d86:	e038      	b.n	8008dfa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d105      	bne.n	8008daa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fedf 	bl	8009b6e <USBD_CtlSendStatus>
 8008db0:	e023      	b.n	8008dfa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008db8:	2b05      	cmp	r3, #5
 8008dba:	d11e      	bne.n	8008dfa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 f9ea 	bl	800a1a0 <USBD_LL_StallEP>
 8008dcc:	e015      	b.n	8008dfa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00d      	beq.n	8008df6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d108      	bne.n	8008df6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	7afa      	ldrb	r2, [r7, #11]
 8008dee:	4611      	mov	r1, r2
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	4798      	blx	r3
 8008df4:	e001      	b.n	8008dfa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008df6:	2302      	movs	r3, #2
 8008df8:	e000      	b.n	8008dfc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d17f      	bne.n	8008f18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3314      	adds	r3, #20
 8008e1c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d15c      	bne.n	8008ee2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d915      	bls.n	8008e60 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	1ad2      	subs	r2, r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fe4c 	bl	8009aea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008e52:	2300      	movs	r3, #0
 8008e54:	2200      	movs	r2, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f001 fa4d 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008e5e:	e04e      	b.n	8008efe <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	6912      	ldr	r2, [r2, #16]
 8008e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e6c:	fb01 f202 	mul.w	r2, r1, r2
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d11c      	bne.n	8008eb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d316      	bcc.n	8008eb0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d20f      	bcs.n	8008eb0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fe28 	bl	8009aea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 fa25 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008eae:	e026      	b.n	8008efe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d105      	bne.n	8008ed2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008ed2:	2180      	movs	r1, #128	; 0x80
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f001 f963 	bl	800a1a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 fe5a 	bl	8009b94 <USBD_CtlReceiveStatus>
 8008ee0:	e00d      	b.n	8008efe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d004      	beq.n	8008ef6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ef6:	2180      	movs	r1, #128	; 0x80
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f001 f951 	bl	800a1a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d11d      	bne.n	8008f44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fe81 	bl	8008c10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008f16:	e015      	b.n	8008f44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00d      	beq.n	8008f40 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d108      	bne.n	8008f40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
 8008f3e:	e001      	b.n	8008f44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	e000      	b.n	8008f46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f8da 	bl	800a116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2240      	movs	r2, #64	; 0x40
 8008f6e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	2200      	movs	r2, #0
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f8cc 	bl	800a116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2240      	movs	r2, #64	; 0x40
 8008f88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d009      	beq.n	8008fc6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6852      	ldr	r2, [r2, #4]
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
  }

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr

08008fee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2204      	movs	r2, #4
 8009006:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	bc80      	pop	{r7}
 8009034:	4770      	bx	lr

08009036 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009044:	2b03      	cmp	r3, #3
 8009046:	d10b      	bne.n	8009060 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d005      	beq.n	8009092 <USBD_StdDevReq+0x26>
 8009086:	2b40      	cmp	r3, #64	; 0x40
 8009088:	d84f      	bhi.n	800912a <USBD_StdDevReq+0xbe>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <USBD_StdDevReq+0x36>
 800908e:	2b20      	cmp	r3, #32
 8009090:	d14b      	bne.n	800912a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
    break;
 80090a0:	e048      	b.n	8009134 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d839      	bhi.n	800911e <USBD_StdDevReq+0xb2>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <USBD_StdDevReq+0x44>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	08009101 	.word	0x08009101
 80090b4:	08009115 	.word	0x08009115
 80090b8:	0800911f 	.word	0x0800911f
 80090bc:	0800910b 	.word	0x0800910b
 80090c0:	0800911f 	.word	0x0800911f
 80090c4:	080090e3 	.word	0x080090e3
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	0800911f 	.word	0x0800911f
 80090d0:	080090f7 	.word	0x080090f7
 80090d4:	080090ed 	.word	0x080090ed
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9da 	bl	8009494 <USBD_GetDescriptor>
      break;
 80090e0:	e022      	b.n	8009128 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 facf 	bl	8009688 <USBD_SetAddress>
      break;
 80090ea:	e01d      	b.n	8009128 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb0e 	bl	8009710 <USBD_SetConfig>
      break;
 80090f4:	e018      	b.n	8009128 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb97 	bl	800982c <USBD_GetConfig>
      break;
 80090fe:	e013      	b.n	8009128 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fbc7 	bl	8009896 <USBD_GetStatus>
      break;
 8009108:	e00e      	b.n	8009128 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fbf5 	bl	80098fc <USBD_SetFeature>
      break;
 8009112:	e009      	b.n	8009128 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fc04 	bl	8009924 <USBD_ClrFeature>
      break;
 800911c:	e004      	b.n	8009128 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fc5c 	bl	80099de <USBD_CtlError>
      break;
 8009126:	bf00      	nop
    }
    break;
 8009128:	e004      	b.n	8009134 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fc56 	bl	80099de <USBD_CtlError>
    break;
 8009132:	bf00      	nop
  }

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop

08009140 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d005      	beq.n	8009166 <USBD_StdItfReq+0x26>
 800915a:	2b40      	cmp	r3, #64	; 0x40
 800915c:	d82e      	bhi.n	80091bc <USBD_StdItfReq+0x7c>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <USBD_StdItfReq+0x26>
 8009162:	2b20      	cmp	r3, #32
 8009164:	d12a      	bne.n	80091bc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800916c:	3b01      	subs	r3, #1
 800916e:	2b02      	cmp	r3, #2
 8009170:	d81d      	bhi.n	80091ae <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	889b      	ldrh	r3, [r3, #4]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	d813      	bhi.n	80091a4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d110      	bne.n	80091b8 <USBD_StdItfReq+0x78>
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10d      	bne.n	80091b8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fce6 	bl	8009b6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80091a2:	e009      	b.n	80091b8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc19 	bl	80099de <USBD_CtlError>
      break;
 80091ac:	e004      	b.n	80091b8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc14 	bl	80099de <USBD_CtlError>
      break;
 80091b6:	e000      	b.n	80091ba <USBD_StdItfReq+0x7a>
      break;
 80091b8:	bf00      	nop
    }
    break;
 80091ba:	e004      	b.n	80091c6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fc0d 	bl	80099de <USBD_CtlError>
    break;
 80091c4:	bf00      	nop
  }

  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	889b      	ldrh	r3, [r3, #4]
 80091e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d007      	beq.n	8009200 <USBD_StdEPReq+0x30>
 80091f0:	2b40      	cmp	r3, #64	; 0x40
 80091f2:	f200 8144 	bhi.w	800947e <USBD_StdEPReq+0x2ae>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <USBD_StdEPReq+0x40>
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	f040 813f 	bne.w	800947e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
    break;
 800920e:	e13b      	b.n	8009488 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009218:	2b20      	cmp	r3, #32
 800921a:	d10a      	bne.n	8009232 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	e12b      	b.n	800948a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d007      	beq.n	800924a <USBD_StdEPReq+0x7a>
 800923a:	2b03      	cmp	r3, #3
 800923c:	f300 8119 	bgt.w	8009472 <USBD_StdEPReq+0x2a2>
 8009240:	2b00      	cmp	r3, #0
 8009242:	d072      	beq.n	800932a <USBD_StdEPReq+0x15a>
 8009244:	2b01      	cmp	r3, #1
 8009246:	d03a      	beq.n	80092be <USBD_StdEPReq+0xee>
 8009248:	e113      	b.n	8009472 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009250:	2b02      	cmp	r3, #2
 8009252:	d002      	beq.n	800925a <USBD_StdEPReq+0x8a>
 8009254:	2b03      	cmp	r3, #3
 8009256:	d015      	beq.n	8009284 <USBD_StdEPReq+0xb4>
 8009258:	e02b      	b.n	80092b2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <USBD_StdEPReq+0xaa>
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d009      	beq.n	800927a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 ff98 	bl	800a1a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009270:	2180      	movs	r1, #128	; 0x80
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 ff94 	bl	800a1a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009278:	e020      	b.n	80092bc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fbae 	bl	80099de <USBD_CtlError>
        break;
 8009282:	e01b      	b.n	80092bc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10e      	bne.n	80092aa <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <USBD_StdEPReq+0xda>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	; 0x80
 8009296:	d008      	beq.n	80092aa <USBD_StdEPReq+0xda>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	88db      	ldrh	r3, [r3, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ff7b 	bl	800a1a0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fc5f 	bl	8009b6e <USBD_CtlSendStatus>

        break;
 80092b0:	e004      	b.n	80092bc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fb92 	bl	80099de <USBD_CtlError>
        break;
 80092ba:	bf00      	nop
      }
      break;
 80092bc:	e0de      	b.n	800947c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d002      	beq.n	80092ce <USBD_StdEPReq+0xfe>
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d015      	beq.n	80092f8 <USBD_StdEPReq+0x128>
 80092cc:	e026      	b.n	800931c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00c      	beq.n	80092ee <USBD_StdEPReq+0x11e>
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b80      	cmp	r3, #128	; 0x80
 80092d8:	d009      	beq.n	80092ee <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 ff5e 	bl	800a1a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 ff5a 	bl	800a1a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092ec:	e01c      	b.n	8009328 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb74 	bl	80099de <USBD_CtlError>
        break;
 80092f6:	e017      	b.n	8009328 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d112      	bne.n	8009326 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 ff65 	bl	800a1de <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fc2a 	bl	8009b6e <USBD_CtlSendStatus>
        }
        break;
 800931a:	e004      	b.n	8009326 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fb5d 	bl	80099de <USBD_CtlError>
        break;
 8009324:	e000      	b.n	8009328 <USBD_StdEPReq+0x158>
        break;
 8009326:	bf00      	nop
      }
      break;
 8009328:	e0a8      	b.n	800947c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009330:	2b02      	cmp	r3, #2
 8009332:	d002      	beq.n	800933a <USBD_StdEPReq+0x16a>
 8009334:	2b03      	cmp	r3, #3
 8009336:	d031      	beq.n	800939c <USBD_StdEPReq+0x1cc>
 8009338:	e095      	b.n	8009466 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d007      	beq.n	8009350 <USBD_StdEPReq+0x180>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d004      	beq.n	8009350 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fb48 	bl	80099de <USBD_CtlError>
          break;
 800934e:	e08f      	b.n	8009470 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009354:	2b00      	cmp	r3, #0
 8009356:	da0b      	bge.n	8009370 <USBD_StdEPReq+0x1a0>
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	3310      	adds	r3, #16
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	e00a      	b.n	8009386 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2202      	movs	r2, #2
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fb8c 	bl	8009ab2 <USBD_CtlSendData>
          break;
 800939a:	e069      	b.n	8009470 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800939c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	da11      	bge.n	80093c8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 020f 	and.w	r2, r3, #15
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3318      	adds	r3, #24
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d117      	bne.n	80093ee <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb0c 	bl	80099de <USBD_CtlError>
            break;
 80093c6:	e053      	b.n	8009470 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 faf9 	bl	80099de <USBD_CtlError>
            break;
 80093ec:	e040      	b.n	8009470 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80093ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da0b      	bge.n	800940e <USBD_StdEPReq+0x23e>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	3310      	adds	r3, #16
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	3304      	adds	r3, #4
 800940c:	e00a      	b.n	8009424 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <USBD_StdEPReq+0x262>
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b80      	cmp	r3, #128	; 0x80
 8009430:	d103      	bne.n	800943a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e00e      	b.n	8009458 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 feec 	bl	800a21c <USBD_LL_IsStallEP>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e002      	b.n	8009458 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2202      	movs	r2, #2
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fb27 	bl	8009ab2 <USBD_CtlSendData>
          break;
 8009464:	e004      	b.n	8009470 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fab8 	bl	80099de <USBD_CtlError>
        break;
 800946e:	bf00      	nop
      }
      break;
 8009470:	e004      	b.n	800947c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fab2 	bl	80099de <USBD_CtlError>
      break;
 800947a:	bf00      	nop
    }
    break;
 800947c:	e004      	b.n	8009488 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 faac 	bl	80099de <USBD_CtlError>
    break;
 8009486:	bf00      	nop
  }

  return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	0a1b      	lsrs	r3, r3, #8
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	2b06      	cmp	r3, #6
 80094aa:	f200 80c9 	bhi.w	8009640 <USBD_GetDescriptor+0x1ac>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <USBD_GetDescriptor+0x20>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094d1 	.word	0x080094d1
 80094b8:	080094e9 	.word	0x080094e9
 80094bc:	08009529 	.word	0x08009529
 80094c0:	08009641 	.word	0x08009641
 80094c4:	08009641 	.word	0x08009641
 80094c8:	080095ed 	.word	0x080095ed
 80094cc:	08009613 	.word	0x08009613
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	7c12      	ldrb	r2, [r2, #16]
 80094dc:	f107 010a 	add.w	r1, r7, #10
 80094e0:	4610      	mov	r0, r2
 80094e2:	4798      	blx	r3
 80094e4:	60f8      	str	r0, [r7, #12]
    break;
 80094e6:	e0b0      	b.n	800964a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7c1b      	ldrb	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10d      	bne.n	800950c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	f107 020a 	add.w	r2, r7, #10
 80094fc:	4610      	mov	r0, r2
 80094fe:	4798      	blx	r3
 8009500:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	2202      	movs	r2, #2
 8009508:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800950a:	e09e      	b.n	800964a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	f107 020a 	add.w	r2, r7, #10
 8009518:	4610      	mov	r0, r2
 800951a:	4798      	blx	r3
 800951c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
    break;
 8009526:	e090      	b.n	800964a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b05      	cmp	r3, #5
 8009530:	d856      	bhi.n	80095e0 <USBD_GetDescriptor+0x14c>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <USBD_GetDescriptor+0xa4>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009551 	.word	0x08009551
 800953c:	08009569 	.word	0x08009569
 8009540:	08009581 	.word	0x08009581
 8009544:	08009599 	.word	0x08009599
 8009548:	080095b1 	.word	0x080095b1
 800954c:	080095c9 	.word	0x080095c9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	7c12      	ldrb	r2, [r2, #16]
 800955c:	f107 010a 	add.w	r1, r7, #10
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
 8009564:	60f8      	str	r0, [r7, #12]
      break;
 8009566:	e040      	b.n	80095ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	7c12      	ldrb	r2, [r2, #16]
 8009574:	f107 010a 	add.w	r1, r7, #10
 8009578:	4610      	mov	r0, r2
 800957a:	4798      	blx	r3
 800957c:	60f8      	str	r0, [r7, #12]
      break;
 800957e:	e034      	b.n	80095ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	7c12      	ldrb	r2, [r2, #16]
 800958c:	f107 010a 	add.w	r1, r7, #10
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
      break;
 8009596:	e028      	b.n	80095ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	7c12      	ldrb	r2, [r2, #16]
 80095a4:	f107 010a 	add.w	r1, r7, #10
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	60f8      	str	r0, [r7, #12]
      break;
 80095ae:	e01c      	b.n	80095ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	7c12      	ldrb	r2, [r2, #16]
 80095bc:	f107 010a 	add.w	r1, r7, #10
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
 80095c4:	60f8      	str	r0, [r7, #12]
      break;
 80095c6:	e010      	b.n	80095ea <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	7c12      	ldrb	r2, [r2, #16]
 80095d4:	f107 010a 	add.w	r1, r7, #10
 80095d8:	4610      	mov	r0, r2
 80095da:	4798      	blx	r3
 80095dc:	60f8      	str	r0, [r7, #12]
      break;
 80095de:	e004      	b.n	80095ea <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9fb 	bl	80099de <USBD_CtlError>
      return;
 80095e8:	e04b      	b.n	8009682 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80095ea:	e02e      	b.n	800964a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7c1b      	ldrb	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d109      	bne.n	8009608 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	f107 020a 	add.w	r2, r7, #10
 8009600:	4610      	mov	r0, r2
 8009602:	4798      	blx	r3
 8009604:	60f8      	str	r0, [r7, #12]
      break;
 8009606:	e020      	b.n	800964a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9e7 	bl	80099de <USBD_CtlError>
      return;
 8009610:	e037      	b.n	8009682 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	7c1b      	ldrb	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10d      	bne.n	8009636 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009622:	f107 020a 	add.w	r2, r7, #10
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	2207      	movs	r2, #7
 8009632:	701a      	strb	r2, [r3, #0]
      break;
 8009634:	e009      	b.n	800964a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f9d0 	bl	80099de <USBD_CtlError>
      return;
 800963e:	e020      	b.n	8009682 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9cb 	bl	80099de <USBD_CtlError>
    return;
 8009648:	e01b      	b.n	8009682 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800964a:	897b      	ldrh	r3, [r7, #10]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d011      	beq.n	8009674 <USBD_GetDescriptor+0x1e0>
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	88db      	ldrh	r3, [r3, #6]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00d      	beq.n	8009674 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	88da      	ldrh	r2, [r3, #6]
 800965c:	897b      	ldrh	r3, [r7, #10]
 800965e:	4293      	cmp	r3, r2
 8009660:	bf28      	it	cs
 8009662:	4613      	movcs	r3, r2
 8009664:	b29b      	uxth	r3, r3
 8009666:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009668:	897b      	ldrh	r3, [r7, #10]
 800966a:	461a      	mov	r2, r3
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa1f 	bl	8009ab2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	88db      	ldrh	r3, [r3, #6]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fa76 	bl	8009b6e <USBD_CtlSendStatus>
  }
}
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	889b      	ldrh	r3, [r3, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d130      	bne.n	80096fc <USBD_SetAddress+0x74>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	88db      	ldrh	r3, [r3, #6]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d12c      	bne.n	80096fc <USBD_SetAddress+0x74>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	2b7f      	cmp	r3, #127	; 0x7f
 80096a8:	d828      	bhi.n	80096fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d104      	bne.n	80096ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f98b 	bl	80099de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c8:	e01d      	b.n	8009706 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7bfa      	ldrb	r2, [r7, #15]
 80096ce:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fdcc 	bl	800a274 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fa46 	bl	8009b6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f0:	e009      	b.n	8009706 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	e004      	b.n	8009706 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f96d 	bl	80099de <USBD_CtlError>
  }
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	885b      	ldrh	r3, [r3, #2]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	4b41      	ldr	r3, [pc, #260]	; (8009828 <USBD_SetConfig+0x118>)
 8009722:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009724:	4b40      	ldr	r3, [pc, #256]	; (8009828 <USBD_SetConfig+0x118>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d904      	bls.n	8009736 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f955 	bl	80099de <USBD_CtlError>
 8009734:	e075      	b.n	8009822 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800973c:	2b02      	cmp	r3, #2
 800973e:	d002      	beq.n	8009746 <USBD_SetConfig+0x36>
 8009740:	2b03      	cmp	r3, #3
 8009742:	d023      	beq.n	800978c <USBD_SetConfig+0x7c>
 8009744:	e062      	b.n	800980c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009746:	4b38      	ldr	r3, [pc, #224]	; (8009828 <USBD_SetConfig+0x118>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d01a      	beq.n	8009784 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800974e:	4b36      	ldr	r3, [pc, #216]	; (8009828 <USBD_SetConfig+0x118>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2203      	movs	r2, #3
 800975c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009760:	4b31      	ldr	r3, [pc, #196]	; (8009828 <USBD_SetConfig+0x118>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fa5c 	bl	8008c24 <USBD_SetClassConfig>
 800976c:	4603      	mov	r3, r0
 800976e:	2b02      	cmp	r3, #2
 8009770:	d104      	bne.n	800977c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f932 	bl	80099de <USBD_CtlError>
          return;
 800977a:	e052      	b.n	8009822 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f9f6 	bl	8009b6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009782:	e04e      	b.n	8009822 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f9f2 	bl	8009b6e <USBD_CtlSendStatus>
      break;
 800978a:	e04a      	b.n	8009822 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800978c:	4b26      	ldr	r3, [pc, #152]	; (8009828 <USBD_SetConfig+0x118>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d112      	bne.n	80097ba <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800979c:	4b22      	ldr	r3, [pc, #136]	; (8009828 <USBD_SetConfig+0x118>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80097a6:	4b20      	ldr	r3, [pc, #128]	; (8009828 <USBD_SetConfig+0x118>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff fa58 	bl	8008c62 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9db 	bl	8009b6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80097b8:	e033      	b.n	8009822 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80097ba:	4b1b      	ldr	r3, [pc, #108]	; (8009828 <USBD_SetConfig+0x118>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d01d      	beq.n	8009804 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff fa46 	bl	8008c62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <USBD_SetConfig+0x118>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <USBD_SetConfig+0x118>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fa1c 	bl	8008c24 <USBD_SetClassConfig>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d104      	bne.n	80097fc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f8f2 	bl	80099de <USBD_CtlError>
          return;
 80097fa:	e012      	b.n	8009822 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f9b6 	bl	8009b6e <USBD_CtlSendStatus>
      break;
 8009802:	e00e      	b.n	8009822 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f9b2 	bl	8009b6e <USBD_CtlSendStatus>
      break;
 800980a:	e00a      	b.n	8009822 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f8e5 	bl	80099de <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <USBD_SetConfig+0x118>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff fa21 	bl	8008c62 <USBD_ClrClassConfig>
      break;
 8009820:	bf00      	nop
    }
  }
}
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000364 	.word	0x20000364

0800982c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	88db      	ldrh	r3, [r3, #6]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d004      	beq.n	8009848 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f8cc 	bl	80099de <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009846:	e022      	b.n	800988e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800984e:	2b02      	cmp	r3, #2
 8009850:	dc02      	bgt.n	8009858 <USBD_GetConfig+0x2c>
 8009852:	2b00      	cmp	r3, #0
 8009854:	dc03      	bgt.n	800985e <USBD_GetConfig+0x32>
 8009856:	e015      	b.n	8009884 <USBD_GetConfig+0x58>
 8009858:	2b03      	cmp	r3, #3
 800985a:	d00b      	beq.n	8009874 <USBD_GetConfig+0x48>
 800985c:	e012      	b.n	8009884 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3308      	adds	r3, #8
 8009868:	2201      	movs	r2, #1
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f920 	bl	8009ab2 <USBD_CtlSendData>
      break;
 8009872:	e00c      	b.n	800988e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	2201      	movs	r2, #1
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f918 	bl	8009ab2 <USBD_CtlSendData>
      break;
 8009882:	e004      	b.n	800988e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f8a9 	bl	80099de <USBD_CtlError>
      break;
 800988c:	bf00      	nop
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d81e      	bhi.n	80098ea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	88db      	ldrh	r3, [r3, #6]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d004      	beq.n	80098be <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f891 	bl	80099de <USBD_CtlError>
      break;
 80098bc:	e01a      	b.n	80098f4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f043 0202 	orr.w	r2, r3, #2
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	330c      	adds	r3, #12
 80098de:	2202      	movs	r2, #2
 80098e0:	4619      	mov	r1, r3
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8e5 	bl	8009ab2 <USBD_CtlSendData>
    break;
 80098e8:	e004      	b.n	80098f4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f876 	bl	80099de <USBD_CtlError>
    break;
 80098f2:	bf00      	nop
  }
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d106      	bne.n	800991c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f929 	bl	8009b6e <USBD_CtlSendStatus>
  }

}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009934:	3b01      	subs	r3, #1
 8009936:	2b02      	cmp	r3, #2
 8009938:	d80b      	bhi.n	8009952 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d10c      	bne.n	800995c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f90f 	bl	8009b6e <USBD_CtlSendStatus>
    }
    break;
 8009950:	e004      	b.n	800995c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f842 	bl	80099de <USBD_CtlError>
    break;
 800995a:	e000      	b.n	800995e <USBD_ClrFeature+0x3a>
    break;
 800995c:	bf00      	nop
  }
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	785a      	ldrb	r2, [r3, #1]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	3302      	adds	r3, #2
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b29a      	uxth	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	3303      	adds	r3, #3
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	b29b      	uxth	r3, r3
 8009994:	4413      	add	r3, r2
 8009996:	b29a      	uxth	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	3304      	adds	r3, #4
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	3305      	adds	r3, #5
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	3306      	adds	r3, #6
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	b29a      	uxth	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	3307      	adds	r3, #7
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	4413      	add	r3, r2
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	80da      	strh	r2, [r3, #6]

}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr

080099de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80099e8:	2180      	movs	r1, #128	; 0x80
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fbd8 	bl	800a1a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fbd4 	bl	800a1a0 <USBD_LL_StallEP>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d032      	beq.n	8009a7c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 f834 	bl	8009a84 <USBD_GetLen>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	3301      	adds	r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	75fa      	strb	r2, [r7, #23]
 8009a30:	461a      	mov	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4413      	add	r3, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	75fa      	strb	r2, [r7, #23]
 8009a42:	461a      	mov	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4413      	add	r3, r2
 8009a48:	2203      	movs	r2, #3
 8009a4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a4c:	e012      	b.n	8009a74 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	60fa      	str	r2, [r7, #12]
 8009a54:	7dfa      	ldrb	r2, [r7, #23]
 8009a56:	1c51      	adds	r1, r2, #1
 8009a58:	75f9      	strb	r1, [r7, #23]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	440a      	add	r2, r1
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	75fa      	strb	r2, [r7, #23]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4413      	add	r3, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e8      	bne.n	8009a4e <USBD_GetString+0x4e>
    }
  }
}
 8009a7c:	bf00      	nop
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009a90:	e005      	b.n	8009a9e <USBD_GetLen+0x1a>
    {
        len++;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	3301      	adds	r3, #1
 8009a96:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1f5      	bne.n	8009a92 <USBD_GetLen+0xe>
    }

    return len;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc80      	pop	{r7}
 8009ab0:	4770      	bx	lr

08009ab2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009ac8:	88fa      	ldrh	r2, [r7, #6]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ace:	88fa      	ldrh	r2, [r7, #6]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009ad4:	88fb      	ldrh	r3, [r7, #6]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 fbe9 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	4613      	mov	r3, r2
 8009af6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009af8:	88fb      	ldrh	r3, [r7, #6]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	2100      	movs	r1, #0
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 fbd7 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2203      	movs	r2, #3
 8009b20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fbdc 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	4613      	mov	r3, r2
 8009b56:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fbca 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb94 	bl	800a2b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fba4 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4912      	ldr	r1, [pc, #72]	; (8009c0c <MX_USB_DEVICE_Init+0x50>)
 8009bc4:	4812      	ldr	r0, [pc, #72]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bc6:	f7fe ffd3 	bl	8008b70 <USBD_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bd0:	f7f7 fb16 	bl	8001200 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009bd4:	490f      	ldr	r1, [pc, #60]	; (8009c14 <MX_USB_DEVICE_Init+0x58>)
 8009bd6:	480e      	ldr	r0, [pc, #56]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bd8:	f7fe fff5 	bl	8008bc6 <USBD_RegisterClass>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009be2:	f7f7 fb0d 	bl	8001200 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009be6:	490c      	ldr	r1, [pc, #48]	; (8009c18 <MX_USB_DEVICE_Init+0x5c>)
 8009be8:	4809      	ldr	r0, [pc, #36]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bea:	f7fe ffab 	bl	8008b44 <USBD_CUSTOM_HID_RegisterInterface>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bf4:	f7f7 fb04 	bl	8001200 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bfa:	f7fe fffd 	bl	8008bf8 <USBD_Start>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c04:	f7f7 fafc 	bl	8001200 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c08:	bf00      	nop
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000134 	.word	0x20000134
 8009c10:	20000368 	.word	0x20000368
 8009c14:	2000000c 	.word	0x2000000c
 8009c18:	20000124 	.word	0x20000124

08009c1c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr

08009c2a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009c2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc80      	pop	{r7}
 8009c36:	4770      	bx	lr

08009c38 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	460a      	mov	r2, r1
 8009c42:	71fb      	strb	r3, [r7, #7]
 8009c44:	4613      	mov	r3, r2
 8009c46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009c48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2212      	movs	r2, #18
 8009c64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c66:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bc80      	pop	{r7}
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000150 	.word	0x20000150

08009c78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2204      	movs	r2, #4
 8009c88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c8a:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000164 	.word	0x20000164

08009c9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	6039      	str	r1, [r7, #0]
 8009ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	4907      	ldr	r1, [pc, #28]	; (8009cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cb2:	4808      	ldr	r0, [pc, #32]	; (8009cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cb4:	f7ff fea4 	bl	8009a00 <USBD_GetString>
 8009cb8:	e004      	b.n	8009cc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cc0:	f7ff fe9e 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000604 	.word	0x20000604
 8009cd4:	0800a434 	.word	0x0800a434

08009cd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	4904      	ldr	r1, [pc, #16]	; (8009cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ce8:	4804      	ldr	r0, [pc, #16]	; (8009cfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cea:	f7ff fe89 	bl	8009a00 <USBD_GetString>
  return USBD_StrDesc;
 8009cee:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20000604 	.word	0x20000604
 8009cfc:	0800a454 	.word	0x0800a454

08009d00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	6039      	str	r1, [r7, #0]
 8009d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	221a      	movs	r2, #26
 8009d10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d12:	f000 f843 	bl	8009d9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d16:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20000168 	.word	0x20000168

08009d24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	6039      	str	r1, [r7, #0]
 8009d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d105      	bne.n	8009d42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	4907      	ldr	r1, [pc, #28]	; (8009d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d3a:	4808      	ldr	r0, [pc, #32]	; (8009d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d3c:	f7ff fe60 	bl	8009a00 <USBD_GetString>
 8009d40:	e004      	b.n	8009d4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	4904      	ldr	r1, [pc, #16]	; (8009d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d46:	4805      	ldr	r0, [pc, #20]	; (8009d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d48:	f7ff fe5a 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000604 	.word	0x20000604
 8009d5c:	0800a468 	.word	0x0800a468

08009d60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	6039      	str	r1, [r7, #0]
 8009d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d6c:	79fb      	ldrb	r3, [r7, #7]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d105      	bne.n	8009d7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4907      	ldr	r1, [pc, #28]	; (8009d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d76:	4808      	ldr	r0, [pc, #32]	; (8009d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d78:	f7ff fe42 	bl	8009a00 <USBD_GetString>
 8009d7c:	e004      	b.n	8009d88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4904      	ldr	r1, [pc, #16]	; (8009d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d82:	4805      	ldr	r0, [pc, #20]	; (8009d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d84:	f7ff fe3c 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000604 	.word	0x20000604
 8009d98:	0800a47c 	.word	0x0800a47c

08009d9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009da2:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <Get_SerialNum+0x44>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009da8:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <Get_SerialNum+0x48>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dae:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <Get_SerialNum+0x4c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4413      	add	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	4909      	ldr	r1, [pc, #36]	; (8009dec <Get_SerialNum+0x50>)
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f814 	bl	8009df4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dcc:	2204      	movs	r2, #4
 8009dce:	4908      	ldr	r1, [pc, #32]	; (8009df0 <Get_SerialNum+0x54>)
 8009dd0:	68b8      	ldr	r0, [r7, #8]
 8009dd2:	f000 f80f 	bl	8009df4 <IntToUnicode>
  }
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	1ff80050 	.word	0x1ff80050
 8009de4:	1ff80054 	.word	0x1ff80054
 8009de8:	1ff80058 	.word	0x1ff80058
 8009dec:	2000016a 	.word	0x2000016a
 8009df0:	2000017a 	.word	0x2000017a

08009df4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	75fb      	strb	r3, [r7, #23]
 8009e0a:	e027      	b.n	8009e5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	0f1b      	lsrs	r3, r3, #28
 8009e10:	2b09      	cmp	r3, #9
 8009e12:	d80b      	bhi.n	8009e2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	0f1b      	lsrs	r3, r3, #28
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	440b      	add	r3, r1
 8009e24:	3230      	adds	r2, #48	; 0x30
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]
 8009e2a:	e00a      	b.n	8009e42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	0f1b      	lsrs	r3, r3, #28
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	4619      	mov	r1, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	440b      	add	r3, r1
 8009e3c:	3237      	adds	r2, #55	; 0x37
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e48:	7dfb      	ldrb	r3, [r7, #23]
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	4413      	add	r3, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	75fb      	strb	r3, [r7, #23]
 8009e5c:	7dfa      	ldrb	r2, [r7, #23]
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d3d3      	bcc.n	8009e0c <IntToUnicode+0x18>
  }
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr

08009e70 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d106      	bne.n	8009e90 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	4a08      	ldr	r2, [pc, #32]	; (8009ea8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e88:	f043 0301 	orr.w	r3, r3, #1
 8009e8c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009e8e:	e005      	b.n	8009e9c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4a04      	ldr	r2, [pc, #16]	; (8009ea8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e96:	f023 0301 	bic.w	r3, r3, #1
 8009e9a:	6053      	str	r3, [r2, #4]
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	40010000 	.word	0x40010000

08009eac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a11      	ldr	r2, [pc, #68]	; (8009f00 <HAL_PCD_MspInit+0x54>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d11b      	bne.n	8009ef6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009ebe:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <HAL_PCD_MspInit+0x58>)
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <HAL_PCD_MspInit+0x58>)
 8009ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8009eca:	4b0e      	ldr	r3, [pc, #56]	; (8009f04 <HAL_PCD_MspInit+0x58>)
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 1, 0);
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2101      	movs	r1, #1
 8009eda:	2013      	movs	r0, #19
 8009edc:	f7f8 faf7 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8009ee0:	2013      	movs	r0, #19
 8009ee2:	f7f8 fb10 	bl	8002506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2101      	movs	r1, #1
 8009eea:	2014      	movs	r0, #20
 8009eec:	f7f8 faef 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009ef0:	2014      	movs	r0, #20
 8009ef2:	f7f8 fb08 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40005c00 	.word	0x40005c00
 8009f04:	40023800 	.word	0x40023800

08009f08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe feb2 	bl	8008c88 <USBD_LL_SetupStage>
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7fe fee4 	bl	8008d22 <USBD_LL_DataOutStage>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	440b      	add	r3, r1
 8009f82:	333c      	adds	r3, #60	; 0x3c
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f7fe ff3b 	bl	8008e04 <USBD_LL_DataInStage>
}
 8009f8e:	bf00      	nop
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff f846 	bl	8009036 <USBD_LL_SOF>
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d001      	beq.n	8009fca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009fc6:	f7f7 f91b 	bl	8001200 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fd0:	7bfa      	ldrb	r2, [r7, #15]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fffb 	bl	8008fd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe ffb4 	bl	8008f4e <USBD_LL_Reset>
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fff5 	bl	8008fee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a00c:	4b04      	ldr	r3, [pc, #16]	; (800a020 <HAL_PCD_SuspendCallback+0x30>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	4a03      	ldr	r2, [pc, #12]	; (800a020 <HAL_PCD_SuspendCallback+0x30>)
 800a012:	f043 0306 	orr.w	r3, r3, #6
 800a016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	e000ed00 	.word	0xe000ed00

0800a024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe ffef 	bl	8009016 <USBD_LL_Resume>
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a048:	4a23      	ldr	r2, [pc, #140]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a21      	ldr	r2, [pc, #132]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a054:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800a058:	4b1f      	ldr	r3, [pc, #124]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a05a:	4a20      	ldr	r2, [pc, #128]	; (800a0dc <USBD_LL_Init+0x9c>)
 800a05c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a05e:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a060:	2208      	movs	r2, #8
 800a062:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a064:	4b1c      	ldr	r3, [pc, #112]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a066:	2202      	movs	r2, #2
 800a068:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a06c:	2202      	movs	r2, #2
 800a06e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a070:	4b19      	ldr	r3, [pc, #100]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a072:	2200      	movs	r2, #0
 800a074:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a078:	2200      	movs	r2, #0
 800a07a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a07c:	4816      	ldr	r0, [pc, #88]	; (800a0d8 <USBD_LL_Init+0x98>)
 800a07e:	f7f8 fd8a 	bl	8002b96 <HAL_PCD_Init>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a088:	f7f7 f8ba 	bl	8001200 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a092:	2318      	movs	r3, #24
 800a094:	2200      	movs	r2, #0
 800a096:	2100      	movs	r1, #0
 800a098:	f7fa f950 	bl	800433c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0a2:	2358      	movs	r3, #88	; 0x58
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2180      	movs	r1, #128	; 0x80
 800a0a8:	f7fa f948 	bl	800433c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0b2:	2398      	movs	r3, #152	; 0x98
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2181      	movs	r1, #129	; 0x81
 800a0b8:	f7fa f940 	bl	800433c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0c2:	23d8      	movs	r3, #216	; 0xd8
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	f7fa f938 	bl	800433c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20000804 	.word	0x20000804
 800a0dc:	40005c00 	.word	0x40005c00

0800a0e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f8 fe2b 	bl	8002d52 <HAL_PCD_Start>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f932 	bl	800a36c <USBD_Get_USB_Status>
 800a108:	4603      	mov	r3, r0
 800a10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	461a      	mov	r2, r3
 800a124:	4603      	mov	r3, r0
 800a126:	70fb      	strb	r3, [r7, #3]
 800a128:	460b      	mov	r3, r1
 800a12a:	70bb      	strb	r3, [r7, #2]
 800a12c:	4613      	mov	r3, r2
 800a12e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a13e:	78bb      	ldrb	r3, [r7, #2]
 800a140:	883a      	ldrh	r2, [r7, #0]
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	f7f8 ff47 	bl	8002fd6 <HAL_PCD_EP_Open>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f90c 	bl	800a36c <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7f8 ff8e 	bl	80030a2 <HAL_PCD_EP_Close>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8ed 	bl	800a36c <USBD_Get_USB_Status>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a196:	7bbb      	ldrb	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1ba:	78fa      	ldrb	r2, [r7, #3]
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f9 f837 	bl	8003232 <HAL_PCD_EP_SetStall>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f8ce 	bl	800a36c <USBD_Get_USB_Status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f9 f86a 	bl	80032d6 <HAL_PCD_EP_ClrStall>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f8af 	bl	800a36c <USBD_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a22e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a234:	2b00      	cmp	r3, #0
 800a236:	da0c      	bge.n	800a252 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a238:	78fb      	ldrb	r3, [r7, #3]
 800a23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	440b      	add	r3, r1
 800a24c:	3302      	adds	r3, #2
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	e00b      	b.n	800a26a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a258:	68f9      	ldr	r1, [r7, #12]
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	440b      	add	r3, r1
 800a264:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a268:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	bc80      	pop	{r7}
 800a272:	4770      	bx	lr

0800a274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7f8 fe7a 	bl	8002f8c <HAL_PCD_SetAddress>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f864 	bl	800a36c <USBD_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b086      	sub	sp, #24
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	60f8      	str	r0, [r7, #12]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	460b      	mov	r3, r1
 800a2c0:	72fb      	strb	r3, [r7, #11]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	7af9      	ldrb	r1, [r7, #11]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	f7f8 ff67 	bl	80031ac <HAL_PCD_EP_Transmit>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f841 	bl	800a36c <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	461a      	mov	r2, r3
 800a304:	460b      	mov	r3, r1
 800a306:	72fb      	strb	r3, [r7, #11]
 800a308:	4613      	mov	r3, r2
 800a30a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	7af9      	ldrb	r1, [r7, #11]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	f7f8 ff07 	bl	8003132 <HAL_PCD_EP_Receive>
 800a324:	4603      	mov	r3, r0
 800a326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 f81e 	bl	800a36c <USBD_Get_USB_Status>
 800a330:	4603      	mov	r3, r0
 800a332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a334:	7dbb      	ldrb	r3, [r7, #22]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_static_malloc+0x14>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr
 800a354:	20000af0 	.word	0x20000af0

0800a358 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]

}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr
	...

0800a36c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d817      	bhi.n	800a3b0 <USBD_Get_USB_Status+0x44>
 800a380:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <USBD_Get_USB_Status+0x1c>)
 800a382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a386:	bf00      	nop
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a39f 	.word	0x0800a39f
 800a390:	0800a3a5 	.word	0x0800a3a5
 800a394:	0800a3ab 	.word	0x0800a3ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	e00b      	b.n	800a3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a2:	e008      	b.n	800a3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a8:	e005      	b.n	800a3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ae:	e002      	b.n	800a3b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b4:	bf00      	nop
  }
  return usb_status;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop

0800a3c4 <__libc_init_array>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	4d0c      	ldr	r5, [pc, #48]	; (800a3fc <__libc_init_array+0x38>)
 800a3ca:	4c0d      	ldr	r4, [pc, #52]	; (800a400 <__libc_init_array+0x3c>)
 800a3cc:	1b64      	subs	r4, r4, r5
 800a3ce:	10a4      	asrs	r4, r4, #2
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	d109      	bne.n	800a3e8 <__libc_init_array+0x24>
 800a3d4:	f000 f822 	bl	800a41c <_init>
 800a3d8:	2600      	movs	r6, #0
 800a3da:	4d0a      	ldr	r5, [pc, #40]	; (800a404 <__libc_init_array+0x40>)
 800a3dc:	4c0a      	ldr	r4, [pc, #40]	; (800a408 <__libc_init_array+0x44>)
 800a3de:	1b64      	subs	r4, r4, r5
 800a3e0:	10a4      	asrs	r4, r4, #2
 800a3e2:	42a6      	cmp	r6, r4
 800a3e4:	d105      	bne.n	800a3f2 <__libc_init_array+0x2e>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ec:	4798      	blx	r3
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7ee      	b.n	800a3d0 <__libc_init_array+0xc>
 800a3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f6:	4798      	blx	r3
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	e7f2      	b.n	800a3e2 <__libc_init_array+0x1e>
 800a3fc:	0800a4b8 	.word	0x0800a4b8
 800a400:	0800a4b8 	.word	0x0800a4b8
 800a404:	0800a4b8 	.word	0x0800a4b8
 800a408:	0800a4bc 	.word	0x0800a4bc

0800a40c <memset>:
 800a40c:	4603      	mov	r3, r0
 800a40e:	4402      	add	r2, r0
 800a410:	4293      	cmp	r3, r2
 800a412:	d100      	bne.n	800a416 <memset+0xa>
 800a414:	4770      	bx	lr
 800a416:	f803 1b01 	strb.w	r1, [r3], #1
 800a41a:	e7f9      	b.n	800a410 <memset+0x4>

0800a41c <_init>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	bf00      	nop
 800a420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a422:	bc08      	pop	{r3}
 800a424:	469e      	mov	lr, r3
 800a426:	4770      	bx	lr

0800a428 <_fini>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	bf00      	nop
 800a42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	469e      	mov	lr, r3
 800a432:	4770      	bx	lr
