
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a264  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a400  0800a400  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a408  0800a408  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  20000184  0800a594  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  0800a594  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001333d  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003467  00000000  00000000  000334ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca6  00000000  00000000  00038840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c4  00000000  00000000  000504e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ed0  00000000  00000000  000657aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec67a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000ec6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a388 	.word	0x0800a388

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a388 	.word	0x0800a388

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe64 	bl	800178a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f933 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa95 	bl	8000ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa75 	bl	8000fb8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f825 	bl	8009b1c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9e3 	bl	8000e9c <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f979 	bl	8000dcc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4886      	ldr	r0, [pc, #536]	; (8000cf4 <main+0x23c>)
 8000adc:	f004 fa24 	bl	8004f28 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4884      	ldr	r0, [pc, #528]	; (8000cf4 <main+0x23c>)
 8000ae4:	f004 fab2 	bl	800504c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4882      	ldr	r0, [pc, #520]	; (8000cf4 <main+0x23c>)
 8000aec:	f004 faae 	bl	800504c <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c81      	ldr	r4, [pc, #516]	; (8000cf8 <main+0x240>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a81      	ldr	r2, [pc, #516]	; (8000cfc <main+0x244>)
 8000af6:	4982      	ldr	r1, [pc, #520]	; (8000d00 <main+0x248>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc99 	bl	8001430 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
  	  event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a78      	ldr	r2, [pc, #480]	; (8000d04 <main+0x24c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b3a:	4b73      	ldr	r3, [pc, #460]	; (8000d08 <main+0x250>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b70      	ldr	r3, [pc, #448]	; (8000d04 <main+0x24c>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 80a6 	bhi.w	8000c96 <main+0x1de>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000b7d 	.word	0x08000b7d
 8000b60:	08000c6b 	.word	0x08000c6b
		case EVENT_WAIT:
			asm("NOP");
 8000b64:	bf00      	nop
			break;
 8000b66:	e096      	b.n	8000c96 <main+0x1de>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b68:	2202      	movs	r2, #2
 8000b6a:	4965      	ldr	r1, [pc, #404]	; (8000d00 <main+0x248>)
 8000b6c:	4867      	ldr	r0, [pc, #412]	; (8000d0c <main+0x254>)
 8000b6e:	f000 ffc1 	bl	8001af4 <HAL_ADC_Start_DMA>
			break;
 8000b72:	e090      	b.n	8000c96 <main+0x1de>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f000 fa5f 	bl	8001038 <write_next_event_state>
			break;
 8000b7a:	e08c      	b.n	8000c96 <main+0x1de>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b7c:	485e      	ldr	r0, [pc, #376]	; (8000cf8 <main+0x240>)
 8000b7e:	f000 fca3 	bl	80014c8 <Joystick_Update>
			uint8_t invert_x = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b8e:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <main+0x258>)
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b92:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <main+0x258>)
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b96:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <main+0xf0>
 8000b9e:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <main+0x240>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	e001      	b.n	8000bac <main+0xf4>
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <main+0x240>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b50      	ldr	r3, [pc, #320]	; (8000cf8 <main+0x240>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b4d      	ldr	r3, [pc, #308]	; (8000cf8 <main+0x240>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <main+0x25c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bcc:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <main+0x25c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bd6:	f7ff fd9b 	bl	8000710 <__aeabi_fcmpgt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <main+0x13c>
 8000be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	4619      	mov	r1, r3
 8000be8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bea:	f7ff fd73 	bl	80006d4 <__aeabi_fcmplt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d013      	beq.n	8000c1c <main+0x164>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <main+0x25c>)
 8000bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bfa:	b29c      	uxth	r4, r3
 8000bfc:	4946      	ldr	r1, [pc, #280]	; (8000d18 <main+0x260>)
 8000bfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c00:	f7ff fbca 	bl	8000398 <__aeabi_fmul>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd8c 	bl	8000724 <__aeabi_f2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4423      	add	r3, r4
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <main+0x25c>)
 8000c1a:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c20:	f7ff fd76 	bl	8000710 <__aeabi_fcmpgt>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10a      	bne.n	8000c40 <main+0x188>
 8000c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c30:	4619      	mov	r1, r3
 8000c32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c34:	f7ff fd4e 	bl	80006d4 <__aeabi_fcmplt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <main+0x188>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c3e:	e02a      	b.n	8000c96 <main+0x1de>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <main+0x25c>)
 8000c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c46:	b29c      	uxth	r4, r3
 8000c48:	4934      	ldr	r1, [pc, #208]	; (8000d1c <main+0x264>)
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fba4 	bl	8000398 <__aeabi_fmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd66 	bl	8000724 <__aeabi_f2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4423      	add	r3, r4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <main+0x25c>)
 8000c66:	809a      	strh	r2, [r3, #4]
			break;
 8000c68:	e015      	b.n	8000c96 <main+0x1de>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			if(lockout < 2000)
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <main+0x268>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c72:	d20f      	bcs.n	8000c94 <main+0x1dc>
			{
				if(Send_HID_Data(&controller) == HAL_OK)
 8000c74:	4827      	ldr	r0, [pc, #156]	; (8000d14 <main+0x25c>)
 8000c76:	f000 fa23 	bl	80010c0 <Send_HID_Data>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d103      	bne.n	8000c88 <main+0x1d0>
				{
					lockout = 0;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <main+0x268>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	801a      	strh	r2, [r3, #0]
				else
				{
					lockout++;
				}
			}
			break;
 8000c86:	e005      	b.n	8000c94 <main+0x1dc>
					lockout++;
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <main+0x268>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x268>)
 8000c92:	801a      	strh	r2, [r3, #0]
			break;
 8000c94:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <main+0x250>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <main+0x26c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d00d      	beq.n	8000cbe <main+0x206>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <main+0x250>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	425a      	negs	r2, r3
 8000caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cb2:	bf58      	it	pl
 8000cb4:	4253      	negpl	r3, r2
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <main+0x250>)
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e002      	b.n	8000cc4 <main+0x20c>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f9ba 	bl	8001038 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <main+0x26c>)
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <main+0x250>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d306      	bcc.n	8000cde <main+0x226>
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <main+0x26c>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <main+0x250>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	e007      	b.n	8000cee <main+0x236>
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <main+0x26c>)
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <main+0x250>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <main+0x270>)
 8000cf0:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cf2:	e722      	b.n	8000b3a <main+0x82>
 8000cf4:	20000238 	.word	0x20000238
 8000cf8:	20000304 	.word	0x20000304
 8000cfc:	20000302 	.word	0x20000302
 8000d00:	20000300 	.word	0x20000300
 8000d04:	2000027c 	.word	0x2000027c
 8000d08:	200002fc 	.word	0x200002fc
 8000d0c:	200001a0 	.word	0x200001a0
 8000d10:	3d4ccccd 	.word	0x3d4ccccd
 8000d14:	20000340 	.word	0x20000340
 8000d18:	c6fffe00 	.word	0xc6fffe00
 8000d1c:	46fffe00 	.word	0x46fffe00
 8000d20:	20000278 	.word	0x20000278
 8000d24:	200002fd 	.word	0x200002fd
 8000d28:	200002fe 	.word	0x200002fe

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b092      	sub	sp, #72	; 0x48
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2234      	movs	r2, #52	; 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 fb1c 	bl	800a378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <SystemClock_Config+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <SystemClock_Config+0x9c>)
 8000d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d5c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fac9 	bl	8004320 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d94:	f000 fa04 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	2101      	movs	r1, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fde5 	bl	8004980 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dbc:	f000 f9f0 	bl	80011a0 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3748      	adds	r7, #72	; 0x48
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40007000 	.word	0x40007000

08000dcc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000dde:	4a2e      	ldr	r2, [pc, #184]	; (8000e98 <MX_ADC_Init+0xcc>)
 8000de0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e2e:	2210      	movs	r2, #16
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e40:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e42:	f000 fd11 	bl	8001868 <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e4c:	f000 f9a8 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e62:	f000 fff1 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e6c:	f000 f998 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_ADC_Init+0xc8>)
 8000e7e:	f000 ffe3 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e88:	f000 f98a 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200001a0 	.word	0x200001a0
 8000e98:	40012400 	.word	0x40012400

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000edc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ee0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eee:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000ef0:	f003 ffda 	bl	8004ea8 <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000efa:	f000 f951 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	482a      	ldr	r0, [pc, #168]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f0c:	f004 faae 	bl	800546c <HAL_TIM_ConfigClockSource>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f16:	f000 f943 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f1a:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f1c:	f004 f84e 	bl	8004fbc <HAL_TIM_OC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f26:	f000 f93b 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f3a:	f004 fd91 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f44:	f000 f92c 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f4c:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f62:	f004 fa2b 	bl	80053bc <HAL_TIM_OC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f6c:	f000 f918 	bl	80011a0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0208 	orr.w	r2, r2, #8
 8000f7e:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f80:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f8e:	f004 fa15 	bl	80053bc <HAL_TIM_OC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f98:	f000 f902 	bl	80011a0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <MX_TIM2_Init+0x118>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000faa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000238 	.word	0x20000238

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200b      	movs	r0, #11
 8000fdc:	f001 fa3d 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f001 fa56 	bl	8002492 <HAL_NVIC_EnableIRQ>

}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_GPIO_Init+0x40>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <MX_GPIO_Init+0x40>)
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_GPIO_Init+0x40>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_GPIO_Init+0x40>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <MX_GPIO_Init+0x40>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <MX_GPIO_Init+0x40>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800

08001038 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <write_next_event_state+0x3c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	425a      	negs	r2, r3
 800104a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800104e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001052:	bf58      	it	pl
 8001054:	4253      	negpl	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <write_next_event_state+0x3c>)
 800105a:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <write_next_event_state+0x3c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <write_next_event_state+0x40>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	5453      	strb	r3, [r2, r1]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200002fd 	.word	0x200002fd
 8001078:	2000027c 	.word	0x2000027c

0800107c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e1b      	ldrb	r3, [r3, #24]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 800108c:	2b02      	cmp	r3, #2
 800108e:	d004      	beq.n	800109a <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 8001090:	e007      	b.n	80010a2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff ffd0 	bl	8001038 <write_next_event_state>
			break;
 8001098:	e003      	b.n	80010a2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff ffcc 	bl	8001038 <write_next_event_state>
			break;
 80010a0:	bf00      	nop
	}
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f7ff ffc0 	bl	8001038 <write_next_event_state>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <Send_HID_Data>:

uint8_t Send_HID_Data(Controller_HandleTypeDef* controller){
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 80010c6:	afa6      	add	r7, sp, #664	; 0x298
 80010c8:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <Send_HID_Data+0xd8>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <Send_HID_Data+0xd8>)
 80010d8:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <Send_HID_Data+0xd8>)
 80010e6:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <Send_HID_Data+0xd8>)
 80010f2:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fa:	121b      	asrs	r3, r3, #8
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <Send_HID_Data+0xd8>)
 8001102:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <Send_HID_Data+0xd8>)
 800110e:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	121b      	asrs	r3, r3, #8
 8001118:	b21b      	sxth	r3, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <Send_HID_Data+0xd8>)
 800111e:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <Send_HID_Data+0xd8>)
 800112a:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001132:	121b      	asrs	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <Send_HID_Data+0xd8>)
 800113a:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <Send_HID_Data+0xd8>)
 8001146:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800114e:	121b      	asrs	r3, r3, #8
 8001150:	b21b      	sxth	r3, r3
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <Send_HID_Data+0xd8>)
 8001156:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7a9a      	ldrb	r2, [r3, #10]
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <Send_HID_Data+0xd8>)
 800115e:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7ada      	ldrb	r2, [r3, #11]
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <Send_HID_Data+0xd8>)
 8001166:	731a      	strb	r2, [r3, #12]
	return USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8001168:	4c0c      	ldr	r4, [pc, #48]	; (800119c <Send_HID_Data+0xdc>)
 800116a:	230d      	movs	r3, #13
 800116c:	93a4      	str	r3, [sp, #656]	; 0x290
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <Send_HID_Data+0xd8>)
 8001170:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001172:	4668      	mov	r0, sp
 8001174:	f104 0310 	add.w	r3, r4, #16
 8001178:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800117c:	4619      	mov	r1, r3
 800117e:	f009 f8ed 	bl	800a35c <memcpy>
 8001182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001186:	f007 fbd5 	bl	8008934 <USBD_CUSTOM_HID_SendReport>
 800118a:	4603      	mov	r3, r0
 800118c:	b2db      	uxtb	r3, r3
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	2000034c 	.word	0x2000034c
 800119c:	20000364 	.word	0x20000364

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_MspInit+0x58>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_MspInit+0x58>)
 80011b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011bc:	6253      	str	r3, [r2, #36]	; 0x24
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_MspInit+0x58>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_MspInit+0x58>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_MspInit+0x58>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_MspInit+0x58>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_MspInit+0x58>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_MspInit+0x58>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6253      	str	r3, [r2, #36]	; 0x24
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_MspInit+0x58>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_ADC_MspInit+0xd4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d154      	bne.n	80012d4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a2c      	ldr	r2, [pc, #176]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_ADC_MspInit+0xd8>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800125a:	2303      	movs	r3, #3
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	481d      	ldr	r0, [pc, #116]	; (80012e4 <HAL_ADC_MspInit+0xdc>)
 800126e:	f001 fac1 	bl	80027f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0xe4>)
 8001276:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 8001294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001298:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 80012aa:	f001 f90d 	bl	80024c8 <HAL_DMA_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80012b4:	f7ff ff74 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_ADC_MspInit+0xe0>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	2012      	movs	r0, #18
 80012ca:	f001 f8c6 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012ce:	2012      	movs	r0, #18
 80012d0:	f001 f8df 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	200001f4 	.word	0x200001f4
 80012ec:	40026008 	.word	0x40026008

080012f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d113      	bne.n	800132a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6253      	str	r3, [r2, #36]	; 0x24
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_TIM_Base_MspInit+0x44>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	201c      	movs	r0, #28
 8001320:	f001 f89b 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001324:	201c      	movs	r0, #28
 8001326:	f001 f8b4 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 fa57 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <DMA1_Channel1_IRQHandler+0x10>)
 800138e:	f001 f953 	bl	8002638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001f4 	.word	0x200001f4

0800139c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <ADC1_IRQHandler+0x10>)
 80013a2:	f000 fc35 	bl	8001c10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001a0 	.word	0x200001a0

080013b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <USB_LP_IRQHandler+0x10>)
 80013b6:	f001 fca1 	bl	8002cfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000800 	.word	0x20000800

080013c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM2_IRQHandler+0x10>)
 80013ca:	f003 ff1b 	bl	8005204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000238 	.word	0x20000238

080013d8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140a:	f7ff ffe5 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f008 ff81 	bl	800a314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fb51 	bl	8000ab8 <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001420:	0800a410 	.word	0x0800a410
  ldr r2, =_sbss
 8001424:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001428:	20000b14 	.word	0x20000b14

0800142c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <COMP_IRQHandler>
	...

08001430 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001430:	b4b0      	push	{r4, r5, r7}
 8001432:	b095      	sub	sp, #84	; 0x54
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001444:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800144a:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <Joystick_Init+0x90>)
 8001452:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <Joystick_Init+0x94>)
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8001462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001466:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146c:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <Joystick_Init+0x90>)
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <Joystick_Init+0x94>)
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001492:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	461d      	mov	r5, r3
 800149c:	f107 0414 	add.w	r4, r7, #20
 80014a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	3754      	adds	r7, #84	; 0x54
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bcb0      	pop	{r4, r5, r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	3ccccccd 	.word	0x3ccccccd
 80014c4:	3f8ccccd 	.word	0x3f8ccccd

080014c8 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d062      	beq.n	80015b0 <Joystick_Update+0xe8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d05e      	beq.n	80015b0 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	891b      	ldrh	r3, [r3, #8]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fef6 	bl	80002e8 <__aeabi_ui2f>
 80014fc:	4604      	mov	r4, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001508:	f7fe fe3c 	bl	8000184 <__aeabi_fsub>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4620      	mov	r0, r4
 8001512:	f7fe ff41 	bl	8000398 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	461c      	mov	r4, r3
 800151a:	8bfb      	ldrh	r3, [r7, #30]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fee3 	bl	80002e8 <__aeabi_ui2f>
 8001522:	4602      	mov	r2, r0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f7fe ff34 	bl	8000398 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7fe fe27 	bl	8000188 <__addsf3>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f917 	bl	8000770 <__aeabi_f2uiz>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8c1b      	ldrh	r3, [r3, #32]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe feca 	bl	80002e8 <__aeabi_ui2f>
 8001554:	4604      	mov	r4, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001560:	f7fe fe10 	bl	8000184 <__aeabi_fsub>
 8001564:	4603      	mov	r3, r0
 8001566:	4619      	mov	r1, r3
 8001568:	4620      	mov	r0, r4
 800156a:	f7fe ff15 	bl	8000398 <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
 8001570:	461c      	mov	r4, r3
 8001572:	8bbb      	ldrh	r3, [r7, #28]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe feb7 	bl	80002e8 <__aeabi_ui2f>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f7fe ff08 	bl	8000398 <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	4619      	mov	r1, r3
 800158c:	4620      	mov	r0, r4
 800158e:	f7fe fdfb 	bl	8000188 <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f8eb 	bl	8000770 <__aeabi_f2uiz>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	865a      	strh	r2, [r3, #50]	; 0x32
 80015ae:	e008      	b.n	80015c2 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	8bfa      	ldrh	r2, [r7, #30]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	8c1b      	ldrh	r3, [r3, #32]
 80015d2:	8bba      	ldrh	r2, [r7, #28]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	889b      	ldrh	r3, [r3, #4]
 80015de:	8bfa      	ldrh	r2, [r7, #30]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bf28      	it	cs
 80015e4:	4613      	movcs	r3, r2
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	88db      	ldrh	r3, [r3, #6]
 80015f0:	8bfa      	ldrh	r2, [r7, #30]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	bf38      	it	cc
 80015f6:	4613      	movcc	r3, r2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	8b9b      	ldrh	r3, [r3, #28]
 8001602:	8bba      	ldrh	r2, [r7, #28]
 8001604:	4293      	cmp	r3, r2
 8001606:	bf28      	it	cs
 8001608:	4613      	movcs	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	8bdb      	ldrh	r3, [r3, #30]
 8001614:	8bba      	ldrh	r2, [r7, #28]
 8001616:	4293      	cmp	r3, r2
 8001618:	bf38      	it	cc
 800161a:	4613      	movcc	r3, r2
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8001622:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001626:	2b00      	cmp	r3, #0
 8001628:	dd15      	ble.n	8001656 <Joystick_Update+0x18e>
 800162a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fe5e 	bl	80002f0 <__aeabi_i2f>
 8001634:	4604      	mov	r4, r0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	88db      	ldrh	r3, [r3, #6]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	891b      	ldrh	r3, [r3, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe54 	bl	80002f0 <__aeabi_i2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	4620      	mov	r0, r4
 800164e:	f7fe ff57 	bl	8000500 <__aeabi_fdiv>
 8001652:	4603      	mov	r3, r0
 8001654:	e016      	b.n	8001684 <Joystick_Update+0x1bc>
 8001656:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe48 	bl	80002f0 <__aeabi_i2f>
 8001660:	4603      	mov	r3, r0
 8001662:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	891b      	ldrh	r3, [r3, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe3c 	bl	80002f0 <__aeabi_i2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f7fe ff3f 	bl	8000500 <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001686:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd15      	ble.n	80016ba <Joystick_Update+0x1f2>
 800168e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe2c 	bl	80002f0 <__aeabi_i2f>
 8001698:	4604      	mov	r4, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	8bdb      	ldrh	r3, [r3, #30]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	8c1b      	ldrh	r3, [r3, #32]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fe22 	bl	80002f0 <__aeabi_i2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7fe ff25 	bl	8000500 <__aeabi_fdiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	e016      	b.n	80016e8 <Joystick_Update+0x220>
 80016ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe fe16 	bl	80002f0 <__aeabi_i2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8b9b      	ldrh	r3, [r3, #28]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8c1b      	ldrh	r3, [r3, #32]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe0a 	bl	80002f0 <__aeabi_i2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7fe ff0d 	bl	8000500 <__aeabi_fdiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff f80e 	bl	8000710 <__aeabi_fcmpgt>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <Joystick_Update+0x236>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	e002      	b.n	8001704 <Joystick_Update+0x23c>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001704:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	6938      	ldr	r0, [r7, #16]
 800170c:	f7ff f800 	bl	8000710 <__aeabi_fcmpgt>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <Joystick_Update+0x252>
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	e002      	b.n	8001720 <Joystick_Update+0x258>
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001720:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	4619      	mov	r1, r3
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7fe fff1 	bl	8000710 <__aeabi_fcmpgt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00a      	beq.n	800174a <Joystick_Update+0x282>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4619      	mov	r1, r3
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f7fe ffca 	bl	80006d4 <__aeabi_fcmplt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <Joystick_Update+0x282>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	e001      	b.n	800174e <Joystick_Update+0x286>
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	68b8      	ldr	r0, [r7, #8]
 800175a:	f7fe ffd9 	bl	8000710 <__aeabi_fcmpgt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <Joystick_Update+0x2b2>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	4619      	mov	r1, r3
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f7fe ffb2 	bl	80006d4 <__aeabi_fcmplt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <Joystick_Update+0x2b2>
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	e001      	b.n	800177e <Joystick_Update+0x2b6>
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}

0800178a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fe55 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f80e 	bl	80017bc <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ac:	f7ff fcfe 	bl	80011ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_InitTick+0x68>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d022      	beq.n	8001816 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_InitTick+0x6c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_InitTick+0x68>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fe62 	bl	80024ae <HAL_SYSTICK_Config>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10f      	bne.n	8001810 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d809      	bhi.n	800180a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f6:	2200      	movs	r2, #0
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
 80017fe:	f000 fe2c 	bl	800245a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_InitTick+0x70>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e007      	b.n	800181a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e004      	b.n	800181a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000008 	.word	0x20000008
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4413      	add	r3, r2
 800183e:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x1c>)
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000035c 	.word	0x2000035c
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_GetTick+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	2000035c 	.word	0x2000035c

08001868 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e127      	b.n	8001ad8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <HAL_ADC_Init+0x278>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a8d      	ldr	r2, [pc, #564]	; (8001ae0 <HAL_ADC_Init+0x278>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_ADC_Init+0x278>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fca3 	bl	8001208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 80ff 	bne.w	8001ace <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d8:	f023 0302 	bic.w	r3, r3, #2
 80018dc:	f043 0202 	orr.w	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018e4:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_ADC_Init+0x27c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	497c      	ldr	r1, [pc, #496]	; (8001ae4 <HAL_ADC_Init+0x27c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018fe:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001906:	4619      	mov	r1, r3
 8001908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001922:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001928:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800194a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	4313      	orrs	r3, r2
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	2b10      	cmp	r3, #16
 8001958:	d007      	beq.n	800196a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001962:	4313      	orrs	r3, r2
 8001964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001966:	4313      	orrs	r3, r2
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d04f      	beq.n	8001a18 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	4313      	orrs	r3, r2
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800198a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6912      	ldr	r2, [r2, #16]
 8001990:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001994:	d003      	beq.n	800199e <HAL_ADC_Init+0x136>
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6912      	ldr	r2, [r2, #16]
 800199a:	2a01      	cmp	r2, #1
 800199c:	d102      	bne.n	80019a4 <HAL_ADC_Init+0x13c>
 800199e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a2:	e000      	b.n	80019a6 <HAL_ADC_Init+0x13e>
 80019a4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80019a6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019aa:	4313      	orrs	r3, r2
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d125      	bne.n	8001a04 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d114      	bne.n	80019ec <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	fa92 f2a2 	rbit	r2, r2
 80019d4:	617a      	str	r2, [r7, #20]
  return result;
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	fab2 f282 	clz	r2, r2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	4093      	lsls	r3, r2
 80019e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e6:	4313      	orrs	r3, r2
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ea:	e00b      	b.n	8001a04 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f043 0220 	orr.w	r2, r3, #32
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_ADC_Init+0x280>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_ADC_Init+0x284>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_Init+0x1d6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d119      	bne.n	8001a72 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	60fa      	str	r2, [r7, #12]
  return result;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	fab2 f282 	clz	r2, r2
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	fa03 f202 	lsl.w	r2, r3, r2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_ADC_Init+0x288>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10b      	bne.n	8001aaa <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	f023 0303 	bic.w	r3, r3, #3
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa8:	e014      	b.n	8001ad4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f023 0312 	bic.w	r3, r3, #18
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001acc:	e002      	b.n	8001ad4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3738      	adds	r7, #56	; 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40012700 	.word	0x40012700
 8001ae8:	fcfc16ff 	.word	0xfcfc16ff
 8001aec:	c0fff18d 	.word	0xc0fff18d
 8001af0:	bf80fffe 	.word	0xbf80fffe

08001af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Start_DMA+0x1e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e074      	b.n	8001bfc <HAL_ADC_Start_DMA+0x108>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fae4 	bl	80020e8 <ADC_Enable>
 8001b20:	4603      	mov	r3, r0
 8001b22:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d167      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b68:	d106      	bne.n	8001b78 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	f023 0206 	bic.w	r2, r3, #6
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	651a      	str	r2, [r3, #80]	; 0x50
 8001b76:	e002      	b.n	8001b7e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_ADC_Start_DMA+0x110>)
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_ADC_Start_DMA+0x114>)
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_ADC_Start_DMA+0x118>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bb6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3358      	adds	r3, #88	; 0x58
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f000 fcce 	bl	8002578 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	080021a1 	.word	0x080021a1
 8001c08:	08002249 	.word	0x08002249
 8001c0c:	08002265 	.word	0x08002265

08001c10 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d14e      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d147      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d12c      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d127      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d119      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0220 	bic.w	r2, r2, #32
 8001c8e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff f9f8 	bl	80010aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0212 	mvn.w	r2, #18
 8001cc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b80      	cmp	r3, #128	; 0x80
 8001cd0:	d15c      	bne.n	8001d8c <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d155      	bne.n	8001d8c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d13a      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d12c      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d125      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11e      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d119      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d56:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fa8b 	bl	8002298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 020c 	mvn.w	r2, #12
 8001d8a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d114      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10d      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f834 	bl	8001e22 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f06f 0201 	mvn.w	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dd2:	d119      	bne.n	8001e08 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d112      	bne.n	8001e08 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0220 	mvn.w	r2, #32
 8001df6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f81b 	bl	8001e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0220 	mvn.w	r2, #32
 8001e06:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x20>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e134      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x28a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d81c      	bhi.n	8001eb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b05      	subs	r3, #5
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b05      	subs	r3, #5
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb0:	e07e      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d81c      	bhi.n	8001ef4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b23      	subs	r3, #35	; 0x23
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4019      	ands	r1, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b23      	subs	r3, #35	; 0x23
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ef2:	e05d      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d81c      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b41      	subs	r3, #65	; 0x41
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b41      	subs	r3, #65	; 0x41
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
 8001f34:	e03c      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b18      	cmp	r3, #24
 8001f3c:	d81c      	bhi.n	8001f78 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b5f      	subs	r3, #95	; 0x5f
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4019      	ands	r1, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b5f      	subs	r3, #95	; 0x5f
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
 8001f76:	e01b      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3b7d      	subs	r3, #125	; 0x7d
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b7d      	subs	r3, #125	; 0x7d
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d81a      	bhi.n	8001fee <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6959      	ldr	r1, [r3, #20]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2207      	movs	r2, #7
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4019      	ands	r1, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6898      	ldr	r0, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	615a      	str	r2, [r3, #20]
 8001fec:	e042      	b.n	8002074 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b13      	cmp	r3, #19
 8001ff4:	d81c      	bhi.n	8002030 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6919      	ldr	r1, [r3, #16]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	3b1e      	subs	r3, #30
 8002008:	2207      	movs	r2, #7
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	4019      	ands	r1, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6898      	ldr	r0, [r3, #8]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	e021      	b.n	8002074 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b1a      	cmp	r3, #26
 8002036:	d81c      	bhi.n	8002072 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68d9      	ldr	r1, [r3, #12]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b3c      	subs	r3, #60	; 0x3c
 800204a:	2207      	movs	r2, #7
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	4019      	ands	r1, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6898      	ldr	r0, [r3, #8]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	3b3c      	subs	r3, #60	; 0x3c
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	e000      	b.n	8002074 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002072:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b10      	cmp	r3, #16
 800207a:	d003      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002080:	2b11      	cmp	r3, #17
 8002082:	d121      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_ADC_ConfigChannel+0x294>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11b      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_ADC_ConfigChannel+0x294>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x294>)
 8002096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800209a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d111      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_ADC_ConfigChannel+0x298>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_ADC_ConfigChannel+0x29c>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	0c9a      	lsrs	r2, r3, #18
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3b01      	subs	r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40012700 	.word	0x40012700
 80020e0:	20000000 	.word	0x20000000
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d043      	beq.n	800218e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <ADC_Enable+0xb0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a20      	ldr	r2, [pc, #128]	; (800219c <ADC_Enable+0xb4>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	0c9a      	lsrs	r2, r3, #18
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800212a:	e002      	b.n	8002132 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3b01      	subs	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002138:	f7ff fb8c 	bl	8001854 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800213e:	e01f      	b.n	8002180 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002140:	f7ff fb88 	bl	8001854 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d918      	bls.n	8002180 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d011      	beq.n	8002180 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e007      	b.n	8002190 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	d1d8      	bne.n	8002140 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	431bde83 	.word	0x431bde83

080021a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d13d      	bne.n	8002236 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12c      	bne.n	800222e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d127      	bne.n	800222e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d119      	bne.n	800222e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0220 	bic.w	r2, r2, #32
 8002208:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7fe ff3b 	bl	80010aa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002234:	e004      	b.n	8002240 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fdda 	bl	8001e10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	f043 0204 	orr.w	r2, r3, #4
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff fdd2 	bl	8001e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <__NVIC_EnableIRQ+0x34>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff90 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff2d 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff42 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff90 	bl	800239c <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5f 	bl	8002348 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff35 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e043      	b.n	8002562 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_DMA_Init+0xa4>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_DMA_Init+0xa8>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_DMA_Init+0xac>)
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	bffd9ff8 	.word	0xbffd9ff8
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	40026000 	.word	0x40026000

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Start_IT+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e04b      	b.n	8002630 <HAL_DMA_Start_IT+0xb8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d13a      	bne.n	8002622 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f8e0 	bl	8002796 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 020e 	orr.w	r2, r2, #14
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00f      	b.n	8002610 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0204 	bic.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 020a 	orr.w	r2, r2, #10
 800260e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e005      	b.n	800262e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800262e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f003 031c 	and.w	r3, r3, #28
 8002658:	2204      	movs	r2, #4
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d026      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x7a>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f003 021c 	and.w	r2, r3, #28
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2104      	movs	r1, #4
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d071      	beq.n	800278c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	e06c      	b.n	800278c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 031c 	and.w	r3, r3, #28
 80026ba:	2202      	movs	r2, #2
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02e      	beq.n	8002724 <HAL_DMA_IRQHandler+0xec>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d029      	beq.n	8002724 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 020a 	bic.w	r2, r2, #10
 80026ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 021c 	and.w	r2, r3, #28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2102      	movs	r1, #2
 8002704:	fa01 f202 	lsl.w	r2, r1, r2
 8002708:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d038      	beq.n	800278c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002722:	e033      	b.n	800278c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f003 031c 	and.w	r3, r3, #28
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02a      	beq.n	800278e <HAL_DMA_IRQHandler+0x156>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d025      	beq.n	800278e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020e 	bic.w	r2, r2, #14
 8002750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 021c 	and.w	r2, r3, #28
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800278c:	bf00      	nop
 800278e:	bf00      	nop
}
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f003 021c 	and.w	r2, r3, #28
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d108      	bne.n	80027da <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027d8:	e007      	b.n	80027ea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	60da      	str	r2, [r3, #12]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800280a:	e154      	b.n	8002ab6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8146 	beq.w	8002ab0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d005      	beq.n	800283c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002838:	2b02      	cmp	r3, #2
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002872:	2201      	movs	r2, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d017      	beq.n	80028da <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d123      	bne.n	800292e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	6939      	ldr	r1, [r7, #16]
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80a0 	beq.w	8002ab0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b58      	ldr	r3, [pc, #352]	; (8002ad4 <HAL_GPIO_Init+0x2e0>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_GPIO_Init+0x2e0>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	4b55      	ldr	r3, [pc, #340]	; (8002ad4 <HAL_GPIO_Init+0x2e0>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002988:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_GPIO_Init+0x2e4>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d019      	beq.n	80029e8 <HAL_GPIO_Init+0x1f4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4a      	ldr	r2, [pc, #296]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1f0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1ec>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1e8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1e4>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e008      	b.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029d8:	2305      	movs	r3, #5
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029dc:	2303      	movs	r3, #3
 80029de:	e004      	b.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029e8:	2300      	movs	r3, #0
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4093      	lsls	r3, r2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029fa:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_GPIO_Init+0x2e4>)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a2c:	4a30      	ldr	r2, [pc, #192]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a56:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aaa:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f aea3 	bne.w	800280c <HAL_GPIO_Init+0x18>
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	af06      	add	r7, sp, #24
 8002afa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0d0      	b.n	8002ca8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f007 f976 	bl	8009e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f003 f80b 	bl	8005b48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e04c      	b.n	8002bd2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	3301      	adds	r3, #1
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	b298      	uxth	r0, r3
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3336      	adds	r3, #54	; 0x36
 8002b76:	4602      	mov	r2, r0
 8002b78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3338      	adds	r3, #56	; 0x38
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	333c      	adds	r3, #60	; 0x3c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3340      	adds	r3, #64	; 0x40
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d3ad      	bcc.n	8002b38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e044      	b.n	8002c6c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3b5      	bcc.n	8002be2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	687e      	ldr	r6, [r7, #4]
 8002c7e:	466d      	mov	r5, sp
 8002c80:	f106 0410 	add.w	r4, r6, #16
 8002c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	602b      	str	r3, [r5, #0]
 8002c8c:	1d33      	adds	r3, r6, #4
 8002c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c90:	6838      	ldr	r0, [r7, #0]
 8002c92:	f002 ff73 	bl	8005b7c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_PCD_Start+0x16>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e016      	b.n	8002cf4 <HAL_PCD_Start+0x44>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 ff22 	bl	8005b1c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cd8:	2101      	movs	r1, #1
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f007 f878 	bl	8009dd0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f005 fc07 	bl	80084f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 fbff 	bl	800850c <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d18:	d102      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fade 	bl	80032dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f005 fbf1 	bl	800850c <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d112      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f007 f8d7 	bl	8009f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d54:	2100      	movs	r1, #0
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8c7 	bl	8002eea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 fbd3 	bl	800850c <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d70:	d10b      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d84:	b292      	uxth	r2, r2
 8002d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f005 fbbc 	bl	800850c <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db2:	b292      	uxth	r2, r2
 8002db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 fba5 	bl	800850c <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d126      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0204 	bic.w	r2, r2, #4
 8002de0:	b292      	uxth	r2, r2
 8002de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f007 f8b8 	bl	8009f74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 fb73 	bl	800850c <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e30:	d126      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0208 	orr.w	r2, r2, #8
 8002e44:	b292      	uxth	r2, r2
 8002e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0204 	orr.w	r2, r2, #4
 8002e74:	b292      	uxth	r2, r2
 8002e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f007 f860 	bl	8009f40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 fb41 	bl	800850c <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d10e      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f007 f819 	bl	8009ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fb27 	bl	800850c <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002edc:	b292      	uxth	r2, r2
 8002ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_SetAddress+0x1a>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e013      	b.n	8002f2c <HAL_PCD_SetAddress+0x42>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fad8 	bl	80084d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	70fb      	strb	r3, [r7, #3]
 8002f46:	460b      	mov	r3, r1
 8002f48:	803b      	strh	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da0e      	bge.n	8002f78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	705a      	strb	r2, [r3, #1]
 8002f76:	e00e      	b.n	8002f96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 0207 	and.w	r2, r3, #7
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fa2:	883a      	ldrh	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	78ba      	ldrb	r2, [r7, #2]
 8002fac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fc0:	78bb      	ldrb	r3, [r7, #2]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d102      	bne.n	8002fcc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_PCD_EP_Open+0xa6>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e00e      	b.n	8002ff8 <HAL_PCD_EP_Open+0xc4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fde7 	bl	8005bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da0e      	bge.n	8003032 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	705a      	strb	r2, [r3, #1]
 8003030:	e00e      	b.n	8003050 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 0207 	and.w	r2, r3, #7
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	b2da      	uxtb	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_PCD_EP_Close+0x6a>
 8003066:	2302      	movs	r3, #2
 8003068:	e00e      	b.n	8003088 <HAL_PCD_EP_Close+0x88>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f909 	bl	8006290 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 0207 	and.w	r2, r3, #7
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fabb 	bl	8006668 <USB_EPStartXfer>
 80030f2:	e005      	b.n	8003100 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6979      	ldr	r1, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fab4 	bl	8006668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	460b      	mov	r3, r1
 8003118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003156:	7afb      	ldrb	r3, [r7, #11]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b2da      	uxtb	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fa78 	bl	8006668 <USB_EPStartXfer>
 8003178:	e005      	b.n	8003186 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6979      	ldr	r1, [r7, #20]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fa71 	bl	8006668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d901      	bls.n	80031ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e03e      	b.n	800322c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0e      	bge.n	80031d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
 80031d2:	e00c      	b.n	80031ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_PCD_EP_SetStall+0x7e>
 800320a:	2302      	movs	r3, #2
 800320c:	e00e      	b.n	800322c <HAL_PCD_EP_SetStall+0x9c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	f005 f85b 	bl	80082d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d901      	bls.n	8003252 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e040      	b.n	80032d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003256:	2b00      	cmp	r3, #0
 8003258:	da0e      	bge.n	8003278 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	705a      	strb	r2, [r3, #1]
 8003276:	e00e      	b.n	8003296 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 0207 	and.w	r2, r3, #7
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_PCD_EP_ClrStall+0x82>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e00e      	b.n	80032d4 <HAL_PCD_EP_ClrStall+0xa0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 f857 	bl	8008378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032e4:	e2ec      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 8161 	bne.w	80035c8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d152      	bne.n	80033b6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	81fb      	strh	r3, [r7, #14]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003330:	b29b      	uxth	r3, r3
 8003332:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3328      	adds	r3, #40	; 0x28
 8003338:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	3302      	adds	r3, #2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	441a      	add	r2, r3
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003374:	2100      	movs	r1, #0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f006 fd9b 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 829b 	beq.w	80038c0 <PCD_EP_ISR_Handler+0x5e4>
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 8296 	bne.w	80038c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b292      	uxth	r2, r2
 80033a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033b4:	e284      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d034      	beq.n	800343a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d8:	b29b      	uxth	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	3306      	adds	r3, #6
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800340e:	b29b      	uxth	r3, r3
 8003410:	f005 f8d0 	bl	80085b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29a      	uxth	r2, r3
 800341c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003420:	4013      	ands	r3, r2
 8003422:	823b      	strh	r3, [r7, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	8a3a      	ldrh	r2, [r7, #16]
 800342a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f006 fd10 	bl	8009e58 <HAL_PCD_SetupStageCallback>
 8003438:	e242      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800343a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800343e:	2b00      	cmp	r3, #0
 8003440:	f280 823e 	bge.w	80038c0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003450:	4013      	ands	r3, r2
 8003452:	83bb      	strh	r3, [r7, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	8bba      	ldrh	r2, [r7, #28]
 800345a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800345e:	b292      	uxth	r2, r2
 8003460:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	3306      	adds	r3, #6
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d019      	beq.n	80034ca <PCD_EP_ISR_Handler+0x1ee>
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d015      	beq.n	80034ca <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f005 f880 	bl	80085b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	441a      	add	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034c2:	2100      	movs	r1, #0
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f006 fcd9 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 81f2 	bne.w	80038c0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4413      	add	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d112      	bne.n	800352a <PCD_EP_ISR_Handler+0x24e>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800350e:	b29a      	uxth	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003522:	b29a      	uxth	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	e02f      	b.n	800358a <PCD_EP_ISR_Handler+0x2ae>
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b3e      	cmp	r3, #62	; 0x3e
 8003530:	d813      	bhi.n	800355a <PCD_EP_ISR_Handler+0x27e>
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <PCD_EP_ISR_Handler+0x270>
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	3301      	adds	r3, #1
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	b29b      	uxth	r3, r3
 8003550:	029b      	lsls	r3, r3, #10
 8003552:	b29a      	uxth	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	e017      	b.n	800358a <PCD_EP_ISR_Handler+0x2ae>
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <PCD_EP_ISR_Handler+0x298>
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	3b01      	subs	r3, #1
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	b29b      	uxth	r3, r3
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	b29b      	uxth	r3, r3
 800357c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003584:	b29a      	uxth	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	827b      	strh	r3, [r7, #18]
 800359c:	8a7b      	ldrh	r3, [r7, #18]
 800359e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035a2:	827b      	strh	r3, [r7, #18]
 80035a4:	8a7b      	ldrh	r3, [r7, #18]
 80035a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035aa:	827b      	strh	r3, [r7, #18]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	8a7b      	ldrh	r3, [r7, #18]
 80035b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]
 80035c6:	e17b      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f280 80ea 	bge.w	80037b8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035fa:	4013      	ands	r3, r2
 80035fc:	853b      	strh	r3, [r7, #40]	; 0x28
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800360e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003612:	b292      	uxth	r2, r2
 8003614:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003616:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	7b1b      	ldrb	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d122      	bne.n	800367a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363c:	b29b      	uxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	3306      	adds	r3, #6
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800365e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8087 	beq.w	8003774 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6959      	ldr	r1, [r3, #20]
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	88da      	ldrh	r2, [r3, #6]
 8003672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003674:	f004 ff9e 	bl	80085b4 <USB_ReadPMA>
 8003678:	e07c      	b.n	8003774 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	78db      	ldrb	r3, [r3, #3]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d108      	bne.n	8003694 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003684:	461a      	mov	r2, r3
 8003686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f927 	bl	80038dc <HAL_PCD_EP_DB_Receive>
 800368e:	4603      	mov	r3, r0
 8003690:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003692:	e06f      	b.n	8003774 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d021      	beq.n	8003732 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	3302      	adds	r3, #2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003716:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02a      	beq.n	8003774 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	891a      	ldrh	r2, [r3, #8]
 800372a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800372c:	f004 ff42 	bl	80085b4 <USB_ReadPMA>
 8003730:	e020      	b.n	8003774 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373a:	b29b      	uxth	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	3306      	adds	r3, #6
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800375c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	6959      	ldr	r1, [r3, #20]
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	895a      	ldrh	r2, [r3, #10]
 800376e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003770:	f004 ff20 	bl	80085b4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800377a:	441a      	add	r2, r3
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003786:	441a      	add	r2, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <PCD_EP_ISR_Handler+0x4c2>
 8003794:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d206      	bcs.n	80037ac <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f006 fb69 	bl	8009e7c <HAL_PCD_DataOutStageCallback>
 80037aa:	e005      	b.n	80037b8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 ff58 	bl	8006668 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d07e      	beq.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80037c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	843b      	strh	r3, [r7, #32]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	8c3b      	ldrh	r3, [r7, #32]
 8003802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	78db      	ldrb	r3, [r3, #3]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d00c      	beq.n	8003830 <PCD_EP_ISR_Handler+0x554>
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	78db      	ldrb	r3, [r3, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003822:	2b02      	cmp	r3, #2
 8003824:	d146      	bne.n	80038b4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d141      	bne.n	80038b4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	3302      	adds	r3, #2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	8bfb      	ldrh	r3, [r7, #30]
 8003860:	429a      	cmp	r2, r3
 8003862:	d906      	bls.n	8003872 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	8bfb      	ldrh	r3, [r7, #30]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	619a      	str	r2, [r3, #24]
 8003870:	e002      	b.n	8003878 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f006 fb13 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
 800388c:	e018      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	8bfb      	ldrh	r3, [r7, #30]
 8003894:	441a      	add	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	8bfb      	ldrh	r3, [r7, #30]
 80038a0:	441a      	add	r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fedb 	bl	8006668 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80038b2:	e005      	b.n	80038c0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038b6:	461a      	mov	r2, r3
 80038b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f91b 	bl	8003af6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f6ff ad0a 	blt.w	80032e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3738      	adds	r7, #56	; 0x38
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d07e      	beq.n	80039f2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	3302      	adds	r3, #2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	8b7b      	ldrh	r3, [r7, #26]
 8003924:	429a      	cmp	r2, r3
 8003926:	d306      	bcc.n	8003936 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	8b7b      	ldrh	r3, [r7, #26]
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e002      	b.n	800393c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d123      	bne.n	800398c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	833b      	strh	r3, [r7, #24]
 8003960:	8b3b      	ldrh	r3, [r7, #24]
 8003962:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003966:	833b      	strh	r3, [r7, #24]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	8b3b      	ldrh	r3, [r7, #24]
 8003978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	b29b      	uxth	r3, r3
 800398a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01f      	beq.n	80039d6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b0:	82fb      	strh	r3, [r7, #22]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	441a      	add	r2, r3
 80039c0:	8afb      	ldrh	r3, [r7, #22]
 80039c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039d6:	8b7b      	ldrh	r3, [r7, #26]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8087 	beq.w	8003aec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6959      	ldr	r1, [r3, #20]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	891a      	ldrh	r2, [r3, #8]
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	f004 fde2 	bl	80085b4 <USB_ReadPMA>
 80039f0:	e07c      	b.n	8003aec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	3306      	adds	r3, #6
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	8b7b      	ldrh	r3, [r7, #26]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d306      	bcc.n	8003a34 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	8b7b      	ldrh	r3, [r7, #26]
 8003a2c:	1ad2      	subs	r2, r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	619a      	str	r2, [r3, #24]
 8003a32:	e002      	b.n	8003a3a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d123      	bne.n	8003a8a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	83fb      	strh	r3, [r7, #30]
 8003a5e:	8bfb      	ldrh	r3, [r7, #30]
 8003a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a64:	83fb      	strh	r3, [r7, #30]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	8bfb      	ldrh	r3, [r7, #30]
 8003a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11f      	bne.n	8003ad4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	83bb      	strh	r3, [r7, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	8bbb      	ldrh	r3, [r7, #28]
 8003ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ad4:	8b7b      	ldrh	r3, [r7, #26]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6959      	ldr	r1, [r3, #20]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	895a      	ldrh	r2, [r3, #10]
 8003ae6:	8b7b      	ldrh	r3, [r7, #26]
 8003ae8:	f004 fd64 	bl	80085b4 <USB_ReadPMA>
    }
  }

  return count;
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b0a2      	sub	sp, #136	; 0x88
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 81c7 	beq.w	8003e9e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	3302      	adds	r3, #2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d907      	bls.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b50:	1ad2      	subs	r2, r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	619a      	str	r2, [r3, #24]
 8003b56:	e002      	b.n	8003b5e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 80b9 	bne.w	8003cda <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d126      	bne.n	8003bbe <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	4413      	add	r3, r2
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e01a      	b.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d116      	bne.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	633b      	str	r3, [r7, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	4413      	add	r3, r2
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d126      	bne.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	011a      	lsls	r2, r3, #4
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	e017      	b.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d113      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	4413      	add	r3, r2
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	011a      	lsls	r2, r3, #4
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	4413      	add	r3, r2
 8003c74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f006 f913 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 82d4 	beq.w	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	827b      	strh	r3, [r7, #18]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	8a7b      	ldrh	r3, [r7, #18]
 8003cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8013      	strh	r3, [r2, #0]
 8003cd8:	e2b2      	b.n	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d021      	beq.n	8003d28 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	f040 8286 	bne.w	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d309      	bcc.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	621a      	str	r2, [r3, #32]
 8003d6e:	e015      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d86:	e009      	b.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d155      	bne.n	8003e50 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	4413      	add	r3, r2
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	011a      	lsls	r2, r3, #4
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d112      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x302>
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e047      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x392>
 8003df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfc:	d811      	bhi.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	3301      	adds	r3, #1
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e032      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x342>
 8003e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e34:	3b01      	subs	r3, #1
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	029b      	lsls	r3, r3, #10
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	e01b      	b.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d117      	bne.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6c:	4413      	add	r3, r2
 8003e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	011a      	lsls	r2, r3, #4
 8003e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	891a      	ldrh	r2, [r3, #8]
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f004 fb47 	bl	800852a <USB_WritePMA>
 8003e9c:	e1d0      	b.n	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3306      	adds	r3, #6
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d307      	bcc.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	619a      	str	r2, [r3, #24]
 8003ee4:	e002      	b.n	8003eec <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 80c4 	bne.w	800407e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d126      	bne.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x456>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f12:	4413      	add	r3, r2
 8003f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	011a      	lsls	r2, r3, #4
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	4413      	add	r3, r2
 8003f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	e01a      	b.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d116      	bne.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	4413      	add	r3, r2
 8003f6a:	677b      	str	r3, [r7, #116]	; 0x74
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7e:	2200      	movs	r2, #0
 8003f80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d12f      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa8:	4413      	add	r3, r2
 8003faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	011a      	lsls	r2, r3, #4
 8003fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb8:	4413      	add	r3, r2
 8003fba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e017      	b.n	8004020 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d113      	bne.n	8004020 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004006:	4413      	add	r3, r2
 8004008:	67bb      	str	r3, [r7, #120]	; 0x78
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	011a      	lsls	r2, r3, #4
 8004010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004012:	4413      	add	r3, r2
 8004014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800401a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401c:	2200      	movs	r2, #0
 800401e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f005 ff43 	bl	8009eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8104 	bne.w	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
 800407c:	e0e0      	b.n	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d121      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	441a      	add	r2, r3
 80040b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	f040 80b4 	bne.w	8004240 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040e0:	441a      	add	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ee:	441a      	add	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d309      	bcc.n	8004114 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6a1a      	ldr	r2, [r3, #32]
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	1ad2      	subs	r2, r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	621a      	str	r2, [r3, #32]
 8004112:	e015      	b.n	8004140 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800411c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800412a:	e009      	b.n	8004140 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	667b      	str	r3, [r7, #100]	; 0x64
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d155      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x704>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004162:	4413      	add	r3, r2
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	011a      	lsls	r2, r3, #4
 800416c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416e:	4413      	add	r3, r2
 8004170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004174:	65bb      	str	r3, [r7, #88]	; 0x58
 8004176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004178:	2b00      	cmp	r3, #0
 800417a:	d112      	bne.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800417c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004186:	b29a      	uxth	r2, r3
 8004188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419a:	b29a      	uxth	r2, r3
 800419c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e044      	b.n	800422c <HAL_PCD_EP_DB_Transmit+0x736>
 80041a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a4:	2b3e      	cmp	r3, #62	; 0x3e
 80041a6:	d811      	bhi.n	80041cc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80041a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
 80041ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_PCD_EP_DB_Transmit+0x6c8>
 80041b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ba:	3301      	adds	r3, #1
 80041bc:	657b      	str	r3, [r7, #84]	; 0x54
 80041be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	e02f      	b.n	800422c <HAL_PCD_EP_DB_Transmit+0x736>
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	657b      	str	r3, [r7, #84]	; 0x54
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80041dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041de:	3b01      	subs	r3, #1
 80041e0:	657b      	str	r3, [r7, #84]	; 0x54
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e018      	b.n	800422c <HAL_PCD_EP_DB_Transmit+0x736>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d114      	bne.n	800422c <HAL_PCD_EP_DB_Transmit+0x736>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004210:	4413      	add	r3, r2
 8004212:	667b      	str	r3, [r7, #100]	; 0x64
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	011a      	lsls	r2, r3, #4
 800421a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421c:	4413      	add	r3, r2
 800421e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
 8004224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004226:	b29a      	uxth	r2, r3
 8004228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6959      	ldr	r1, [r3, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	895a      	ldrh	r2, [r3, #10]
 8004238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423a:	b29b      	uxth	r3, r3
 800423c:	f004 f975 	bl	800852a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425a:	823b      	strh	r3, [r7, #16]
 800425c:	8a3b      	ldrh	r3, [r7, #16]
 800425e:	f083 0310 	eor.w	r3, r3, #16
 8004262:	823b      	strh	r3, [r7, #16]
 8004264:	8a3b      	ldrh	r3, [r7, #16]
 8004266:	f083 0320 	eor.w	r3, r3, #32
 800426a:	823b      	strh	r3, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	8a3b      	ldrh	r3, [r7, #16]
 800427c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3788      	adds	r7, #136	; 0x88
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	817b      	strh	r3, [r7, #10]
 80042a8:	4613      	mov	r3, r2
 80042aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e009      	b.n	80042e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042d0:	897a      	ldrh	r2, [r7, #10]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	80da      	strh	r2, [r3, #6]
 80042f8:	e00b      	b.n	8004312 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2201      	movs	r2, #1
 80042fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	b29a      	uxth	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	b29a      	uxth	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
	...

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e31d      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004332:	4b94      	ldr	r3, [pc, #592]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433c:	4b91      	ldr	r3, [pc, #580]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004344:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d07b      	beq.n	800444a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d006      	beq.n	8004366 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d10f      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d10b      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004366:	4b87      	ldr	r3, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06a      	beq.n	8004448 <HAL_RCC_OscConfig+0x128>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d166      	bne.n	8004448 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e2f7      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x74>
 8004386:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7e      	ldr	r2, [pc, #504]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e02d      	b.n	80043f0 <HAL_RCC_OscConfig+0xd0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x96>
 800439c:	4b79      	ldr	r3, [pc, #484]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a78      	ldr	r2, [pc, #480]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a75      	ldr	r2, [pc, #468]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	e01c      	b.n	80043f0 <HAL_RCC_OscConfig+0xd0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0xb8>
 80043be:	4b71      	ldr	r3, [pc, #452]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6d      	ldr	r2, [pc, #436]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xd0>
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a69      	ldr	r2, [pc, #420]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a66      	ldr	r2, [pc, #408]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fa2c 	bl	8001854 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fa28 	bl	8001854 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e2ad      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xe0>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fa18 	bl	8001854 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fa14 	bl	8001854 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e299      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800443a:	4b52      	ldr	r3, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x108>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d05a      	beq.n	800450c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d005      	beq.n	8004468 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d119      	bne.n	8004496 <HAL_RCC_OscConfig+0x176>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x160>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e276      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	493d      	ldr	r1, [pc, #244]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004494:	e03a      	b.n	800450c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449e:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCC_OscConfig+0x268>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fd f9d6 	bl	8001854 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ac:	f7fd f9d2 	bl	8001854 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e257      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	492a      	ldr	r1, [pc, #168]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
 80044de:	e015      	b.n	800450c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <HAL_RCC_OscConfig+0x268>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fd f9b5 	bl	8001854 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fd f9b1 	bl	8001854 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e236      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004500:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80b8 	beq.w	800468a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d170      	bne.n	8004602 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004520:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x218>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e21a      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004544:	429a      	cmp	r2, r3
 8004546:	d921      	bls.n	800458c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fc4b 	bl	8004de8 <RCC_SetFlashLatencyFromMSIRange>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e208      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4906      	ldr	r1, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	4901      	ldr	r1, [pc, #4]	; (8004584 <HAL_RCC_OscConfig+0x264>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e020      	b.n	80045c6 <HAL_RCC_OscConfig+0x2a6>
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800458c:	4b99      	ldr	r3, [pc, #612]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4996      	ldr	r1, [pc, #600]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459e:	4b95      	ldr	r3, [pc, #596]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	4991      	ldr	r1, [pc, #580]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fc16 	bl	8004de8 <RCC_SetFlashLatencyFromMSIRange>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1d3      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	0b5b      	lsrs	r3, r3, #13
 80045cc:	3301      	adds	r3, #1
 80045ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80045d6:	4a87      	ldr	r2, [pc, #540]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80045d8:	6892      	ldr	r2, [r2, #8]
 80045da:	0912      	lsrs	r2, r2, #4
 80045dc:	f002 020f 	and.w	r2, r2, #15
 80045e0:	4985      	ldr	r1, [pc, #532]	; (80047f8 <HAL_RCC_OscConfig+0x4d8>)
 80045e2:	5c8a      	ldrb	r2, [r1, r2]
 80045e4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045e6:	4a85      	ldr	r2, [pc, #532]	; (80047fc <HAL_RCC_OscConfig+0x4dc>)
 80045e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045ea:	4b85      	ldr	r3, [pc, #532]	; (8004800 <HAL_RCC_OscConfig+0x4e0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd f8e4 	bl	80017bc <HAL_InitTick>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d045      	beq.n	800468a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	e1b5      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d029      	beq.n	800465e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800460a:	4b7e      	ldr	r3, [pc, #504]	; (8004804 <HAL_RCC_OscConfig+0x4e4>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fd f920 	bl	8001854 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004618:	f7fd f91c 	bl	8001854 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e1a1      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800462a:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004636:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	496c      	ldr	r1, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004648:	4b6a      	ldr	r3, [pc, #424]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	4967      	ldr	r1, [pc, #412]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
 800465c:	e015      	b.n	800468a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800465e:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_RCC_OscConfig+0x4e4>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fd f8f6 	bl	8001854 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466c:	f7fd f8f2 	bl	8001854 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e177      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800467e:	4b5d      	ldr	r3, [pc, #372]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d030      	beq.n	80046f8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469e:	4b5a      	ldr	r3, [pc, #360]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fd f8d6 	bl	8001854 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fd f8d2 	bl	8001854 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e157      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x38c>
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046cc:	4b4e      	ldr	r3, [pc, #312]	; (8004808 <HAL_RCC_OscConfig+0x4e8>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d2:	f7fd f8bf 	bl	8001854 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046da:	f7fd f8bb 	bl	8001854 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e140      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80b5 	beq.w	8004870 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	6253      	str	r3, [r2, #36]	; 0x24
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fd f883 	bl	8001854 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd f87f 	bl	8001854 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b64      	cmp	r3, #100	; 0x64
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e104      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b29      	ldr	r3, [pc, #164]	; (800480c <HAL_RCC_OscConfig+0x4ec>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x466>
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6353      	str	r3, [r2, #52]	; 0x34
 8004784:	e02d      	b.n	80047e2 <HAL_RCC_OscConfig+0x4c2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x488>
 800478e:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 8004794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004798:	6353      	str	r3, [r2, #52]	; 0x34
 800479a:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a4:	6353      	str	r3, [r2, #52]	; 0x34
 80047a6:	e01c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4c2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d10c      	bne.n	80047ca <HAL_RCC_OscConfig+0x4aa>
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ba:	6353      	str	r3, [r2, #52]	; 0x34
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c6:	6353      	str	r3, [r2, #52]	; 0x34
 80047c8:	e00b      	b.n	80047e2 <HAL_RCC_OscConfig+0x4c2>
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d4:	6353      	str	r3, [r2, #52]	; 0x34
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <HAL_RCC_OscConfig+0x4d4>)
 80047dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d024      	beq.n	8004834 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd f833 	bl	8001854 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f0:	e019      	b.n	8004826 <HAL_RCC_OscConfig+0x506>
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	0800a3f0 	.word	0x0800a3f0
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004
 8004804:	42470020 	.word	0x42470020
 8004808:	42470680 	.word	0x42470680
 800480c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fd f820 	bl	8001854 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0a3      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ee      	beq.n	8004810 <HAL_RCC_OscConfig+0x4f0>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004834:	f7fd f80e 	bl	8001854 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483c:	f7fd f80a 	bl	8001854 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	; 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e08d      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004852:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ee      	bne.n	800483c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b44      	ldr	r3, [pc, #272]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	4a43      	ldr	r2, [pc, #268]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d079      	beq.n	800496c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d056      	beq.n	800492c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b02      	cmp	r3, #2
 8004884:	d13b      	bne.n	80048fe <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <HAL_RCC_OscConfig+0x65c>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fc ffe2 	bl	8001854 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fc ffde 	bl	8001854 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e063      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a6:	4b34      	ldr	r3, [pc, #208]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4319      	orrs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	430b      	orrs	r3, r1
 80048ca:	492b      	ldr	r1, [pc, #172]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCC_OscConfig+0x65c>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fc ffbd 	bl	8001854 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048de:	f7fc ffb9 	bl	8001854 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e03e      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f0:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x5be>
 80048fc:	e036      	b.n	800496c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <HAL_RCC_OscConfig+0x65c>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fc ffa6 	bl	8001854 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fc ffa2 	bl	8001854 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e027      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x5ec>
 800492a:	e01f      	b.n	800496c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e01a      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_RCC_OscConfig+0x658>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	429a      	cmp	r2, r3
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d106      	bne.n	8004968 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	42470060 	.word	0x42470060

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e11a      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d919      	bls.n	80049d6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x34>
 80049a8:	4b8a      	ldr	r3, [pc, #552]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a89      	ldr	r2, [pc, #548]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b87      	ldr	r3, [pc, #540]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 0201 	bic.w	r2, r3, #1
 80049bc:	4985      	ldr	r1, [pc, #532]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c4:	4b83      	ldr	r3, [pc, #524]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0f9      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e2:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	497a      	ldr	r1, [pc, #488]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 808e 	beq.w	8004b1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a0a:	4b73      	ldr	r3, [pc, #460]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d121      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0d7      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a22:	4b6d      	ldr	r3, [pc, #436]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0cb      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a3a:	4b67      	ldr	r3, [pc, #412]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0bf      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0b7      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5a:	4b5f      	ldr	r3, [pc, #380]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	495c      	ldr	r1, [pc, #368]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fc fef2 	bl	8001854 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d112      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fc feea 	bl	8001854 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e09b      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a92:	4b51      	ldr	r3, [pc, #324]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xfc>
 8004a9e:	e03e      	b.n	8004b1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d112      	bne.n	8004ace <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aaa:	f7fc fed3 	bl	8001854 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e084      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac0:	4b45      	ldr	r3, [pc, #276]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	d1ee      	bne.n	8004aaa <HAL_RCC_ClockConfig+0x12a>
 8004acc:	e027      	b.n	8004b1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d11d      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fc febc 	bl	8001854 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e06d      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aee:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x158>
 8004afa:	e010      	b.n	8004b1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc feaa 	bl	8001854 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e05b      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ee      	bne.n	8004afc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b1e:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d219      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_RCC_ClockConfig+0x1be>
 8004b32:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	4923      	ldr	r1, [pc, #140]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCC_ClockConfig+0x254>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e034      	b.n	8004bca <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4917      	ldr	r1, [pc, #92]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490f      	ldr	r1, [pc, #60]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 f823 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCC_ClockConfig+0x258>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490b      	ldr	r1, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x25c>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fc fdfc 	bl	80017bc <HAL_InitTick>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800a3f0 	.word	0x0800a3f0
 8004be0:	20000000 	.word	0x20000000
 8004be4:	20000004 	.word	0x20000004

08004be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bec:	b092      	sub	sp, #72	; 0x48
 8004bee:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bf0:	4b79      	ldr	r3, [pc, #484]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d00d      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x34>
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	f200 80d5 	bhi.w	8004db0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d002      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x28>
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x2e>
 8004c0e:	e0cf      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b72      	ldr	r3, [pc, #456]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c14:	e0da      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c16:	4b72      	ldr	r3, [pc, #456]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c1a:	e0d7      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1e:	0c9b      	lsrs	r3, r3, #18
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	4b6f      	ldr	r3, [pc, #444]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2c:	0d9b      	lsrs	r3, r3, #22
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4b68      	ldr	r3, [pc, #416]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d05d      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	2200      	movs	r2, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4621      	mov	r1, r4
 8004c68:	1a51      	subs	r1, r2, r1
 8004c6a:	6139      	str	r1, [r7, #16]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c80:	4659      	mov	r1, fp
 8004c82:	018b      	lsls	r3, r1, #6
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	018a      	lsls	r2, r1, #6
 8004c8e:	46d4      	mov	ip, sl
 8004c90:	ebb2 080c 	subs.w	r8, r2, ip
 8004c94:	4659      	mov	r1, fp
 8004c96:	eb63 0901 	sbc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	462b      	mov	r3, r5
 8004cbc:	eb49 0303 	adc.w	r3, r9, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	024b      	lsls	r3, r1, #9
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004cdc:	4601      	mov	r1, r0
 8004cde:	024a      	lsls	r2, r1, #9
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf0:	f7fb fd5e 	bl	80007b0 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfc:	e055      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	2200      	movs	r2, #0
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	627a      	str	r2, [r7, #36]	; 0x24
 8004d06:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	0159      	lsls	r1, r3, #5
 8004d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1c:	0150      	lsls	r0, r2, #5
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	46c4      	mov	ip, r8
 8004d24:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	468c      	mov	ip, r1
 8004d2e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d3e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d42:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d46:	ebb2 040a 	subs.w	r4, r2, sl
 8004d4a:	eb63 050b 	sbc.w	r5, r3, fp
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	00eb      	lsls	r3, r5, #3
 8004d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5c:	00e2      	lsls	r2, r4, #3
 8004d5e:	4614      	mov	r4, r2
 8004d60:	461d      	mov	r5, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	18e3      	adds	r3, r4, r3
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	eb45 0303 	adc.w	r3, r5, r3
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	028b      	lsls	r3, r1, #10
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	4604      	mov	r4, r0
 8004d86:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	028a      	lsls	r2, r1, #10
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	2200      	movs	r2, #0
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	61fa      	str	r2, [r7, #28]
 8004d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d9e:	f7fb fd07 	bl	80007b0 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4613      	mov	r3, r2
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004dae:	e00d      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0b5b      	lsrs	r3, r3, #13
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3748      	adds	r7, #72	; 0x48
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	00f42400 	.word	0x00f42400
 8004de0:	007a1200 	.word	0x007a1200
 8004de4:	0800a3e4 	.word	0x0800a3e4

08004de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d12c      	bne.n	8004e5a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e00:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e016      	b.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e18:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e22:	6253      	str	r3, [r2, #36]	; 0x24
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e38:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3a:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e4c:	d105      	bne.n	8004e5a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e54:	d101      	bne.n	8004e5a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e56:	2301      	movs	r3, #1
 8004e58:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 0201 	bic.w	r2, r3, #1
 8004e74:	490b      	ldr	r1, [pc, #44]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d001      	beq.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	40023c00 	.word	0x40023c00

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e031      	b.n	8004f1e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fa0e 	bl	80012f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fba8 	bl	800563c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e032      	b.n	8004fa6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_Base_Start+0x48>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_TIM_Base_Start+0x88>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_Base_Start+0x48>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_TIM_Base_Start+0x8c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_Base_Start+0x48>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <HAL_TIM_Base_Start+0x90>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d111      	bne.n	8004f94 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d010      	beq.n	8004fa4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	e007      	b.n	8004fa4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40010800 	.word	0x40010800

08004fbc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e031      	b.n	8005032 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f829 	bl	800503a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fb1e 	bl	800563c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIM_OC_Start_IT+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIM_OC_Start_IT+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIM_OC_Start_IT+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIM_OC_Start_IT+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_OC_Start_IT+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_OC_Start_IT+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e097      	b.n	80051ee <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_OC_Start_IT+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_OC_Start_IT+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_OC_Start_IT+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_OC_Start_IT+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_OC_Start_IT+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_OC_Start_IT+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d841      	bhi.n	8005180 <HAL_TIM_OC_Start_IT+0x134>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <HAL_TIM_OC_Start_IT+0xb8>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005139 	.word	0x08005139
 8005108:	08005181 	.word	0x08005181
 800510c:	08005181 	.word	0x08005181
 8005110:	08005181 	.word	0x08005181
 8005114:	0800514b 	.word	0x0800514b
 8005118:	08005181 	.word	0x08005181
 800511c:	08005181 	.word	0x08005181
 8005120:	08005181 	.word	0x08005181
 8005124:	0800515d 	.word	0x0800515d
 8005128:	08005181 	.word	0x08005181
 800512c:	08005181 	.word	0x08005181
 8005130:	08005181 	.word	0x08005181
 8005134:	0800516f 	.word	0x0800516f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0202 	orr.w	r2, r2, #2
 8005146:	60da      	str	r2, [r3, #12]
      break;
 8005148:	e01b      	b.n	8005182 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0204 	orr.w	r2, r2, #4
 8005158:	60da      	str	r2, [r3, #12]
      break;
 800515a:	e012      	b.n	8005182 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	60da      	str	r2, [r3, #12]
      break;
 800516c:	e009      	b.n	8005182 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0210 	orr.w	r2, r2, #16
 800517c:	60da      	str	r2, [r3, #12]
      break;
 800517e:	e000      	b.n	8005182 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8005180:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fc43 	bl	8005a16 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d00e      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x16c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <HAL_TIM_OC_Start_IT+0x1ac>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x16c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_TIM_OC_Start_IT+0x1b0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x16c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_TIM_OC_Start_IT+0x1b4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40010800 	.word	0x40010800

08005204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b02      	cmp	r3, #2
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0202 	mvn.w	r2, #2
 8005230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9dd 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fb ff14 	bl	800107c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9df 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d122      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0204 	mvn.w	r2, #4
 8005284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9b3 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 80052a0:	e005      	b.n	80052ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb feea 	bl	800107c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9b5 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d122      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d11b      	bne.n	8005308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0208 	mvn.w	r2, #8
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2204      	movs	r2, #4
 80052de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f989 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fb fec0 	bl	800107c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f98b 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d122      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b10      	cmp	r3, #16
 8005322:	d11b      	bne.n	800535c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0210 	mvn.w	r2, #16
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2208      	movs	r2, #8
 8005332:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f95f 	bl	8005606 <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fe96 	bl	800107c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f961 	bl	8005618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0201 	mvn.w	r2, #1
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f936 	bl	80055f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f93b 	bl	800562a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e046      	b.n	8005464 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	d839      	bhi.n	8005458 <HAL_TIM_OC_ConfigChannel+0x9c>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_TIM_OC_ConfigChannel+0x30>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005459 	.word	0x08005459
 80053f4:	08005459 	.word	0x08005459
 80053f8:	08005459 	.word	0x08005459
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	08005459 	.word	0x08005459
 8005404:	08005459 	.word	0x08005459
 8005408:	08005459 	.word	0x08005459
 800540c:	0800543d 	.word	0x0800543d
 8005410:	08005459 	.word	0x08005459
 8005414:	08005459 	.word	0x08005459
 8005418:	08005459 	.word	0x08005459
 800541c:	0800544b 	.word	0x0800544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f96a 	bl	8005700 <TIM_OC1_SetConfig>
      break;
 800542c:	e015      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f99f 	bl	8005778 <TIM_OC2_SetConfig>
      break;
 800543a:	e00e      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f9d6 	bl	80057f4 <TIM_OC3_SetConfig>
      break;
 8005448:	e007      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fa0c 	bl	800586e <TIM_OC4_SetConfig>
      break;
 8005456:	e000      	b.n	800545a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIM_ConfigClockSource+0x18>
 8005480:	2302      	movs	r3, #2
 8005482:	e0b3      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x180>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054bc:	d03e      	beq.n	800553c <HAL_TIM_ConfigClockSource+0xd0>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	f200 8087 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	f000 8085 	beq.w	80055d8 <HAL_TIM_ConfigClockSource+0x16c>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d87f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d01a      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xa2>
 80054d8:	2b70      	cmp	r3, #112	; 0x70
 80054da:	d87b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d050      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x116>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d877      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d03c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0xf6>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d873      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d058      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x136>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d86f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d064      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x156>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d86b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d060      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x156>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d867      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x156>
 8005508:	2b10      	cmp	r3, #16
 800550a:	d05a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800550c:	e062      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f000 fa5b 	bl	80059d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005530:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	609a      	str	r2, [r3, #8]
      break;
 800553a:	e04e      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f000 fa44 	bl	80059d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e03b      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 f9bb 	bl	80058ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2150      	movs	r1, #80	; 0x50
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa12 	bl	80059a4 <TIM_ITRx_SetConfig>
      break;
 8005580:	e02b      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 f9d9 	bl	8005946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2160      	movs	r1, #96	; 0x60
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa02 	bl	80059a4 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e01b      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 f99b 	bl	80058ea <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f9f2 	bl	80059a4 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e00b      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 f9e9 	bl	80059a4 <TIM_ITRx_SetConfig>
        break;
 80055d2:	e002      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x28>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <TIM_Base_SetConfig+0xb0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x28>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <TIM_Base_SetConfig+0xb4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567c:	d013      	beq.n	80056a6 <TIM_Base_SetConfig+0x6a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <TIM_Base_SetConfig+0xb0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_Base_SetConfig+0x6a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <TIM_Base_SetConfig+0xb4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_Base_SetConfig+0x6a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <TIM_Base_SetConfig+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_Base_SetConfig+0x6a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <TIM_Base_SetConfig+0xbc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0x6a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a16      	ldr	r2, [pc, #88]	; (80056fc <TIM_Base_SetConfig+0xc0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	615a      	str	r2, [r3, #20]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40010800 	.word	0x40010800
 80056f8:	40010c00 	.word	0x40010c00
 80056fc:	40011000 	.word	0x40011000

08005700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0302 	bic.w	r3, r3, #2
 8005748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0210 	bic.w	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0320 	bic.w	r3, r3, #32
 80057c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800583c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	031b      	lsls	r3, r3, #12
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f023 0201 	bic.w	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f023 030a 	bic.w	r3, r3, #10
 8005926:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0210 	bic.w	r2, r3, #16
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f043 0307 	orr.w	r3, r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	609a      	str	r2, [r3, #8]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2201      	movs	r2, #1
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	401a      	ands	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e046      	b.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d00e      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d10c      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40010800 	.word	0x40010800

08005b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4013      	ands	r3, r2
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	f107 0014 	add.w	r0, r7, #20
 8005b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	b004      	add	sp, #16
 8005bba:	4770      	bx	lr

08005bbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b09b      	sub	sp, #108	; 0x6c
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d81f      	bhi.n	8005c2e <USB_ActivateEndpoint+0x72>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <USB_ActivateEndpoint+0x38>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c37 	.word	0x08005c37
 8005c00:	08005c13 	.word	0x08005c13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c10:	e012      	b.n	8005c38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c1e:	e00b      	b.n	8005c38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c2c:	e004      	b.n	8005c38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c34:	e000      	b.n	8005c38 <USB_ActivateEndpoint+0x7c>
      break;
 8005c36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	7b1b      	ldrb	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 8149 	bne.w	8005f3c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8084 	beq.w	8005dbc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	88db      	ldrh	r3, [r3, #6]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	81fb      	strh	r3, [r7, #14]
 8005cf6:	89fb      	ldrh	r3, [r7, #14]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <USB_ActivateEndpoint+0x17c>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	81bb      	strh	r3, [r7, #12]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	89bb      	ldrh	r3, [r7, #12]
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d020      	beq.n	8005d82 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d56:	813b      	strh	r3, [r7, #8]
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	f083 0320 	eor.w	r3, r3, #32
 8005d5e:	813b      	strh	r3, [r7, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	893b      	ldrh	r3, [r7, #8]
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
 8005d80:	e27f      	b.n	8006282 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	441a      	add	r2, r3
 8005da4:	897b      	ldrh	r3, [r7, #10]
 8005da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	8013      	strh	r3, [r2, #0]
 8005dba:	e262      	b.n	8006282 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	4413      	add	r3, r2
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	88db      	ldrh	r3, [r3, #6]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	4413      	add	r3, r2
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	011a      	lsls	r2, r3, #4
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d112      	bne.n	8005e42 <USB_ActivateEndpoint+0x286>
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e02f      	b.n	8005ea2 <USB_ActivateEndpoint+0x2e6>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b3e      	cmp	r3, #62	; 0x3e
 8005e48:	d813      	bhi.n	8005e72 <USB_ActivateEndpoint+0x2b6>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	663b      	str	r3, [r7, #96]	; 0x60
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <USB_ActivateEndpoint+0x2a8>
 8005e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e60:	3301      	adds	r3, #1
 8005e62:	663b      	str	r3, [r7, #96]	; 0x60
 8005e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e017      	b.n	8005ea2 <USB_ActivateEndpoint+0x2e6>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <USB_ActivateEndpoint+0x2d0>
 8005e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	83fb      	strh	r3, [r7, #30]
 8005eb0:	8bfb      	ldrh	r3, [r7, #30]
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01b      	beq.n	8005ef2 <USB_ActivateEndpoint+0x336>
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	83bb      	strh	r3, [r7, #28]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	8bbb      	ldrh	r3, [r7, #28]
 8005ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	837b      	strh	r3, [r7, #26]
 8005f0a:	8b7b      	ldrh	r3, [r7, #26]
 8005f0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f10:	837b      	strh	r3, [r7, #26]
 8005f12:	8b7b      	ldrh	r3, [r7, #26]
 8005f14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f18:	837b      	strh	r3, [r7, #26]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	8b7b      	ldrh	r3, [r7, #26]
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]
 8005f3a:	e1a2      	b.n	8006282 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f88:	4413      	add	r3, r2
 8005f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	011a      	lsls	r2, r3, #4
 8005f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	891b      	ldrh	r3, [r3, #8]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	653b      	str	r3, [r7, #80]	; 0x50
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	4413      	add	r3, r2
 8005fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	895b      	ldrh	r3, [r3, #10]
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fde:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 8091 	bne.w	800610c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ff8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01b      	beq.n	800603a <USB_ActivateEndpoint+0x47e>
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	877b      	strh	r3, [r7, #58]	; 0x3a
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	441a      	add	r2, r3
 8006024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	b29b      	uxth	r3, r3
 8006038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	873b      	strh	r3, [r7, #56]	; 0x38
 8006048:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01b      	beq.n	800608a <USB_ActivateEndpoint+0x4ce>
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	86fb      	strh	r3, [r7, #54]	; 0x36
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
 800610a:	e0ba      	b.n	8006282 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800611c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01d      	beq.n	8006164 <USB_ActivateEndpoint+0x5a8>
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	b29b      	uxth	r3, r3
 8006162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01d      	beq.n	80061bc <USB_ActivateEndpoint+0x600>
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	78db      	ldrb	r3, [r3, #3]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d024      	beq.n	800620e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061e2:	f083 0320 	eor.w	r3, r3, #32
 80061e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	441a      	add	r2, r3
 80061f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
 800620c:	e01d      	b.n	800624a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006224:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006286:	4618      	mov	r0, r3
 8006288:	376c      	adds	r7, #108	; 0x6c
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006290:	b480      	push	{r7}
 8006292:	b08d      	sub	sp, #52	; 0x34
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	7b1b      	ldrb	r3, [r3, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f040 808e 	bne.w	80063c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d044      	beq.n	8006336 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	81bb      	strh	r3, [r7, #12]
 80062ba:	89bb      	ldrh	r3, [r7, #12]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <USB_DeactivateEndpoint+0x6c>
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	817b      	strh	r3, [r7, #10]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	897b      	ldrh	r3, [r7, #10]
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006312:	813b      	strh	r3, [r7, #8]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
 8006334:	e192      	b.n	800665c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	827b      	strh	r3, [r7, #18]
 8006344:	8a7b      	ldrh	r3, [r7, #18]
 8006346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01b      	beq.n	8006386 <USB_DeactivateEndpoint+0xf6>
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	823b      	strh	r3, [r7, #16]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	8a3b      	ldrh	r3, [r7, #16]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639c:	81fb      	strh	r3, [r7, #14]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	89fb      	ldrh	r3, [r7, #14]
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
 80063be:	e14d      	b.n	800665c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 80a5 	bne.w	8006514 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	843b      	strh	r3, [r7, #32]
 80063d8:	8c3b      	ldrh	r3, [r7, #32]
 80063da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01b      	beq.n	800641a <USB_DeactivateEndpoint+0x18a>
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	83fb      	strh	r3, [r7, #30]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8bfb      	ldrh	r3, [r7, #30]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	83bb      	strh	r3, [r7, #28]
 8006428:	8bbb      	ldrh	r3, [r7, #28]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d01b      	beq.n	800646a <USB_DeactivateEndpoint+0x1da>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	837b      	strh	r3, [r7, #26]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8b7b      	ldrh	r3, [r7, #26]
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006462:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	833b      	strh	r3, [r7, #24]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8b3b      	ldrh	r3, [r7, #24]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	82fb      	strh	r3, [r7, #22]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	8afb      	ldrh	r3, [r7, #22]
 80064c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	82bb      	strh	r3, [r7, #20]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	441a      	add	r2, r3
 80064fc:	8abb      	ldrh	r3, [r7, #20]
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]
 8006512:	e0a3      	b.n	800665c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <USB_DeactivateEndpoint+0x2d4>
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <USB_DeactivateEndpoint+0x324>
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	853b      	strh	r3, [r7, #40]	; 0x28
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	441a      	add	r2, r3
 80065d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006602:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	b29b      	uxth	r3, r3
 8006622:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	847b      	strh	r3, [r7, #34]	; 0x22
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3734      	adds	r7, #52	; 0x34
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b0cc      	sub	sp, #304	; 0x130
 800666c:	af00      	add	r7, sp, #0
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006676:	6018      	str	r0, [r3, #0]
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b01      	cmp	r3, #1
 8006690:	f041 817d 	bne.w	800798e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d908      	bls.n	80066c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80066c0:	e007      	b.n	80066d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	7b1b      	ldrb	r3, [r3, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d152      	bne.n	8006788 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6959      	ldr	r1, [r3, #20]
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	88da      	ldrh	r2, [r3, #6]
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006704:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006708:	6800      	ldr	r0, [r0, #0]
 800670a:	f001 ff0e 	bl	800852a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006716:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800671a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800673c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006740:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	440a      	add	r2, r1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	011a      	lsls	r2, r3, #4
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4413      	add	r3, r2
 8006764:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006776:	b29a      	uxth	r2, r3
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f001 b8b5 	b.w	80078f2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	78db      	ldrb	r3, [r3, #3]
 8006794:	2b02      	cmp	r3, #2
 8006796:	f040 84c6 	bne.w	8007126 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f240 8443 	bls.w	800703e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 823e 	beq.w	8006cd6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006866:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 809a 	bne.w	80069b4 <USB_EPStartXfer+0x34c>
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800688c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068b2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	440a      	add	r2, r1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	011a      	lsls	r2, r3, #4
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d122      	bne.n	8006932 <USB_EPStartXfer+0x2ca>
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006922:	b29a      	uxth	r2, r3
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	e079      	b.n	8006a26 <USB_EPStartXfer+0x3be>
 8006932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006936:	2b3e      	cmp	r3, #62	; 0x3e
 8006938:	d81b      	bhi.n	8006972 <USB_EPStartXfer+0x30a>
 800693a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <USB_EPStartXfer+0x2f2>
 8006950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800695a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29a      	uxth	r2, r3
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e059      	b.n	8006a26 <USB_EPStartXfer+0x3be>
 8006972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800697c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <USB_EPStartXfer+0x32a>
 8006988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800698c:	3b01      	subs	r3, #1
 800698e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e038      	b.n	8006a26 <USB_EPStartXfer+0x3be>
 80069b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d130      	bne.n	8006a26 <USB_EPStartXfer+0x3be>
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069e2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	440a      	add	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	011a      	lsls	r2, r3, #4
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4413      	add	r3, r2
 8006a06:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	895b      	ldrh	r3, [r3, #10]
 8006a32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6959      	ldr	r1, [r3, #20]
 8006a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a54:	6800      	ldr	r0, [r0, #0]
 8006a56:	f001 fd68 	bl	800852a <USB_WritePMA>
            ep->xfer_buff += len;
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6a:	441a      	add	r2, r3
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d90f      	bls.n	8006ab4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	621a      	str	r2, [r3, #32]
 8006ab2:	e00e      	b.n	8006ad2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 809a 	bne.w	8006c18 <USB_EPStartXfer+0x5b0>
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006aec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006af0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b16:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d122      	bne.n	8006b96 <USB_EPStartXfer+0x52e>
 8006b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	801a      	strh	r2, [r3, #0]
 8006b94:	e083      	b.n	8006c9e <USB_EPStartXfer+0x636>
 8006b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b9c:	d81b      	bhi.n	8006bd6 <USB_EPStartXfer+0x56e>
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <USB_EPStartXfer+0x556>
 8006bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bbe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e063      	b.n	8006c9e <USB_EPStartXfer+0x636>
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <USB_EPStartXfer+0x58e>
 8006bec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	029b      	lsls	r3, r3, #10
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	e042      	b.n	8006c9e <USB_EPStartXfer+0x636>
 8006c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d13a      	bne.n	8006c9e <USB_EPStartXfer+0x636>
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c5a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	440a      	add	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	011a      	lsls	r2, r3, #4
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	891b      	ldrh	r3, [r3, #8]
 8006caa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f001 fc2c 	bl	800852a <USB_WritePMA>
 8006cd2:	f000 be0e 	b.w	80078f2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d16d      	bne.n	8006dc2 <USB_EPStartXfer+0x75a>
 8006ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d06:	4413      	add	r3, r2
 8006d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	011a      	lsls	r2, r3, #4
 8006d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d20:	647b      	str	r3, [r7, #68]	; 0x44
 8006d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d112      	bne.n	8006d50 <USB_EPStartXfer+0x6e8>
 8006d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e063      	b.n	8006e18 <USB_EPStartXfer+0x7b0>
 8006d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d54:	2b3e      	cmp	r3, #62	; 0x3e
 8006d56:	d817      	bhi.n	8006d88 <USB_EPStartXfer+0x720>
 8006d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <USB_EPStartXfer+0x710>
 8006d6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d72:	3301      	adds	r3, #1
 8006d74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	029b      	lsls	r3, r3, #10
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e047      	b.n	8006e18 <USB_EPStartXfer+0x7b0>
 8006d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <USB_EPStartXfer+0x740>
 8006d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006da2:	3b01      	subs	r3, #1
 8006da4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e02a      	b.n	8006e18 <USB_EPStartXfer+0x7b0>
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d122      	bne.n	8006e18 <USB_EPStartXfer+0x7b0>
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df2:	4413      	add	r3, r2
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	011a      	lsls	r2, r3, #4
 8006e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	891b      	ldrh	r3, [r3, #8]
 8006e24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6959      	ldr	r1, [r3, #20]
 8006e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e3e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e42:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e46:	6800      	ldr	r0, [r0, #0]
 8006e48:	f001 fb6f 	bl	800852a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695a      	ldr	r2, [r3, #20]
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5c:	441a      	add	r2, r3
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a1a      	ldr	r2, [r3, #32]
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d90f      	bls.n	8006ea6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e96:	1ad2      	subs	r2, r2, r3
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	621a      	str	r2, [r3, #32]
 8006ea4:	e00e      	b.n	8006ec4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d16d      	bne.n	8006fbc <USB_EPStartXfer+0x954>
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	4413      	add	r3, r2
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	011a      	lsls	r2, r3, #4
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	4413      	add	r3, r2
 8006f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d112      	bne.n	8006f4a <USB_EPStartXfer+0x8e2>
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e05d      	b.n	8007006 <USB_EPStartXfer+0x99e>
 8006f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f50:	d817      	bhi.n	8006f82 <USB_EPStartXfer+0x91a>
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <USB_EPStartXfer+0x90a>
 8006f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e041      	b.n	8007006 <USB_EPStartXfer+0x99e>
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <USB_EPStartXfer+0x93a>
 8006f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	029b      	lsls	r3, r3, #10
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e024      	b.n	8007006 <USB_EPStartXfer+0x99e>
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d11c      	bne.n	8007006 <USB_EPStartXfer+0x99e>
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe0:	4413      	add	r3, r2
 8006fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	b29a      	uxth	r2, r3
 8007002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	895b      	ldrh	r3, [r3, #10]
 8007012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	b29b      	uxth	r3, r3
 8007028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800702c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f001 fa78 	bl	800852a <USB_WritePMA>
 800703a:	f000 bc5a 	b.w	80078f2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ca:	4413      	add	r3, r2
 80070cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	011a      	lsls	r2, r3, #4
 80070dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80070e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	891b      	ldrh	r3, [r3, #8]
 80070fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6959      	ldr	r1, [r3, #20]
 800710c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007110:	b29b      	uxth	r3, r3
 8007112:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007116:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800711a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800711e:	6800      	ldr	r0, [r0, #0]
 8007120:	f001 fa03 	bl	800852a <USB_WritePMA>
 8007124:	e3e5      	b.n	80078f2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	441a      	add	r2, r3
 800716a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007176:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800717a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 81bc 	beq.w	8007540 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d16d      	bne.n	80072c2 <USB_EPStartXfer+0xc5a>
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007200:	b29b      	uxth	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007206:	4413      	add	r3, r2
 8007208:	67bb      	str	r3, [r7, #120]	; 0x78
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	011a      	lsls	r2, r3, #4
 8007218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721a:	4413      	add	r3, r2
 800721c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007220:	677b      	str	r3, [r7, #116]	; 0x74
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d112      	bne.n	8007250 <USB_EPStartXfer+0xbe8>
 800722a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007234:	b29a      	uxth	r2, r3
 8007236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007248:	b29a      	uxth	r2, r3
 800724a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	e060      	b.n	8007312 <USB_EPStartXfer+0xcaa>
 8007250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007254:	2b3e      	cmp	r3, #62	; 0x3e
 8007256:	d817      	bhi.n	8007288 <USB_EPStartXfer+0xc20>
 8007258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <USB_EPStartXfer+0xc10>
 800726e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007272:	3301      	adds	r3, #1
 8007274:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007278:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800727c:	b29b      	uxth	r3, r3
 800727e:	029b      	lsls	r3, r3, #10
 8007280:	b29a      	uxth	r2, r3
 8007282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e044      	b.n	8007312 <USB_EPStartXfer+0xcaa>
 8007288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <USB_EPStartXfer+0xc40>
 800729e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072a2:	3b01      	subs	r3, #1
 80072a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	029b      	lsls	r3, r3, #10
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e027      	b.n	8007312 <USB_EPStartXfer+0xcaa>
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d11f      	bne.n	8007312 <USB_EPStartXfer+0xcaa>
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072e8:	4413      	add	r3, r2
 80072ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	011a      	lsls	r2, r3, #4
 80072fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007300:	4413      	add	r3, r2
 8007302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730c:	b29a      	uxth	r2, r3
 800730e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007310:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	895b      	ldrh	r3, [r3, #10]
 800731e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6959      	ldr	r1, [r3, #20]
 800732e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007332:	b29b      	uxth	r3, r3
 8007334:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007338:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800733c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007340:	6800      	ldr	r0, [r0, #0]
 8007342:	f001 f8f2 	bl	800852a <USB_WritePMA>
          ep->xfer_buff += len;
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007356:	441a      	add	r2, r3
 8007358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	429a      	cmp	r2, r3
 800737e:	d90f      	bls.n	80073a0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007390:	1ad2      	subs	r2, r2, r3
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	621a      	str	r2, [r3, #32]
 800739e:	e00e      	b.n	80073be <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80073be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 8295 	beq.w	80078f2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d16d      	bne.n	80074b4 <USB_EPStartXfer+0xe4c>
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073f8:	4413      	add	r3, r2
 80073fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	011a      	lsls	r2, r3, #4
 800740a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800740c:	4413      	add	r3, r2
 800740e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007412:	667b      	str	r3, [r7, #100]	; 0x64
 8007414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d112      	bne.n	8007442 <USB_EPStartXfer+0xdda>
 800741c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007426:	b29a      	uxth	r2, r3
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743a:	b29a      	uxth	r2, r3
 800743c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	e063      	b.n	800750a <USB_EPStartXfer+0xea2>
 8007442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007446:	2b3e      	cmp	r3, #62	; 0x3e
 8007448:	d817      	bhi.n	800747a <USB_EPStartXfer+0xe12>
 800744a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <USB_EPStartXfer+0xe02>
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007464:	3301      	adds	r3, #1
 8007466:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29a      	uxth	r2, r3
 8007474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e047      	b.n	800750a <USB_EPStartXfer+0xea2>
 800747a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <USB_EPStartXfer+0xe32>
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	3b01      	subs	r3, #1
 8007496:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749e:	b29b      	uxth	r3, r3
 80074a0:	029b      	lsls	r3, r3, #10
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e02a      	b.n	800750a <USB_EPStartXfer+0xea2>
 80074b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d122      	bne.n	800750a <USB_EPStartXfer+0xea2>
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	673b      	str	r3, [r7, #112]	; 0x70
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074e4:	4413      	add	r3, r2
 80074e6:	673b      	str	r3, [r7, #112]	; 0x70
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	011a      	lsls	r2, r3, #4
 80074f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007504:	b29a      	uxth	r2, r3
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	891b      	ldrh	r3, [r3, #8]
 8007516:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6959      	ldr	r1, [r3, #20]
 8007526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752a:	b29b      	uxth	r3, r3
 800752c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007530:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007534:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007538:	6800      	ldr	r0, [r0, #0]
 800753a:	f000 fff6 	bl	800852a <USB_WritePMA>
 800753e:	e1d8      	b.n	80078f2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d178      	bne.n	8007642 <USB_EPStartXfer+0xfda>
 8007550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007574:	4413      	add	r3, r2
 8007576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	011a      	lsls	r2, r3, #4
 8007588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800758c:	4413      	add	r3, r2
 800758e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007592:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d116      	bne.n	80075cc <USB_EPStartXfer+0xf64>
 800759e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	e06b      	b.n	80076a4 <USB_EPStartXfer+0x103c>
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	2b3e      	cmp	r3, #62	; 0x3e
 80075d2:	d818      	bhi.n	8007606 <USB_EPStartXfer+0xf9e>
 80075d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d8:	085b      	lsrs	r3, r3, #1
 80075da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <USB_EPStartXfer+0xf8c>
 80075ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075ee:	3301      	adds	r3, #1
 80075f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	029b      	lsls	r3, r3, #10
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e04e      	b.n	80076a4 <USB_EPStartXfer+0x103c>
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <USB_EPStartXfer+0xfbe>
 800761c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007620:	3b01      	subs	r3, #1
 8007622:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e030      	b.n	80076a4 <USB_EPStartXfer+0x103c>
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d128      	bne.n	80076a4 <USB_EPStartXfer+0x103c>
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800768e:	4413      	add	r3, r2
 8007690:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	891b      	ldrh	r3, [r3, #8]
 80076b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6959      	ldr	r1, [r3, #20]
 80076c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076ce:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	f000 ff29 	bl	800852a <USB_WritePMA>
          ep->xfer_buff += len;
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e8:	441a      	add	r2, r3
 80076ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d90f      	bls.n	8007732 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	621a      	str	r2, [r3, #32]
 8007730:	e00e      	b.n	8007750 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80cc 	beq.w	80078f2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d178      	bne.n	800786a <USB_EPStartXfer+0x1202>
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007794:	b29b      	uxth	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800779c:	4413      	add	r3, r2
 800779e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	011a      	lsls	r2, r3, #4
 80077b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d116      	bne.n	80077f4 <USB_EPStartXfer+0x118c>
 80077c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e064      	b.n	80078be <USB_EPStartXfer+0x1256>
 80077f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f8:	2b3e      	cmp	r3, #62	; 0x3e
 80077fa:	d818      	bhi.n	800782e <USB_EPStartXfer+0x11c6>
 80077fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <USB_EPStartXfer+0x11b4>
 8007812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007816:	3301      	adds	r3, #1
 8007818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800781c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e047      	b.n	80078be <USB_EPStartXfer+0x1256>
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <USB_EPStartXfer+0x11e6>
 8007844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007848:	3b01      	subs	r3, #1
 800784a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800784e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007852:	b29b      	uxth	r3, r3
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e029      	b.n	80078be <USB_EPStartXfer+0x1256>
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d121      	bne.n	80078be <USB_EPStartXfer+0x1256>
 800787a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007890:	4413      	add	r3, r2
 8007892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	011a      	lsls	r2, r3, #4
 80078a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	895b      	ldrh	r3, [r3, #10]
 80078ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6959      	ldr	r1, [r3, #20]
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f000 fe1c 	bl	800852a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007914:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007920:	8013      	strh	r3, [r2, #0]
 8007922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007926:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800792a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800792e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007932:	8812      	ldrh	r2, [r2, #0]
 8007934:	f082 0210 	eor.w	r2, r2, #16
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007942:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007946:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800794a:	8812      	ldrh	r2, [r2, #0]
 800794c:	f082 0220 	eor.w	r2, r2, #32
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	441a      	add	r2, r3
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]
 800798a:	f000 bc9f 	b.w	80082cc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800798e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	7b1b      	ldrb	r3, [r3, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80ae 	bne.w	8007afc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d917      	bls.n	80079ec <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80079bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80079cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079dc:	1ad2      	subs	r2, r2, r3
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	619a      	str	r2, [r3, #24]
 80079ea:	e00e      	b.n	8007a0a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a2e:	4413      	add	r3, r2
 8007a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	011a      	lsls	r2, r3, #4
 8007a42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d116      	bne.n	8007a86 <USB_EPStartXfer+0x141e>
 8007a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e3e8      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8c:	d818      	bhi.n	8007ac0 <USB_EPStartXfer+0x1458>
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <USB_EPStartXfer+0x1446>
 8007aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007aae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	029b      	lsls	r3, r3, #10
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e3cb      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
 8007ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <USB_EPStartXfer+0x1478>
 8007ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ada:	3b01      	subs	r3, #1
 8007adc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	029b      	lsls	r3, r3, #10
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	e3ad      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	78db      	ldrb	r3, [r3, #3]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	f040 8200 	bne.w	8007f0e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 8091 	bne.w	8007c42 <USB_EPStartXfer+0x15da>
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b44:	4413      	add	r3, r2
 8007b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	011a      	lsls	r2, r3, #4
 8007b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d116      	bne.n	8007ba4 <USB_EPStartXfer+0x153c>
 8007b76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e083      	b.n	8007cac <USB_EPStartXfer+0x1644>
 8007ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8007bb2:	d820      	bhi.n	8007bf6 <USB_EPStartXfer+0x158e>
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <USB_EPStartXfer+0x157c>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	3301      	adds	r3, #1
 8007be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e05a      	b.n	8007cac <USB_EPStartXfer+0x1644>
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <USB_EPStartXfer+0x15be>
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c20:	3b01      	subs	r3, #1
 8007c22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	e034      	b.n	8007cac <USB_EPStartXfer+0x1644>
 8007c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d12c      	bne.n	8007cac <USB_EPStartXfer+0x1644>
 8007c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c76:	4413      	add	r3, r2
 8007c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	011a      	lsls	r2, r3, #4
 8007c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c8e:	4413      	add	r3, r2
 8007c90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 8091 	bne.w	8007dee <USB_EPStartXfer+0x1786>
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	011a      	lsls	r2, r3, #4
 8007d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d08:	4413      	add	r3, r2
 8007d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d116      	bne.n	8007d50 <USB_EPStartXfer+0x16e8>
 8007d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d34:	801a      	strh	r2, [r3, #0]
 8007d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	e07c      	b.n	8007e4a <USB_EPStartXfer+0x17e2>
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d5e:	d820      	bhi.n	8007da2 <USB_EPStartXfer+0x173a>
 8007d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <USB_EPStartXfer+0x1728>
 8007d86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	029b      	lsls	r3, r3, #10
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d9e:	801a      	strh	r2, [r3, #0]
 8007da0:	e053      	b.n	8007e4a <USB_EPStartXfer+0x17e2>
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <USB_EPStartXfer+0x176a>
 8007dc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	e02d      	b.n	8007e4a <USB_EPStartXfer+0x17e2>
 8007dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d125      	bne.n	8007e4a <USB_EPStartXfer+0x17e2>
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	011a      	lsls	r2, r3, #4
 8007e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 81fe 	beq.w	8008258 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e7c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d005      	beq.n	8007e94 <USB_EPStartXfer+0x182c>
 8007e88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10d      	bne.n	8007eb0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 81db 	bne.w	8008258 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ea2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f040 81d4 	bne.w	8008258 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	441a      	add	r2, r3
 8007ef4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
 8007f0c:	e1a4      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	78db      	ldrb	r3, [r3, #3]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	f040 819a 	bne.w	8008254 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d917      	bls.n	8007f6c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	619a      	str	r2, [r3, #24]
 8007f6a:	e00e      	b.n	8007f8a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d178      	bne.n	800808c <USB_EPStartXfer+0x1a24>
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	011a      	lsls	r2, r3, #4
 8007fd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d116      	bne.n	8008016 <USB_EPStartXfer+0x19ae>
 8007fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e06b      	b.n	80080ee <USB_EPStartXfer+0x1a86>
 8008016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801a:	2b3e      	cmp	r3, #62	; 0x3e
 800801c:	d818      	bhi.n	8008050 <USB_EPStartXfer+0x19e8>
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <USB_EPStartXfer+0x19d6>
 8008034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008038:	3301      	adds	r3, #1
 800803a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800803e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008042:	b29b      	uxth	r3, r3
 8008044:	029b      	lsls	r3, r3, #10
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e04e      	b.n	80080ee <USB_EPStartXfer+0x1a86>
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800805a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <USB_EPStartXfer+0x1a08>
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806a:	3b01      	subs	r3, #1
 800806c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e030      	b.n	80080ee <USB_EPStartXfer+0x1a86>
 800808c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d128      	bne.n	80080ee <USB_EPStartXfer+0x1a86>
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c0:	4413      	add	r3, r2
 80080c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	011a      	lsls	r2, r3, #4
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	4413      	add	r3, r2
 80080da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d178      	bne.n	80081fe <USB_EPStartXfer+0x1b96>
 800810c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008128:	b29b      	uxth	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008130:	4413      	add	r3, r2
 8008132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	011a      	lsls	r2, r3, #4
 8008144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008148:	4413      	add	r3, r2
 800814a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800814e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d116      	bne.n	8008188 <USB_EPStartXfer+0x1b20>
 800815a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008166:	b29a      	uxth	r2, r3
 8008168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816c:	801a      	strh	r2, [r3, #0]
 800816e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817e:	b29a      	uxth	r2, r3
 8008180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	e067      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
 8008188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818c:	2b3e      	cmp	r3, #62	; 0x3e
 800818e:	d818      	bhi.n	80081c2 <USB_EPStartXfer+0x1b5a>
 8008190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800819a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <USB_EPStartXfer+0x1b48>
 80081a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081aa:	3301      	adds	r3, #1
 80081ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	029b      	lsls	r3, r3, #10
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081be:	801a      	strh	r2, [r3, #0]
 80081c0:	e04a      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
 80081c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <USB_EPStartXfer+0x1b7a>
 80081d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081dc:	3b01      	subs	r3, #1
 80081de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	029b      	lsls	r3, r3, #10
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e02c      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
 80081fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d124      	bne.n	8008258 <USB_EPStartXfer+0x1bf0>
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821c:	b29b      	uxth	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	4413      	add	r3, r2
 8008226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800822a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	011a      	lsls	r2, r3, #4
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	4413      	add	r3, r2
 800823e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e001      	b.n	8008258 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e03a      	b.n	80082ce <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008282:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008286:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800828a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800828e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008292:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008296:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800829a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d020      	beq.n	800832c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	81bb      	strh	r3, [r7, #12]
 8008302:	89bb      	ldrh	r3, [r7, #12]
 8008304:	f083 0310 	eor.w	r3, r3, #16
 8008308:	81bb      	strh	r3, [r7, #12]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	89bb      	ldrh	r3, [r7, #12]
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]
 800832a:	e01f      	b.n	800836c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008342:	81fb      	strh	r3, [r7, #14]
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800834a:	81fb      	strh	r3, [r7, #14]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	441a      	add	r2, r3
 8008356:	89fb      	ldrh	r3, [r7, #14]
 8008358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008368:	b29b      	uxth	r3, r3
 800836a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	7b1b      	ldrb	r3, [r3, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 809d 	bne.w	80084c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d04c      	beq.n	800842e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	823b      	strh	r3, [r7, #16]
 80083a2:	8a3b      	ldrh	r3, [r7, #16]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01b      	beq.n	80083e4 <USB_EPClearStall+0x6c>
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	81fb      	strh	r3, [r7, #14]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	441a      	add	r2, r3
 80083ce:	89fb      	ldrh	r3, [r7, #14]
 80083d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	78db      	ldrb	r3, [r3, #3]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d06c      	beq.n	80084c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008402:	81bb      	strh	r3, [r7, #12]
 8008404:	89bb      	ldrh	r3, [r7, #12]
 8008406:	f083 0320 	eor.w	r3, r3, #32
 800840a:	81bb      	strh	r3, [r7, #12]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	89bb      	ldrh	r3, [r7, #12]
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]
 800842c:	e04b      	b.n	80084c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	82fb      	strh	r3, [r7, #22]
 800843c:	8afb      	ldrh	r3, [r7, #22]
 800843e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01b      	beq.n	800847e <USB_EPClearStall+0x106>
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845c:	82bb      	strh	r3, [r7, #20]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	441a      	add	r2, r3
 8008468:	8abb      	ldrh	r3, [r7, #20]
 800846a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847a:	b29b      	uxth	r3, r3
 800847c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	827b      	strh	r3, [r7, #18]
 8008496:	8a7b      	ldrh	r3, [r7, #18]
 8008498:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800849c:	827b      	strh	r3, [r7, #18]
 800849e:	8a7b      	ldrh	r3, [r7, #18]
 80084a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084a4:	827b      	strh	r3, [r7, #18]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	8a7b      	ldrh	r3, [r7, #18]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2280      	movs	r2, #128	; 0x80
 80084e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr

080084f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr

0800850c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800851a:	b29b      	uxth	r3, r3
 800851c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800851e:	68fb      	ldr	r3, [r7, #12]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800852a:	b480      	push	{r7}
 800852c:	b08d      	sub	sp, #52	; 0x34
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4611      	mov	r1, r2
 8008536:	461a      	mov	r2, r3
 8008538:	460b      	mov	r3, r1
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	4613      	mov	r3, r2
 800853e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008540:	88bb      	ldrh	r3, [r7, #4]
 8008542:	3301      	adds	r3, #1
 8008544:	085b      	lsrs	r3, r3, #1
 8008546:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	005a      	lsls	r2, r3, #1
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008562:	e01e      	b.n	80085a2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	3301      	adds	r3, #1
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	b29a      	uxth	r2, r3
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	3302      	adds	r3, #2
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	3302      	adds	r3, #2
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	3301      	adds	r3, #1
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	3b01      	subs	r3, #1
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1dd      	bne.n	8008564 <USB_WritePMA+0x3a>
  }
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	3734      	adds	r7, #52	; 0x34
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr

080085b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b08b      	sub	sp, #44	; 0x2c
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	460b      	mov	r3, r1
 80085c4:	80fb      	strh	r3, [r7, #6]
 80085c6:	4613      	mov	r3, r2
 80085c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085ca:	88bb      	ldrh	r3, [r7, #4]
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	005a      	lsls	r2, r3, #1
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
 80085ec:	e01b      	b.n	8008626 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	3302      	adds	r3, #2
 80085fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	3301      	adds	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	b2da      	uxtb	r2, r3
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	3302      	adds	r3, #2
 800861e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	3b01      	subs	r3, #1
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e0      	bne.n	80085ee <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800862c:	88bb      	ldrh	r3, [r7, #4]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	701a      	strb	r2, [r3, #0]
  }
}
 8008648:	bf00      	nop
 800864a:	372c      	adds	r7, #44	; 0x2c
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008662:	2302      	movs	r3, #2
 8008664:	2203      	movs	r2, #3
 8008666:	2181      	movs	r1, #129	; 0x81
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 fcfc 	bl	800a066 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008674:	2302      	movs	r3, #2
 8008676:	2203      	movs	r2, #3
 8008678:	2101      	movs	r1, #1
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fcf3 	bl	800a066 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8008688:	2024      	movs	r0, #36	; 0x24
 800868a:	f001 fe01 	bl	800a290 <USBD_static_malloc>
 800868e:	4602      	mov	r2, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80086a0:	2301      	movs	r3, #1
 80086a2:	73fb      	strb	r3, [r7, #15]
 80086a4:	e012      	b.n	80086cc <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086ac:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	230d      	movs	r3, #13
 80086c4:	2101      	movs	r1, #1
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fdbe 	bl	800a248 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80086e2:	2181      	movs	r1, #129	; 0x81
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fce4 	bl	800a0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80086f0:	2101      	movs	r1, #1
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fcdd 	bl	800a0b2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00e      	beq.n	8008728 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fdc4 	bl	800a2a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008744:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875e:	2b00      	cmp	r3, #0
 8008760:	d051      	beq.n	8008806 <USBD_CUSTOM_HID_Setup+0xd2>
 8008762:	2b20      	cmp	r3, #32
 8008764:	f040 80d8 	bne.w	8008918 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	3b02      	subs	r3, #2
 800876e:	2b09      	cmp	r3, #9
 8008770:	d841      	bhi.n	80087f6 <USBD_CUSTOM_HID_Setup+0xc2>
 8008772:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBD_CUSTOM_HID_Setup+0x44>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087af 	.word	0x080087af
 8008780:	080087f7 	.word	0x080087f7
 8008784:	080087f7 	.word	0x080087f7
 8008788:	080087f7 	.word	0x080087f7
 800878c:	080087f7 	.word	0x080087f7
 8008790:	080087f7 	.word	0x080087f7
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087bf 	.word	0x080087bf
 800879c:	080087a1 	.word	0x080087a1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	885b      	ldrh	r3, [r3, #2]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	461a      	mov	r2, r3
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	611a      	str	r2, [r3, #16]
      break;
 80087ac:	e02a      	b.n	8008804 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	3310      	adds	r3, #16
 80087b2:	2201      	movs	r2, #1
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 f92b 	bl	8009a12 <USBD_CtlSendData>
      break;
 80087bc:	e022      	b.n	8008804 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	615a      	str	r2, [r3, #20]
      break;
 80087ce:	e019      	b.n	8008804 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	3314      	adds	r3, #20
 80087d4:	2201      	movs	r2, #1
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f91a 	bl	8009a12 <USBD_CtlSendData>
      break;
 80087de:	e011      	b.n	8008804 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2201      	movs	r2, #1
 80087e4:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80087e6:	6939      	ldr	r1, [r7, #16]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	88db      	ldrh	r3, [r3, #6]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f93d 	bl	8009a6e <USBD_CtlPrepareRx>
      break;
 80087f4:	e006      	b.n	8008804 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f8a0 	bl	800993e <USBD_CtlError>
      ret = USBD_FAIL;
 80087fe:	2302      	movs	r3, #2
 8008800:	75fb      	strb	r3, [r7, #23]
      break;
 8008802:	bf00      	nop
    }
    break;
 8008804:	e08f      	b.n	8008926 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b0b      	cmp	r3, #11
 800880c:	d87c      	bhi.n	8008908 <USBD_CUSTOM_HID_Setup+0x1d4>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	08008845 	.word	0x08008845
 8008818:	08008909 	.word	0x08008909
 800881c:	08008909 	.word	0x08008909
 8008820:	08008909 	.word	0x08008909
 8008824:	08008909 	.word	0x08008909
 8008828:	08008909 	.word	0x08008909
 800882c:	0800886d 	.word	0x0800886d
 8008830:	08008909 	.word	0x08008909
 8008834:	08008909 	.word	0x08008909
 8008838:	08008909 	.word	0x08008909
 800883c:	080088bb 	.word	0x080088bb
 8008840:	080088e3 	.word	0x080088e3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800884a:	2b03      	cmp	r3, #3
 800884c:	d107      	bne.n	800885e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800884e:	f107 030e 	add.w	r3, r7, #14
 8008852:	2202      	movs	r2, #2
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f8db 	bl	8009a12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800885c:	e05b      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f86c 	bl	800993e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008866:	2302      	movs	r3, #2
 8008868:	75fb      	strb	r3, [r7, #23]
      break;
 800886a:	e054      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b22      	cmp	r3, #34	; 0x22
 8008876:	d10b      	bne.n	8008890 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	88db      	ldrh	r3, [r3, #6]
 800887c:	2b41      	cmp	r3, #65	; 0x41
 800887e:	bf28      	it	cs
 8008880:	2341      	movcs	r3, #65	; 0x41
 8008882:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	e00d      	b.n	80088ac <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b21      	cmp	r3, #33	; 0x21
 800889a:	d107      	bne.n	80088ac <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800889c:	4b24      	ldr	r3, [pc, #144]	; (8008930 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800889e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	bf28      	it	cs
 80088a8:	2309      	movcs	r3, #9
 80088aa:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80088ac:	8bfb      	ldrh	r3, [r7, #30]
 80088ae:	461a      	mov	r2, r3
 80088b0:	69b9      	ldr	r1, [r7, #24]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f8ad 	bl	8009a12 <USBD_CtlSendData>
      break;
 80088b8:	e02d      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d107      	bne.n	80088d4 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3318      	adds	r3, #24
 80088c8:	2201      	movs	r2, #1
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f8a0 	bl	8009a12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088d2:	e020      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f831 	bl	800993e <USBD_CtlError>
			  ret = USBD_FAIL;
 80088dc:	2302      	movs	r3, #2
 80088de:	75fb      	strb	r3, [r7, #23]
      break;
 80088e0:	e019      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d106      	bne.n	80088fa <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	885b      	ldrh	r3, [r3, #2]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	461a      	mov	r2, r3
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088f8:	e00d      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f81e 	bl	800993e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008902:	2302      	movs	r3, #2
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	e006      	b.n	8008916 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f817 	bl	800993e <USBD_CtlError>
      ret = USBD_FAIL;
 8008910:	2302      	movs	r3, #2
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	bf00      	nop
    }
    break;
 8008916:	e006      	b.n	8008926 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f80f 	bl	800993e <USBD_CtlError>
    ret = USBD_FAIL;
 8008920:	2302      	movs	r3, #2
 8008922:	75fb      	strb	r3, [r7, #23]
    break;
 8008924:	bf00      	nop
  }
  return ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	200000c8 	.word	0x200000c8

08008934 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008948:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008950:	2b03      	cmp	r3, #3
 8008952:	d111      	bne.n	8008978 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	2181      	movs	r1, #129	; 0x81
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f001 fc48 	bl	800a202 <USBD_LL_Transmit>
 8008972:	e001      	b.n	8008978 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2229      	movs	r2, #41	; 0x29
 8008990:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008992:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000044 	.word	0x20000044

080089a4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2229      	movs	r2, #41	; 0x29
 80089b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80089b2:	4b03      	ldr	r3, [pc, #12]	; (80089c0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	20000070 	.word	0x20000070

080089c4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2229      	movs	r2, #41	; 0x29
 80089d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80089d2:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	2000009c 	.word	0x2000009c

080089e4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a1a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	7810      	ldrb	r0, [r2, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	7852      	ldrb	r2, [r2, #1]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	230d      	movs	r3, #13
 8008a34:	2101      	movs	r1, #1
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fc06 	bl	800a248 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a54:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d10c      	bne.n	8008a78 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	7810      	ldrb	r0, [r2, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	7852      	ldrb	r2, [r2, #1]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	220a      	movs	r2, #10
 8008a90:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	200000d4 	.word	0x200000d4

08008aa4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e01a      	b.n	8008b1e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	79fa      	ldrb	r2, [r7, #7]
 8008b14:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 fa3a 	bl	8009f90 <USBD_LL_Init>

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
 8008b46:	e001      	b.n	8008b4c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b48:	2302      	movs	r3, #2
 8008b4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fa65 	bl	800a030 <USBD_LL_Start>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008b90:	2302      	movs	r3, #2
 8008b92:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00c      	beq.n	8008bb8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
  return USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fe63 	bl	80098c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d016      	beq.n	8008c52 <USBD_LL_SetupStage+0x6a>
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d81c      	bhi.n	8008c62 <USBD_LL_SetupStage+0x7a>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <USBD_LL_SetupStage+0x4a>
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d008      	beq.n	8008c42 <USBD_LL_SetupStage+0x5a>
 8008c30:	e017      	b.n	8008c62 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9c6 	bl	8008fcc <USBD_StdDevReq>
    break;
 8008c40:	e01a      	b.n	8008c78 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa28 	bl	80090a0 <USBD_StdItfReq>
    break;
 8008c50:	e012      	b.n	8008c78 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa68 	bl	8009130 <USBD_StdEPReq>
    break;
 8008c60:	e00a      	b.n	8008c78 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fa3d 	bl	800a0f0 <USBD_LL_StallEP>
    break;
 8008c76:	bf00      	nop
  }

  return USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d14b      	bne.n	8008d2e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c9c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d134      	bne.n	8008d12 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d919      	bls.n	8008ce8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	1ad2      	subs	r2, r2, r3
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d203      	bcs.n	8008cd6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	e002      	b.n	8008cdc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fee2 	bl	8009aaa <USBD_CtlContinueRx>
 8008ce6:	e038      	b.n	8008d5a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d105      	bne.n	8008d0a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fedf 	bl	8009ace <USBD_CtlSendStatus>
 8008d10:	e023      	b.n	8008d5a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d18:	2b05      	cmp	r3, #5
 8008d1a:	d11e      	bne.n	8008d5a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f001 f9e2 	bl	800a0f0 <USBD_LL_StallEP>
 8008d2c:	e015      	b.n	8008d5a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00d      	beq.n	8008d56 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d108      	bne.n	8008d56 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	7afa      	ldrb	r2, [r7, #11]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	4798      	blx	r3
 8008d54:	e001      	b.n	8008d5a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d56:	2302      	movs	r3, #2
 8008d58:	e000      	b.n	8008d5c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d17f      	bne.n	8008e78 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3314      	adds	r3, #20
 8008d7c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d15c      	bne.n	8008e42 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d915      	bls.n	8008dc0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 fe4c 	bl	8009a4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008db2:	2300      	movs	r3, #0
 8008db4:	2200      	movs	r2, #0
 8008db6:	2100      	movs	r1, #0
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f001 fa45 	bl	800a248 <USBD_LL_PrepareReceive>
 8008dbe:	e04e      	b.n	8008e5e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	6912      	ldr	r2, [r2, #16]
 8008dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dcc:	fb01 f202 	mul.w	r2, r1, r2
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11c      	bne.n	8008e10 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d316      	bcc.n	8008e10 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d20f      	bcs.n	8008e10 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008df0:	2200      	movs	r2, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fe28 	bl	8009a4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008e02:	2300      	movs	r3, #0
 8008e04:	2200      	movs	r2, #0
 8008e06:	2100      	movs	r1, #0
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f001 fa1d 	bl	800a248 <USBD_LL_PrepareReceive>
 8008e0e:	e026      	b.n	8008e5e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00a      	beq.n	8008e32 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d105      	bne.n	8008e32 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e32:	2180      	movs	r1, #128	; 0x80
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 f95b 	bl	800a0f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fe5a 	bl	8009af4 <USBD_CtlReceiveStatus>
 8008e40:	e00d      	b.n	8008e5e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d004      	beq.n	8008e56 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d103      	bne.n	8008e5e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e56:	2180      	movs	r1, #128	; 0x80
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f001 f949 	bl	800a0f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d11d      	bne.n	8008ea4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff fe81 	bl	8008b70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008e76:	e015      	b.n	8008ea4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00d      	beq.n	8008ea0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d108      	bne.n	8008ea0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	7afa      	ldrb	r2, [r7, #11]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	4798      	blx	r3
 8008e9e:	e001      	b.n	8008ea4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e000      	b.n	8008ea6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 f8d2 	bl	800a066 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2240      	movs	r2, #64	; 0x40
 8008ece:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ed2:	2340      	movs	r3, #64	; 0x40
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2180      	movs	r1, #128	; 0x80
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f8c4 	bl	800a066 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2240      	movs	r2, #64	; 0x40
 8008ee8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6852      	ldr	r2, [r2, #4]
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	4611      	mov	r1, r2
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
  }

  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr

08008f4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2204      	movs	r2, #4
 8008f66:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr

08008f76 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d10b      	bne.n	8008fc0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	d005      	beq.n	8008ff2 <USBD_StdDevReq+0x26>
 8008fe6:	2b40      	cmp	r3, #64	; 0x40
 8008fe8:	d84f      	bhi.n	800908a <USBD_StdDevReq+0xbe>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <USBD_StdDevReq+0x36>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d14b      	bne.n	800908a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
    break;
 8009000:	e048      	b.n	8009094 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b09      	cmp	r3, #9
 8009008:	d839      	bhi.n	800907e <USBD_StdDevReq+0xb2>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <USBD_StdDevReq+0x44>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009061 	.word	0x08009061
 8009014:	08009075 	.word	0x08009075
 8009018:	0800907f 	.word	0x0800907f
 800901c:	0800906b 	.word	0x0800906b
 8009020:	0800907f 	.word	0x0800907f
 8009024:	08009043 	.word	0x08009043
 8009028:	08009039 	.word	0x08009039
 800902c:	0800907f 	.word	0x0800907f
 8009030:	08009057 	.word	0x08009057
 8009034:	0800904d 	.word	0x0800904d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f9da 	bl	80093f4 <USBD_GetDescriptor>
      break;
 8009040:	e022      	b.n	8009088 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 facf 	bl	80095e8 <USBD_SetAddress>
      break;
 800904a:	e01d      	b.n	8009088 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fb0e 	bl	8009670 <USBD_SetConfig>
      break;
 8009054:	e018      	b.n	8009088 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb97 	bl	800978c <USBD_GetConfig>
      break;
 800905e:	e013      	b.n	8009088 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fbc7 	bl	80097f6 <USBD_GetStatus>
      break;
 8009068:	e00e      	b.n	8009088 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fbf5 	bl	800985c <USBD_SetFeature>
      break;
 8009072:	e009      	b.n	8009088 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc04 	bl	8009884 <USBD_ClrFeature>
      break;
 800907c:	e004      	b.n	8009088 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fc5c 	bl	800993e <USBD_CtlError>
      break;
 8009086:	bf00      	nop
    }
    break;
 8009088:	e004      	b.n	8009094 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc56 	bl	800993e <USBD_CtlError>
    break;
 8009092:	bf00      	nop
  }

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop

080090a0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d005      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d82e      	bhi.n	800911c <USBD_StdItfReq+0x7c>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d12a      	bne.n	800911c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090cc:	3b01      	subs	r3, #1
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d81d      	bhi.n	800910e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	889b      	ldrh	r3, [r3, #4]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d813      	bhi.n	8009104 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d110      	bne.n	8009118 <USBD_StdItfReq+0x78>
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10d      	bne.n	8009118 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fce6 	bl	8009ace <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009102:	e009      	b.n	8009118 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fc19 	bl	800993e <USBD_CtlError>
      break;
 800910c:	e004      	b.n	8009118 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fc14 	bl	800993e <USBD_CtlError>
      break;
 8009116:	e000      	b.n	800911a <USBD_StdItfReq+0x7a>
      break;
 8009118:	bf00      	nop
    }
    break;
 800911a:	e004      	b.n	8009126 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fc0d 	bl	800993e <USBD_CtlError>
    break;
 8009124:	bf00      	nop
  }

  return USBD_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	889b      	ldrh	r3, [r3, #4]
 8009142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800914c:	2b40      	cmp	r3, #64	; 0x40
 800914e:	d007      	beq.n	8009160 <USBD_StdEPReq+0x30>
 8009150:	2b40      	cmp	r3, #64	; 0x40
 8009152:	f200 8144 	bhi.w	80093de <USBD_StdEPReq+0x2ae>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <USBD_StdEPReq+0x40>
 800915a:	2b20      	cmp	r3, #32
 800915c:	f040 813f 	bne.w	80093de <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
    break;
 800916e:	e13b      	b.n	80093e8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009178:	2b20      	cmp	r3, #32
 800917a:	d10a      	bne.n	8009192 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]

      return ret;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	e12b      	b.n	80093ea <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	2b03      	cmp	r3, #3
 8009198:	d007      	beq.n	80091aa <USBD_StdEPReq+0x7a>
 800919a:	2b03      	cmp	r3, #3
 800919c:	f300 8119 	bgt.w	80093d2 <USBD_StdEPReq+0x2a2>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d072      	beq.n	800928a <USBD_StdEPReq+0x15a>
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d03a      	beq.n	800921e <USBD_StdEPReq+0xee>
 80091a8:	e113      	b.n	80093d2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d002      	beq.n	80091ba <USBD_StdEPReq+0x8a>
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d015      	beq.n	80091e4 <USBD_StdEPReq+0xb4>
 80091b8:	e02b      	b.n	8009212 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00c      	beq.n	80091da <USBD_StdEPReq+0xaa>
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b80      	cmp	r3, #128	; 0x80
 80091c4:	d009      	beq.n	80091da <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 ff90 	bl	800a0f0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 ff8c 	bl	800a0f0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80091d8:	e020      	b.n	800921c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fbae 	bl	800993e <USBD_CtlError>
        break;
 80091e2:	e01b      	b.n	800921c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	885b      	ldrh	r3, [r3, #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10e      	bne.n	800920a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <USBD_StdEPReq+0xda>
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	2b80      	cmp	r3, #128	; 0x80
 80091f6:	d008      	beq.n	800920a <USBD_StdEPReq+0xda>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	88db      	ldrh	r3, [r3, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 ff73 	bl	800a0f0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fc5f 	bl	8009ace <USBD_CtlSendStatus>

        break;
 8009210:	e004      	b.n	800921c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb92 	bl	800993e <USBD_CtlError>
        break;
 800921a:	bf00      	nop
      }
      break;
 800921c:	e0de      	b.n	80093dc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009224:	2b02      	cmp	r3, #2
 8009226:	d002      	beq.n	800922e <USBD_StdEPReq+0xfe>
 8009228:	2b03      	cmp	r3, #3
 800922a:	d015      	beq.n	8009258 <USBD_StdEPReq+0x128>
 800922c:	e026      	b.n	800927c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00c      	beq.n	800924e <USBD_StdEPReq+0x11e>
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b80      	cmp	r3, #128	; 0x80
 8009238:	d009      	beq.n	800924e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 ff56 	bl	800a0f0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009244:	2180      	movs	r1, #128	; 0x80
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 ff52 	bl	800a0f0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800924c:	e01c      	b.n	8009288 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fb74 	bl	800993e <USBD_CtlError>
        break;
 8009256:	e017      	b.n	8009288 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d112      	bne.n	8009286 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 ff5d 	bl	800a12e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc2a 	bl	8009ace <USBD_CtlSendStatus>
        }
        break;
 800927a:	e004      	b.n	8009286 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fb5d 	bl	800993e <USBD_CtlError>
        break;
 8009284:	e000      	b.n	8009288 <USBD_StdEPReq+0x158>
        break;
 8009286:	bf00      	nop
      }
      break;
 8009288:	e0a8      	b.n	80093dc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009290:	2b02      	cmp	r3, #2
 8009292:	d002      	beq.n	800929a <USBD_StdEPReq+0x16a>
 8009294:	2b03      	cmp	r3, #3
 8009296:	d031      	beq.n	80092fc <USBD_StdEPReq+0x1cc>
 8009298:	e095      	b.n	80093c6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <USBD_StdEPReq+0x180>
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d004      	beq.n	80092b0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb48 	bl	800993e <USBD_CtlError>
          break;
 80092ae:	e08f      	b.n	80093d0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da0b      	bge.n	80092d0 <USBD_StdEPReq+0x1a0>
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	3310      	adds	r3, #16
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	4413      	add	r3, r2
 80092cc:	3304      	adds	r3, #4
 80092ce:	e00a      	b.n	80092e6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4413      	add	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2202      	movs	r2, #2
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fb8c 	bl	8009a12 <USBD_CtlSendData>
          break;
 80092fa:	e069      	b.n	80093d0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80092fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	da11      	bge.n	8009328 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	f003 020f 	and.w	r2, r3, #15
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3318      	adds	r3, #24
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d117      	bne.n	800934e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb0c 	bl	800993e <USBD_CtlError>
            break;
 8009326:	e053      	b.n	80093d0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	f003 020f 	and.w	r2, r3, #15
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 faf9 	bl	800993e <USBD_CtlError>
            break;
 800934c:	e040      	b.n	80093d0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800934e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	da0b      	bge.n	800936e <USBD_StdEPReq+0x23e>
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	3310      	adds	r3, #16
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	4413      	add	r3, r2
 800936a:	3304      	adds	r3, #4
 800936c:	e00a      	b.n	8009384 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <USBD_StdEPReq+0x262>
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d103      	bne.n	800939a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	e00e      	b.n	80093b8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fee4 	bl	800a16c <USBD_LL_IsStallEP>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2201      	movs	r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e002      	b.n	80093b8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2202      	movs	r2, #2
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fb27 	bl	8009a12 <USBD_CtlSendData>
          break;
 80093c4:	e004      	b.n	80093d0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fab8 	bl	800993e <USBD_CtlError>
        break;
 80093ce:	bf00      	nop
      }
      break;
 80093d0:	e004      	b.n	80093dc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fab2 	bl	800993e <USBD_CtlError>
      break;
 80093da:	bf00      	nop
    }
    break;
 80093dc:	e004      	b.n	80093e8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 faac 	bl	800993e <USBD_CtlError>
    break;
 80093e6:	bf00      	nop
  }

  return ret;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	885b      	ldrh	r3, [r3, #2]
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	2b06      	cmp	r3, #6
 800940a:	f200 80c9 	bhi.w	80095a0 <USBD_GetDescriptor+0x1ac>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <USBD_GetDescriptor+0x20>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009431 	.word	0x08009431
 8009418:	08009449 	.word	0x08009449
 800941c:	08009489 	.word	0x08009489
 8009420:	080095a1 	.word	0x080095a1
 8009424:	080095a1 	.word	0x080095a1
 8009428:	0800954d 	.word	0x0800954d
 800942c:	08009573 	.word	0x08009573
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 010a 	add.w	r1, r7, #10
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
    break;
 8009446:	e0b0      	b.n	80095aa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7c1b      	ldrb	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10d      	bne.n	800946c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	f107 020a 	add.w	r2, r7, #10
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
 8009460:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	2202      	movs	r2, #2
 8009468:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800946a:	e09e      	b.n	80095aa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	f107 020a 	add.w	r2, r7, #10
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	2202      	movs	r2, #2
 8009484:	701a      	strb	r2, [r3, #0]
    break;
 8009486:	e090      	b.n	80095aa <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	885b      	ldrh	r3, [r3, #2]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b05      	cmp	r3, #5
 8009490:	d856      	bhi.n	8009540 <USBD_GetDescriptor+0x14c>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <USBD_GetDescriptor+0xa4>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	080094e1 	.word	0x080094e1
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009511 	.word	0x08009511
 80094ac:	08009529 	.word	0x08009529
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	7c12      	ldrb	r2, [r2, #16]
 80094bc:	f107 010a 	add.w	r1, r7, #10
 80094c0:	4610      	mov	r0, r2
 80094c2:	4798      	blx	r3
 80094c4:	60f8      	str	r0, [r7, #12]
      break;
 80094c6:	e040      	b.n	800954a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	7c12      	ldrb	r2, [r2, #16]
 80094d4:	f107 010a 	add.w	r1, r7, #10
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
 80094dc:	60f8      	str	r0, [r7, #12]
      break;
 80094de:	e034      	b.n	800954a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	7c12      	ldrb	r2, [r2, #16]
 80094ec:	f107 010a 	add.w	r1, r7, #10
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	60f8      	str	r0, [r7, #12]
      break;
 80094f6:	e028      	b.n	800954a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 010a 	add.w	r1, r7, #10
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
      break;
 800950e:	e01c      	b.n	800954a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 010a 	add.w	r1, r7, #10
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
      break;
 8009526:	e010      	b.n	800954a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	7c12      	ldrb	r2, [r2, #16]
 8009534:	f107 010a 	add.w	r1, r7, #10
 8009538:	4610      	mov	r0, r2
 800953a:	4798      	blx	r3
 800953c:	60f8      	str	r0, [r7, #12]
      break;
 800953e:	e004      	b.n	800954a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9fb 	bl	800993e <USBD_CtlError>
      return;
 8009548:	e04b      	b.n	80095e2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800954a:	e02e      	b.n	80095aa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7c1b      	ldrb	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d109      	bne.n	8009568 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800955a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955c:	f107 020a 	add.w	r2, r7, #10
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
 8009564:	60f8      	str	r0, [r7, #12]
      break;
 8009566:	e020      	b.n	80095aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f9e7 	bl	800993e <USBD_CtlError>
      return;
 8009570:	e037      	b.n	80095e2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	7c1b      	ldrb	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10d      	bne.n	8009596 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	f107 020a 	add.w	r2, r7, #10
 8009586:	4610      	mov	r0, r2
 8009588:	4798      	blx	r3
 800958a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3301      	adds	r3, #1
 8009590:	2207      	movs	r2, #7
 8009592:	701a      	strb	r2, [r3, #0]
      break;
 8009594:	e009      	b.n	80095aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f9d0 	bl	800993e <USBD_CtlError>
      return;
 800959e:	e020      	b.n	80095e2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f9cb 	bl	800993e <USBD_CtlError>
    return;
 80095a8:	e01b      	b.n	80095e2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80095aa:	897b      	ldrh	r3, [r7, #10]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d011      	beq.n	80095d4 <USBD_GetDescriptor+0x1e0>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	88db      	ldrh	r3, [r3, #6]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00d      	beq.n	80095d4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	88da      	ldrh	r2, [r3, #6]
 80095bc:	897b      	ldrh	r3, [r7, #10]
 80095be:	4293      	cmp	r3, r2
 80095c0:	bf28      	it	cs
 80095c2:	4613      	movcs	r3, r2
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80095c8:	897b      	ldrh	r3, [r7, #10]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68f9      	ldr	r1, [r7, #12]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa1f 	bl	8009a12 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	88db      	ldrh	r3, [r3, #6]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa76 	bl	8009ace <USBD_CtlSendStatus>
  }
}
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	889b      	ldrh	r3, [r3, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d130      	bne.n	800965c <USBD_SetAddress+0x74>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	88db      	ldrh	r3, [r3, #6]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d12c      	bne.n	800965c <USBD_SetAddress+0x74>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	885b      	ldrh	r3, [r3, #2]
 8009606:	2b7f      	cmp	r3, #127	; 0x7f
 8009608:	d828      	bhi.n	800965c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800961c:	2b03      	cmp	r3, #3
 800961e:	d104      	bne.n	800962a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f98b 	bl	800993e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009628:	e01d      	b.n	8009666 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7bfa      	ldrb	r2, [r7, #15]
 800962e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fdc4 	bl	800a1c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fa46 	bl	8009ace <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009650:	e009      	b.n	8009666 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	e004      	b.n	8009666 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f96d 	bl	800993e <USBD_CtlError>
  }
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	b2da      	uxtb	r2, r3
 8009680:	4b41      	ldr	r3, [pc, #260]	; (8009788 <USBD_SetConfig+0x118>)
 8009682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009684:	4b40      	ldr	r3, [pc, #256]	; (8009788 <USBD_SetConfig+0x118>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d904      	bls.n	8009696 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f955 	bl	800993e <USBD_CtlError>
 8009694:	e075      	b.n	8009782 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800969c:	2b02      	cmp	r3, #2
 800969e:	d002      	beq.n	80096a6 <USBD_SetConfig+0x36>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d023      	beq.n	80096ec <USBD_SetConfig+0x7c>
 80096a4:	e062      	b.n	800976c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80096a6:	4b38      	ldr	r3, [pc, #224]	; (8009788 <USBD_SetConfig+0x118>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01a      	beq.n	80096e4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80096ae:	4b36      	ldr	r3, [pc, #216]	; (8009788 <USBD_SetConfig+0x118>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2203      	movs	r2, #3
 80096bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096c0:	4b31      	ldr	r3, [pc, #196]	; (8009788 <USBD_SetConfig+0x118>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fa5c 	bl	8008b84 <USBD_SetClassConfig>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d104      	bne.n	80096dc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f932 	bl	800993e <USBD_CtlError>
          return;
 80096da:	e052      	b.n	8009782 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f9f6 	bl	8009ace <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80096e2:	e04e      	b.n	8009782 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f9f2 	bl	8009ace <USBD_CtlSendStatus>
      break;
 80096ea:	e04a      	b.n	8009782 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096ec:	4b26      	ldr	r3, [pc, #152]	; (8009788 <USBD_SetConfig+0x118>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d112      	bne.n	800971a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80096fc:	4b22      	ldr	r3, [pc, #136]	; (8009788 <USBD_SetConfig+0x118>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009706:	4b20      	ldr	r3, [pc, #128]	; (8009788 <USBD_SetConfig+0x118>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7ff fa58 	bl	8008bc2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f9db 	bl	8009ace <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009718:	e033      	b.n	8009782 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800971a:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <USBD_SetConfig+0x118>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d01d      	beq.n	8009764 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff fa46 	bl	8008bc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009736:	4b14      	ldr	r3, [pc, #80]	; (8009788 <USBD_SetConfig+0x118>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009740:	4b11      	ldr	r3, [pc, #68]	; (8009788 <USBD_SetConfig+0x118>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fa1c 	bl	8008b84 <USBD_SetClassConfig>
 800974c:	4603      	mov	r3, r0
 800974e:	2b02      	cmp	r3, #2
 8009750:	d104      	bne.n	800975c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8f2 	bl	800993e <USBD_CtlError>
          return;
 800975a:	e012      	b.n	8009782 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f9b6 	bl	8009ace <USBD_CtlSendStatus>
      break;
 8009762:	e00e      	b.n	8009782 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f9b2 	bl	8009ace <USBD_CtlSendStatus>
      break;
 800976a:	e00a      	b.n	8009782 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8e5 	bl	800993e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <USBD_SetConfig+0x118>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fa21 	bl	8008bc2 <USBD_ClrClassConfig>
      break;
 8009780:	bf00      	nop
    }
  }
}
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000360 	.word	0x20000360

0800978c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	88db      	ldrh	r3, [r3, #6]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d004      	beq.n	80097a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f8cc 	bl	800993e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80097a6:	e022      	b.n	80097ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dc02      	bgt.n	80097b8 <USBD_GetConfig+0x2c>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dc03      	bgt.n	80097be <USBD_GetConfig+0x32>
 80097b6:	e015      	b.n	80097e4 <USBD_GetConfig+0x58>
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetConfig+0x48>
 80097bc:	e012      	b.n	80097e4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3308      	adds	r3, #8
 80097c8:	2201      	movs	r2, #1
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f920 	bl	8009a12 <USBD_CtlSendData>
      break;
 80097d2:	e00c      	b.n	80097ee <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3304      	adds	r3, #4
 80097d8:	2201      	movs	r2, #1
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f918 	bl	8009a12 <USBD_CtlSendData>
      break;
 80097e2:	e004      	b.n	80097ee <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f8a9 	bl	800993e <USBD_CtlError>
      break;
 80097ec:	bf00      	nop
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009806:	3b01      	subs	r3, #1
 8009808:	2b02      	cmp	r3, #2
 800980a:	d81e      	bhi.n	800984a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	88db      	ldrh	r3, [r3, #6]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d004      	beq.n	800981e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f891 	bl	800993e <USBD_CtlError>
      break;
 800981c:	e01a      	b.n	8009854 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f043 0202 	orr.w	r2, r3, #2
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	330c      	adds	r3, #12
 800983e:	2202      	movs	r2, #2
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f8e5 	bl	8009a12 <USBD_CtlSendData>
    break;
 8009848:	e004      	b.n	8009854 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f876 	bl	800993e <USBD_CtlError>
    break;
 8009852:	bf00      	nop
  }
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d106      	bne.n	800987c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f929 	bl	8009ace <USBD_CtlSendStatus>
  }

}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009894:	3b01      	subs	r3, #1
 8009896:	2b02      	cmp	r3, #2
 8009898:	d80b      	bhi.n	80098b2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d10c      	bne.n	80098bc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f90f 	bl	8009ace <USBD_CtlSendStatus>
    }
    break;
 80098b0:	e004      	b.n	80098bc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f842 	bl	800993e <USBD_CtlError>
    break;
 80098ba:	e000      	b.n	80098be <USBD_ClrFeature+0x3a>
    break;
 80098bc:	bf00      	nop
  }
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	785a      	ldrb	r2, [r3, #1]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	3302      	adds	r3, #2
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	3303      	adds	r3, #3
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	3304      	adds	r3, #4
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b29a      	uxth	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	3305      	adds	r3, #5
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	b29b      	uxth	r3, r3
 8009910:	4413      	add	r3, r2
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	3306      	adds	r3, #6
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b29a      	uxth	r2, r3
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	3307      	adds	r3, #7
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	b29b      	uxth	r3, r3
 800992c:	4413      	add	r3, r2
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	80da      	strh	r2, [r3, #6]

}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	bc80      	pop	{r7}
 800993c:	4770      	bx	lr

0800993e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b082      	sub	sp, #8
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009948:	2180      	movs	r1, #128	; 0x80
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fbd0 	bl	800a0f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fbcc 	bl	800a0f0 <USBD_LL_StallEP>
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d032      	beq.n	80099dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f834 	bl	80099e4 <USBD_GetLen>
 800997c:	4603      	mov	r3, r0
 800997e:	3301      	adds	r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	75fa      	strb	r2, [r7, #23]
 8009990:	461a      	mov	r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4413      	add	r3, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	75fa      	strb	r2, [r7, #23]
 80099a2:	461a      	mov	r2, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	4413      	add	r3, r2
 80099a8:	2203      	movs	r2, #3
 80099aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80099ac:	e012      	b.n	80099d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	60fa      	str	r2, [r7, #12]
 80099b4:	7dfa      	ldrb	r2, [r7, #23]
 80099b6:	1c51      	adds	r1, r2, #1
 80099b8:	75f9      	strb	r1, [r7, #23]
 80099ba:	4611      	mov	r1, r2
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	440a      	add	r2, r1
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	75fa      	strb	r2, [r7, #23]
 80099ca:	461a      	mov	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4413      	add	r3, r2
 80099d0:	2200      	movs	r2, #0
 80099d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e8      	bne.n	80099ae <USBD_GetString+0x4e>
    }
  }
}
 80099dc:	bf00      	nop
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80099f0:	e005      	b.n	80099fe <USBD_GetLen+0x1a>
    {
        len++;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	3301      	adds	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3301      	adds	r3, #1
 80099fc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f5      	bne.n	80099f2 <USBD_GetLen+0xe>
    }

    return len;
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bc80      	pop	{r7}
 8009a10:	4770      	bx	lr

08009a12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009a28:	88fa      	ldrh	r2, [r7, #6]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a2e:	88fa      	ldrh	r2, [r7, #6]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fbe1 	bl	800a202 <USBD_LL_Transmit>

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	4613      	mov	r3, r2
 8009a56:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a58:	88fb      	ldrh	r3, [r7, #6]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fbcf 	bl	800a202 <USBD_LL_Transmit>

  return USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009a84:	88fa      	ldrh	r2, [r7, #6]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009a8c:	88fa      	ldrh	r2, [r7, #6]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009a94:	88fb      	ldrh	r3, [r7, #6]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 fbd4 	bl	800a248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fbc2 	bl	800a248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fb8c 	bl	800a202 <USBD_LL_Transmit>

  return USBD_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2205      	movs	r2, #5
 8009b00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009b04:	2300      	movs	r3, #0
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fb9c 	bl	800a248 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b20:	2200      	movs	r2, #0
 8009b22:	4912      	ldr	r1, [pc, #72]	; (8009b6c <MX_USB_DEVICE_Init+0x50>)
 8009b24:	4812      	ldr	r0, [pc, #72]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b26:	f7fe ffd3 	bl	8008ad0 <USBD_Init>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b30:	f7f7 fb36 	bl	80011a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b34:	490f      	ldr	r1, [pc, #60]	; (8009b74 <MX_USB_DEVICE_Init+0x58>)
 8009b36:	480e      	ldr	r0, [pc, #56]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b38:	f7fe fff5 	bl	8008b26 <USBD_RegisterClass>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b42:	f7f7 fb2d 	bl	80011a0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b46:	490c      	ldr	r1, [pc, #48]	; (8009b78 <MX_USB_DEVICE_Init+0x5c>)
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b4a:	f7fe ffab 	bl	8008aa4 <USBD_CUSTOM_HID_RegisterInterface>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b54:	f7f7 fb24 	bl	80011a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fe fffd 	bl	8008b58 <USBD_Start>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b64:	f7f7 fb1c 	bl	80011a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000134 	.word	0x20000134
 8009b70:	20000364 	.word	0x20000364
 8009b74:	2000000c 	.word	0x2000000c
 8009b78:	20000124 	.word	0x20000124

08009b7c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bc80      	pop	{r7}
 8009b88:	4770      	bx	lr

08009b8a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	71fb      	strb	r3, [r7, #7]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009ba8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bc80      	pop	{r7}
 8009bb2:	4770      	bx	lr

08009bb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2212      	movs	r2, #18
 8009bc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bc6:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000150 	.word	0x20000150

08009bd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2204      	movs	r2, #4
 8009be8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bea:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000164 	.word	0x20000164

08009bfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d105      	bne.n	8009c1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4907      	ldr	r1, [pc, #28]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c12:	4808      	ldr	r0, [pc, #32]	; (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c14:	f7ff fea4 	bl	8009960 <USBD_GetString>
 8009c18:	e004      	b.n	8009c24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4904      	ldr	r1, [pc, #16]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c1e:	4805      	ldr	r0, [pc, #20]	; (8009c34 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c20:	f7ff fe9e 	bl	8009960 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c24:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000600 	.word	0x20000600
 8009c34:	0800a3a0 	.word	0x0800a3a0

08009c38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	4904      	ldr	r1, [pc, #16]	; (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c48:	4804      	ldr	r0, [pc, #16]	; (8009c5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c4a:	f7ff fe89 	bl	8009960 <USBD_GetString>
  return USBD_StrDesc;
 8009c4e:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000600 	.word	0x20000600
 8009c5c:	0800a3b4 	.word	0x0800a3b4

08009c60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	221a      	movs	r2, #26
 8009c70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c72:	f000 f843 	bl	8009cfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c76:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000168 	.word	0x20000168

08009c84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	4907      	ldr	r1, [pc, #28]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c9a:	4808      	ldr	r0, [pc, #32]	; (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c9c:	f7ff fe60 	bl	8009960 <USBD_GetString>
 8009ca0:	e004      	b.n	8009cac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4904      	ldr	r1, [pc, #16]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ca6:	4805      	ldr	r0, [pc, #20]	; (8009cbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ca8:	f7ff fe5a 	bl	8009960 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000600 	.word	0x20000600
 8009cbc:	0800a3b8 	.word	0x0800a3b8

08009cc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d105      	bne.n	8009cde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4907      	ldr	r1, [pc, #28]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cd6:	4808      	ldr	r0, [pc, #32]	; (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cd8:	f7ff fe42 	bl	8009960 <USBD_GetString>
 8009cdc:	e004      	b.n	8009ce8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ce2:	4805      	ldr	r0, [pc, #20]	; (8009cf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ce4:	f7ff fe3c 	bl	8009960 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce8:	4b02      	ldr	r3, [pc, #8]	; (8009cf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000600 	.word	0x20000600
 8009cf8:	0800a3cc 	.word	0x0800a3cc

08009cfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <Get_SerialNum+0x44>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d08:	4b0e      	ldr	r3, [pc, #56]	; (8009d44 <Get_SerialNum+0x48>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <Get_SerialNum+0x4c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d22:	2208      	movs	r2, #8
 8009d24:	4909      	ldr	r1, [pc, #36]	; (8009d4c <Get_SerialNum+0x50>)
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f814 	bl	8009d54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	4908      	ldr	r1, [pc, #32]	; (8009d50 <Get_SerialNum+0x54>)
 8009d30:	68b8      	ldr	r0, [r7, #8]
 8009d32:	f000 f80f 	bl	8009d54 <IntToUnicode>
  }
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	1ff80050 	.word	0x1ff80050
 8009d44:	1ff80054 	.word	0x1ff80054
 8009d48:	1ff80058 	.word	0x1ff80058
 8009d4c:	2000016a 	.word	0x2000016a
 8009d50:	2000017a 	.word	0x2000017a

08009d54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]
 8009d6a:	e027      	b.n	8009dbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	0f1b      	lsrs	r3, r3, #28
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d80b      	bhi.n	8009d8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	0f1b      	lsrs	r3, r3, #28
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	440b      	add	r3, r1
 8009d84:	3230      	adds	r2, #48	; 0x30
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	e00a      	b.n	8009da2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	0f1b      	lsrs	r3, r3, #28
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	4619      	mov	r1, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3237      	adds	r2, #55	; 0x37
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	3301      	adds	r3, #1
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	3301      	adds	r3, #1
 8009dba:	75fb      	strb	r3, [r7, #23]
 8009dbc:	7dfa      	ldrb	r2, [r7, #23]
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d3d3      	bcc.n	8009d6c <IntToUnicode+0x18>
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr

08009dd0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d106      	bne.n	8009df0 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009de8:	f043 0301 	orr.w	r3, r3, #1
 8009dec:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009dee:	e005      	b.n	8009dfc <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <HAL_PCDEx_SetConnectionState+0x38>)
 8009df6:	f023 0301 	bic.w	r3, r3, #1
 8009dfa:	6053      	str	r3, [r2, #4]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bc80      	pop	{r7}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	40010000 	.word	0x40010000

08009e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a0d      	ldr	r2, [pc, #52]	; (8009e50 <HAL_PCD_MspInit+0x44>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d113      	bne.n	8009e46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e28:	6253      	str	r3, [r2, #36]	; 0x24
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <HAL_PCD_MspInit+0x48>)
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	2014      	movs	r0, #20
 8009e3c:	f7f8 fb0d 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e40:	2014      	movs	r0, #20
 8009e42:	f7f8 fb26 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e46:	bf00      	nop
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40005c00 	.word	0x40005c00
 8009e54:	40023800 	.word	0x40023800

08009e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f7fe feba 	bl	8008be8 <USBD_LL_SetupStage>
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	440b      	add	r3, r1
 8009e9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f7fe feec 	bl	8008c82 <USBD_LL_DataOutStage>
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	440b      	add	r3, r1
 8009ed2:	333c      	adds	r3, #60	; 0x3c
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f7fe ff43 	bl	8008d64 <USBD_LL_DataInStage>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff f84e 	bl	8008f96 <USBD_LL_SOF>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d001      	beq.n	8009f1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f16:	f7f7 f943 	bl	80011a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff f803 	bl	8008f30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe ffbc 	bl	8008eae <USBD_LL_Reset>
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fffd 	bl	8008f4e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <HAL_PCD_SuspendCallback+0x30>)
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	4a03      	ldr	r2, [pc, #12]	; (8009f70 <HAL_PCD_SuspendCallback+0x30>)
 8009f62:	f043 0306 	orr.w	r3, r3, #6
 8009f66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	e000ed00 	.word	0xe000ed00

08009f74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fff7 	bl	8008f76 <USBD_LL_Resume>
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f98:	4a23      	ldr	r2, [pc, #140]	; (800a028 <USBD_LL_Init+0x98>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a21      	ldr	r2, [pc, #132]	; (800a028 <USBD_LL_Init+0x98>)
 8009fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009fa8:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <USBD_LL_Init+0x98>)
 8009faa:	4a20      	ldr	r2, [pc, #128]	; (800a02c <USBD_LL_Init+0x9c>)
 8009fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fae:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <USBD_LL_Init+0x98>)
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fb4:	4b1c      	ldr	r3, [pc, #112]	; (800a028 <USBD_LL_Init+0x98>)
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fba:	4b1b      	ldr	r3, [pc, #108]	; (800a028 <USBD_LL_Init+0x98>)
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fc0:	4b19      	ldr	r3, [pc, #100]	; (800a028 <USBD_LL_Init+0x98>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fc6:	4b18      	ldr	r3, [pc, #96]	; (800a028 <USBD_LL_Init+0x98>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fcc:	4816      	ldr	r0, [pc, #88]	; (800a028 <USBD_LL_Init+0x98>)
 8009fce:	f7f8 fd91 	bl	8002af4 <HAL_PCD_Init>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009fd8:	f7f7 f8e2 	bl	80011a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fe2:	2318      	movs	r3, #24
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f7fa f957 	bl	800429a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009ff2:	2358      	movs	r3, #88	; 0x58
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2180      	movs	r1, #128	; 0x80
 8009ff8:	f7fa f94f 	bl	800429a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a002:	2398      	movs	r3, #152	; 0x98
 800a004:	2200      	movs	r2, #0
 800a006:	2181      	movs	r1, #129	; 0x81
 800a008:	f7fa f947 	bl	800429a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a012:	23d8      	movs	r3, #216	; 0xd8
 800a014:	2200      	movs	r2, #0
 800a016:	2101      	movs	r1, #1
 800a018:	f7fa f93f 	bl	800429a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000800 	.word	0x20000800
 800a02c:	40005c00 	.word	0x40005c00

0800a030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a046:	4618      	mov	r0, r3
 800a048:	f7f8 fe32 	bl	8002cb0 <HAL_PCD_Start>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f932 	bl	800a2bc <USBD_Get_USB_Status>
 800a058:	4603      	mov	r3, r0
 800a05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	461a      	mov	r2, r3
 800a074:	4603      	mov	r3, r0
 800a076:	70fb      	strb	r3, [r7, #3]
 800a078:	460b      	mov	r3, r1
 800a07a:	70bb      	strb	r3, [r7, #2]
 800a07c:	4613      	mov	r3, r2
 800a07e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a08e:	78bb      	ldrb	r3, [r7, #2]
 800a090:	883a      	ldrh	r2, [r7, #0]
 800a092:	78f9      	ldrb	r1, [r7, #3]
 800a094:	f7f8 ff4e 	bl	8002f34 <HAL_PCD_EP_Open>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f90c 	bl	800a2bc <USBD_Get_USB_Status>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f8 ff95 	bl	8003000 <HAL_PCD_EP_Close>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f8ed 	bl	800a2bc <USBD_Get_USB_Status>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f9 f83e 	bl	8003190 <HAL_PCD_EP_SetStall>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f8ce 	bl	800a2bc <USBD_Get_USB_Status>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a124:	7bbb      	ldrb	r3, [r7, #14]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	460b      	mov	r3, r1
 800a138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	4611      	mov	r1, r2
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7f9 f871 	bl	8003234 <HAL_PCD_EP_ClrStall>
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 f8af 	bl	800a2bc <USBD_Get_USB_Status>
 800a15e:	4603      	mov	r3, r0
 800a160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a162:	7bbb      	ldrb	r3, [r7, #14]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a17e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a184:	2b00      	cmp	r3, #0
 800a186:	da0c      	bge.n	800a1a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a188:	78fb      	ldrb	r3, [r7, #3]
 800a18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	440b      	add	r3, r1
 800a19c:	3302      	adds	r3, #2
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	e00b      	b.n	800a1ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a8:	68f9      	ldr	r1, [r7, #12]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	440b      	add	r3, r1
 800a1b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1de:	78fa      	ldrb	r2, [r7, #3]
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f8 fe81 	bl	8002eea <HAL_PCD_SetAddress>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f864 	bl	800a2bc <USBD_Get_USB_Status>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b086      	sub	sp, #24
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	461a      	mov	r2, r3
 800a20e:	460b      	mov	r3, r1
 800a210:	72fb      	strb	r3, [r7, #11]
 800a212:	4613      	mov	r3, r2
 800a214:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a224:	893b      	ldrh	r3, [r7, #8]
 800a226:	7af9      	ldrb	r1, [r7, #11]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	f7f8 ff6e 	bl	800310a <HAL_PCD_EP_Transmit>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f841 	bl	800a2bc <USBD_Get_USB_Status>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a23e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	461a      	mov	r2, r3
 800a254:	460b      	mov	r3, r1
 800a256:	72fb      	strb	r3, [r7, #11]
 800a258:	4613      	mov	r3, r2
 800a25a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a26a:	893b      	ldrh	r3, [r7, #8]
 800a26c:	7af9      	ldrb	r1, [r7, #11]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	f7f8 ff0e 	bl	8003090 <HAL_PCD_EP_Receive>
 800a274:	4603      	mov	r3, r0
 800a276:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a278:	7dfb      	ldrb	r3, [r7, #23]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f81e 	bl	800a2bc <USBD_Get_USB_Status>
 800a280:	4603      	mov	r3, r0
 800a282:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a284:	7dbb      	ldrb	r3, [r7, #22]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <USBD_static_malloc+0x14>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	20000aec 	.word	0x20000aec

0800a2a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]

}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr
	...

0800a2bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d817      	bhi.n	800a300 <USBD_Get_USB_Status+0x44>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <USBD_Get_USB_Status+0x1c>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2e9 	.word	0x0800a2e9
 800a2dc:	0800a2ef 	.word	0x0800a2ef
 800a2e0:	0800a2f5 	.word	0x0800a2f5
 800a2e4:	0800a2fb 	.word	0x0800a2fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ec:	e00b      	b.n	800a306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f2:	e008      	b.n	800a306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f8:	e005      	b.n	800a306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fe:	e002      	b.n	800a306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a300:	2302      	movs	r3, #2
 800a302:	73fb      	strb	r3, [r7, #15]
    break;
 800a304:	bf00      	nop
  }
  return usb_status;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop

0800a314 <__libc_init_array>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	2600      	movs	r6, #0
 800a318:	4d0c      	ldr	r5, [pc, #48]	; (800a34c <__libc_init_array+0x38>)
 800a31a:	4c0d      	ldr	r4, [pc, #52]	; (800a350 <__libc_init_array+0x3c>)
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	42a6      	cmp	r6, r4
 800a322:	d109      	bne.n	800a338 <__libc_init_array+0x24>
 800a324:	f000 f830 	bl	800a388 <_init>
 800a328:	2600      	movs	r6, #0
 800a32a:	4d0a      	ldr	r5, [pc, #40]	; (800a354 <__libc_init_array+0x40>)
 800a32c:	4c0a      	ldr	r4, [pc, #40]	; (800a358 <__libc_init_array+0x44>)
 800a32e:	1b64      	subs	r4, r4, r5
 800a330:	10a4      	asrs	r4, r4, #2
 800a332:	42a6      	cmp	r6, r4
 800a334:	d105      	bne.n	800a342 <__libc_init_array+0x2e>
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33c:	4798      	blx	r3
 800a33e:	3601      	adds	r6, #1
 800a340:	e7ee      	b.n	800a320 <__libc_init_array+0xc>
 800a342:	f855 3b04 	ldr.w	r3, [r5], #4
 800a346:	4798      	blx	r3
 800a348:	3601      	adds	r6, #1
 800a34a:	e7f2      	b.n	800a332 <__libc_init_array+0x1e>
 800a34c:	0800a408 	.word	0x0800a408
 800a350:	0800a408 	.word	0x0800a408
 800a354:	0800a408 	.word	0x0800a408
 800a358:	0800a40c 	.word	0x0800a40c

0800a35c <memcpy>:
 800a35c:	440a      	add	r2, r1
 800a35e:	4291      	cmp	r1, r2
 800a360:	f100 33ff 	add.w	r3, r0, #4294967295
 800a364:	d100      	bne.n	800a368 <memcpy+0xc>
 800a366:	4770      	bx	lr
 800a368:	b510      	push	{r4, lr}
 800a36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a36e:	4291      	cmp	r1, r2
 800a370:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a374:	d1f9      	bne.n	800a36a <memcpy+0xe>
 800a376:	bd10      	pop	{r4, pc}

0800a378 <memset>:
 800a378:	4603      	mov	r3, r0
 800a37a:	4402      	add	r2, r0
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d100      	bne.n	800a382 <memset+0xa>
 800a380:	4770      	bx	lr
 800a382:	f803 1b01 	strb.w	r1, [r3], #1
 800a386:	e7f9      	b.n	800a37c <memset+0x4>

0800a388 <_init>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	bf00      	nop
 800a38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	469e      	mov	lr, r3
 800a392:	4770      	bx	lr

0800a394 <_fini>:
 800a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a396:	bf00      	nop
 800a398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39a:	bc08      	pop	{r3}
 800a39c:	469e      	mov	lr, r3
 800a39e:	4770      	bx	lr
