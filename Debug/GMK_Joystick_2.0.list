
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a27c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a434  0800a434  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a434  0800a434  0001a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a43c  0800a43c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a440  0800a440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a5c8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a5c8  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a6  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343a  00000000  00000000  00033653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cb0  00000000  00000000  00038978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c1  00000000  00000000  00050628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f12  00000000  00000000  000658e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  000ec84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a3a0 	.word	0x0800a3a0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a3a0 	.word	0x0800a3a0

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe68 	bl	8001792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f92d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa91 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa71 	bl	8000fb0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f83f 	bl	8009b50 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9dd 	bl	8000e90 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f973 	bl	8000dc0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4883      	ldr	r0, [pc, #524]	; (8000ce8 <main+0x230>)
 8000adc:	f004 fa3e 	bl	8004f5c <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4881      	ldr	r0, [pc, #516]	; (8000ce8 <main+0x230>)
 8000ae4:	f004 facc 	bl	8005080 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	487f      	ldr	r0, [pc, #508]	; (8000ce8 <main+0x230>)
 8000aec:	f004 fac8 	bl	8005080 <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c7e      	ldr	r4, [pc, #504]	; (8000cec <main+0x234>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a7e      	ldr	r2, [pc, #504]	; (8000cf0 <main+0x238>)
 8000af6:	497f      	ldr	r1, [pc, #508]	; (8000cf4 <main+0x23c>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc9d 	bl	8001438 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
  	  event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a75      	ldr	r2, [pc, #468]	; (8000cf8 <main+0x240>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <main+0x244>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b6d      	ldr	r3, [pc, #436]	; (8000cf8 <main+0x240>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 80a0 	bhi.w	8000c8a <main+0x1d2>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b8d 	.word	0x08000b8d
 8000b5c:	08000b95 	.word	0x08000b95
 8000b60:	08000c83 	.word	0x08000c83
		case EVENT_WAIT:
			controller.buttons.a = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000b64:	2104      	movs	r1, #4
 8000b66:	4866      	ldr	r0, [pc, #408]	; (8000d00 <main+0x248>)
 8000b68:	f001 ffc8 	bl	8002afc <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a63      	ldr	r2, [pc, #396]	; (8000d04 <main+0x24c>)
 8000b76:	7853      	ldrb	r3, [r2, #1]
 8000b78:	f361 1304 	bfi	r3, r1, #4, #1
 8000b7c:	7053      	strb	r3, [r2, #1]
			break;
 8000b7e:	e084      	b.n	8000c8a <main+0x1d2>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b80:	2202      	movs	r2, #2
 8000b82:	495c      	ldr	r1, [pc, #368]	; (8000cf4 <main+0x23c>)
 8000b84:	4860      	ldr	r0, [pc, #384]	; (8000d08 <main+0x250>)
 8000b86:	f000 ffb9 	bl	8001afc <HAL_ADC_Start_DMA>
			break;
 8000b8a:	e07e      	b.n	8000c8a <main+0x1d2>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fa65 	bl	800105c <write_next_event_state>
			break;
 8000b92:	e07a      	b.n	8000c8a <main+0x1d2>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b94:	4855      	ldr	r0, [pc, #340]	; (8000cec <main+0x234>)
 8000b96:	f000 fc9b 	bl	80014d0 <Joystick_Update>
			uint8_t invert_x = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000ba6:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <main+0x254>)
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <main+0x254>)
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000bae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <main+0x234>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <main+0x234>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bc6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <main+0x120>
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <main+0x234>)
 8000bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	e001      	b.n	8000bdc <main+0x124>
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0x234>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <main+0x24c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <main+0x24c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bee:	f7ff fd8f 	bl	8000710 <__aeabi_fcmpgt>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <main+0x154>
 8000bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c02:	f7ff fd67 	bl	80006d4 <__aeabi_fcmplt>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <main+0x17c>
				controller.joysticks._bits[1] += (int16_t)(val_x * -(float)INT16_MAX);
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <main+0x24c>)
 8000c0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c12:	b29c      	uxth	r4, r3
 8000c14:	493e      	ldr	r1, [pc, #248]	; (8000d10 <main+0x258>)
 8000c16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c18:	f7ff fbbe 	bl	8000398 <__aeabi_fmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd80 	bl	8000724 <__aeabi_f2iz>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4423      	add	r3, r4
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <main+0x24c>)
 8000c32:	809a      	strh	r2, [r3, #4]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c38:	f7ff fd6a 	bl	8000710 <__aeabi_fcmpgt>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10a      	bne.n	8000c58 <main+0x1a0>
 8000c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fd42 	bl	80006d4 <__aeabi_fcmplt>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d100      	bne.n	8000c58 <main+0x1a0>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c56:	e018      	b.n	8000c8a <main+0x1d2>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <main+0x24c>)
 8000c5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c5e:	b29c      	uxth	r4, r3
 8000c60:	492c      	ldr	r1, [pc, #176]	; (8000d14 <main+0x25c>)
 8000c62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c64:	f7ff fb98 	bl	8000398 <__aeabi_fmul>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd5a 	bl	8000724 <__aeabi_f2iz>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4423      	add	r3, r4
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x24c>)
 8000c7e:	805a      	strh	r2, [r3, #2]
			break;
 8000c80:	e003      	b.n	8000c8a <main+0x1d2>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <main+0x24c>)
 8000c84:	f000 fa2e 	bl	80010e4 <Send_HID_Data>
			break;
 8000c88:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <main+0x244>)
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <main+0x260>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d00d      	beq.n	8000cb2 <main+0x1fa>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <main+0x244>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	425a      	negs	r2, r3
 8000c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ca6:	bf58      	it	pl
 8000ca8:	4253      	negpl	r3, r2
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <main+0x244>)
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e002      	b.n	8000cb8 <main+0x200>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f9d2 	bl	800105c <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <main+0x260>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <main+0x244>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d306      	bcc.n	8000cd2 <main+0x21a>
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0x260>)
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0x244>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	e007      	b.n	8000ce2 <main+0x22a>
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <main+0x260>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <main+0x244>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <main+0x264>)
 8000ce4:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000ce6:	e728      	b.n	8000b3a <main+0x82>
 8000ce8:	20000238 	.word	0x20000238
 8000cec:	20000300 	.word	0x20000300
 8000cf0:	200002fe 	.word	0x200002fe
 8000cf4:	200002fc 	.word	0x200002fc
 8000cf8:	20000278 	.word	0x20000278
 8000cfc:	200002f8 	.word	0x200002f8
 8000d00:	40020000 	.word	0x40020000
 8000d04:	2000033c 	.word	0x2000033c
 8000d08:	200001a0 	.word	0x200001a0
 8000d0c:	3d4ccccd 	.word	0x3d4ccccd
 8000d10:	c6fffe00 	.word	0xc6fffe00
 8000d14:	46fffe00 	.word	0x46fffe00
 8000d18:	200002f9 	.word	0x200002f9
 8000d1c:	200002fa 	.word	0x200002fa

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b092      	sub	sp, #72	; 0x48
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f009 fb2e 	bl	800a390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <SystemClock_Config+0x9c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <SystemClock_Config+0x9c>)
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d50:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d52:	2303      	movs	r3, #3
 8000d54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d72:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fae9 	bl	8004354 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d88:	f000 fa0e 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2303      	movs	r3, #3
 8000d92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fe05 	bl	80049b4 <HAL_RCC_ClockConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db0:	f000 f9fa 	bl	80011a8 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3748      	adds	r7, #72	; 0x48
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <MX_ADC_Init+0xcc>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dee:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e20:	2210      	movs	r2, #16
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e34:	f000 fd1c 	bl	8001870 <HAL_ADC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8000e3e:	f000 f9b3 	bl	80011a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e54:	f000 fffc 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 f9a3 	bl	80011a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e70:	f000 ffee 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000e7a:	f000 f995 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001a0 	.word	0x200001a0
 8000e8c:	40012400 	.word	0x40012400

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ed0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee4:	4831      	ldr	r0, [pc, #196]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000ee6:	f003 fff9 	bl	8004edc <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ef0:	f000 f95a 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4619      	mov	r1, r3
 8000f00:	482a      	ldr	r0, [pc, #168]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f02:	f004 facd 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f0c:	f000 f94c 	bl	80011a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f10:	4826      	ldr	r0, [pc, #152]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f12:	f004 f86d 	bl	8004ff0 <HAL_TIM_OC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 f944 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f30:	f004 fdb0 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000f3a:	f000 f935 	bl	80011a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f42:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f58:	f004 fa4a 	bl	80053f0 <HAL_TIM_OC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f62:	f000 f921 	bl	80011a8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	699a      	ldr	r2, [r3, #24]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0208 	orr.w	r2, r2, #8
 8000f74:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f76:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	480a      	ldr	r0, [pc, #40]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f84:	f004 fa34 	bl	80053f0 <HAL_TIM_OC_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000f8e:	f000 f90b 	bl	80011a8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <MX_TIM2_Init+0x11c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fa0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000238 	.word	0x20000238

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x38>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f001 fa45 	bl	8002462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f001 fa5e 	bl	800249a <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_GPIO_Init+0x68>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <MX_GPIO_Init+0x68>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_GPIO_Init+0x68>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_GPIO_Init+0x68>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <MX_GPIO_Init+0x68>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_GPIO_Init+0x68>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 8001032:	2304      	movs	r3, #4
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_GPIO_Init+0x6c>)
 8001046:	f001 fbd9 	bl	80027fc <HAL_GPIO_Init>

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <write_next_event_state+0x3c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	425a      	negs	r2, r3
 800106e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001076:	bf58      	it	pl
 8001078:	4253      	negpl	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <write_next_event_state+0x3c>)
 800107e:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <write_next_event_state+0x3c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <write_next_event_state+0x40>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	5453      	strb	r3, [r2, r1]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200002f9 	.word	0x200002f9
 800109c:	20000278 	.word	0x20000278

080010a0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d002      	beq.n	80010b6 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d004      	beq.n	80010be <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 80010b4:	e007      	b.n	80010c6 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ffd0 	bl	800105c <write_next_event_state>
			break;
 80010bc:	e003      	b.n	80010c6 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ffcc 	bl	800105c <write_next_event_state>
			break;
 80010c4:	bf00      	nop
	}
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f7ff ffc0 	bl	800105c <write_next_event_state>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Send_HID_Data>:

uint8_t Send_HID_Data(Controller_HandleTypeDef* controller){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <Send_HID_Data+0xbc>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <Send_HID_Data+0xbc>)
 80010fa:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <Send_HID_Data+0xbc>)
 8001108:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <Send_HID_Data+0xbc>)
 8001114:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111c:	121b      	asrs	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <Send_HID_Data+0xbc>)
 8001124:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <Send_HID_Data+0xbc>)
 8001130:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001138:	121b      	asrs	r3, r3, #8
 800113a:	b21b      	sxth	r3, r3
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <Send_HID_Data+0xbc>)
 8001140:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <Send_HID_Data+0xbc>)
 800114c:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001154:	121b      	asrs	r3, r3, #8
 8001156:	b21b      	sxth	r3, r3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <Send_HID_Data+0xbc>)
 800115c:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <Send_HID_Data+0xbc>)
 8001168:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <Send_HID_Data+0xbc>)
 8001178:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7a9a      	ldrb	r2, [r3, #10]
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <Send_HID_Data+0xbc>)
 8001180:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7ada      	ldrb	r2, [r3, #11]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <Send_HID_Data+0xbc>)
 8001188:	731a      	strb	r2, [r3, #12]
	return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 800118a:	220d      	movs	r2, #13
 800118c:	4904      	ldr	r1, [pc, #16]	; (80011a0 <Send_HID_Data+0xbc>)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <Send_HID_Data+0xc0>)
 8001190:	f007 fbea 	bl	8008968 <USBD_CUSTOM_HID_SendReport>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000348 	.word	0x20000348
 80011a4:	20000360 	.word	0x20000360

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_MspInit+0x58>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <HAL_MspInit+0x58>)
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	6253      	str	r3, [r2, #36]	; 0x24
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_MspInit+0x58>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_MspInit+0x58>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_MspInit+0x58>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_MspInit+0x58>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_MspInit+0x58>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_MspInit+0x58>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6253      	str	r3, [r2, #36]	; 0x24
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_MspInit+0x58>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_ADC_MspInit+0xd4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d154      	bne.n	80012dc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 8001238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_ADC_MspInit+0xd8>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001262:	2303      	movs	r3, #3
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	481d      	ldr	r0, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0xdc>)
 8001276:	f001 fac1 	bl	80027fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_ADC_MspInit+0xe4>)
 800127e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001298:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 80012b2:	f001 f90d 	bl	80024d0 <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80012bc:	f7ff ff74 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_ADC_MspInit+0xe0>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2101      	movs	r1, #1
 80012d0:	2012      	movs	r0, #18
 80012d2:	f001 f8c6 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012d6:	2012      	movs	r0, #18
 80012d8:	f001 f8df 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40012400 	.word	0x40012400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	200001f4 	.word	0x200001f4
 80012f4:	40026008 	.word	0x40026008

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d113      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6253      	str	r3, [r2, #36]	; 0x24
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f001 f89b 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f001 f8b4 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 fa57 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001396:	f001 f953 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001f4 	.word	0x200001f4

080013a4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <ADC1_IRQHandler+0x10>)
 80013aa:	f000 fc35 	bl	8001c18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001a0 	.word	0x200001a0

080013b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <USB_LP_IRQHandler+0x10>)
 80013be:	f001 fcb8 	bl	8002d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200007fc 	.word	0x200007fc

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f003 ff31 	bl	8005238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000238 	.word	0x20000238

080013e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff ffe5 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f008 ff97 	bl	800a348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141a:	f7ff fb4d 	bl	8000ab8 <main>
  bx lr
 800141e:	4770      	bx	lr
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001428:	0800a444 	.word	0x0800a444
  ldr r2, =_sbss
 800142c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001430:	20000b10 	.word	0x20000b10

08001434 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <COMP_IRQHandler>
	...

08001438 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001438:	b4b0      	push	{r4, r5, r7}
 800143a:	b095      	sub	sp, #84	; 0x54
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144c:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 800144e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001452:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <Joystick_Init+0x90>)
 800145a:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <Joystick_Init+0x94>)
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 800146a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146e:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001474:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <Joystick_Init+0x90>)
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <Joystick_Init+0x94>)
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 800149a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	461d      	mov	r5, r3
 80014a4:	f107 0414 	add.w	r4, r7, #20
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	3754      	adds	r7, #84	; 0x54
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bcb0      	pop	{r4, r5, r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	3ccccccd 	.word	0x3ccccccd
 80014cc:	3f8ccccd 	.word	0x3f8ccccd

080014d0 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d062      	beq.n	80015b8 <Joystick_Update+0xe8>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d05e      	beq.n	80015b8 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	891b      	ldrh	r3, [r3, #8]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fef2 	bl	80002e8 <__aeabi_ui2f>
 8001504:	4604      	mov	r4, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001510:	f7fe fe38 	bl	8000184 <__aeabi_fsub>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	4620      	mov	r0, r4
 800151a:	f7fe ff3d 	bl	8000398 <__aeabi_fmul>
 800151e:	4603      	mov	r3, r0
 8001520:	461c      	mov	r4, r3
 8001522:	8bfb      	ldrh	r3, [r7, #30]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fedf 	bl	80002e8 <__aeabi_ui2f>
 800152a:	4602      	mov	r2, r0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f7fe ff30 	bl	8000398 <__aeabi_fmul>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7fe fe23 	bl	8000188 <__addsf3>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f913 	bl	8000770 <__aeabi_f2uiz>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8c1b      	ldrh	r3, [r3, #32]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fec6 	bl	80002e8 <__aeabi_ui2f>
 800155c:	4604      	mov	r4, r0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001568:	f7fe fe0c 	bl	8000184 <__aeabi_fsub>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4620      	mov	r0, r4
 8001572:	f7fe ff11 	bl	8000398 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	461c      	mov	r4, r3
 800157a:	8bbb      	ldrh	r3, [r7, #28]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feb3 	bl	80002e8 <__aeabi_ui2f>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f7fe ff04 	bl	8000398 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7fe fdf7 	bl	8000188 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f8e7 	bl	8000770 <__aeabi_f2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	865a      	strh	r2, [r3, #50]	; 0x32
 80015b6:	e008      	b.n	80015ca <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	891b      	ldrh	r3, [r3, #8]
 80015ce:	8bfa      	ldrh	r2, [r7, #30]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8c1b      	ldrh	r3, [r3, #32]
 80015da:	8bba      	ldrh	r2, [r7, #28]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	889b      	ldrh	r3, [r3, #4]
 80015e6:	8bfa      	ldrh	r2, [r7, #30]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf28      	it	cs
 80015ec:	4613      	movcs	r3, r2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	88db      	ldrh	r3, [r3, #6]
 80015f8:	8bfa      	ldrh	r2, [r7, #30]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	bf38      	it	cc
 80015fe:	4613      	movcc	r3, r2
 8001600:	b29a      	uxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8b9b      	ldrh	r3, [r3, #28]
 800160a:	8bba      	ldrh	r2, [r7, #28]
 800160c:	4293      	cmp	r3, r2
 800160e:	bf28      	it	cs
 8001610:	4613      	movcs	r3, r2
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8bdb      	ldrh	r3, [r3, #30]
 800161c:	8bba      	ldrh	r2, [r7, #28]
 800161e:	4293      	cmp	r3, r2
 8001620:	bf38      	it	cc
 8001622:	4613      	movcc	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 800162a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800162e:	2b00      	cmp	r3, #0
 8001630:	dd15      	ble.n	800165e <Joystick_Update+0x18e>
 8001632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fe5a 	bl	80002f0 <__aeabi_i2f>
 800163c:	4604      	mov	r4, r0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	88db      	ldrh	r3, [r3, #6]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	891b      	ldrh	r3, [r3, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe50 	bl	80002f0 <__aeabi_i2f>
 8001650:	4603      	mov	r3, r0
 8001652:	4619      	mov	r1, r3
 8001654:	4620      	mov	r0, r4
 8001656:	f7fe ff53 	bl	8000500 <__aeabi_fdiv>
 800165a:	4603      	mov	r3, r0
 800165c:	e016      	b.n	800168c <Joystick_Update+0x1bc>
 800165e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fe44 	bl	80002f0 <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	889b      	ldrh	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	891b      	ldrh	r3, [r3, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fe38 	bl	80002f0 <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7fe ff3b 	bl	8000500 <__aeabi_fdiv>
 800168a:	4603      	mov	r3, r0
 800168c:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 800168e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dd15      	ble.n	80016c2 <Joystick_Update+0x1f2>
 8001696:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe28 	bl	80002f0 <__aeabi_i2f>
 80016a0:	4604      	mov	r4, r0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8bdb      	ldrh	r3, [r3, #30]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	8c1b      	ldrh	r3, [r3, #32]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fe1e 	bl	80002f0 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7fe ff21 	bl	8000500 <__aeabi_fdiv>
 80016be:	4603      	mov	r3, r0
 80016c0:	e016      	b.n	80016f0 <Joystick_Update+0x220>
 80016c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe12 	bl	80002f0 <__aeabi_i2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8b9b      	ldrh	r3, [r3, #28]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8c1b      	ldrh	r3, [r3, #32]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fe06 	bl	80002f0 <__aeabi_i2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7fe ff09 	bl	8000500 <__aeabi_fdiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff f80a 	bl	8000710 <__aeabi_fcmpgt>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <Joystick_Update+0x236>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	e002      	b.n	800170c <Joystick_Update+0x23c>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800170c:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	f7fe fffc 	bl	8000710 <__aeabi_fcmpgt>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <Joystick_Update+0x252>
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	e002      	b.n	8001728 <Joystick_Update+0x258>
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001728:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	4619      	mov	r1, r3
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7fe ffed 	bl	8000710 <__aeabi_fcmpgt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <Joystick_Update+0x282>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4619      	mov	r1, r3
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe ffc6 	bl	80006d4 <__aeabi_fcmplt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <Joystick_Update+0x282>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	e001      	b.n	8001756 <Joystick_Update+0x286>
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f7fe ffd5 	bl	8000710 <__aeabi_fcmpgt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00a      	beq.n	8001782 <Joystick_Update+0x2b2>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	4619      	mov	r1, r3
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7fe ffae 	bl	80006d4 <__aeabi_fcmplt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <Joystick_Update+0x2b2>
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	e001      	b.n	8001786 <Joystick_Update+0x2b6>
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}

08001792 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 fe55 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f80e 	bl	80017c4 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	e001      	b.n	80017b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b4:	f7ff fcfe 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_InitTick+0x68>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d022      	beq.n	800181e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_InitTick+0x6c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_InitTick+0x68>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fe62 	bl	80024b6 <HAL_SYSTICK_Config>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10f      	bne.n	8001818 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d809      	bhi.n	8001812 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fe:	2200      	movs	r2, #0
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
 8001806:	f000 fe2c 	bl	8002462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0x70>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e007      	b.n	8001822 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e004      	b.n	8001822 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_IncTick+0x1c>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000358 	.word	0x20000358
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000358 	.word	0x20000358

08001870 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e127      	b.n	8001ae0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b8e      	ldr	r3, [pc, #568]	; (8001ae8 <HAL_ADC_Init+0x278>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a8d      	ldr	r2, [pc, #564]	; (8001ae8 <HAL_ADC_Init+0x278>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_ADC_Init+0x278>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fca3 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80ff 	bne.w	8001ad6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018e0:	f023 0302 	bic.w	r3, r3, #2
 80018e4:	f043 0202 	orr.w	r2, r3, #2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018ec:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <HAL_ADC_Init+0x27c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	497c      	ldr	r1, [pc, #496]	; (8001aec <HAL_ADC_Init+0x27c>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001906:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190e:	4619      	mov	r1, r3
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800192a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001930:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	4619      	mov	r1, r3
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001952:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	4313      	orrs	r3, r2
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2b10      	cmp	r3, #16
 8001960:	d007      	beq.n	8001972 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800196a:	4313      	orrs	r3, r2
 800196c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196e:	4313      	orrs	r3, r2
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197c:	2b40      	cmp	r3, #64	; 0x40
 800197e:	d04f      	beq.n	8001a20 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001986:	4313      	orrs	r3, r2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001992:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6912      	ldr	r2, [r2, #16]
 8001998:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800199c:	d003      	beq.n	80019a6 <HAL_ADC_Init+0x136>
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6912      	ldr	r2, [r2, #16]
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	d102      	bne.n	80019ac <HAL_ADC_Init+0x13c>
 80019a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019aa:	e000      	b.n	80019ae <HAL_ADC_Init+0x13e>
 80019ac:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80019ae:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019b2:	4313      	orrs	r3, r2
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d125      	bne.n	8001a0c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d114      	bne.n	80019f4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	fa92 f2a2 	rbit	r2, r2
 80019dc:	617a      	str	r2, [r7, #20]
  return result;
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ee:	4313      	orrs	r3, r2
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
 80019f2:	e00b      	b.n	8001a0c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_ADC_Init+0x280>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_ADC_Init+0x284>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d003      	beq.n	8001a46 <HAL_ADC_Init+0x1d6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	fa92 f2a2 	rbit	r2, r2
 8001a62:	60fa      	str	r2, [r7, #12]
  return result;
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	fa03 f202 	lsl.w	r2, r3, r2
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
 8001a78:	e007      	b.n	8001a8a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_ADC_Init+0x288>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d10b      	bne.n	8001ab2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	f023 0303 	bic.w	r3, r3, #3
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab0:	e014      	b.n	8001adc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f023 0312 	bic.w	r3, r3, #18
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3738      	adds	r7, #56	; 0x38
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40012700 	.word	0x40012700
 8001af0:	fcfc16ff 	.word	0xfcfc16ff
 8001af4:	c0fff18d 	.word	0xc0fff18d
 8001af8:	bf80fffe 	.word	0xbf80fffe

08001afc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Start_DMA+0x1e>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e074      	b.n	8001c04 <HAL_ADC_Start_DMA+0x108>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fae4 	bl	80020f0 <ADC_Enable>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d167      	bne.n	8001c02 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b70:	d106      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	f023 0206 	bic.w	r2, r3, #6
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7e:	e002      	b.n	8001b86 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_ADC_Start_DMA+0x110>)
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_ADC_Start_DMA+0x114>)
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <HAL_ADC_Start_DMA+0x118>)
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3358      	adds	r3, #88	; 0x58
 8001bda:	4619      	mov	r1, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f000 fcce 	bl	8002580 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c00:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	080021a9 	.word	0x080021a9
 8001c10:	08002251 	.word	0x08002251
 8001c14:	0800226d 	.word	0x0800226d

08001c18 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d14e      	bne.n	8001ccc <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d147      	bne.n	8001ccc <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d12c      	bne.n	8001cbc <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d127      	bne.n	8001cbc <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d119      	bne.n	8001cbc <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0220 	bic.w	r2, r2, #32
 8001c96:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fa06 	bl	80010ce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0212 	mvn.w	r2, #18
 8001cca:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b80      	cmp	r3, #128	; 0x80
 8001cd8:	d15c      	bne.n	8001d94 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d155      	bne.n	8001d94 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d13a      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d12c      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d125      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11e      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d119      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa8b 	bl	80022a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 020c 	mvn.w	r2, #12
 8001d92:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d114      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10d      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f834 	bl	8001e2a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0201 	mvn.w	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dda:	d119      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d112      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0220 	mvn.w	r2, #32
 8001dfe:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f81b 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0220 	mvn.w	r2, #32
 8001e0e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x20>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e134      	b.n	80020da <HAL_ADC_ConfigChannel+0x28a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d81c      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b05      	subs	r3, #5
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb8:	e07e      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d81c      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b23      	subs	r3, #35	; 0x23
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4019      	ands	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b23      	subs	r3, #35	; 0x23
 8001eee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001efa:	e05d      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d81c      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b41      	subs	r3, #65	; 0x41
 8001f16:	221f      	movs	r2, #31
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b41      	subs	r3, #65	; 0x41
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f3c:	e03c      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d81c      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b5f      	subs	r3, #95	; 0x5f
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4019      	ands	r1, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b5f      	subs	r3, #95	; 0x5f
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7e:	e01b      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b7d      	subs	r3, #125	; 0x7d
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4019      	ands	r1, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b7d      	subs	r3, #125	; 0x7d
 8001fac:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d81a      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6959      	ldr	r1, [r3, #20]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4019      	ands	r1, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6898      	ldr	r0, [r3, #8]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	e042      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b13      	cmp	r3, #19
 8001ffc:	d81c      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6919      	ldr	r1, [r3, #16]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	3b1e      	subs	r3, #30
 8002010:	2207      	movs	r2, #7
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	4019      	ands	r1, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6898      	ldr	r0, [r3, #8]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	e021      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b1a      	cmp	r3, #26
 800203e:	d81c      	bhi.n	800207a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b3c      	subs	r3, #60	; 0x3c
 8002052:	2207      	movs	r2, #7
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	4019      	ands	r1, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6898      	ldr	r0, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	3b3c      	subs	r3, #60	; 0x3c
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e000      	b.n	800207c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800207a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b10      	cmp	r3, #16
 8002082:	d003      	beq.n	800208c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002088:	2b11      	cmp	r3, #17
 800208a:	d121      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11b      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_ADC_ConfigChannel+0x294>)
 800209e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d111      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_ADC_ConfigChannel+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_ADC_ConfigChannel+0x29c>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9a      	lsrs	r2, r3, #18
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020c2:	e002      	b.n	80020ca <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40012700 	.word	0x40012700
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d043      	beq.n	8002196 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <ADC_Enable+0xb0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <ADC_Enable+0xb4>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002132:	e002      	b.n	800213a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3b01      	subs	r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f9      	bne.n	8002134 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002140:	f7ff fb8c 	bl	800185c <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002146:	e01f      	b.n	8002188 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002148:	f7ff fb88 	bl	800185c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d918      	bls.n	8002188 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d011      	beq.n	8002188 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	2b40      	cmp	r3, #64	; 0x40
 8002194:	d1d8      	bne.n	8002148 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d13d      	bne.n	800223e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d12c      	bne.n	8002236 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d127      	bne.n	8002236 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0220 	bic.w	r2, r2, #32
 8002210:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7fe ff49 	bl	80010ce <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800223c:	e004      	b.n	8002248 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fdda 	bl	8001e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	f043 0204 	orr.w	r2, r3, #4
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff fdd2 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
	...

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <__NVIC_EnableIRQ+0x34>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff90 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff2d 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff42 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff90 	bl	80023a4 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5f 	bl	8002350 <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff35 	bl	8002318 <__NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ffa2 	bl	8002408 <SysTick_Config>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e043      	b.n	800256a <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_DMA_Init+0xa4>)
 80024ea:	4413      	add	r3, r2
 80024ec:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_DMA_Init+0xa8>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	009a      	lsls	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_DMA_Init+0xac>)
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	bffd9ff8 	.word	0xbffd9ff8
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	40026000 	.word	0x40026000

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Start_IT+0x20>
 800259c:	2302      	movs	r3, #2
 800259e:	e04b      	b.n	8002638 <HAL_DMA_Start_IT+0xb8>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d13a      	bne.n	800262a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f8e0 	bl	800279e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 020e 	orr.w	r2, r2, #14
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e00f      	b.n	8002618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0204 	bic.w	r2, r2, #4
 8002606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 020a 	orr.w	r2, r2, #10
 8002616:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e005      	b.n	8002636 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002636:	7dfb      	ldrb	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d026      	beq.n	80026ba <HAL_DMA_IRQHandler+0x7a>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f003 021c 	and.w	r2, r3, #28
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	2104      	movs	r1, #4
 80026a2:	fa01 f202 	lsl.w	r2, r1, r2
 80026a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d071      	beq.n	8002794 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	e06c      	b.n	8002794 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 031c 	and.w	r3, r3, #28
 80026c2:	2202      	movs	r2, #2
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d02e      	beq.n	800272c <HAL_DMA_IRQHandler+0xec>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d029      	beq.n	800272c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 020a 	bic.w	r2, r2, #10
 80026f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 021c 	and.w	r2, r3, #28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2102      	movs	r1, #2
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d038      	beq.n	8002794 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800272a:	e033      	b.n	8002794 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	2208      	movs	r2, #8
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02a      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d025      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020e 	bic.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 021c 	and.w	r2, r3, #28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002794:	bf00      	nop
 8002796:	bf00      	nop
}
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f003 021c 	and.w	r2, r3, #28
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d108      	bne.n	80027e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027e0:	e007      	b.n	80027f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	60da      	str	r2, [r3, #12]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002812:	e154      	b.n	8002abe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8146 	beq.w	8002ab8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d005      	beq.n	8002844 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002840:	2b02      	cmp	r3, #2
 8002842:	d130      	bne.n	80028a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800287a:	2201      	movs	r2, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0201 	and.w	r2, r3, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d017      	beq.n	80028e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d123      	bne.n	8002936 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	6939      	ldr	r1, [r7, #16]
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80a0 	beq.w	8002ab8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002978:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_GPIO_Init+0x2e0>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x2e0>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	4b55      	ldr	r3, [pc, #340]	; (8002adc <HAL_GPIO_Init+0x2e0>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002990:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_GPIO_Init+0x2e4>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <HAL_GPIO_Init+0x2e8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d019      	beq.n	80029f0 <HAL_GPIO_Init+0x1f4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_GPIO_Init+0x2ec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d013      	beq.n	80029ec <HAL_GPIO_Init+0x1f0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a49      	ldr	r2, [pc, #292]	; (8002aec <HAL_GPIO_Init+0x2f0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00d      	beq.n	80029e8 <HAL_GPIO_Init+0x1ec>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_GPIO_Init+0x2f4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <HAL_GPIO_Init+0x1e8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <HAL_GPIO_Init+0x2f8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_GPIO_Init+0x1e4>
 80029dc:	2304      	movs	r3, #4
 80029de:	e008      	b.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e0:	2305      	movs	r3, #5
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1f6>
 80029f0:	2300      	movs	r3, #0
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a02:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_GPIO_Init+0x2e4>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a34:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_GPIO_Init+0x2fc>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f aea3 	bne.w	8002814 <HAL_GPIO_Init+0x18>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010400 	.word	0x40010400

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2c:	b08b      	sub	sp, #44	; 0x2c
 8002b2e:	af06      	add	r7, sp, #24
 8002b30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d0      	b.n	8002cde <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f007 f975 	bl	8009e40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 f80a 	bl	8005b7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e04c      	b.n	8002c08 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3301      	adds	r3, #1
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	b298      	uxth	r0, r3
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3336      	adds	r3, #54	; 0x36
 8002bac:	4602      	mov	r2, r0
 8002bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3338      	adds	r3, #56	; 0x38
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	333c      	adds	r3, #60	; 0x3c
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3340      	adds	r3, #64	; 0x40
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3301      	adds	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3ad      	bcc.n	8002b6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e044      	b.n	8002ca2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3b5      	bcc.n	8002c18 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	687e      	ldr	r6, [r7, #4]
 8002cb4:	466d      	mov	r5, sp
 8002cb6:	f106 0410 	add.w	r4, r6, #16
 8002cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	602b      	str	r3, [r5, #0]
 8002cc2:	1d33      	adds	r3, r6, #4
 8002cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f002 ff72 	bl	8005bb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_Start+0x16>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e016      	b.n	8002d2a <HAL_PCD_Start+0x44>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 ff21 	bl	8005b50 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f007 f877 	bl	8009e04 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 fc06 	bl	800852c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 fbfe 	bl	8008540 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	d102      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fade 	bl	8003312 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 fbf0 	bl	8008540 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d112      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f007 f8d6 	bl	8009f36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8c7 	bl	8002f20 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 fbd2 	bl	8008540 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da6:	d10b      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f005 fbbb 	bl	8008540 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd4:	d10b      	bne.n	8002dee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de8:	b292      	uxth	r2, r2
 8002dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 fba4 	bl	8008540 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	d126      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0208 	bic.w	r2, r2, #8
 8002e2e:	b292      	uxth	r2, r2
 8002e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f007 f8b7 	bl	8009fa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 fb72 	bl	8008540 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e66:	d126      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0204 	orr.w	r2, r2, #4
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f007 f85f 	bl	8009f74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f005 fb40 	bl	8008540 <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	d10e      	bne.n	8002eea <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f007 f818 	bl	8009f1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fb26 	bl	8008540 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d10b      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_PCD_SetAddress+0x1a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e013      	b.n	8002f62 <HAL_PCD_SetAddress+0x42>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f005 fad7 	bl	8008506 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	4608      	mov	r0, r1
 8002f74:	4611      	mov	r1, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	70fb      	strb	r3, [r7, #3]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	803b      	strh	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da0e      	bge.n	8002fae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	705a      	strb	r2, [r3, #1]
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0207 	and.w	r2, r3, #7
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fd8:	883a      	ldrh	r2, [r7, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	78ba      	ldrb	r2, [r7, #2]
 8002fe2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ff6:	78bb      	ldrb	r3, [r7, #2]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d102      	bne.n	8003002 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_PCD_EP_Open+0xa6>
 800300c:	2302      	movs	r3, #2
 800300e:	e00e      	b.n	800302e <HAL_PCD_EP_Open+0xc4>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68f9      	ldr	r1, [r7, #12]
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fde6 	bl	8005bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800302c:	7afb      	ldrb	r3, [r7, #11]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003046:	2b00      	cmp	r3, #0
 8003048:	da0e      	bge.n	8003068 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	705a      	strb	r2, [r3, #1]
 8003066:	e00e      	b.n	8003086 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 0207 	and.w	r2, r3, #7
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_EP_Close+0x6a>
 800309c:	2302      	movs	r3, #2
 800309e:	e00e      	b.n	80030be <HAL_PCD_EP_Close+0x88>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f908 	bl	80062c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 0207 	and.w	r2, r3, #7
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	b2da      	uxtb	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6979      	ldr	r1, [r7, #20]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 faba 	bl	800669c <USB_EPStartXfer>
 8003128:	e005      	b.n	8003136 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fab3 	bl	800669c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	460b      	mov	r3, r1
 800314e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2201      	movs	r2, #1
 800318a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	b2da      	uxtb	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fa77 	bl	800669c <USB_EPStartXfer>
 80031ae:	e005      	b.n	80031bc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6979      	ldr	r1, [r7, #20]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fa70 	bl	800669c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0207 	and.w	r2, r3, #7
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d901      	bls.n	80031e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e03e      	b.n	8003262 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da0e      	bge.n	800320a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	705a      	strb	r2, [r3, #1]
 8003208:	e00c      	b.n	8003224 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_PCD_EP_SetStall+0x7e>
 8003240:	2302      	movs	r3, #2
 8003242:	e00e      	b.n	8003262 <HAL_PCD_EP_SetStall+0x9c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	f005 f85a 	bl	800830c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d901      	bls.n	8003288 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e040      	b.n	800330a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da0e      	bge.n	80032ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	705a      	strb	r2, [r3, #1]
 80032ac:	e00e      	b.n	80032cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 0207 	and.w	r2, r3, #7
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_PCD_EP_ClrStall+0x82>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e00e      	b.n	800330a <HAL_PCD_EP_ClrStall+0xa0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f005 f856 	bl	80083ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b08e      	sub	sp, #56	; 0x38
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800331a:	e2ec      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003324:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8161 	bne.w	80035fe <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800333c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d152      	bne.n	80033ec <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	81fb      	strh	r3, [r7, #14]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	89fb      	ldrh	r3, [r7, #14]
 800335e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3328      	adds	r3, #40	; 0x28
 800336e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	3302      	adds	r3, #2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	441a      	add	r2, r3
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033aa:	2100      	movs	r1, #0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f006 fd9a 	bl	8009ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 829b 	beq.w	80038f6 <PCD_EP_ISR_Handler+0x5e4>
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8296 	bne.w	80038f6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	b292      	uxth	r2, r2
 80033de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033ea:	e284      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	2b00      	cmp	r3, #0
 8003404:	d034      	beq.n	8003470 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	3306      	adds	r3, #6
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003444:	b29b      	uxth	r3, r3
 8003446:	f005 f8cf 	bl	80085e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003456:	4013      	ands	r3, r2
 8003458:	823b      	strh	r3, [r7, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	8a3a      	ldrh	r2, [r7, #16]
 8003460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003464:	b292      	uxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 fd0f 	bl	8009e8c <HAL_PCD_SetupStageCallback>
 800346e:	e242      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003470:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003474:	2b00      	cmp	r3, #0
 8003476:	f280 823e 	bge.w	80038f6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003486:	4013      	ands	r3, r2
 8003488:	83bb      	strh	r3, [r7, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	8bba      	ldrh	r2, [r7, #28]
 8003490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	3306      	adds	r3, #6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d019      	beq.n	8003500 <PCD_EP_ISR_Handler+0x1ee>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f005 f87f 	bl	80085e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	441a      	add	r2, r3
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034f8:	2100      	movs	r1, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f006 fcd8 	bl	8009eb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 81f2 	bne.w	80038f6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d112      	bne.n	8003560 <PCD_EP_ISR_Handler+0x24e>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29a      	uxth	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	e02f      	b.n	80035c0 <PCD_EP_ISR_Handler+0x2ae>
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b3e      	cmp	r3, #62	; 0x3e
 8003566:	d813      	bhi.n	8003590 <PCD_EP_ISR_Handler+0x27e>
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <PCD_EP_ISR_Handler+0x270>
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	3301      	adds	r3, #1
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	b29b      	uxth	r3, r3
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	b29a      	uxth	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e017      	b.n	80035c0 <PCD_EP_ISR_Handler+0x2ae>
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <PCD_EP_ISR_Handler+0x298>
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	3b01      	subs	r3, #1
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	827b      	strh	r3, [r7, #18]
 80035d2:	8a7b      	ldrh	r3, [r7, #18]
 80035d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035d8:	827b      	strh	r3, [r7, #18]
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035e0:	827b      	strh	r3, [r7, #18]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	8a7b      	ldrh	r3, [r7, #18]
 80035e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]
 80035fc:	e17b      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003610:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003614:	2b00      	cmp	r3, #0
 8003616:	f280 80ea 	bge.w	80037ee <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29a      	uxth	r2, r3
 800362c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003630:	4013      	ands	r3, r2
 8003632:	853b      	strh	r3, [r7, #40]	; 0x28
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003648:	b292      	uxth	r2, r2
 800364a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800364c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	7b1b      	ldrb	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d122      	bne.n	80036b0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	3306      	adds	r3, #6
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003692:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8087 	beq.w	80037aa <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	6959      	ldr	r1, [r3, #20]
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	88da      	ldrh	r2, [r3, #6]
 80036a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036aa:	f004 ff9d 	bl	80085e8 <USB_ReadPMA>
 80036ae:	e07c      	b.n	80037aa <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	78db      	ldrb	r3, [r3, #3]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d108      	bne.n	80036ca <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ba:	461a      	mov	r2, r3
 80036bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f927 	bl	8003912 <HAL_PCD_EP_DB_Receive>
 80036c4:	4603      	mov	r3, r0
 80036c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036c8:	e06f      	b.n	80037aa <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003702:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003706:	b29b      	uxth	r3, r3
 8003708:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d021      	beq.n	8003768 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372c:	b29b      	uxth	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	3302      	adds	r3, #2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800374e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02a      	beq.n	80037aa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	6959      	ldr	r1, [r3, #20]
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	891a      	ldrh	r2, [r3, #8]
 8003760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003762:	f004 ff41 	bl	80085e8 <USB_ReadPMA>
 8003766:	e020      	b.n	80037aa <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	3306      	adds	r3, #6
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003790:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6959      	ldr	r1, [r3, #20]
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	895a      	ldrh	r2, [r3, #10]
 80037a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a6:	f004 ff1f 	bl	80085e8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b0:	441a      	add	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037bc:	441a      	add	r2, r3
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x4c2>
 80037ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d206      	bcs.n	80037e2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fb68 	bl	8009eb0 <HAL_PCD_DataOutStageCallback>
 80037e0:	e005      	b.n	80037ee <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 ff57 	bl	800669c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d07e      	beq.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80037f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	843b      	strh	r3, [r7, #32]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	441a      	add	r2, r3
 8003836:	8c3b      	ldrh	r3, [r7, #32]
 8003838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d00c      	beq.n	8003866 <PCD_EP_ISR_Handler+0x554>
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	78db      	ldrb	r3, [r3, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003858:	2b02      	cmp	r3, #2
 800385a:	d146      	bne.n	80038ea <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800385c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d141      	bne.n	80038ea <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	3302      	adds	r3, #2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	8bfb      	ldrh	r3, [r7, #30]
 8003896:	429a      	cmp	r2, r3
 8003898:	d906      	bls.n	80038a8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	8bfb      	ldrh	r3, [r7, #30]
 80038a0:	1ad2      	subs	r2, r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	619a      	str	r2, [r3, #24]
 80038a6:	e002      	b.n	80038ae <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f006 fb12 	bl	8009ee6 <HAL_PCD_DataInStageCallback>
 80038c2:	e018      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	8bfb      	ldrh	r3, [r7, #30]
 80038ca:	441a      	add	r2, r3
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	8bfb      	ldrh	r3, [r7, #30]
 80038d6:	441a      	add	r2, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 feda 	bl	800669c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80038e8:	e005      	b.n	80038f6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038ec:	461a      	mov	r2, r3
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f91b 	bl	8003b2c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038fe:	b29b      	uxth	r3, r3
 8003900:	b21b      	sxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f6ff ad0a 	blt.w	800331c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3738      	adds	r7, #56	; 0x38
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	4613      	mov	r3, r2
 800391e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d07e      	beq.n	8003a28 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	3302      	adds	r3, #2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003952:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	8b7b      	ldrh	r3, [r7, #26]
 800395a:	429a      	cmp	r2, r3
 800395c:	d306      	bcc.n	800396c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	8b7b      	ldrh	r3, [r7, #26]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	619a      	str	r2, [r3, #24]
 800396a:	e002      	b.n	8003972 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d123      	bne.n	80039c2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	833b      	strh	r3, [r7, #24]
 8003996:	8b3b      	ldrh	r3, [r7, #24]
 8003998:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800399c:	833b      	strh	r3, [r7, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	8b3b      	ldrh	r3, [r7, #24]
 80039ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01f      	beq.n	8003a0c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	82fb      	strh	r3, [r7, #22]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	8afb      	ldrh	r3, [r7, #22]
 80039f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a0c:	8b7b      	ldrh	r3, [r7, #26]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8087 	beq.w	8003b22 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6959      	ldr	r1, [r3, #20]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	891a      	ldrh	r2, [r3, #8]
 8003a20:	8b7b      	ldrh	r3, [r7, #26]
 8003a22:	f004 fde1 	bl	80085e8 <USB_ReadPMA>
 8003a26:	e07c      	b.n	8003b22 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3306      	adds	r3, #6
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	8b7b      	ldrh	r3, [r7, #26]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d306      	bcc.n	8003a6a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	8b7b      	ldrh	r3, [r7, #26]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	619a      	str	r2, [r3, #24]
 8003a68:	e002      	b.n	8003a70 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d123      	bne.n	8003ac0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	83fb      	strh	r3, [r7, #30]
 8003a94:	8bfb      	ldrh	r3, [r7, #30]
 8003a96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a9a:	83fb      	strh	r3, [r7, #30]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	8bfb      	ldrh	r3, [r7, #30]
 8003aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11f      	bne.n	8003b0a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	83bb      	strh	r3, [r7, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	441a      	add	r2, r3
 8003af4:	8bbb      	ldrh	r3, [r7, #28]
 8003af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b0a:	8b7b      	ldrh	r3, [r7, #26]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6959      	ldr	r1, [r3, #20]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	895a      	ldrh	r2, [r3, #10]
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	f004 fd63 	bl	80085e8 <USB_ReadPMA>
    }
  }

  return count;
 8003b22:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0a2      	sub	sp, #136	; 0x88
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 81c7 	beq.w	8003ed4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d907      	bls.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	619a      	str	r2, [r3, #24]
 8003b8c:	e002      	b.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f040 80b9 	bne.w	8003d10 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d126      	bne.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	4413      	add	r3, r2
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	011a      	lsls	r2, r3, #4
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	e01a      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d116      	bne.n	8003c2a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	4413      	add	r3, r2
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	011a      	lsls	r2, r3, #4
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d126      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	011a      	lsls	r2, r3, #4
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e017      	b.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d113      	bne.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	011a      	lsls	r2, r3, #4
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f006 f912 	bl	8009ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 82d4 	beq.w	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	827b      	strh	r3, [r7, #18]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8013      	strh	r3, [r2, #0]
 8003d0e:	e2b2      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d021      	beq.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 8286 	bne.w	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d72:	441a      	add	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d80:	441a      	add	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d309      	bcc.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	621a      	str	r2, [r3, #32]
 8003da4:	e015      	b.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003db2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dbc:	e009      	b.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d155      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	4413      	add	r3, r2
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	011a      	lsls	r2, r3, #4
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d112      	bne.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x302>
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	e047      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x392>
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e30:	2b3e      	cmp	r3, #62	; 0x3e
 8003e32:	d811      	bhi.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e46:	3301      	adds	r3, #1
 8003e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	029b      	lsls	r3, r3, #10
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	e032      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x392>
 8003e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x342>
 8003e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e01b      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x392>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d117      	bne.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x392>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	4413      	add	r3, r2
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	011a      	lsls	r2, r3, #4
 8003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6959      	ldr	r1, [r3, #20]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	891a      	ldrh	r2, [r3, #8]
 8003eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f004 fb46 	bl	800855e <USB_WritePMA>
 8003ed2:	e1d0      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3306      	adds	r3, #6
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d307      	bcc.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	619a      	str	r2, [r3, #24]
 8003f1a:	e002      	b.n	8003f22 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80c4 	bne.w	80040b4 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d126      	bne.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x456>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	4413      	add	r3, r2
 8003f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e01a      	b.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d116      	bne.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9e:	4413      	add	r3, r2
 8003fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	011a      	lsls	r2, r3, #4
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003faa:	4413      	add	r3, r2
 8003fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12f      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fde:	4413      	add	r3, r2
 8003fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	011a      	lsls	r2, r3, #4
 8003fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fee:	4413      	add	r3, r2
 8003ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004004:	b29a      	uxth	r2, r3
 8004006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401c:	b29a      	uxth	r2, r3
 800401e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	e017      	b.n	8004056 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d113      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x52a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403c:	4413      	add	r3, r2
 800403e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	011a      	lsls	r2, r3, #4
 8004046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004048:	4413      	add	r3, r2
 800404a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800404e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004052:	2200      	movs	r2, #0
 8004054:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f005 ff42 	bl	8009ee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 8104 	bne.w	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]
 80040b2:	e0e0      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d121      	bne.n	8004102 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 80b4 	bne.w	8004276 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004116:	441a      	add	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004124:	441a      	add	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d309      	bcc.n	800414a <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	621a      	str	r2, [r3, #32]
 8004148:	e015      	b.n	8004176 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004160:	e009      	b.n	8004176 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	667b      	str	r3, [r7, #100]	; 0x64
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d155      	bne.n	8004230 <HAL_PCD_EP_DB_Transmit+0x704>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	4413      	add	r3, r2
 800419a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a4:	4413      	add	r3, r2
 80041a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d112      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80041b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e044      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x736>
 80041d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041da:	2b3e      	cmp	r3, #62	; 0x3e
 80041dc:	d811      	bhi.n	8004202 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80041de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	657b      	str	r3, [r7, #84]	; 0x54
 80041e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80041ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f0:	3301      	adds	r3, #1
 80041f2:	657b      	str	r3, [r7, #84]	; 0x54
 80041f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	029b      	lsls	r3, r3, #10
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	e02f      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x736>
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	657b      	str	r3, [r7, #84]	; 0x54
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	3b01      	subs	r3, #1
 8004216:	657b      	str	r3, [r7, #84]	; 0x54
 8004218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421a:	b29b      	uxth	r3, r3
 800421c:	029b      	lsls	r3, r3, #10
 800421e:	b29b      	uxth	r3, r3
 8004220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004228:	b29a      	uxth	r2, r3
 800422a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	e018      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x736>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d114      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x736>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004246:	4413      	add	r3, r2
 8004248:	667b      	str	r3, [r7, #100]	; 0x64
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	011a      	lsls	r2, r3, #4
 8004250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004252:	4413      	add	r3, r2
 8004254:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004258:	663b      	str	r3, [r7, #96]	; 0x60
 800425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425c:	b29a      	uxth	r2, r3
 800425e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004260:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6959      	ldr	r1, [r3, #20]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	895a      	ldrh	r2, [r3, #10]
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	b29b      	uxth	r3, r3
 8004272:	f004 f974 	bl	800855e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004290:	823b      	strh	r3, [r7, #16]
 8004292:	8a3b      	ldrh	r3, [r7, #16]
 8004294:	f083 0310 	eor.w	r3, r3, #16
 8004298:	823b      	strh	r3, [r7, #16]
 800429a:	8a3b      	ldrh	r3, [r7, #16]
 800429c:	f083 0320 	eor.w	r3, r3, #32
 80042a0:	823b      	strh	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	8a3b      	ldrh	r3, [r7, #16]
 80042b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3788      	adds	r7, #136	; 0x88
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	4613      	mov	r3, r2
 80042e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ee:	897b      	ldrh	r3, [r7, #10]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e009      	b.n	800431a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004306:	897a      	ldrh	r2, [r7, #10]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800431a:	893b      	ldrh	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	b29a      	uxth	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	80da      	strh	r2, [r3, #6]
 800432e:	e00b      	b.n	8004348 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2201      	movs	r2, #1
 8004334:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	b29a      	uxth	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b29a      	uxth	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e31d      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b94      	ldr	r3, [pc, #592]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b91      	ldr	r3, [pc, #580]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004378:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d07b      	beq.n	800447e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d006      	beq.n	800439a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d10f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x5e>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d10b      	bne.n	80043b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439a:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d06a      	beq.n	800447c <HAL_RCC_OscConfig+0x128>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d166      	bne.n	800447c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e2f7      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x74>
 80043ba:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a7e      	ldr	r2, [pc, #504]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e02d      	b.n	8004424 <HAL_RCC_OscConfig+0xd0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10c      	bne.n	80043ea <HAL_RCC_OscConfig+0x96>
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a78      	ldr	r2, [pc, #480]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a75      	ldr	r2, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0xd0>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0xb8>
 80043f2:	4b71      	ldr	r3, [pc, #452]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a70      	ldr	r2, [pc, #448]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b6e      	ldr	r3, [pc, #440]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6d      	ldr	r2, [pc, #436]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xd0>
 800440c:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a69      	ldr	r2, [pc, #420]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a66      	ldr	r2, [pc, #408]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fa16 	bl	800185c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fa12 	bl	800185c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e2ad      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xe0>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd fa02 	bl	800185c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd f9fe 	bl	800185c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e299      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800446e:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x108>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d05a      	beq.n	8004540 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d005      	beq.n	800449c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d119      	bne.n	80044ca <HAL_RCC_OscConfig+0x176>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449c:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_OscConfig+0x160>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e276      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	493d      	ldr	r1, [pc, #244]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c8:	e03a      	b.n	8004540 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d020      	beq.n	8004514 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d2:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <HAL_RCC_OscConfig+0x268>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd f9c0 	bl	800185c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fd f9bc 	bl	800185c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e257      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	492a      	ldr	r1, [pc, #168]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e015      	b.n	8004540 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCC_OscConfig+0x268>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fd f99f 	bl	800185c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fd f99b 	bl	800185c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e236      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80b8 	beq.w	80046be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d170      	bne.n	8004636 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_OscConfig+0x218>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e21a      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004578:	429a      	cmp	r2, r3
 800457a:	d921      	bls.n	80045c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fc4b 	bl	8004e1c <RCC_SetFlashLatencyFromMSIRange>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e208      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a2:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	4901      	ldr	r1, [pc, #4]	; (80045b8 <HAL_RCC_OscConfig+0x264>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
 80045b6:	e020      	b.n	80045fa <HAL_RCC_OscConfig+0x2a6>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c0:	4b99      	ldr	r3, [pc, #612]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4996      	ldr	r1, [pc, #600]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d2:	4b95      	ldr	r3, [pc, #596]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4991      	ldr	r1, [pc, #580]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fc16 	bl	8004e1c <RCC_SetFlashLatencyFromMSIRange>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1d3      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	0b5b      	lsrs	r3, r3, #13
 8004600:	3301      	adds	r3, #1
 8004602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800460a:	4a87      	ldr	r2, [pc, #540]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800460c:	6892      	ldr	r2, [r2, #8]
 800460e:	0912      	lsrs	r2, r2, #4
 8004610:	f002 020f 	and.w	r2, r2, #15
 8004614:	4985      	ldr	r1, [pc, #532]	; (800482c <HAL_RCC_OscConfig+0x4d8>)
 8004616:	5c8a      	ldrb	r2, [r1, r2]
 8004618:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800461a:	4a85      	ldr	r2, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x4dc>)
 800461c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800461e:	4b85      	ldr	r3, [pc, #532]	; (8004834 <HAL_RCC_OscConfig+0x4e0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd f8ce 	bl	80017c4 <HAL_InitTick>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d045      	beq.n	80046be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	e1b5      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d029      	beq.n	8004692 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800463e:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x4e4>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd f90a 	bl	800185c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7fd f906 	bl	800185c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1a1      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800465e:	4b72      	ldr	r3, [pc, #456]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466a:	4b6f      	ldr	r3, [pc, #444]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	496c      	ldr	r1, [pc, #432]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467c:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4967      	ldr	r1, [pc, #412]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004692:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x4e4>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fd f8e0 	bl	800185c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a0:	f7fd f8dc 	bl	800185c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e177      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80046b2:	4b5d      	ldr	r3, [pc, #372]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d030      	beq.n	800472c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b5a      	ldr	r3, [pc, #360]	; (800483c <HAL_RCC_OscConfig+0x4e8>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fd f8c0 	bl	800185c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fd f8bc 	bl	800185c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e157      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046f2:	4b4d      	ldr	r3, [pc, #308]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x38c>
 80046fe:	e015      	b.n	800472c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004700:	4b4e      	ldr	r3, [pc, #312]	; (800483c <HAL_RCC_OscConfig+0x4e8>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fd f8a9 	bl	800185c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470e:	f7fd f8a5 	bl	800185c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e140      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80b5 	beq.w	80048a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b3a      	ldr	r3, [pc, #232]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10d      	bne.n	8004766 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b37      	ldr	r3, [pc, #220]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	4a36      	ldr	r2, [pc, #216]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6253      	str	r3, [r2, #36]	; 0x24
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004762:	2301      	movs	r3, #1
 8004764:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_RCC_OscConfig+0x4ec>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d118      	bne.n	80047a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <HAL_RCC_OscConfig+0x4ec>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a32      	ldr	r2, [pc, #200]	; (8004840 <HAL_RCC_OscConfig+0x4ec>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477e:	f7fd f86d 	bl	800185c <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fd f869 	bl	800185c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b64      	cmp	r3, #100	; 0x64
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e104      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_RCC_OscConfig+0x4ec>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x466>
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b6:	6353      	str	r3, [r2, #52]	; 0x34
 80047b8:	e02d      	b.n	8004816 <HAL_RCC_OscConfig+0x4c2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10c      	bne.n	80047dc <HAL_RCC_OscConfig+0x488>
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047cc:	6353      	str	r3, [r2, #52]	; 0x34
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d8:	6353      	str	r3, [r2, #52]	; 0x34
 80047da:	e01c      	b.n	8004816 <HAL_RCC_OscConfig+0x4c2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_OscConfig+0x4aa>
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	4a0f      	ldr	r2, [pc, #60]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ee:	6353      	str	r3, [r2, #52]	; 0x34
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fa:	6353      	str	r3, [r2, #52]	; 0x34
 80047fc:	e00b      	b.n	8004816 <HAL_RCC_OscConfig+0x4c2>
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004808:	6353      	str	r3, [r2, #52]	; 0x34
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	4a06      	ldr	r2, [pc, #24]	; (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004814:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d024      	beq.n	8004868 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd f81d 	bl	800185c <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	e019      	b.n	800485a <HAL_RCC_OscConfig+0x506>
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	0800a424 	.word	0x0800a424
 8004830:	20000000 	.word	0x20000000
 8004834:	20000004 	.word	0x20000004
 8004838:	42470020 	.word	0x42470020
 800483c:	42470680 	.word	0x42470680
 8004840:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd f80a 	bl	800185c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0a3      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800485a:	4b54      	ldr	r3, [pc, #336]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <HAL_RCC_OscConfig+0x4f0>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004868:	f7fc fff8 	bl	800185c <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fc fff4 	bl	800185c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e08d      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004886:	4b49      	ldr	r3, [pc, #292]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1ee      	bne.n	8004870 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004892:	7ffb      	ldrb	r3, [r7, #31]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004898:	4b44      	ldr	r3, [pc, #272]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	4a43      	ldr	r2, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 800489e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d079      	beq.n	80049a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d056      	beq.n	8004960 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d13b      	bne.n	8004932 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <HAL_RCC_OscConfig+0x65c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fc ffcc 	bl	800185c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fc ffc8 	bl	800185c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e063      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	4319      	orrs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	430b      	orrs	r3, r1
 80048fe:	492b      	ldr	r1, [pc, #172]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004904:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCC_OscConfig+0x65c>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7fc ffa7 	bl	800185c <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004912:	f7fc ffa3 	bl	800185c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e03e      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x5be>
 8004930:	e036      	b.n	80049a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_RCC_OscConfig+0x65c>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fc ff90 	bl	800185c <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fc ff8c 	bl	800185c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e027      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x5ec>
 800495e:	e01f      	b.n	80049a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01a      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCC_OscConfig+0x658>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	429a      	cmp	r2, r3
 800497e:	d10d      	bne.n	800499c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	429a      	cmp	r2, r3
 800498c:	d106      	bne.n	800499c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	42470060 	.word	0x42470060

080049b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e11a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b8f      	ldr	r3, [pc, #572]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d919      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x34>
 80049dc:	4b8a      	ldr	r3, [pc, #552]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a89      	ldr	r2, [pc, #548]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b87      	ldr	r3, [pc, #540]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 0201 	bic.w	r2, r3, #1
 80049f0:	4985      	ldr	r1, [pc, #532]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f8:	4b83      	ldr	r3, [pc, #524]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0f9      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	497a      	ldr	r1, [pc, #488]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 808e 	beq.w	8004b52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3e:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d121      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0d7      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a56:	4b6d      	ldr	r3, [pc, #436]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d115      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0cb      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6e:	4b67      	ldr	r3, [pc, #412]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0bf      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0b7      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	495c      	ldr	r1, [pc, #368]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fc fedc 	bl	800185c <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d112      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fc fed4 	bl	800185c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e09b      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac6:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xfc>
 8004ad2:	e03e      	b.n	8004b52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ade:	f7fc febd 	bl	800185c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e084      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_ClockConfig+0x12a>
 8004b00:	e027      	b.n	8004b52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d11d      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fc fea6 	bl	800185c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e06d      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d1ee      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x158>
 8004b2e:	e010      	b.n	8004b52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b30:	f7fc fe94 	bl	800185c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e05b      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ee      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b52:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d219      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d105      	bne.n	8004b72 <HAL_RCC_ClockConfig+0x1be>
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b6c:	f043 0304 	orr.w	r3, r3, #4
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	4923      	ldr	r1, [pc, #140]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <HAL_RCC_ClockConfig+0x254>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e034      	b.n	8004bfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4917      	ldr	r1, [pc, #92]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	490f      	ldr	r1, [pc, #60]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd2:	f000 f823 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCC_ClockConfig+0x258>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	490b      	ldr	r1, [pc, #44]	; (8004c10 <HAL_RCC_ClockConfig+0x25c>)
 8004be4:	5ccb      	ldrb	r3, [r1, r3]
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x260>)
 8004bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fc fde6 	bl	80017c4 <HAL_InitTick>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	0800a424 	.word	0x0800a424
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20000004 	.word	0x20000004

08004c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c20:	b092      	sub	sp, #72	; 0x48
 8004c22:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c24:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d00d      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x34>
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	f200 80d5 	bhi.w	8004de4 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d002      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x28>
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x2e>
 8004c42:	e0cf      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c48:	e0da      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c4a:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c4e:	e0d7      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c52:	0c9b      	lsrs	r3, r3, #18
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	4b6f      	ldr	r3, [pc, #444]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c5a:	5c9b      	ldrb	r3, [r3, r2]
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c60:	0d9b      	lsrs	r3, r3, #22
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6a:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d05d      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4604      	mov	r4, r0
 8004c80:	460d      	mov	r5, r1
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c94:	0150      	lsls	r0, r2, #5
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	1a51      	subs	r1, r2, r1
 8004c9e:	6139      	str	r1, [r7, #16]
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	018b      	lsls	r3, r1, #6
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	018a      	lsls	r2, r1, #6
 8004cc2:	46d4      	mov	ip, sl
 8004cc4:	ebb2 080c 	subs.w	r8, r2, ip
 8004cc8:	4659      	mov	r1, fp
 8004cca:	eb63 0901 	sbc.w	r9, r3, r1
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce2:	4690      	mov	r8, r2
 8004ce4:	4699      	mov	r9, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	eb18 0303 	adds.w	r3, r8, r3
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	462b      	mov	r3, r5
 8004cf0:	eb49 0303 	adc.w	r3, r9, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d02:	4629      	mov	r1, r5
 8004d04:	024b      	lsls	r3, r1, #9
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004d10:	4601      	mov	r1, r0
 8004d12:	024a      	lsls	r2, r1, #9
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d24:	f7fb fd44 	bl	80007b0 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d30:	e055      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2200      	movs	r2, #0
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	627a      	str	r2, [r7, #36]	; 0x24
 8004d3a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0159      	lsls	r1, r3, #5
 8004d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d50:	0150      	lsls	r0, r2, #5
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	46c4      	mov	ip, r8
 8004d58:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	468c      	mov	ip, r1
 8004d62:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d7a:	ebb2 040a 	subs.w	r4, r2, sl
 8004d7e:	eb63 050b 	sbc.w	r5, r3, fp
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	00eb      	lsls	r3, r5, #3
 8004d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d90:	00e2      	lsls	r2, r4, #3
 8004d92:	4614      	mov	r4, r2
 8004d94:	461d      	mov	r5, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	18e3      	adds	r3, r4, r3
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	eb45 0303 	adc.w	r3, r5, r3
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db0:	4629      	mov	r1, r5
 8004db2:	028b      	lsls	r3, r1, #10
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	4604      	mov	r4, r0
 8004dba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	028a      	lsls	r2, r1, #10
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	2200      	movs	r2, #0
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	61fa      	str	r2, [r7, #28]
 8004dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd2:	f7fb fced 	bl	80007b0 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4613      	mov	r3, r2
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004de2:	e00d      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0b5b      	lsrs	r3, r3, #13
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	3301      	adds	r3, #1
 8004df4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004dfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3748      	adds	r7, #72	; 0x48
 8004e06:	46bd      	mov	sp, r7
 8004e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200
 8004e18:	0800a418 	.word	0x0800a418

08004e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d12c      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e016      	b.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6253      	str	r3, [r2, #36]	; 0x24
 8004e58:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e80:	d105      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e88:	d101      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 0201 	bic.w	r2, r3, #1
 8004ea8:	490b      	ldr	r1, [pc, #44]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	40023c00 	.word	0x40023c00

08004edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e031      	b.n	8004f52 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc f9f8 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 fba8 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e032      	b.n	8004fda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d00e      	beq.n	8004fa4 <HAL_TIM_Base_Start+0x48>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIM_Base_Start+0x88>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <HAL_TIM_Base_Start+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <HAL_TIM_Base_Start+0x8c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIM_Base_Start+0x48>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <HAL_TIM_Base_Start+0x90>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d111      	bne.n	8004fc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d010      	beq.n	8004fd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	e007      	b.n	8004fd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40010800 	.word	0x40010800

08004ff0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e031      	b.n	8005066 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f829 	bl	800506e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 fb1e 	bl	8005670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_OC_Start_IT+0x24>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e022      	b.n	80050ea <HAL_TIM_OC_Start_IT+0x6a>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d109      	bne.n	80050be <HAL_TIM_OC_Start_IT+0x3e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e015      	b.n	80050ea <HAL_TIM_OC_Start_IT+0x6a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d109      	bne.n	80050d8 <HAL_TIM_OC_Start_IT+0x58>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e008      	b.n	80050ea <HAL_TIM_OC_Start_IT+0x6a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e097      	b.n	8005222 <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_OC_Start_IT+0x82>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005100:	e013      	b.n	800512a <HAL_TIM_OC_Start_IT+0xaa>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d104      	bne.n	8005112 <HAL_TIM_OC_Start_IT+0x92>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005110:	e00b      	b.n	800512a <HAL_TIM_OC_Start_IT+0xaa>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d104      	bne.n	8005122 <HAL_TIM_OC_Start_IT+0xa2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005120:	e003      	b.n	800512a <HAL_TIM_OC_Start_IT+0xaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b0c      	cmp	r3, #12
 800512e:	d841      	bhi.n	80051b4 <HAL_TIM_OC_Start_IT+0x134>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_TIM_OC_Start_IT+0xb8>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800516d 	.word	0x0800516d
 800513c:	080051b5 	.word	0x080051b5
 8005140:	080051b5 	.word	0x080051b5
 8005144:	080051b5 	.word	0x080051b5
 8005148:	0800517f 	.word	0x0800517f
 800514c:	080051b5 	.word	0x080051b5
 8005150:	080051b5 	.word	0x080051b5
 8005154:	080051b5 	.word	0x080051b5
 8005158:	08005191 	.word	0x08005191
 800515c:	080051b5 	.word	0x080051b5
 8005160:	080051b5 	.word	0x080051b5
 8005164:	080051b5 	.word	0x080051b5
 8005168:	080051a3 	.word	0x080051a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0202 	orr.w	r2, r2, #2
 800517a:	60da      	str	r2, [r3, #12]
      break;
 800517c:	e01b      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0204 	orr.w	r2, r2, #4
 800518c:	60da      	str	r2, [r3, #12]
      break;
 800518e:	e012      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0208 	orr.w	r2, r2, #8
 800519e:	60da      	str	r2, [r3, #12]
      break;
 80051a0:	e009      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0210 	orr.w	r2, r2, #16
 80051b0:	60da      	str	r2, [r3, #12]
      break;
 80051b2:	e000      	b.n	80051b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80051b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fc43 	bl	8005a4a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d00e      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0x16c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <HAL_TIM_OC_Start_IT+0x1ac>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d009      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0x16c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a14      	ldr	r2, [pc, #80]	; (8005230 <HAL_TIM_OC_Start_IT+0x1b0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_TIM_OC_Start_IT+0x16c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a13      	ldr	r2, [pc, #76]	; (8005234 <HAL_TIM_OC_Start_IT+0x1b4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d111      	bne.n	8005210 <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d010      	beq.n	8005220 <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	e007      	b.n	8005220 <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40010800 	.word	0x40010800

08005238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0202 	mvn.w	r2, #2
 8005264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9dd 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fb ff0c 	bl	80010a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f9df 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0204 	mvn.w	r2, #4
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9b3 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fb fee2 	bl	80010a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9b5 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0208 	mvn.w	r2, #8
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f989 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb feb8 	bl	80010a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f98b 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b10      	cmp	r3, #16
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0210 	mvn.w	r2, #16
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2208      	movs	r2, #8
 8005366:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f95f 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fb fe8e 	bl	80010a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f961 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0201 	mvn.w	r2, #1
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f936 	bl	8005628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f93b 	bl	800565e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005406:	2302      	movs	r3, #2
 8005408:	e046      	b.n	8005498 <HAL_TIM_OC_ConfigChannel+0xa8>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d839      	bhi.n	800548c <HAL_TIM_OC_ConfigChannel+0x9c>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_TIM_OC_ConfigChannel+0x30>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005455 	.word	0x08005455
 8005424:	0800548d 	.word	0x0800548d
 8005428:	0800548d 	.word	0x0800548d
 800542c:	0800548d 	.word	0x0800548d
 8005430:	08005463 	.word	0x08005463
 8005434:	0800548d 	.word	0x0800548d
 8005438:	0800548d 	.word	0x0800548d
 800543c:	0800548d 	.word	0x0800548d
 8005440:	08005471 	.word	0x08005471
 8005444:	0800548d 	.word	0x0800548d
 8005448:	0800548d 	.word	0x0800548d
 800544c:	0800548d 	.word	0x0800548d
 8005450:	0800547f 	.word	0x0800547f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f96a 	bl	8005734 <TIM_OC1_SetConfig>
      break;
 8005460:	e015      	b.n	800548e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f99f 	bl	80057ac <TIM_OC2_SetConfig>
      break;
 800546e:	e00e      	b.n	800548e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f9d6 	bl	8005828 <TIM_OC3_SetConfig>
      break;
 800547c:	e007      	b.n	800548e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fa0c 	bl	80058a2 <TIM_OC4_SetConfig>
      break;
 800548a:	e000      	b.n	800548e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800548c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0b3      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x180>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d03e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xd0>
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	f200 8087 	bhi.w	8005608 <HAL_TIM_ConfigClockSource+0x168>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f000 8085 	beq.w	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d87f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d01a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xa2>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d87b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d050      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x116>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d877      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d03c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xf6>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d873      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d058      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x136>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d86f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d064      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d86b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d060      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d867      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d05a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005540:	e062      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fa5b 	bl	8005a0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04e      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 fa44 	bl	8005a0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e03b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 f9bb 	bl	800591e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa12 	bl	80059d8 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e02b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 f9d9 	bl	800597a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fa02 	bl	80059d8 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e01b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 f99b 	bl	800591e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f9f2 	bl	80059d8 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e00b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 f9e9 	bl	80059d8 <TIM_ITRx_SetConfig>
        break;
 8005606:	e002      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800560c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d007      	beq.n	8005698 <TIM_Base_SetConfig+0x28>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a25      	ldr	r2, [pc, #148]	; (8005720 <TIM_Base_SetConfig+0xb0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0x28>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a24      	ldr	r2, [pc, #144]	; (8005724 <TIM_Base_SetConfig+0xb4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d013      	beq.n	80056da <TIM_Base_SetConfig+0x6a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <TIM_Base_SetConfig+0xb0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_Base_SetConfig+0x6a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <TIM_Base_SetConfig+0xb4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_Base_SetConfig+0x6a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a18      	ldr	r2, [pc, #96]	; (8005728 <TIM_Base_SetConfig+0xb8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0x6a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <TIM_Base_SetConfig+0xbc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0x6a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a16      	ldr	r2, [pc, #88]	; (8005730 <TIM_Base_SetConfig+0xc0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40010800 	.word	0x40010800
 800572c:	40010c00 	.word	0x40010c00
 8005730:	40011000 	.word	0x40011000

08005734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 0302 	bic.w	r3, r3, #2
 800577c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	031b      	lsls	r3, r3, #12
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0201 	bic.w	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 030a 	bic.w	r3, r3, #10
 800595a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f023 0210 	bic.w	r2, r3, #16
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f043 0307 	orr.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b087      	sub	sp, #28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a82:	431a      	orrs	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e046      	b.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d00e      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a10      	ldr	r2, [pc, #64]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10c      	bne.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40010800 	.word	0x40010800

08005b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b60:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	f107 0014 	add.w	r0, r7, #20
 8005bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	b004      	add	sp, #16
 8005bee:	4770      	bx	lr

08005bf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b09b      	sub	sp, #108	; 0x6c
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d81f      	bhi.n	8005c62 <USB_ActivateEndpoint+0x72>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <USB_ActivateEndpoint+0x38>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c6b 	.word	0x08005c6b
 8005c34:	08005c47 	.word	0x08005c47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c44:	e012      	b.n	8005c6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c52:	e00b      	b.n	8005c6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c60:	e004      	b.n	8005c6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c68:	e000      	b.n	8005c6c <USB_ActivateEndpoint+0x7c>
      break;
 8005c6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	7b1b      	ldrb	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 8149 	bne.w	8005f70 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8084 	beq.w	8005df0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	88db      	ldrh	r3, [r3, #6]
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	81fb      	strh	r3, [r7, #14]
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d01b      	beq.n	8005d6c <USB_ActivateEndpoint+0x17c>
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	81bb      	strh	r3, [r7, #12]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	89bb      	ldrh	r3, [r7, #12]
 8005d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d020      	beq.n	8005db6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	813b      	strh	r3, [r7, #8]
 8005d8c:	893b      	ldrh	r3, [r7, #8]
 8005d8e:	f083 0320 	eor.w	r3, r3, #32
 8005d92:	813b      	strh	r3, [r7, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	8013      	strh	r3, [r2, #0]
 8005db4:	e27f      	b.n	80062b6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	897b      	ldrh	r3, [r7, #10]
 8005dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	8013      	strh	r3, [r2, #0]
 8005dee:	e262      	b.n	80062b6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	4413      	add	r3, r2
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	011a      	lsls	r2, r3, #4
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	88db      	ldrh	r3, [r3, #6]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	4413      	add	r3, r2
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	011a      	lsls	r2, r3, #4
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	4413      	add	r3, r2
 8005e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d112      	bne.n	8005e76 <USB_ActivateEndpoint+0x286>
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e02f      	b.n	8005ed6 <USB_ActivateEndpoint+0x2e6>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e7c:	d813      	bhi.n	8005ea6 <USB_ActivateEndpoint+0x2b6>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <USB_ActivateEndpoint+0x2a8>
 8005e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e94:	3301      	adds	r3, #1
 8005e96:	663b      	str	r3, [r7, #96]	; 0x60
 8005e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	029b      	lsls	r3, r3, #10
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e017      	b.n	8005ed6 <USB_ActivateEndpoint+0x2e6>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <USB_ActivateEndpoint+0x2d0>
 8005eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	83fb      	strh	r3, [r7, #30]
 8005ee4:	8bfb      	ldrh	r3, [r7, #30]
 8005ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01b      	beq.n	8005f26 <USB_ActivateEndpoint+0x336>
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f04:	83bb      	strh	r3, [r7, #28]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	441a      	add	r2, r3
 8005f10:	8bbb      	ldrh	r3, [r7, #28]
 8005f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	837b      	strh	r3, [r7, #26]
 8005f3e:	8b7b      	ldrh	r3, [r7, #26]
 8005f40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f44:	837b      	strh	r3, [r7, #26]
 8005f46:	8b7b      	ldrh	r3, [r7, #26]
 8005f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f4c:	837b      	strh	r3, [r7, #26]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	8b7b      	ldrh	r3, [r7, #26]
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
 8005f6e:	e1a2      	b.n	80062b6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fbc:	4413      	add	r3, r2
 8005fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fce:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	891b      	ldrh	r3, [r3, #8]
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	4413      	add	r3, r2
 8005ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	895b      	ldrh	r3, [r3, #10]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 8091 	bne.w	8006140 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800602c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800602e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01b      	beq.n	800606e <USB_ActivateEndpoint+0x47e>
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	873b      	strh	r3, [r7, #56]	; 0x38
 800607c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01b      	beq.n	80060be <USB_ActivateEndpoint+0x4ce>
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	867b      	strh	r3, [r7, #50]	; 0x32
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]
 800613e:	e0ba      	b.n	80062b6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006150:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01d      	beq.n	8006198 <USB_ActivateEndpoint+0x5a8>
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80061a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01d      	beq.n	80061f0 <USB_ActivateEndpoint+0x600>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d024      	beq.n	8006242 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006216:	f083 0320 	eor.w	r3, r3, #32
 800621a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
 8006240:	e01d      	b.n	800627e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800626a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627a:	b29b      	uxth	r3, r3
 800627c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006294:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80062b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	376c      	adds	r7, #108	; 0x6c
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b08d      	sub	sp, #52	; 0x34
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	7b1b      	ldrb	r3, [r3, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 808e 	bne.w	80063f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d044      	beq.n	800636a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	81bb      	strh	r3, [r7, #12]
 80062ee:	89bb      	ldrh	r3, [r7, #12]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01b      	beq.n	8006330 <USB_DeactivateEndpoint+0x6c>
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	817b      	strh	r3, [r7, #10]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	897b      	ldrh	r3, [r7, #10]
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	813b      	strh	r3, [r7, #8]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	893b      	ldrh	r3, [r7, #8]
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
 8006368:	e192      	b.n	8006690 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	827b      	strh	r3, [r7, #18]
 8006378:	8a7b      	ldrh	r3, [r7, #18]
 800637a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01b      	beq.n	80063ba <USB_DeactivateEndpoint+0xf6>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	823b      	strh	r3, [r7, #16]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	8a3b      	ldrh	r3, [r7, #16]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	81fb      	strh	r3, [r7, #14]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	89fb      	ldrh	r3, [r7, #14]
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
 80063f2:	e14d      	b.n	8006690 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 80a5 	bne.w	8006548 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	843b      	strh	r3, [r7, #32]
 800640c:	8c3b      	ldrh	r3, [r7, #32]
 800640e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01b      	beq.n	800644e <USB_DeactivateEndpoint+0x18a>
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	83fb      	strh	r3, [r7, #30]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	8bfb      	ldrh	r3, [r7, #30]
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	83bb      	strh	r3, [r7, #28]
 800645c:	8bbb      	ldrh	r3, [r7, #28]
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01b      	beq.n	800649e <USB_DeactivateEndpoint+0x1da>
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	837b      	strh	r3, [r7, #26]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	8b7b      	ldrh	r3, [r7, #26]
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	833b      	strh	r3, [r7, #24]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	441a      	add	r2, r3
 80064c0:	8b3b      	ldrh	r3, [r7, #24]
 80064c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	82fb      	strh	r3, [r7, #22]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	82bb      	strh	r3, [r7, #20]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	8abb      	ldrh	r3, [r7, #20]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
 8006546:	e0a3      	b.n	8006690 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006556:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <USB_DeactivateEndpoint+0x2d4>
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	b29b      	uxth	r3, r3
 8006596:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80065a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <USB_DeactivateEndpoint+0x324>
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006636:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3734      	adds	r7, #52	; 0x34
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b0cc      	sub	sp, #304	; 0x130
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066aa:	6018      	str	r0, [r3, #0]
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	f041 817d 	bne.w	80079c2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d908      	bls.n	80066f6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80066f4:	e007      	b.n	8006706 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	7b1b      	ldrb	r3, [r3, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d152      	bne.n	80067bc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6959      	ldr	r1, [r3, #20]
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	88da      	ldrh	r2, [r3, #6]
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	b29b      	uxth	r3, r3
 8006734:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006738:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800673c:	6800      	ldr	r0, [r0, #0]
 800673e:	f001 ff0e 	bl	800855e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006746:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800674a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800674e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	4619      	mov	r1, r3
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006770:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006774:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	440a      	add	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006790:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4413      	add	r3, r2
 8006798:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800679c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	f001 b8b5 	b.w	8007926 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80067bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	f040 84c6 	bne.w	800715a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	f240 8443 	bls.w	8007072 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80067ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 823e 	beq.w	8006d0a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006896:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800689a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 809a 	bne.w	80069e8 <USB_EPStartXfer+0x34c>
 80068b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068e6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	440a      	add	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4413      	add	r3, r2
 800690a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d122      	bne.n	8006966 <USB_EPStartXfer+0x2ca>
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006932:	b29a      	uxth	r2, r3
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006956:	b29a      	uxth	r2, r3
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e079      	b.n	8006a5a <USB_EPStartXfer+0x3be>
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	2b3e      	cmp	r3, #62	; 0x3e
 800696c:	d81b      	bhi.n	80069a6 <USB_EPStartXfer+0x30a>
 800696e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <USB_EPStartXfer+0x2f2>
 8006984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006988:	3301      	adds	r3, #1
 800698a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800698e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29a      	uxth	r2, r3
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e059      	b.n	8006a5a <USB_EPStartXfer+0x3be>
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <USB_EPStartXfer+0x32a>
 80069bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e038      	b.n	8006a5a <USB_EPStartXfer+0x3be>
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d130      	bne.n	8006a5a <USB_EPStartXfer+0x3be>
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a16:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	011a      	lsls	r2, r3, #4
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6959      	ldr	r1, [r3, #20]
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a88:	6800      	ldr	r0, [r0, #0]
 8006a8a:	f001 fd68 	bl	800855e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9e:	441a      	add	r2, r3
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d90f      	bls.n	8006ae8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	621a      	str	r2, [r3, #32]
 8006ae6:	e00e      	b.n	8006b06 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 809a 	bne.w	8006c4c <USB_EPStartXfer+0x5b0>
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b4a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	440a      	add	r2, r1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	011a      	lsls	r2, r3, #4
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d122      	bne.n	8006bca <USB_EPStartXfer+0x52e>
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e083      	b.n	8006cd2 <USB_EPStartXfer+0x636>
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd0:	d81b      	bhi.n	8006c0a <USB_EPStartXfer+0x56e>
 8006bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <USB_EPStartXfer+0x556>
 8006be8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bf2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e063      	b.n	8006cd2 <USB_EPStartXfer+0x636>
 8006c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <USB_EPStartXfer+0x58e>
 8006c20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	029b      	lsls	r3, r3, #10
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e042      	b.n	8006cd2 <USB_EPStartXfer+0x636>
 8006c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d13a      	bne.n	8006cd2 <USB_EPStartXfer+0x636>
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c68:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c8e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	440a      	add	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	011a      	lsls	r2, r3, #4
 8006ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006caa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	891b      	ldrh	r3, [r3, #8]
 8006cde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6959      	ldr	r1, [r3, #20]
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cf8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cfc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d00:	6800      	ldr	r0, [r0, #0]
 8006d02:	f001 fc2c 	bl	800855e <USB_WritePMA>
 8006d06:	f000 be0e 	b.w	8007926 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d16d      	bne.n	8006df6 <USB_EPStartXfer+0x75a>
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	4413      	add	r3, r2
 8006d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	011a      	lsls	r2, r3, #4
 8006d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d4e:	4413      	add	r3, r2
 8006d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d54:	647b      	str	r3, [r7, #68]	; 0x44
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d112      	bne.n	8006d84 <USB_EPStartXfer+0x6e8>
 8006d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	e063      	b.n	8006e4c <USB_EPStartXfer+0x7b0>
 8006d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d88:	2b3e      	cmp	r3, #62	; 0x3e
 8006d8a:	d817      	bhi.n	8006dbc <USB_EPStartXfer+0x720>
 8006d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d90:	085b      	lsrs	r3, r3, #1
 8006d92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <USB_EPStartXfer+0x710>
 8006da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006da6:	3301      	adds	r3, #1
 8006da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	e047      	b.n	8006e4c <USB_EPStartXfer+0x7b0>
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <USB_EPStartXfer+0x740>
 8006dd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ddc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	029b      	lsls	r3, r3, #10
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df2:	801a      	strh	r2, [r3, #0]
 8006df4:	e02a      	b.n	8006e4c <USB_EPStartXfer+0x7b0>
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d122      	bne.n	8006e4c <USB_EPStartXfer+0x7b0>
 8006e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	653b      	str	r3, [r7, #80]	; 0x50
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e26:	4413      	add	r3, r2
 8006e28:	653b      	str	r3, [r7, #80]	; 0x50
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	011a      	lsls	r2, r3, #4
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	891b      	ldrh	r3, [r3, #8]
 8006e58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6959      	ldr	r1, [r3, #20]
 8006e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e72:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e76:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	f001 fb6f 	bl	800855e <USB_WritePMA>
            ep->xfer_buff += len;
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e90:	441a      	add	r2, r3
 8006e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d90f      	bls.n	8006eda <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a1a      	ldr	r2, [r3, #32]
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e00e      	b.n	8006ef8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	643b      	str	r3, [r7, #64]	; 0x40
 8006f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d16d      	bne.n	8006ff0 <USB_EPStartXfer+0x954>
 8006f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	4413      	add	r3, r2
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d112      	bne.n	8006f7e <USB_EPStartXfer+0x8e2>
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e05d      	b.n	800703a <USB_EPStartXfer+0x99e>
 8006f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f82:	2b3e      	cmp	r3, #62	; 0x3e
 8006f84:	d817      	bhi.n	8006fb6 <USB_EPStartXfer+0x91a>
 8006f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USB_EPStartXfer+0x90a>
 8006f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e041      	b.n	800703a <USB_EPStartXfer+0x99e>
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <USB_EPStartXfer+0x93a>
 8006fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e024      	b.n	800703a <USB_EPStartXfer+0x99e>
 8006ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11c      	bne.n	800703a <USB_EPStartXfer+0x99e>
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700e:	b29b      	uxth	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007014:	4413      	add	r3, r2
 8007016:	643b      	str	r3, [r7, #64]	; 0x40
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	011a      	lsls	r2, r3, #4
 8007026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007028:	4413      	add	r3, r2
 800702a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007034:	b29a      	uxth	r2, r3
 8007036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	895b      	ldrh	r3, [r3, #10]
 8007046:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705a:	b29b      	uxth	r3, r3
 800705c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007060:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007064:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f001 fa78 	bl	800855e <USB_WritePMA>
 800706e:	f000 bc5a 	b.w	8007926 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	b29b      	uxth	r3, r3
 80070dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070fe:	4413      	add	r3, r2
 8007100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	011a      	lsls	r2, r3, #4
 8007110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007112:	4413      	add	r3, r2
 8007114:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007118:	65bb      	str	r3, [r7, #88]	; 0x58
 800711a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711e:	b29a      	uxth	r2, r3
 8007120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007122:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6959      	ldr	r1, [r3, #20]
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	b29b      	uxth	r3, r3
 8007146:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800714a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800714e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007152:	6800      	ldr	r0, [r0, #0]
 8007154:	f001 fa03 	bl	800855e <USB_WritePMA>
 8007158:	e3e5      	b.n	8007926 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800715a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80071a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a1a      	ldr	r2, [r3, #32]
 80071c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 81bc 	beq.w	8007574 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d16d      	bne.n	80072f6 <USB_EPStartXfer+0xc5a>
 800721a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	67bb      	str	r3, [r7, #120]	; 0x78
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007234:	b29b      	uxth	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723a:	4413      	add	r3, r2
 800723c:	67bb      	str	r3, [r7, #120]	; 0x78
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	011a      	lsls	r2, r3, #4
 800724c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724e:	4413      	add	r3, r2
 8007250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007254:	677b      	str	r3, [r7, #116]	; 0x74
 8007256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d112      	bne.n	8007284 <USB_EPStartXfer+0xbe8>
 800725e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007268:	b29a      	uxth	r2, r3
 800726a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29a      	uxth	r2, r3
 800727e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e060      	b.n	8007346 <USB_EPStartXfer+0xcaa>
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	2b3e      	cmp	r3, #62	; 0x3e
 800728a:	d817      	bhi.n	80072bc <USB_EPStartXfer+0xc20>
 800728c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <USB_EPStartXfer+0xc10>
 80072a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072a6:	3301      	adds	r3, #1
 80072a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e044      	b.n	8007346 <USB_EPStartXfer+0xcaa>
 80072bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <USB_EPStartXfer+0xc40>
 80072d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072d6:	3b01      	subs	r3, #1
 80072d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	029b      	lsls	r3, r3, #10
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e027      	b.n	8007346 <USB_EPStartXfer+0xcaa>
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d11f      	bne.n	8007346 <USB_EPStartXfer+0xcaa>
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007314:	b29b      	uxth	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800731c:	4413      	add	r3, r2
 800731e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	011a      	lsls	r2, r3, #4
 8007330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007334:	4413      	add	r3, r2
 8007336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800733a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800733c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007340:	b29a      	uxth	r2, r3
 8007342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007344:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	895b      	ldrh	r3, [r3, #10]
 8007352:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6959      	ldr	r1, [r3, #20]
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007366:	b29b      	uxth	r3, r3
 8007368:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800736c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007370:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007374:	6800      	ldr	r0, [r0, #0]
 8007376:	f001 f8f2 	bl	800855e <USB_WritePMA>
          ep->xfer_buff += len;
 800737a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695a      	ldr	r2, [r3, #20]
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	441a      	add	r2, r3
 800738c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d90f      	bls.n	80073d4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c4:	1ad2      	subs	r2, r2, r3
 80073c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	621a      	str	r2, [r3, #32]
 80073d2:	e00e      	b.n	80073f2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8295 	beq.w	8007926 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d16d      	bne.n	80074e8 <USB_EPStartXfer+0xe4c>
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	66bb      	str	r3, [r7, #104]	; 0x68
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800742c:	4413      	add	r3, r2
 800742e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	011a      	lsls	r2, r3, #4
 800743e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007440:	4413      	add	r3, r2
 8007442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007446:	667b      	str	r3, [r7, #100]	; 0x64
 8007448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USB_EPStartXfer+0xdda>
 8007450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745a:	b29a      	uxth	r2, r3
 800745c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746e:	b29a      	uxth	r2, r3
 8007470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e063      	b.n	800753e <USB_EPStartXfer+0xea2>
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	2b3e      	cmp	r3, #62	; 0x3e
 800747c:	d817      	bhi.n	80074ae <USB_EPStartXfer+0xe12>
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <USB_EPStartXfer+0xe02>
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e047      	b.n	800753e <USB_EPStartXfer+0xea2>
 80074ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80074b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d104      	bne.n	80074ce <USB_EPStartXfer+0xe32>
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c8:	3b01      	subs	r3, #1
 80074ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	029b      	lsls	r3, r3, #10
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e02a      	b.n	800753e <USB_EPStartXfer+0xea2>
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d122      	bne.n	800753e <USB_EPStartXfer+0xea2>
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	673b      	str	r3, [r7, #112]	; 0x70
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007518:	4413      	add	r3, r2
 800751a:	673b      	str	r3, [r7, #112]	; 0x70
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	011a      	lsls	r2, r3, #4
 800752a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800752c:	4413      	add	r3, r2
 800752e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007538:	b29a      	uxth	r2, r3
 800753a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	891b      	ldrh	r3, [r3, #8]
 800754a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6959      	ldr	r1, [r3, #20]
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	b29b      	uxth	r3, r3
 8007560:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007564:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007568:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f000 fff6 	bl	800855e <USB_WritePMA>
 8007572:	e1d8      	b.n	8007926 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d178      	bne.n	8007676 <USB_EPStartXfer+0xfda>
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a8:	4413      	add	r3, r2
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	011a      	lsls	r2, r3, #4
 80075bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <USB_EPStartXfer+0xf64>
 80075d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e06b      	b.n	80076d8 <USB_EPStartXfer+0x103c>
 8007600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007604:	2b3e      	cmp	r3, #62	; 0x3e
 8007606:	d818      	bhi.n	800763a <USB_EPStartXfer+0xf9e>
 8007608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <USB_EPStartXfer+0xf8c>
 800761e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007622:	3301      	adds	r3, #1
 8007624:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007628:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e04e      	b.n	80076d8 <USB_EPStartXfer+0x103c>
 800763a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	f003 031f 	and.w	r3, r3, #31
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <USB_EPStartXfer+0xfbe>
 8007650:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007654:	3b01      	subs	r3, #1
 8007656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800765a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800765e:	b29b      	uxth	r3, r3
 8007660:	029b      	lsls	r3, r3, #10
 8007662:	b29b      	uxth	r3, r3
 8007664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766c:	b29a      	uxth	r2, r3
 800766e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	e030      	b.n	80076d8 <USB_EPStartXfer+0x103c>
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d128      	bne.n	80076d8 <USB_EPStartXfer+0x103c>
 8007686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076aa:	4413      	add	r3, r2
 80076ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	011a      	lsls	r2, r3, #4
 80076be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076c2:	4413      	add	r3, r2
 80076c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	891b      	ldrh	r3, [r3, #8]
 80076e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6959      	ldr	r1, [r3, #20]
 80076f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007702:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	f000 ff29 	bl	800855e <USB_WritePMA>
          ep->xfer_buff += len;
 800770c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695a      	ldr	r2, [r3, #20]
 8007718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771c:	441a      	add	r2, r3
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d90f      	bls.n	8007766 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	621a      	str	r2, [r3, #32]
 8007764:	e00e      	b.n	8007784 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2200      	movs	r2, #0
 8007782:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80cc 	beq.w	8007926 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800778e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800779c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d178      	bne.n	800789e <USB_EPStartXfer+0x1202>
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077d0:	4413      	add	r3, r2
 80077d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	011a      	lsls	r2, r3, #4
 80077e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d116      	bne.n	8007828 <USB_EPStartXfer+0x118c>
 80077fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e064      	b.n	80078f2 <USB_EPStartXfer+0x1256>
 8007828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800782c:	2b3e      	cmp	r3, #62	; 0x3e
 800782e:	d818      	bhi.n	8007862 <USB_EPStartXfer+0x11c6>
 8007830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <USB_EPStartXfer+0x11b4>
 8007846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784a:	3301      	adds	r3, #1
 800784c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007854:	b29b      	uxth	r3, r3
 8007856:	029b      	lsls	r3, r3, #10
 8007858:	b29a      	uxth	r2, r3
 800785a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	e047      	b.n	80078f2 <USB_EPStartXfer+0x1256>
 8007862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800786c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <USB_EPStartXfer+0x11e6>
 8007878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787c:	3b01      	subs	r3, #1
 800787e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007886:	b29b      	uxth	r3, r3
 8007888:	029b      	lsls	r3, r3, #10
 800788a:	b29b      	uxth	r3, r3
 800788c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800789a:	801a      	strh	r2, [r3, #0]
 800789c:	e029      	b.n	80078f2 <USB_EPStartXfer+0x1256>
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d121      	bne.n	80078f2 <USB_EPStartXfer+0x1256>
 80078ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c4:	4413      	add	r3, r2
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	011a      	lsls	r2, r3, #4
 80078d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078dc:	4413      	add	r3, r2
 80078de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	895b      	ldrh	r3, [r3, #10]
 80078fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6959      	ldr	r1, [r3, #20]
 800790e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007912:	b29b      	uxth	r3, r3
 8007914:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007918:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800791c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007920:	6800      	ldr	r0, [r0, #0]
 8007922:	f000 fe1c 	bl	800855e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007948:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800794c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007954:	8013      	strh	r3, [r2, #0]
 8007956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800795e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007962:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007966:	8812      	ldrh	r2, [r2, #0]
 8007968:	f082 0210 	eor.w	r2, r2, #16
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007976:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800797a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800797e:	8812      	ldrh	r2, [r2, #0]
 8007980:	f082 0220 	eor.w	r2, r2, #32
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	441a      	add	r2, r3
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	8013      	strh	r3, [r2, #0]
 80079be:	f000 bc9f 	b.w	8008300 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	7b1b      	ldrb	r3, [r3, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 80ae 	bne.w	8007b30 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d917      	bls.n	8007a20 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a10:	1ad2      	subs	r2, r2, r3
 8007a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	619a      	str	r2, [r3, #24]
 8007a1e:	e00e      	b.n	8007a3e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	011a      	lsls	r2, r3, #4
 8007a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d116      	bne.n	8007aba <USB_EPStartXfer+0x141e>
 8007a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e3e8      	b.n	800828c <USB_EPStartXfer+0x1bf0>
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	2b3e      	cmp	r3, #62	; 0x3e
 8007ac0:	d818      	bhi.n	8007af4 <USB_EPStartXfer+0x1458>
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <USB_EPStartXfer+0x1446>
 8007ad8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007adc:	3301      	adds	r3, #1
 8007ade:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	029b      	lsls	r3, r3, #10
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af0:	801a      	strh	r2, [r3, #0]
 8007af2:	e3cb      	b.n	800828c <USB_EPStartXfer+0x1bf0>
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <USB_EPStartXfer+0x1478>
 8007b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	029b      	lsls	r3, r3, #10
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e3ad      	b.n	800828c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	f040 8200 	bne.w	8007f42 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 8091 	bne.w	8007c76 <USB_EPStartXfer+0x15da>
 8007b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b78:	4413      	add	r3, r2
 8007b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	011a      	lsls	r2, r3, #4
 8007b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d116      	bne.n	8007bd8 <USB_EPStartXfer+0x153c>
 8007baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e083      	b.n	8007ce0 <USB_EPStartXfer+0x1644>
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b3e      	cmp	r3, #62	; 0x3e
 8007be6:	d820      	bhi.n	8007c2a <USB_EPStartXfer+0x158e>
 8007be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USB_EPStartXfer+0x157c>
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	e05a      	b.n	8007ce0 <USB_EPStartXfer+0x1644>
 8007c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d104      	bne.n	8007c5a <USB_EPStartXfer+0x15be>
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c54:	3b01      	subs	r3, #1
 8007c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e034      	b.n	8007ce0 <USB_EPStartXfer+0x1644>
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d12c      	bne.n	8007ce0 <USB_EPStartXfer+0x1644>
 8007c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007caa:	4413      	add	r3, r2
 8007cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	011a      	lsls	r2, r3, #4
 8007cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f040 8091 	bne.w	8007e22 <USB_EPStartXfer+0x1786>
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d24:	4413      	add	r3, r2
 8007d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	011a      	lsls	r2, r3, #4
 8007d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d116      	bne.n	8007d84 <USB_EPStartXfer+0x16e8>
 8007d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d68:	801a      	strh	r2, [r3, #0]
 8007d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e07c      	b.n	8007e7e <USB_EPStartXfer+0x17e2>
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b3e      	cmp	r3, #62	; 0x3e
 8007d92:	d820      	bhi.n	8007dd6 <USB_EPStartXfer+0x173a>
 8007d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USB_EPStartXfer+0x1728>
 8007dba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	e053      	b.n	8007e7e <USB_EPStartXfer+0x17e2>
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <USB_EPStartXfer+0x176a>
 8007dfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e00:	3b01      	subs	r3, #1
 8007e02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	029b      	lsls	r3, r3, #10
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e02d      	b.n	8007e7e <USB_EPStartXfer+0x17e2>
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d125      	bne.n	8007e7e <USB_EPStartXfer+0x17e2>
 8007e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e48:	4413      	add	r3, r2
 8007e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	011a      	lsls	r2, r3, #4
 8007e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e7c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 81fe 	beq.w	800828c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007eb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <USB_EPStartXfer+0x182c>
 8007ebc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10d      	bne.n	8007ee4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ec8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 81db 	bne.w	800828c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ed6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f040 81d4 	bne.w	800828c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	8013      	strh	r3, [r2, #0]
 8007f40:	e1a4      	b.n	800828c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	78db      	ldrb	r3, [r3, #3]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	f040 819a 	bne.w	8008288 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d917      	bls.n	8007fa0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	619a      	str	r2, [r3, #24]
 8007f9e:	e00e      	b.n	8007fbe <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d178      	bne.n	80080c0 <USB_EPStartXfer+0x1a24>
 8007fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800800a:	4413      	add	r3, r2
 800800c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d116      	bne.n	800804a <USB_EPStartXfer+0x19ae>
 800801c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008028:	b29a      	uxth	r2, r3
 800802a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e06b      	b.n	8008122 <USB_EPStartXfer+0x1a86>
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	2b3e      	cmp	r3, #62	; 0x3e
 8008050:	d818      	bhi.n	8008084 <USB_EPStartXfer+0x19e8>
 8008052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800805c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USB_EPStartXfer+0x19d6>
 8008068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806c:	3301      	adds	r3, #1
 800806e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e04e      	b.n	8008122 <USB_EPStartXfer+0x1a86>
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <USB_EPStartXfer+0x1a08>
 800809a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800809e:	3b01      	subs	r3, #1
 80080a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	029b      	lsls	r3, r3, #10
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e030      	b.n	8008122 <USB_EPStartXfer+0x1a86>
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d128      	bne.n	8008122 <USB_EPStartXfer+0x1a86>
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	4413      	add	r3, r2
 80080f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	011a      	lsls	r2, r3, #4
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	4413      	add	r3, r2
 800810e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811a:	b29a      	uxth	r2, r3
 800811c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008120:	801a      	strh	r2, [r3, #0]
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d178      	bne.n	8008232 <USB_EPStartXfer+0x1b96>
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815c:	b29b      	uxth	r3, r3
 800815e:	461a      	mov	r2, r3
 8008160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008164:	4413      	add	r3, r2
 8008166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	011a      	lsls	r2, r3, #4
 8008178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817c:	4413      	add	r3, r2
 800817e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d116      	bne.n	80081bc <USB_EPStartXfer+0x1b20>
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e067      	b.n	800828c <USB_EPStartXfer+0x1bf0>
 80081bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c0:	2b3e      	cmp	r3, #62	; 0x3e
 80081c2:	d818      	bhi.n	80081f6 <USB_EPStartXfer+0x1b5a>
 80081c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <USB_EPStartXfer+0x1b48>
 80081da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081de:	3301      	adds	r3, #1
 80081e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	029b      	lsls	r3, r3, #10
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e04a      	b.n	800828c <USB_EPStartXfer+0x1bf0>
 80081f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008204:	f003 031f 	and.w	r3, r3, #31
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USB_EPStartXfer+0x1b7a>
 800820c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008210:	3b01      	subs	r3, #1
 8008212:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800821a:	b29b      	uxth	r3, r3
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e02c      	b.n	800828c <USB_EPStartXfer+0x1bf0>
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d124      	bne.n	800828c <USB_EPStartXfer+0x1bf0>
 8008242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008250:	b29b      	uxth	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008258:	4413      	add	r3, r2
 800825a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	011a      	lsls	r2, r3, #4
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	4413      	add	r3, r2
 8008272:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008276:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	b29a      	uxth	r2, r3
 8008280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008284:	801a      	strh	r2, [r3, #0]
 8008286:	e001      	b.n	800828c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e03a      	b.n	8008302 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d020      	beq.n	8008360 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008334:	81bb      	strh	r3, [r7, #12]
 8008336:	89bb      	ldrh	r3, [r7, #12]
 8008338:	f083 0310 	eor.w	r3, r3, #16
 800833c:	81bb      	strh	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	441a      	add	r2, r3
 8008348:	89bb      	ldrh	r3, [r7, #12]
 800834a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835a:	b29b      	uxth	r3, r3
 800835c:	8013      	strh	r3, [r2, #0]
 800835e:	e01f      	b.n	80083a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	81fb      	strh	r3, [r7, #14]
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800837e:	81fb      	strh	r3, [r7, #14]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	89fb      	ldrh	r3, [r7, #14]
 800838c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839c:	b29b      	uxth	r3, r3
 800839e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	7b1b      	ldrb	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 809d 	bne.w	80084fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d04c      	beq.n	8008462 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	823b      	strh	r3, [r7, #16]
 80083d6:	8a3b      	ldrh	r3, [r7, #16]
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01b      	beq.n	8008418 <USB_EPClearStall+0x6c>
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f6:	81fb      	strh	r3, [r7, #14]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	89fb      	ldrh	r3, [r7, #14]
 8008404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800840c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008414:	b29b      	uxth	r3, r3
 8008416:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	78db      	ldrb	r3, [r3, #3]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d06c      	beq.n	80084fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008436:	81bb      	strh	r3, [r7, #12]
 8008438:	89bb      	ldrh	r3, [r7, #12]
 800843a:	f083 0320 	eor.w	r3, r3, #32
 800843e:	81bb      	strh	r3, [r7, #12]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	441a      	add	r2, r3
 800844a:	89bb      	ldrh	r3, [r7, #12]
 800844c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845c:	b29b      	uxth	r3, r3
 800845e:	8013      	strh	r3, [r2, #0]
 8008460:	e04b      	b.n	80084fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	82fb      	strh	r3, [r7, #22]
 8008470:	8afb      	ldrh	r3, [r7, #22]
 8008472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d01b      	beq.n	80084b2 <USB_EPClearStall+0x106>
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008490:	82bb      	strh	r3, [r7, #20]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	441a      	add	r2, r3
 800849c:	8abb      	ldrh	r3, [r7, #20]
 800849e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c8:	827b      	strh	r3, [r7, #18]
 80084ca:	8a7b      	ldrh	r3, [r7, #18]
 80084cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084d0:	827b      	strh	r3, [r7, #18]
 80084d2:	8a7b      	ldrh	r3, [r7, #18]
 80084d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d8:	827b      	strh	r3, [r7, #18]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	441a      	add	r2, r3
 80084e4:	8a7b      	ldrh	r3, [r7, #18]
 80084e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr

08008506 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2280      	movs	r2, #128	; 0x80
 800851c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800854e:	b29b      	uxth	r3, r3
 8008550:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800855e:	b480      	push	{r7}
 8008560:	b08d      	sub	sp, #52	; 0x34
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	460b      	mov	r3, r1
 800856e:	80fb      	strh	r3, [r7, #6]
 8008570:	4613      	mov	r3, r2
 8008572:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008574:	88bb      	ldrh	r3, [r7, #4]
 8008576:	3301      	adds	r3, #1
 8008578:	085b      	lsrs	r3, r3, #1
 800857a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	005a      	lsls	r2, r3, #1
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008596:	e01e      	b.n	80085d6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	3301      	adds	r3, #1
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	3302      	adds	r3, #2
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	3302      	adds	r3, #2
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	3301      	adds	r3, #1
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	3b01      	subs	r3, #1
 80085d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1dd      	bne.n	8008598 <USB_WritePMA+0x3a>
  }
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	3734      	adds	r7, #52	; 0x34
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b08b      	sub	sp, #44	; 0x2c
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	460b      	mov	r3, r1
 80085f8:	80fb      	strh	r3, [r7, #6]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085fe:	88bb      	ldrh	r3, [r7, #4]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	b29b      	uxth	r3, r3
 8008604:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	005a      	lsls	r2, r3, #1
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800861a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
 8008620:	e01b      	b.n	800865a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	3302      	adds	r3, #2
 800862e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	b2da      	uxtb	r2, r3
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	3301      	adds	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	0a1b      	lsrs	r3, r3, #8
 8008642:	b2da      	uxtb	r2, r3
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	3301      	adds	r3, #1
 800864c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	3302      	adds	r3, #2
 8008652:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	3b01      	subs	r3, #1
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e0      	bne.n	8008622 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008660:	88bb      	ldrh	r3, [r7, #4]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	b29b      	uxth	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	701a      	strb	r2, [r3, #0]
  }
}
 800867c:	bf00      	nop
 800867e:	372c      	adds	r7, #44	; 0x2c
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008696:	2302      	movs	r3, #2
 8008698:	2203      	movs	r2, #3
 800869a:	2181      	movs	r1, #129	; 0x81
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fcfc 	bl	800a09a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80086a8:	2302      	movs	r3, #2
 80086aa:	2203      	movs	r2, #3
 80086ac:	2101      	movs	r1, #1
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fcf3 	bl	800a09a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80086bc:	2024      	movs	r0, #36	; 0x24
 80086be:	f001 fe01 	bl	800a2c4 <USBD_static_malloc>
 80086c2:	4602      	mov	r2, r0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e012      	b.n	8008700 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086e0:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	230d      	movs	r3, #13
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fdbe 	bl	800a27c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008716:	2181      	movs	r1, #129	; 0x81
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fce4 	bl	800a0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008724:	2101      	movs	r1, #1
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 fcdd 	bl	800a0e6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00e      	beq.n	800875c <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fdc4 	bl	800a2dc <USBD_static_free>
    pdev->pClassData = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008778:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008792:	2b00      	cmp	r3, #0
 8008794:	d051      	beq.n	800883a <USBD_CUSTOM_HID_Setup+0xd2>
 8008796:	2b20      	cmp	r3, #32
 8008798:	f040 80d8 	bne.w	800894c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	3b02      	subs	r3, #2
 80087a2:	2b09      	cmp	r3, #9
 80087a4:	d841      	bhi.n	800882a <USBD_CUSTOM_HID_Setup+0xc2>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <USBD_CUSTOM_HID_Setup+0x44>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	08008805 	.word	0x08008805
 80087b0:	080087e3 	.word	0x080087e3
 80087b4:	0800882b 	.word	0x0800882b
 80087b8:	0800882b 	.word	0x0800882b
 80087bc:	0800882b 	.word	0x0800882b
 80087c0:	0800882b 	.word	0x0800882b
 80087c4:	0800882b 	.word	0x0800882b
 80087c8:	08008815 	.word	0x08008815
 80087cc:	080087f3 	.word	0x080087f3
 80087d0:	080087d5 	.word	0x080087d5
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	611a      	str	r2, [r3, #16]
      break;
 80087e0:	e02a      	b.n	8008838 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3310      	adds	r3, #16
 80087e6:	2201      	movs	r2, #1
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f92b 	bl	8009a46 <USBD_CtlSendData>
      break;
 80087f0:	e022      	b.n	8008838 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	885b      	ldrh	r3, [r3, #2]
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	615a      	str	r2, [r3, #20]
      break;
 8008802:	e019      	b.n	8008838 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3314      	adds	r3, #20
 8008808:	2201      	movs	r2, #1
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f91a 	bl	8009a46 <USBD_CtlSendData>
      break;
 8008812:	e011      	b.n	8008838 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2201      	movs	r2, #1
 8008818:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 800881a:	6939      	ldr	r1, [r7, #16]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	88db      	ldrh	r3, [r3, #6]
 8008820:	461a      	mov	r2, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 f93d 	bl	8009aa2 <USBD_CtlPrepareRx>
      break;
 8008828:	e006      	b.n	8008838 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f8a0 	bl	8009972 <USBD_CtlError>
      ret = USBD_FAIL;
 8008832:	2302      	movs	r3, #2
 8008834:	75fb      	strb	r3, [r7, #23]
      break;
 8008836:	bf00      	nop
    }
    break;
 8008838:	e08f      	b.n	800895a <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b0b      	cmp	r3, #11
 8008840:	d87c      	bhi.n	800893c <USBD_CUSTOM_HID_Setup+0x1d4>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008879 	.word	0x08008879
 800884c:	0800893d 	.word	0x0800893d
 8008850:	0800893d 	.word	0x0800893d
 8008854:	0800893d 	.word	0x0800893d
 8008858:	0800893d 	.word	0x0800893d
 800885c:	0800893d 	.word	0x0800893d
 8008860:	080088a1 	.word	0x080088a1
 8008864:	0800893d 	.word	0x0800893d
 8008868:	0800893d 	.word	0x0800893d
 800886c:	0800893d 	.word	0x0800893d
 8008870:	080088ef 	.word	0x080088ef
 8008874:	08008917 	.word	0x08008917
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800887e:	2b03      	cmp	r3, #3
 8008880:	d107      	bne.n	8008892 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008882:	f107 030e 	add.w	r3, r7, #14
 8008886:	2202      	movs	r2, #2
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 f8db 	bl	8009a46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008890:	e05b      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f86c 	bl	8009972 <USBD_CtlError>
			  ret = USBD_FAIL;
 800889a:	2302      	movs	r3, #2
 800889c:	75fb      	strb	r3, [r7, #23]
      break;
 800889e:	e054      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	0a1b      	lsrs	r3, r3, #8
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b22      	cmp	r3, #34	; 0x22
 80088aa:	d10b      	bne.n	80088c4 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	88db      	ldrh	r3, [r3, #6]
 80088b0:	2b41      	cmp	r3, #65	; 0x41
 80088b2:	bf28      	it	cs
 80088b4:	2341      	movcs	r3, #65	; 0x41
 80088b6:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e00d      	b.n	80088e0 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	885b      	ldrh	r3, [r3, #2]
 80088c8:	0a1b      	lsrs	r3, r3, #8
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b21      	cmp	r3, #33	; 0x21
 80088ce:	d107      	bne.n	80088e0 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80088d0:	4b24      	ldr	r3, [pc, #144]	; (8008964 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80088d2:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	88db      	ldrh	r3, [r3, #6]
 80088d8:	2b09      	cmp	r3, #9
 80088da:	bf28      	it	cs
 80088dc:	2309      	movcs	r3, #9
 80088de:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80088e0:	8bfb      	ldrh	r3, [r7, #30]
 80088e2:	461a      	mov	r2, r3
 80088e4:	69b9      	ldr	r1, [r7, #24]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 f8ad 	bl	8009a46 <USBD_CtlSendData>
      break;
 80088ec:	e02d      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d107      	bne.n	8008908 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3318      	adds	r3, #24
 80088fc:	2201      	movs	r2, #1
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f8a0 	bl	8009a46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008906:	e020      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f831 	bl	8009972 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008910:	2302      	movs	r3, #2
 8008912:	75fb      	strb	r3, [r7, #23]
      break;
 8008914:	e019      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800891c:	2b03      	cmp	r3, #3
 800891e:	d106      	bne.n	800892e <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800892c:	e00d      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 f81e 	bl	8009972 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008936:	2302      	movs	r3, #2
 8008938:	75fb      	strb	r3, [r7, #23]
      break;
 800893a:	e006      	b.n	800894a <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f817 	bl	8009972 <USBD_CtlError>
      ret = USBD_FAIL;
 8008944:	2302      	movs	r3, #2
 8008946:	75fb      	strb	r3, [r7, #23]
      break;
 8008948:	bf00      	nop
    }
    break;
 800894a:	e006      	b.n	800895a <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f80f 	bl	8009972 <USBD_CtlError>
    ret = USBD_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	75fb      	strb	r3, [r7, #23]
    break;
 8008958:	bf00      	nop
  }
  return ret;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	200000c8 	.word	0x200000c8

08008968 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800897c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008984:	2b03      	cmp	r3, #3
 8008986:	d111      	bne.n	80089ac <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	2181      	movs	r1, #129	; 0x81
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 fc48 	bl	800a236 <USBD_LL_Transmit>
 80089a6:	e001      	b.n	80089ac <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2229      	movs	r2, #41	; 0x29
 80089c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80089c6:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000044 	.word	0x20000044

080089d8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2229      	movs	r2, #41	; 0x29
 80089e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80089e6:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20000070 	.word	0x20000070

080089f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2229      	movs	r2, #41	; 0x29
 8008a04:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008a06:	4b03      	ldr	r3, [pc, #12]	; (8008a14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	2000009c 	.word	0x2000009c

08008a18 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a4e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	7810      	ldrb	r0, [r2, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	7852      	ldrb	r2, [r2, #1]
 8008a60:	4611      	mov	r1, r2
 8008a62:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	230d      	movs	r3, #13
 8008a68:	2101      	movs	r1, #1
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fc06 	bl	800a27c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a88:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d10c      	bne.n	8008aac <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	7810      	ldrb	r0, [r2, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	7852      	ldrb	r2, [r2, #1]
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200000d4 	.word	0x200000d4

08008ad8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e01a      	b.n	8008b52 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	79fa      	ldrb	r2, [r7, #7]
 8008b48:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f001 fa3a 	bl	8009fc4 <USBD_LL_Init>

  return USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d006      	beq.n	8008b7c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
 8008b7a:	e001      	b.n	8008b80 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fa65 	bl	800a064 <USBD_LL_Start>

  return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00c      	beq.n	8008bec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fe63 	bl	80098fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d016      	beq.n	8008c86 <USBD_LL_SetupStage+0x6a>
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d81c      	bhi.n	8008c96 <USBD_LL_SetupStage+0x7a>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <USBD_LL_SetupStage+0x4a>
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d008      	beq.n	8008c76 <USBD_LL_SetupStage+0x5a>
 8008c64:	e017      	b.n	8008c96 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9c6 	bl	8009000 <USBD_StdDevReq>
    break;
 8008c74:	e01a      	b.n	8008cac <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa28 	bl	80090d4 <USBD_StdItfReq>
    break;
 8008c84:	e012      	b.n	8008cac <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa68 	bl	8009164 <USBD_StdEPReq>
    break;
 8008c94:	e00a      	b.n	8008cac <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 fa3d 	bl	800a124 <USBD_LL_StallEP>
    break;
 8008caa:	bf00      	nop
  }

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b086      	sub	sp, #24
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d14b      	bne.n	8008d62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008cd0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d134      	bne.n	8008d46 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d919      	bls.n	8008d1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	1ad2      	subs	r2, r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d203      	bcs.n	8008d0a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	e002      	b.n	8008d10 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fee2 	bl	8009ade <USBD_CtlContinueRx>
 8008d1a:	e038      	b.n	8008d8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d105      	bne.n	8008d3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 fedf 	bl	8009b02 <USBD_CtlSendStatus>
 8008d44:	e023      	b.n	8008d8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d4c:	2b05      	cmp	r3, #5
 8008d4e:	d11e      	bne.n	8008d8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008d58:	2100      	movs	r1, #0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f001 f9e2 	bl	800a124 <USBD_LL_StallEP>
 8008d60:	e015      	b.n	8008d8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d108      	bne.n	8008d8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	7afa      	ldrb	r2, [r7, #11]
 8008d82:	4611      	mov	r1, r2
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	4798      	blx	r3
 8008d88:	e001      	b.n	8008d8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e000      	b.n	8008d90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	460b      	mov	r3, r1
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d17f      	bne.n	8008eac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3314      	adds	r3, #20
 8008db0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d15c      	bne.n	8008e76 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d915      	bls.n	8008df4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	1ad2      	subs	r2, r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 fe4c 	bl	8009a7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008de6:	2300      	movs	r3, #0
 8008de8:	2200      	movs	r2, #0
 8008dea:	2100      	movs	r1, #0
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f001 fa45 	bl	800a27c <USBD_LL_PrepareReceive>
 8008df2:	e04e      	b.n	8008e92 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	6912      	ldr	r2, [r2, #16]
 8008dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e00:	fb01 f202 	mul.w	r2, r1, r2
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d11c      	bne.n	8008e44 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d316      	bcc.n	8008e44 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d20f      	bcs.n	8008e44 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e24:	2200      	movs	r2, #0
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fe28 	bl	8009a7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008e36:	2300      	movs	r3, #0
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f001 fa1d 	bl	800a27c <USBD_LL_PrepareReceive>
 8008e42:	e026      	b.n	8008e92 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d105      	bne.n	8008e66 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e66:	2180      	movs	r1, #128	; 0x80
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f001 f95b 	bl	800a124 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fe5a 	bl	8009b28 <USBD_CtlReceiveStatus>
 8008e74:	e00d      	b.n	8008e92 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d004      	beq.n	8008e8a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e8a:	2180      	movs	r1, #128	; 0x80
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 f949 	bl	800a124 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d11d      	bne.n	8008ed8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fe81 	bl	8008ba4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008eaa:	e015      	b.n	8008ed8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00d      	beq.n	8008ed4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d108      	bne.n	8008ed4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	7afa      	ldrb	r2, [r7, #11]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4798      	blx	r3
 8008ed2:	e001      	b.n	8008ed8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e000      	b.n	8008eda <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008eea:	2340      	movs	r3, #64	; 0x40
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f8d2 	bl	800a09a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2240      	movs	r2, #64	; 0x40
 8008f02:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f06:	2340      	movs	r3, #64	; 0x40
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2180      	movs	r1, #128	; 0x80
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f8c4 	bl	800a09a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2240      	movs	r2, #64	; 0x40
 8008f1c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6852      	ldr	r2, [r2, #4]
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	4611      	mov	r1, r2
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
  }

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bc80      	pop	{r7}
 8008f80:	4770      	bx	lr

08008f82 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr

08008faa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr

08008fca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d10b      	bne.n	8008ff4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009016:	2b40      	cmp	r3, #64	; 0x40
 8009018:	d005      	beq.n	8009026 <USBD_StdDevReq+0x26>
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d84f      	bhi.n	80090be <USBD_StdDevReq+0xbe>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <USBD_StdDevReq+0x36>
 8009022:	2b20      	cmp	r3, #32
 8009024:	d14b      	bne.n	80090be <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	4798      	blx	r3
    break;
 8009034:	e048      	b.n	80090c8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b09      	cmp	r3, #9
 800903c:	d839      	bhi.n	80090b2 <USBD_StdDevReq+0xb2>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <USBD_StdDevReq+0x44>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	08009095 	.word	0x08009095
 8009048:	080090a9 	.word	0x080090a9
 800904c:	080090b3 	.word	0x080090b3
 8009050:	0800909f 	.word	0x0800909f
 8009054:	080090b3 	.word	0x080090b3
 8009058:	08009077 	.word	0x08009077
 800905c:	0800906d 	.word	0x0800906d
 8009060:	080090b3 	.word	0x080090b3
 8009064:	0800908b 	.word	0x0800908b
 8009068:	08009081 	.word	0x08009081
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9da 	bl	8009428 <USBD_GetDescriptor>
      break;
 8009074:	e022      	b.n	80090bc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 facf 	bl	800961c <USBD_SetAddress>
      break;
 800907e:	e01d      	b.n	80090bc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb0e 	bl	80096a4 <USBD_SetConfig>
      break;
 8009088:	e018      	b.n	80090bc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb97 	bl	80097c0 <USBD_GetConfig>
      break;
 8009092:	e013      	b.n	80090bc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fbc7 	bl	800982a <USBD_GetStatus>
      break;
 800909c:	e00e      	b.n	80090bc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fbf5 	bl	8009890 <USBD_SetFeature>
      break;
 80090a6:	e009      	b.n	80090bc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fc04 	bl	80098b8 <USBD_ClrFeature>
      break;
 80090b0:	e004      	b.n	80090bc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fc5c 	bl	8009972 <USBD_CtlError>
      break;
 80090ba:	bf00      	nop
    }
    break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fc56 	bl	8009972 <USBD_CtlError>
    break;
 80090c6:	bf00      	nop
  }

  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop

080090d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d005      	beq.n	80090fa <USBD_StdItfReq+0x26>
 80090ee:	2b40      	cmp	r3, #64	; 0x40
 80090f0:	d82e      	bhi.n	8009150 <USBD_StdItfReq+0x7c>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <USBD_StdItfReq+0x26>
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d12a      	bne.n	8009150 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009100:	3b01      	subs	r3, #1
 8009102:	2b02      	cmp	r3, #2
 8009104:	d81d      	bhi.n	8009142 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	889b      	ldrh	r3, [r3, #4]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b01      	cmp	r3, #1
 800910e:	d813      	bhi.n	8009138 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	88db      	ldrh	r3, [r3, #6]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d110      	bne.n	800914c <USBD_StdItfReq+0x78>
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10d      	bne.n	800914c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fce6 	bl	8009b02 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009136:	e009      	b.n	800914c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fc19 	bl	8009972 <USBD_CtlError>
      break;
 8009140:	e004      	b.n	800914c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc14 	bl	8009972 <USBD_CtlError>
      break;
 800914a:	e000      	b.n	800914e <USBD_StdItfReq+0x7a>
      break;
 800914c:	bf00      	nop
    }
    break;
 800914e:	e004      	b.n	800915a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc0d 	bl	8009972 <USBD_CtlError>
    break;
 8009158:	bf00      	nop
  }

  return USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	889b      	ldrh	r3, [r3, #4]
 8009176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	d007      	beq.n	8009194 <USBD_StdEPReq+0x30>
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	f200 8144 	bhi.w	8009412 <USBD_StdEPReq+0x2ae>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <USBD_StdEPReq+0x40>
 800918e:	2b20      	cmp	r3, #32
 8009190:	f040 813f 	bne.w	8009412 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	4798      	blx	r3
    break;
 80091a2:	e13b      	b.n	800941c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d10a      	bne.n	80091c6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]

      return ret;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	e12b      	b.n	800941e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d007      	beq.n	80091de <USBD_StdEPReq+0x7a>
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	f300 8119 	bgt.w	8009406 <USBD_StdEPReq+0x2a2>
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d072      	beq.n	80092be <USBD_StdEPReq+0x15a>
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d03a      	beq.n	8009252 <USBD_StdEPReq+0xee>
 80091dc:	e113      	b.n	8009406 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d002      	beq.n	80091ee <USBD_StdEPReq+0x8a>
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d015      	beq.n	8009218 <USBD_StdEPReq+0xb4>
 80091ec:	e02b      	b.n	8009246 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00c      	beq.n	800920e <USBD_StdEPReq+0xaa>
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b80      	cmp	r3, #128	; 0x80
 80091f8:	d009      	beq.n	800920e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 ff90 	bl	800a124 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009204:	2180      	movs	r1, #128	; 0x80
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 ff8c 	bl	800a124 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800920c:	e020      	b.n	8009250 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fbae 	bl	8009972 <USBD_CtlError>
        break;
 8009216:	e01b      	b.n	8009250 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	885b      	ldrh	r3, [r3, #2]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10e      	bne.n	800923e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00b      	beq.n	800923e <USBD_StdEPReq+0xda>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d008      	beq.n	800923e <USBD_StdEPReq+0xda>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	88db      	ldrh	r3, [r3, #6]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d104      	bne.n	800923e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 ff73 	bl	800a124 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc5f 	bl	8009b02 <USBD_CtlSendStatus>

        break;
 8009244:	e004      	b.n	8009250 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fb92 	bl	8009972 <USBD_CtlError>
        break;
 800924e:	bf00      	nop
      }
      break;
 8009250:	e0de      	b.n	8009410 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009258:	2b02      	cmp	r3, #2
 800925a:	d002      	beq.n	8009262 <USBD_StdEPReq+0xfe>
 800925c:	2b03      	cmp	r3, #3
 800925e:	d015      	beq.n	800928c <USBD_StdEPReq+0x128>
 8009260:	e026      	b.n	80092b0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00c      	beq.n	8009282 <USBD_StdEPReq+0x11e>
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b80      	cmp	r3, #128	; 0x80
 800926c:	d009      	beq.n	8009282 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 ff56 	bl	800a124 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009278:	2180      	movs	r1, #128	; 0x80
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 ff52 	bl	800a124 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009280:	e01c      	b.n	80092bc <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fb74 	bl	8009972 <USBD_CtlError>
        break;
 800928a:	e017      	b.n	80092bc <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	885b      	ldrh	r3, [r3, #2]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d112      	bne.n	80092ba <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 ff5d 	bl	800a162 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc2a 	bl	8009b02 <USBD_CtlSendStatus>
        }
        break;
 80092ae:	e004      	b.n	80092ba <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb5d 	bl	8009972 <USBD_CtlError>
        break;
 80092b8:	e000      	b.n	80092bc <USBD_StdEPReq+0x158>
        break;
 80092ba:	bf00      	nop
      }
      break;
 80092bc:	e0a8      	b.n	8009410 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d002      	beq.n	80092ce <USBD_StdEPReq+0x16a>
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d031      	beq.n	8009330 <USBD_StdEPReq+0x1cc>
 80092cc:	e095      	b.n	80093fa <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <USBD_StdEPReq+0x180>
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b80      	cmp	r3, #128	; 0x80
 80092d8:	d004      	beq.n	80092e4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fb48 	bl	8009972 <USBD_CtlError>
          break;
 80092e2:	e08f      	b.n	8009404 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da0b      	bge.n	8009304 <USBD_StdEPReq+0x1a0>
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	3310      	adds	r3, #16
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	3304      	adds	r3, #4
 8009302:	e00a      	b.n	800931a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800930a:	4613      	mov	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4413      	add	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2202      	movs	r2, #2
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb8c 	bl	8009a46 <USBD_CtlSendData>
          break;
 800932e:	e069      	b.n	8009404 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009334:	2b00      	cmp	r3, #0
 8009336:	da11      	bge.n	800935c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	f003 020f 	and.w	r2, r3, #15
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	3318      	adds	r3, #24
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d117      	bne.n	8009382 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fb0c 	bl	8009972 <USBD_CtlError>
            break;
 800935a:	e053      	b.n	8009404 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	f003 020f 	and.w	r2, r3, #15
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 faf9 	bl	8009972 <USBD_CtlError>
            break;
 8009380:	e040      	b.n	8009404 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009386:	2b00      	cmp	r3, #0
 8009388:	da0b      	bge.n	80093a2 <USBD_StdEPReq+0x23e>
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	3310      	adds	r3, #16
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4413      	add	r3, r2
 800939e:	3304      	adds	r3, #4
 80093a0:	e00a      	b.n	80093b8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4413      	add	r3, r2
 80093b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <USBD_StdEPReq+0x262>
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b80      	cmp	r3, #128	; 0x80
 80093c4:	d103      	bne.n	80093ce <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	e00e      	b.n	80093ec <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fee4 	bl	800a1a0 <USBD_LL_IsStallEP>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	e002      	b.n	80093ec <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2202      	movs	r2, #2
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fb27 	bl	8009a46 <USBD_CtlSendData>
          break;
 80093f8:	e004      	b.n	8009404 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fab8 	bl	8009972 <USBD_CtlError>
        break;
 8009402:	bf00      	nop
      }
      break;
 8009404:	e004      	b.n	8009410 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fab2 	bl	8009972 <USBD_CtlError>
      break;
 800940e:	bf00      	nop
    }
    break;
 8009410:	e004      	b.n	800941c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 faac 	bl	8009972 <USBD_CtlError>
    break;
 800941a:	bf00      	nop
  }

  return ret;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	885b      	ldrh	r3, [r3, #2]
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	2b06      	cmp	r3, #6
 800943e:	f200 80c9 	bhi.w	80095d4 <USBD_GetDescriptor+0x1ac>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <USBD_GetDescriptor+0x20>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009465 	.word	0x08009465
 800944c:	0800947d 	.word	0x0800947d
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080095d5 	.word	0x080095d5
 8009458:	080095d5 	.word	0x080095d5
 800945c:	08009581 	.word	0x08009581
 8009460:	080095a7 	.word	0x080095a7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7c12      	ldrb	r2, [r2, #16]
 8009470:	f107 010a 	add.w	r1, r7, #10
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
    break;
 800947a:	e0b0      	b.n	80095de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7c1b      	ldrb	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10d      	bne.n	80094a0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800948a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948c:	f107 020a 	add.w	r2, r7, #10
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	2202      	movs	r2, #2
 800949c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800949e:	e09e      	b.n	80095de <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	f107 020a 	add.w	r2, r7, #10
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	2202      	movs	r2, #2
 80094b8:	701a      	strb	r2, [r3, #0]
    break;
 80094ba:	e090      	b.n	80095de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	885b      	ldrh	r3, [r3, #2]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b05      	cmp	r3, #5
 80094c4:	d856      	bhi.n	8009574 <USBD_GetDescriptor+0x14c>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <USBD_GetDescriptor+0xa4>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094e5 	.word	0x080094e5
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	08009515 	.word	0x08009515
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	08009545 	.word	0x08009545
 80094e0:	0800955d 	.word	0x0800955d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	7c12      	ldrb	r2, [r2, #16]
 80094f0:	f107 010a 	add.w	r1, r7, #10
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      break;
 80094fa:	e040      	b.n	800957e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	7c12      	ldrb	r2, [r2, #16]
 8009508:	f107 010a 	add.w	r1, r7, #10
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
 8009510:	60f8      	str	r0, [r7, #12]
      break;
 8009512:	e034      	b.n	800957e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	7c12      	ldrb	r2, [r2, #16]
 8009520:	f107 010a 	add.w	r1, r7, #10
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3
 8009528:	60f8      	str	r0, [r7, #12]
      break;
 800952a:	e028      	b.n	800957e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 010a 	add.w	r1, r7, #10
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
      break;
 8009542:	e01c      	b.n	800957e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7c12      	ldrb	r2, [r2, #16]
 8009550:	f107 010a 	add.w	r1, r7, #10
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
      break;
 800955a:	e010      	b.n	800957e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	7c12      	ldrb	r2, [r2, #16]
 8009568:	f107 010a 	add.w	r1, r7, #10
 800956c:	4610      	mov	r0, r2
 800956e:	4798      	blx	r3
 8009570:	60f8      	str	r0, [r7, #12]
      break;
 8009572:	e004      	b.n	800957e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9fb 	bl	8009972 <USBD_CtlError>
      return;
 800957c:	e04b      	b.n	8009616 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800957e:	e02e      	b.n	80095de <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7c1b      	ldrb	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d109      	bne.n	800959c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	f107 020a 	add.w	r2, r7, #10
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
      break;
 800959a:	e020      	b.n	80095de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f9e7 	bl	8009972 <USBD_CtlError>
      return;
 80095a4:	e037      	b.n	8009616 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	7c1b      	ldrb	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10d      	bne.n	80095ca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	f107 020a 	add.w	r2, r7, #10
 80095ba:	4610      	mov	r0, r2
 80095bc:	4798      	blx	r3
 80095be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	2207      	movs	r2, #7
 80095c6:	701a      	strb	r2, [r3, #0]
      break;
 80095c8:	e009      	b.n	80095de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9d0 	bl	8009972 <USBD_CtlError>
      return;
 80095d2:	e020      	b.n	8009616 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9cb 	bl	8009972 <USBD_CtlError>
    return;
 80095dc:	e01b      	b.n	8009616 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80095de:	897b      	ldrh	r3, [r7, #10]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <USBD_GetDescriptor+0x1e0>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	88db      	ldrh	r3, [r3, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00d      	beq.n	8009608 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	88da      	ldrh	r2, [r3, #6]
 80095f0:	897b      	ldrh	r3, [r7, #10]
 80095f2:	4293      	cmp	r3, r2
 80095f4:	bf28      	it	cs
 80095f6:	4613      	movcs	r3, r2
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80095fc:	897b      	ldrh	r3, [r7, #10]
 80095fe:	461a      	mov	r2, r3
 8009600:	68f9      	ldr	r1, [r7, #12]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa1f 	bl	8009a46 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	88db      	ldrh	r3, [r3, #6]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fa76 	bl	8009b02 <USBD_CtlSendStatus>
  }
}
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d130      	bne.n	8009690 <USBD_SetAddress+0x74>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d12c      	bne.n	8009690 <USBD_SetAddress+0x74>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	885b      	ldrh	r3, [r3, #2]
 800963a:	2b7f      	cmp	r3, #127	; 0x7f
 800963c:	d828      	bhi.n	8009690 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009648:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009650:	2b03      	cmp	r3, #3
 8009652:	d104      	bne.n	800965e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f98b 	bl	8009972 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965c:	e01d      	b.n	800969a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	7bfa      	ldrb	r2, [r7, #15]
 8009662:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fdc4 	bl	800a1f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa46 	bl	8009b02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009684:	e009      	b.n	800969a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968e:	e004      	b.n	800969a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f96d 	bl	8009972 <USBD_CtlError>
  }
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	885b      	ldrh	r3, [r3, #2]
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	4b41      	ldr	r3, [pc, #260]	; (80097bc <USBD_SetConfig+0x118>)
 80096b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096b8:	4b40      	ldr	r3, [pc, #256]	; (80097bc <USBD_SetConfig+0x118>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d904      	bls.n	80096ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f955 	bl	8009972 <USBD_CtlError>
 80096c8:	e075      	b.n	80097b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d002      	beq.n	80096da <USBD_SetConfig+0x36>
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d023      	beq.n	8009720 <USBD_SetConfig+0x7c>
 80096d8:	e062      	b.n	80097a0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80096da:	4b38      	ldr	r3, [pc, #224]	; (80097bc <USBD_SetConfig+0x118>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01a      	beq.n	8009718 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80096e2:	4b36      	ldr	r3, [pc, #216]	; (80097bc <USBD_SetConfig+0x118>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2203      	movs	r2, #3
 80096f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096f4:	4b31      	ldr	r3, [pc, #196]	; (80097bc <USBD_SetConfig+0x118>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fa5c 	bl	8008bb8 <USBD_SetClassConfig>
 8009700:	4603      	mov	r3, r0
 8009702:	2b02      	cmp	r3, #2
 8009704:	d104      	bne.n	8009710 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f932 	bl	8009972 <USBD_CtlError>
          return;
 800970e:	e052      	b.n	80097b6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f9f6 	bl	8009b02 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009716:	e04e      	b.n	80097b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f9f2 	bl	8009b02 <USBD_CtlSendStatus>
      break;
 800971e:	e04a      	b.n	80097b6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009720:	4b26      	ldr	r3, [pc, #152]	; (80097bc <USBD_SetConfig+0x118>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d112      	bne.n	800974e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009730:	4b22      	ldr	r3, [pc, #136]	; (80097bc <USBD_SetConfig+0x118>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800973a:	4b20      	ldr	r3, [pc, #128]	; (80097bc <USBD_SetConfig+0x118>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7ff fa58 	bl	8008bf6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f9db 	bl	8009b02 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800974c:	e033      	b.n	80097b6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800974e:	4b1b      	ldr	r3, [pc, #108]	; (80097bc <USBD_SetConfig+0x118>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	429a      	cmp	r2, r3
 800975a:	d01d      	beq.n	8009798 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fa46 	bl	8008bf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800976a:	4b14      	ldr	r3, [pc, #80]	; (80097bc <USBD_SetConfig+0x118>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009774:	4b11      	ldr	r3, [pc, #68]	; (80097bc <USBD_SetConfig+0x118>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fa1c 	bl	8008bb8 <USBD_SetClassConfig>
 8009780:	4603      	mov	r3, r0
 8009782:	2b02      	cmp	r3, #2
 8009784:	d104      	bne.n	8009790 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8f2 	bl	8009972 <USBD_CtlError>
          return;
 800978e:	e012      	b.n	80097b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9b6 	bl	8009b02 <USBD_CtlSendStatus>
      break;
 8009796:	e00e      	b.n	80097b6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9b2 	bl	8009b02 <USBD_CtlSendStatus>
      break;
 800979e:	e00a      	b.n	80097b6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8e5 	bl	8009972 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80097a8:	4b04      	ldr	r3, [pc, #16]	; (80097bc <USBD_SetConfig+0x118>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fa21 	bl	8008bf6 <USBD_ClrClassConfig>
      break;
 80097b4:	bf00      	nop
    }
  }
}
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	2000035c 	.word	0x2000035c

080097c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	88db      	ldrh	r3, [r3, #6]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d004      	beq.n	80097dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8cc 	bl	8009972 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80097da:	e022      	b.n	8009822 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	dc02      	bgt.n	80097ec <USBD_GetConfig+0x2c>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc03      	bgt.n	80097f2 <USBD_GetConfig+0x32>
 80097ea:	e015      	b.n	8009818 <USBD_GetConfig+0x58>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d00b      	beq.n	8009808 <USBD_GetConfig+0x48>
 80097f0:	e012      	b.n	8009818 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3308      	adds	r3, #8
 80097fc:	2201      	movs	r2, #1
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f920 	bl	8009a46 <USBD_CtlSendData>
      break;
 8009806:	e00c      	b.n	8009822 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	2201      	movs	r2, #1
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f918 	bl	8009a46 <USBD_CtlSendData>
      break;
 8009816:	e004      	b.n	8009822 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f8a9 	bl	8009972 <USBD_CtlError>
      break;
 8009820:	bf00      	nop
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800983a:	3b01      	subs	r3, #1
 800983c:	2b02      	cmp	r3, #2
 800983e:	d81e      	bhi.n	800987e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	88db      	ldrh	r3, [r3, #6]
 8009844:	2b02      	cmp	r3, #2
 8009846:	d004      	beq.n	8009852 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f891 	bl	8009972 <USBD_CtlError>
      break;
 8009850:	e01a      	b.n	8009888 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d005      	beq.n	800986e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f043 0202 	orr.w	r2, r3, #2
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	330c      	adds	r3, #12
 8009872:	2202      	movs	r2, #2
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f8e5 	bl	8009a46 <USBD_CtlSendData>
    break;
 800987c:	e004      	b.n	8009888 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f876 	bl	8009972 <USBD_CtlError>
    break;
 8009886:	bf00      	nop
  }
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d106      	bne.n	80098b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f929 	bl	8009b02 <USBD_CtlSendStatus>
  }

}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098c8:	3b01      	subs	r3, #1
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d80b      	bhi.n	80098e6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	885b      	ldrh	r3, [r3, #2]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10c      	bne.n	80098f0 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f90f 	bl	8009b02 <USBD_CtlSendStatus>
    }
    break;
 80098e4:	e004      	b.n	80098f0 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f842 	bl	8009972 <USBD_CtlError>
    break;
 80098ee:	e000      	b.n	80098f2 <USBD_ClrFeature+0x3a>
    break;
 80098f0:	bf00      	nop
  }
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781a      	ldrb	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	785a      	ldrb	r2, [r3, #1]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	3302      	adds	r3, #2
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b29a      	uxth	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	3303      	adds	r3, #3
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b29b      	uxth	r3, r3
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	b29b      	uxth	r3, r3
 8009928:	4413      	add	r3, r2
 800992a:	b29a      	uxth	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	3304      	adds	r3, #4
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b29a      	uxth	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	3305      	adds	r3, #5
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	021b      	lsls	r3, r3, #8
 8009942:	b29b      	uxth	r3, r3
 8009944:	4413      	add	r3, r2
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	3306      	adds	r3, #6
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	3307      	adds	r3, #7
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	b29b      	uxth	r3, r3
 8009960:	4413      	add	r3, r2
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	80da      	strh	r2, [r3, #6]

}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800997c:	2180      	movs	r1, #128	; 0x80
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fbd0 	bl	800a124 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fbcc 	bl	800a124 <USBD_LL_StallEP>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d032      	beq.n	8009a10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f834 	bl	8009a18 <USBD_GetLen>
 80099b0:	4603      	mov	r3, r0
 80099b2:	3301      	adds	r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	75fa      	strb	r2, [r7, #23]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4413      	add	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	7812      	ldrb	r2, [r2, #0]
 80099ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	75fa      	strb	r2, [r7, #23]
 80099d6:	461a      	mov	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4413      	add	r3, r2
 80099dc:	2203      	movs	r2, #3
 80099de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80099e0:	e012      	b.n	8009a08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	60fa      	str	r2, [r7, #12]
 80099e8:	7dfa      	ldrb	r2, [r7, #23]
 80099ea:	1c51      	adds	r1, r2, #1
 80099ec:	75f9      	strb	r1, [r7, #23]
 80099ee:	4611      	mov	r1, r2
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	440a      	add	r2, r1
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	75fa      	strb	r2, [r7, #23]
 80099fe:	461a      	mov	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4413      	add	r3, r2
 8009a04:	2200      	movs	r2, #0
 8009a06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e8      	bne.n	80099e2 <USBD_GetString+0x4e>
    }
  }
}
 8009a10:	bf00      	nop
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009a24:	e005      	b.n	8009a32 <USBD_GetLen+0x1a>
    {
        len++;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f5      	bne.n	8009a26 <USBD_GetLen+0xe>
    }

    return len;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr

08009a46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009a5c:	88fa      	ldrh	r2, [r7, #6]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a62:	88fa      	ldrh	r2, [r7, #6]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fbe1 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fbcf 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	4613      	mov	r3, r2
 8009aae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2203      	movs	r2, #3
 8009ab4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009ab8:	88fa      	ldrh	r2, [r7, #6]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009ac0:	88fa      	ldrh	r2, [r7, #6]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	2100      	movs	r1, #0
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fbd4 	bl	800a27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aec:	88fb      	ldrh	r3, [r7, #6]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	2100      	movs	r1, #0
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fbc2 	bl	800a27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b12:	2300      	movs	r3, #0
 8009b14:	2200      	movs	r2, #0
 8009b16:	2100      	movs	r1, #0
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fb8c 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2205      	movs	r2, #5
 8009b34:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb9c 	bl	800a27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b54:	2200      	movs	r2, #0
 8009b56:	4912      	ldr	r1, [pc, #72]	; (8009ba0 <MX_USB_DEVICE_Init+0x50>)
 8009b58:	4812      	ldr	r0, [pc, #72]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fe ffd3 	bl	8008b04 <USBD_Init>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b64:	f7f7 fb20 	bl	80011a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b68:	490f      	ldr	r1, [pc, #60]	; (8009ba8 <MX_USB_DEVICE_Init+0x58>)
 8009b6a:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b6c:	f7fe fff5 	bl	8008b5a <USBD_RegisterClass>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b76:	f7f7 fb17 	bl	80011a8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b7a:	490c      	ldr	r1, [pc, #48]	; (8009bac <MX_USB_DEVICE_Init+0x5c>)
 8009b7c:	4809      	ldr	r0, [pc, #36]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b7e:	f7fe ffab 	bl	8008ad8 <USBD_CUSTOM_HID_RegisterInterface>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b88:	f7f7 fb0e 	bl	80011a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b8c:	4805      	ldr	r0, [pc, #20]	; (8009ba4 <MX_USB_DEVICE_Init+0x54>)
 8009b8e:	f7fe fffd 	bl	8008b8c <USBD_Start>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b98:	f7f7 fb06 	bl	80011a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b9c:	bf00      	nop
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000134 	.word	0x20000134
 8009ba4:	20000360 	.word	0x20000360
 8009ba8:	2000000c 	.word	0x2000000c
 8009bac:	20000124 	.word	0x20000124

08009bb0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr

08009bbe <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	460a      	mov	r2, r1
 8009bd6:	71fb      	strb	r3, [r7, #7]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009bdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr

08009be8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2212      	movs	r2, #18
 8009bf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bfa:	4b03      	ldr	r3, [pc, #12]	; (8009c08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc80      	pop	{r7}
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000150 	.word	0x20000150

08009c0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2204      	movs	r2, #4
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20000164 	.word	0x20000164

08009c30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4907      	ldr	r1, [pc, #28]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c46:	4808      	ldr	r0, [pc, #32]	; (8009c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c48:	f7ff fea4 	bl	8009994 <USBD_GetString>
 8009c4c:	e004      	b.n	8009c58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	4904      	ldr	r1, [pc, #16]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c52:	4805      	ldr	r0, [pc, #20]	; (8009c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c54:	f7ff fe9e 	bl	8009994 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c58:	4b02      	ldr	r3, [pc, #8]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	200005fc 	.word	0x200005fc
 8009c68:	0800a3b8 	.word	0x0800a3b8

08009c6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c7c:	4804      	ldr	r0, [pc, #16]	; (8009c90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c7e:	f7ff fe89 	bl	8009994 <USBD_GetString>
  return USBD_StrDesc;
 8009c82:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	200005fc 	.word	0x200005fc
 8009c90:	0800a3d8 	.word	0x0800a3d8

08009c94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	221a      	movs	r2, #26
 8009ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ca6:	f000 f843 	bl	8009d30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009caa:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000168 	.word	0x20000168

08009cb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	4907      	ldr	r1, [pc, #28]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cce:	4808      	ldr	r0, [pc, #32]	; (8009cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cd0:	f7ff fe60 	bl	8009994 <USBD_GetString>
 8009cd4:	e004      	b.n	8009ce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cda:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cdc:	f7ff fe5a 	bl	8009994 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	200005fc 	.word	0x200005fc
 8009cf0:	0800a3ec 	.word	0x0800a3ec

08009cf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4907      	ldr	r1, [pc, #28]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d0a:	4808      	ldr	r0, [pc, #32]	; (8009d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d0c:	f7ff fe42 	bl	8009994 <USBD_GetString>
 8009d10:	e004      	b.n	8009d1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	4904      	ldr	r1, [pc, #16]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d16:	4805      	ldr	r0, [pc, #20]	; (8009d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d18:	f7ff fe3c 	bl	8009994 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200005fc 	.word	0x200005fc
 8009d2c:	0800a400 	.word	0x0800a400

08009d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <Get_SerialNum+0x44>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <Get_SerialNum+0x48>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <Get_SerialNum+0x4c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d56:	2208      	movs	r2, #8
 8009d58:	4909      	ldr	r1, [pc, #36]	; (8009d80 <Get_SerialNum+0x50>)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f814 	bl	8009d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d60:	2204      	movs	r2, #4
 8009d62:	4908      	ldr	r1, [pc, #32]	; (8009d84 <Get_SerialNum+0x54>)
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f000 f80f 	bl	8009d88 <IntToUnicode>
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	1ff80050 	.word	0x1ff80050
 8009d78:	1ff80054 	.word	0x1ff80054
 8009d7c:	1ff80058 	.word	0x1ff80058
 8009d80:	2000016a 	.word	0x2000016a
 8009d84:	2000017a 	.word	0x2000017a

08009d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
 8009d9e:	e027      	b.n	8009df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0f1b      	lsrs	r3, r3, #28
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d80b      	bhi.n	8009dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	0f1b      	lsrs	r3, r3, #28
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4619      	mov	r1, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	440b      	add	r3, r1
 8009db8:	3230      	adds	r2, #48	; 0x30
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e00a      	b.n	8009dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	0f1b      	lsrs	r3, r3, #28
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	440b      	add	r3, r1
 8009dd0:	3237      	adds	r2, #55	; 0x37
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	3301      	adds	r3, #1
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	4413      	add	r3, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	3301      	adds	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
 8009df0:	7dfa      	ldrb	r2, [r7, #23]
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d3d3      	bcc.n	8009da0 <IntToUnicode+0x18>
  }
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr

08009e04 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d106      	bne.n	8009e24 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <HAL_PCDEx_SetConnectionState+0x38>)
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4a08      	ldr	r2, [pc, #32]	; (8009e3c <HAL_PCDEx_SetConnectionState+0x38>)
 8009e1c:	f043 0301 	orr.w	r3, r3, #1
 8009e20:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009e22:	e005      	b.n	8009e30 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009e24:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <HAL_PCDEx_SetConnectionState+0x38>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4a04      	ldr	r2, [pc, #16]	; (8009e3c <HAL_PCDEx_SetConnectionState+0x38>)
 8009e2a:	f023 0301 	bic.w	r3, r3, #1
 8009e2e:	6053      	str	r3, [r2, #4]
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	40010000 	.word	0x40010000

08009e40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a0d      	ldr	r2, [pc, #52]	; (8009e84 <HAL_PCD_MspInit+0x44>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d113      	bne.n	8009e7a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e52:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <HAL_PCD_MspInit+0x48>)
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	4a0c      	ldr	r2, [pc, #48]	; (8009e88 <HAL_PCD_MspInit+0x48>)
 8009e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e5c:	6253      	str	r3, [r2, #36]	; 0x24
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <HAL_PCD_MspInit+0x48>)
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	2014      	movs	r0, #20
 8009e70:	f7f8 faf7 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e74:	2014      	movs	r0, #20
 8009e76:	f7f8 fb10 	bl	800249a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40005c00 	.word	0x40005c00
 8009e88:	40023800 	.word	0x40023800

08009e8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f7fe feba 	bl	8008c1c <USBD_LL_SetupStage>
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	440b      	add	r3, r1
 8009ed0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f7fe feec 	bl	8008cb6 <USBD_LL_DataOutStage>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ef8:	78fa      	ldrb	r2, [r7, #3]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	440b      	add	r3, r1
 8009f06:	333c      	adds	r3, #60	; 0x3c
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f7fe ff43 	bl	8008d98 <USBD_LL_DataInStage>
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff f84e 	bl	8008fca <USBD_LL_SOF>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d001      	beq.n	8009f4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f4a:	f7f7 f92d 	bl	80011a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff f803 	bl	8008f64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe ffbc 	bl	8008ee2 <USBD_LL_Reset>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fffd 	bl	8008f82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f90:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <HAL_PCD_SuspendCallback+0x30>)
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	4a03      	ldr	r2, [pc, #12]	; (8009fa4 <HAL_PCD_SuspendCallback+0x30>)
 8009f96:	f043 0306 	orr.w	r3, r3, #6
 8009f9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	e000ed00 	.word	0xe000ed00

08009fa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fff7 	bl	8008faa <USBD_LL_Resume>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fcc:	4a23      	ldr	r2, [pc, #140]	; (800a05c <USBD_LL_Init+0x98>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a21      	ldr	r2, [pc, #132]	; (800a05c <USBD_LL_Init+0x98>)
 8009fd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009fdc:	4b1f      	ldr	r3, [pc, #124]	; (800a05c <USBD_LL_Init+0x98>)
 8009fde:	4a20      	ldr	r2, [pc, #128]	; (800a060 <USBD_LL_Init+0x9c>)
 8009fe0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fe2:	4b1e      	ldr	r3, [pc, #120]	; (800a05c <USBD_LL_Init+0x98>)
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fe8:	4b1c      	ldr	r3, [pc, #112]	; (800a05c <USBD_LL_Init+0x98>)
 8009fea:	2202      	movs	r2, #2
 8009fec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fee:	4b1b      	ldr	r3, [pc, #108]	; (800a05c <USBD_LL_Init+0x98>)
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ff4:	4b19      	ldr	r3, [pc, #100]	; (800a05c <USBD_LL_Init+0x98>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ffa:	4b18      	ldr	r3, [pc, #96]	; (800a05c <USBD_LL_Init+0x98>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a000:	4816      	ldr	r0, [pc, #88]	; (800a05c <USBD_LL_Init+0x98>)
 800a002:	f7f8 fd92 	bl	8002b2a <HAL_PCD_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a00c:	f7f7 f8cc 	bl	80011a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a016:	2318      	movs	r3, #24
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	f7fa f958 	bl	80042d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a026:	2358      	movs	r3, #88	; 0x58
 800a028:	2200      	movs	r2, #0
 800a02a:	2180      	movs	r1, #128	; 0x80
 800a02c:	f7fa f950 	bl	80042d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a036:	2398      	movs	r3, #152	; 0x98
 800a038:	2200      	movs	r2, #0
 800a03a:	2181      	movs	r1, #129	; 0x81
 800a03c:	f7fa f948 	bl	80042d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a046:	23d8      	movs	r3, #216	; 0xd8
 800a048:	2200      	movs	r2, #0
 800a04a:	2101      	movs	r1, #1
 800a04c:	f7fa f940 	bl	80042d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	200007fc 	.word	0x200007fc
 800a060:	40005c00 	.word	0x40005c00

0800a064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f8 fe33 	bl	8002ce6 <HAL_PCD_Start>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f932 	bl	800a2f0 <USBD_Get_USB_Status>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a090:	7bbb      	ldrb	r3, [r7, #14]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	70fb      	strb	r3, [r7, #3]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70bb      	strb	r3, [r7, #2]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0c2:	78bb      	ldrb	r3, [r7, #2]
 800a0c4:	883a      	ldrh	r2, [r7, #0]
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	f7f8 ff4f 	bl	8002f6a <HAL_PCD_EP_Open>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f90c 	bl	800a2f0 <USBD_Get_USB_Status>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7f8 ff96 	bl	8003036 <HAL_PCD_EP_Close>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f8ed 	bl	800a2f0 <USBD_Get_USB_Status>
 800a116:	4603      	mov	r3, r0
 800a118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f7f9 f83f 	bl	80031c6 <HAL_PCD_EP_SetStall>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f8ce 	bl	800a2f0 <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7f9 f872 	bl	800326a <HAL_PCD_EP_ClrStall>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8af 	bl	800a2f0 <USBD_Get_USB_Status>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a196:	7bbb      	ldrb	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da0c      	bge.n	800a1d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	440b      	add	r3, r1
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	e00b      	b.n	800a1ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1dc:	68f9      	ldr	r1, [r7, #12]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bc80      	pop	{r7}
 800a1f6:	4770      	bx	lr

0800a1f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7f8 fe82 	bl	8002f20 <HAL_PCD_SetAddress>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f864 	bl	800a2f0 <USBD_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	461a      	mov	r2, r3
 800a242:	460b      	mov	r3, r1
 800a244:	72fb      	strb	r3, [r7, #11]
 800a246:	4613      	mov	r3, r2
 800a248:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	7af9      	ldrb	r1, [r7, #11]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f7f8 ff6f 	bl	8003140 <HAL_PCD_EP_Transmit>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f841 	bl	800a2f0 <USBD_Get_USB_Status>
 800a26e:	4603      	mov	r3, r0
 800a270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a272:	7dbb      	ldrb	r3, [r7, #22]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	607a      	str	r2, [r7, #4]
 800a286:	461a      	mov	r2, r3
 800a288:	460b      	mov	r3, r1
 800a28a:	72fb      	strb	r3, [r7, #11]
 800a28c:	4613      	mov	r3, r2
 800a28e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a29e:	893b      	ldrh	r3, [r7, #8]
 800a2a0:	7af9      	ldrb	r1, [r7, #11]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	f7f8 ff0f 	bl	80030c6 <HAL_PCD_EP_Receive>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 f81e 	bl	800a2f0 <USBD_Get_USB_Status>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a2cc:	4b02      	ldr	r3, [pc, #8]	; (800a2d8 <USBD_static_malloc+0x14>)
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr
 800a2d8:	20000ae8 	.word	0x20000ae8

0800a2dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]

}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2fe:	79fb      	ldrb	r3, [r7, #7]
 800a300:	2b03      	cmp	r3, #3
 800a302:	d817      	bhi.n	800a334 <USBD_Get_USB_Status+0x44>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <USBD_Get_USB_Status+0x1c>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a323 	.word	0x0800a323
 800a314:	0800a329 	.word	0x0800a329
 800a318:	0800a32f 	.word	0x0800a32f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
    break;
 800a320:	e00b      	b.n	800a33a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a322:	2302      	movs	r3, #2
 800a324:	73fb      	strb	r3, [r7, #15]
    break;
 800a326:	e008      	b.n	800a33a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a328:	2301      	movs	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
    break;
 800a32c:	e005      	b.n	800a33a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a32e:	2302      	movs	r3, #2
 800a330:	73fb      	strb	r3, [r7, #15]
    break;
 800a332:	e002      	b.n	800a33a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a334:	2302      	movs	r3, #2
 800a336:	73fb      	strb	r3, [r7, #15]
    break;
 800a338:	bf00      	nop
  }
  return usb_status;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bc80      	pop	{r7}
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop

0800a348 <__libc_init_array>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	2600      	movs	r6, #0
 800a34c:	4d0c      	ldr	r5, [pc, #48]	; (800a380 <__libc_init_array+0x38>)
 800a34e:	4c0d      	ldr	r4, [pc, #52]	; (800a384 <__libc_init_array+0x3c>)
 800a350:	1b64      	subs	r4, r4, r5
 800a352:	10a4      	asrs	r4, r4, #2
 800a354:	42a6      	cmp	r6, r4
 800a356:	d109      	bne.n	800a36c <__libc_init_array+0x24>
 800a358:	f000 f822 	bl	800a3a0 <_init>
 800a35c:	2600      	movs	r6, #0
 800a35e:	4d0a      	ldr	r5, [pc, #40]	; (800a388 <__libc_init_array+0x40>)
 800a360:	4c0a      	ldr	r4, [pc, #40]	; (800a38c <__libc_init_array+0x44>)
 800a362:	1b64      	subs	r4, r4, r5
 800a364:	10a4      	asrs	r4, r4, #2
 800a366:	42a6      	cmp	r6, r4
 800a368:	d105      	bne.n	800a376 <__libc_init_array+0x2e>
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a370:	4798      	blx	r3
 800a372:	3601      	adds	r6, #1
 800a374:	e7ee      	b.n	800a354 <__libc_init_array+0xc>
 800a376:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37a:	4798      	blx	r3
 800a37c:	3601      	adds	r6, #1
 800a37e:	e7f2      	b.n	800a366 <__libc_init_array+0x1e>
 800a380:	0800a43c 	.word	0x0800a43c
 800a384:	0800a43c 	.word	0x0800a43c
 800a388:	0800a43c 	.word	0x0800a43c
 800a38c:	0800a440 	.word	0x0800a440

0800a390 <memset>:
 800a390:	4603      	mov	r3, r0
 800a392:	4402      	add	r2, r0
 800a394:	4293      	cmp	r3, r2
 800a396:	d100      	bne.n	800a39a <memset+0xa>
 800a398:	4770      	bx	lr
 800a39a:	f803 1b01 	strb.w	r1, [r3], #1
 800a39e:	e7f9      	b.n	800a394 <memset+0x4>

0800a3a0 <_init>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	bf00      	nop
 800a3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a6:	bc08      	pop	{r3}
 800a3a8:	469e      	mov	lr, r3
 800a3aa:	4770      	bx	lr

0800a3ac <_fini>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr
