
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a278  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a438  0800a438  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a5c4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a5c4  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a6  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343a  00000000  00000000  00033653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cb0  00000000  00000000  00038978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c1  00000000  00000000  00050628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f12  00000000  00000000  000658e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  000ec84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a39c 	.word	0x0800a39c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a39c 	.word	0x0800a39c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe66 	bl	800178e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f92d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa8f 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa6f 	bl	8000fac <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f83d 	bl	8009b4c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9dd 	bl	8000e90 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f973 	bl	8000dc0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4883      	ldr	r0, [pc, #524]	; (8000ce8 <main+0x230>)
 8000adc:	f004 fa3c 	bl	8004f58 <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4881      	ldr	r0, [pc, #516]	; (8000ce8 <main+0x230>)
 8000ae4:	f004 faca 	bl	800507c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	487f      	ldr	r0, [pc, #508]	; (8000ce8 <main+0x230>)
 8000aec:	f004 fac6 	bl	800507c <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c7e      	ldr	r4, [pc, #504]	; (8000cec <main+0x234>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a7e      	ldr	r2, [pc, #504]	; (8000cf0 <main+0x238>)
 8000af6:	497f      	ldr	r1, [pc, #508]	; (8000cf4 <main+0x23c>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc9b 	bl	8001434 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
  	  event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a75      	ldr	r2, [pc, #468]	; (8000cf8 <main+0x240>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <main+0x244>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b6d      	ldr	r3, [pc, #436]	; (8000cf8 <main+0x240>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 80a0 	bhi.w	8000c8a <main+0x1d2>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b8d 	.word	0x08000b8d
 8000b5c:	08000b95 	.word	0x08000b95
 8000b60:	08000c83 	.word	0x08000c83
		case EVENT_WAIT:
			controller.buttons.a = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000b64:	2104      	movs	r1, #4
 8000b66:	4866      	ldr	r0, [pc, #408]	; (8000d00 <main+0x248>)
 8000b68:	f001 ffc6 	bl	8002af8 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a63      	ldr	r2, [pc, #396]	; (8000d04 <main+0x24c>)
 8000b76:	7853      	ldrb	r3, [r2, #1]
 8000b78:	f361 1304 	bfi	r3, r1, #4, #1
 8000b7c:	7053      	strb	r3, [r2, #1]
			break;
 8000b7e:	e084      	b.n	8000c8a <main+0x1d2>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b80:	2202      	movs	r2, #2
 8000b82:	495c      	ldr	r1, [pc, #368]	; (8000cf4 <main+0x23c>)
 8000b84:	4860      	ldr	r0, [pc, #384]	; (8000d08 <main+0x250>)
 8000b86:	f000 ffb7 	bl	8001af8 <HAL_ADC_Start_DMA>
			break;
 8000b8a:	e07e      	b.n	8000c8a <main+0x1d2>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fa63 	bl	8001058 <write_next_event_state>
			break;
 8000b92:	e07a      	b.n	8000c8a <main+0x1d2>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b94:	4855      	ldr	r0, [pc, #340]	; (8000cec <main+0x234>)
 8000b96:	f000 fc99 	bl	80014cc <Joystick_Update>
			uint8_t invert_x = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000ba6:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <main+0x254>)
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000baa:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <main+0x254>)
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000bae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <main+0x234>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <main+0x234>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bc6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <main+0x120>
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <main+0x234>)
 8000bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	e001      	b.n	8000bdc <main+0x124>
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0x234>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bde:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <main+0x24c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <main+0x24c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bee:	f7ff fd8f 	bl	8000710 <__aeabi_fcmpgt>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <main+0x154>
 8000bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c02:	f7ff fd67 	bl	80006d4 <__aeabi_fcmplt>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <main+0x17c>
				controller.joysticks._bits[1] += (int16_t)(val_x * -(float)INT16_MAX);
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <main+0x24c>)
 8000c0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c12:	b29c      	uxth	r4, r3
 8000c14:	493e      	ldr	r1, [pc, #248]	; (8000d10 <main+0x258>)
 8000c16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c18:	f7ff fbbe 	bl	8000398 <__aeabi_fmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd80 	bl	8000724 <__aeabi_f2iz>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4423      	add	r3, r4
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <main+0x24c>)
 8000c32:	809a      	strh	r2, [r3, #4]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c38:	f7ff fd6a 	bl	8000710 <__aeabi_fcmpgt>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10a      	bne.n	8000c58 <main+0x1a0>
 8000c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fd42 	bl	80006d4 <__aeabi_fcmplt>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d100      	bne.n	8000c58 <main+0x1a0>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c56:	e018      	b.n	8000c8a <main+0x1d2>
				controller.joysticks._bits[0] += (int16_t)(val_y * (float)INT16_MAX);
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <main+0x24c>)
 8000c5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c5e:	b29c      	uxth	r4, r3
 8000c60:	492c      	ldr	r1, [pc, #176]	; (8000d14 <main+0x25c>)
 8000c62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c64:	f7ff fb98 	bl	8000398 <__aeabi_fmul>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fd5a 	bl	8000724 <__aeabi_f2iz>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4423      	add	r3, r4
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x24c>)
 8000c7e:	805a      	strh	r2, [r3, #2]
			break;
 8000c80:	e003      	b.n	8000c8a <main+0x1d2>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <main+0x24c>)
 8000c84:	f000 fa2c 	bl	80010e0 <Send_HID_Data>
			break;
 8000c88:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <main+0x244>)
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <main+0x260>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d00d      	beq.n	8000cb2 <main+0x1fa>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <main+0x244>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	425a      	negs	r2, r3
 8000c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ca6:	bf58      	it	pl
 8000ca8:	4253      	negpl	r3, r2
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <main+0x244>)
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e002      	b.n	8000cb8 <main+0x200>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f9d0 	bl	8001058 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <main+0x260>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <main+0x244>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d306      	bcc.n	8000cd2 <main+0x21a>
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0x260>)
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0x244>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	e007      	b.n	8000ce2 <main+0x22a>
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <main+0x260>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <main+0x244>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <main+0x264>)
 8000ce4:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000ce6:	e728      	b.n	8000b3a <main+0x82>
 8000ce8:	20000238 	.word	0x20000238
 8000cec:	20000300 	.word	0x20000300
 8000cf0:	200002fe 	.word	0x200002fe
 8000cf4:	200002fc 	.word	0x200002fc
 8000cf8:	20000278 	.word	0x20000278
 8000cfc:	200002f8 	.word	0x200002f8
 8000d00:	40020000 	.word	0x40020000
 8000d04:	2000033c 	.word	0x2000033c
 8000d08:	200001a0 	.word	0x200001a0
 8000d0c:	3d4ccccd 	.word	0x3d4ccccd
 8000d10:	c6fffe00 	.word	0xc6fffe00
 8000d14:	46fffe00 	.word	0x46fffe00
 8000d18:	200002f9 	.word	0x200002f9
 8000d1c:	200002fa 	.word	0x200002fa

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b092      	sub	sp, #72	; 0x48
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f009 fb2c 	bl	800a38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <SystemClock_Config+0x9c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <SystemClock_Config+0x9c>)
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d50:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d52:	2303      	movs	r3, #3
 8000d54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d72:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fae7 	bl	8004350 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d88:	f000 fa0c 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2303      	movs	r3, #3
 8000d92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fe03 	bl	80049b0 <HAL_RCC_ClockConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db0:	f000 f9f8 	bl	80011a4 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3748      	adds	r7, #72	; 0x48
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <MX_ADC_Init+0xcc>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dee:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e20:	2210      	movs	r2, #16
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e34:	f000 fd1a 	bl	800186c <HAL_ADC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8000e3e:	f000 f9b1 	bl	80011a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e54:	f000 fffa 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 f9a1 	bl	80011a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC_Init+0xc8>)
 8000e70:	f000 ffec 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000e7a:	f000 f993 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001a0 	.word	0x200001a0
 8000e8c:	40012400 	.word	0x40012400

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ed0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee2:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000ee4:	f003 fff8 	bl	8004ed8 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000eee:	f000 f959 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	4619      	mov	r1, r3
 8000efe:	482a      	ldr	r0, [pc, #168]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f00:	f004 facc 	bl	800549c <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f0a:	f000 f94b 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f10:	f004 f86c 	bl	8004fec <HAL_TIM_OC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f1a:	f000 f943 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f2e:	f004 fdaf 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f38:	f000 f934 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f40:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f56:	f004 fa49 	bl	80053ec <HAL_TIM_OC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f60:	f000 f920 	bl	80011a4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0208 	orr.w	r2, r2, #8
 8000f72:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f74:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f82:	f004 fa33 	bl	80053ec <HAL_TIM_OC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f8c:	f000 f90a 	bl	80011a4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <MX_TIM2_Init+0x118>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f9e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000238 	.word	0x20000238

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_DMA_Init+0x38>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f001 fa45 	bl	800245e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd4:	200b      	movs	r0, #11
 8000fd6:	f001 fa5e 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_GPIO_Init+0x68>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <MX_GPIO_Init+0x68>)
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_GPIO_Init+0x68>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_GPIO_Init+0x68>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <MX_GPIO_Init+0x68>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_GPIO_Init+0x68>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800102e:	2304      	movs	r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0x6c>)
 8001042:	f001 fbd9 	bl	80027f8 <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000

08001058 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <write_next_event_state+0x3c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	425a      	negs	r2, r3
 800106a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001072:	bf58      	it	pl
 8001074:	4253      	negpl	r3, r2
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <write_next_event_state+0x3c>)
 800107a:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <write_next_event_state+0x3c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <write_next_event_state+0x40>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	5453      	strb	r3, [r2, r1]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200002f9 	.word	0x200002f9
 8001098:	20000278 	.word	0x20000278

0800109c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d002      	beq.n	80010b2 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d004      	beq.n	80010ba <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 80010b0:	e007      	b.n	80010c2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ffd0 	bl	8001058 <write_next_event_state>
			break;
 80010b8:	e003      	b.n	80010c2 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 80010ba:	2002      	movs	r0, #2
 80010bc:	f7ff ffcc 	bl	8001058 <write_next_event_state>
			break;
 80010c0:	bf00      	nop
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f7ff ffc0 	bl	8001058 <write_next_event_state>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Send_HID_Data>:

uint8_t Send_HID_Data(Controller_HandleTypeDef* controller){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <Send_HID_Data+0xbc>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <Send_HID_Data+0xbc>)
 80010f6:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <Send_HID_Data+0xbc>)
 8001104:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <Send_HID_Data+0xbc>)
 8001110:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001118:	121b      	asrs	r3, r3, #8
 800111a:	b21b      	sxth	r3, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <Send_HID_Data+0xbc>)
 8001120:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <Send_HID_Data+0xbc>)
 800112c:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001134:	121b      	asrs	r3, r3, #8
 8001136:	b21b      	sxth	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <Send_HID_Data+0xbc>)
 800113c:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <Send_HID_Data+0xbc>)
 8001148:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001150:	121b      	asrs	r3, r3, #8
 8001152:	b21b      	sxth	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <Send_HID_Data+0xbc>)
 8001158:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <Send_HID_Data+0xbc>)
 8001164:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800116c:	121b      	asrs	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <Send_HID_Data+0xbc>)
 8001174:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a9a      	ldrb	r2, [r3, #10]
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <Send_HID_Data+0xbc>)
 800117c:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7ada      	ldrb	r2, [r3, #11]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <Send_HID_Data+0xbc>)
 8001184:	731a      	strb	r2, [r3, #12]
	return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8001186:	220d      	movs	r2, #13
 8001188:	4904      	ldr	r1, [pc, #16]	; (800119c <Send_HID_Data+0xbc>)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <Send_HID_Data+0xc0>)
 800118c:	f007 fbea 	bl	8008964 <USBD_CUSTOM_HID_SendReport>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000348 	.word	0x20000348
 80011a0:	20000360 	.word	0x20000360

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_MspInit+0x58>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_MspInit+0x58>)
 80011bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c0:	6253      	str	r3, [r2, #36]	; 0x24
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_MspInit+0x58>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_MspInit+0x58>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_MspInit+0x58>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_MspInit+0x58>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_MspInit+0x58>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_MspInit+0x58>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6253      	str	r3, [r2, #36]	; 0x24
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_MspInit+0x58>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <HAL_ADC_MspInit+0xd4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d154      	bne.n	80012d8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_ADC_MspInit+0xd8>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800125e:	2303      	movs	r3, #3
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	481d      	ldr	r0, [pc, #116]	; (80012e8 <HAL_ADC_MspInit+0xdc>)
 8001272:	f001 fac1 	bl	80027f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_ADC_MspInit+0xe4>)
 800127a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 8001298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 80012a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 80012ae:	f001 f90d 	bl	80024cc <HAL_DMA_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80012b8:	f7ff ff74 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_ADC_MspInit+0xe0>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2101      	movs	r1, #1
 80012cc:	2012      	movs	r0, #18
 80012ce:	f001 f8c6 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012d2:	2012      	movs	r0, #18
 80012d4:	f001 f8df 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40012400 	.word	0x40012400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	200001f4 	.word	0x200001f4
 80012f0:	40026008 	.word	0x40026008

080012f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d113      	bne.n	800132e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6253      	str	r3, [r2, #36]	; 0x24
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201c      	movs	r0, #28
 8001324:	f001 f89b 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001328:	201c      	movs	r0, #28
 800132a:	f001 f8b4 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001382:	f000 fa57 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Channel1_IRQHandler+0x10>)
 8001392:	f001 f953 	bl	800263c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001f4 	.word	0x200001f4

080013a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <ADC1_IRQHandler+0x10>)
 80013a6:	f000 fc35 	bl	8001c14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001a0 	.word	0x200001a0

080013b4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USB_LP_IRQHandler+0x10>)
 80013ba:	f001 fcb8 	bl	8002d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200007fc 	.word	0x200007fc

080013c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM2_IRQHandler+0x10>)
 80013ce:	f003 ff31 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000238 	.word	0x20000238

080013dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	; (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140e:	f7ff ffe5 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f008 ff97 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001416:	f7ff fb4f 	bl	8000ab8 <main>
  bx lr
 800141a:	4770      	bx	lr
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001424:	0800a440 	.word	0x0800a440
  ldr r2, =_sbss
 8001428:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800142c:	20000b10 	.word	0x20000b10

08001430 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <COMP_IRQHandler>
	...

08001434 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001434:	b4b0      	push	{r4, r5, r7}
 8001436:	b095      	sub	sp, #84	; 0x54
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001448:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 800144a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800144e:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <Joystick_Init+0x90>)
 8001456:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <Joystick_Init+0x94>)
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8001466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146a:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 800146c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001470:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <Joystick_Init+0x90>)
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <Joystick_Init+0x94>)
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001496:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	461d      	mov	r5, r3
 80014a0:	f107 0414 	add.w	r4, r7, #20
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	3754      	adds	r7, #84	; 0x54
 80014bc:	46bd      	mov	sp, r7
 80014be:	bcb0      	pop	{r4, r5, r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	3ccccccd 	.word	0x3ccccccd
 80014c8:	3f8ccccd 	.word	0x3f8ccccd

080014cc <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d062      	beq.n	80015b4 <Joystick_Update+0xe8>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d05e      	beq.n	80015b4 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	891b      	ldrh	r3, [r3, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fef4 	bl	80002e8 <__aeabi_ui2f>
 8001500:	4604      	mov	r4, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800150c:	f7fe fe3a 	bl	8000184 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	f7fe ff3f 	bl	8000398 <__aeabi_fmul>
 800151a:	4603      	mov	r3, r0
 800151c:	461c      	mov	r4, r3
 800151e:	8bfb      	ldrh	r3, [r7, #30]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fee1 	bl	80002e8 <__aeabi_ui2f>
 8001526:	4602      	mov	r2, r0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7fe ff32 	bl	8000398 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	4620      	mov	r0, r4
 800153a:	f7fe fe25 	bl	8000188 <__addsf3>
 800153e:	4603      	mov	r3, r0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f915 	bl	8000770 <__aeabi_f2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8c1b      	ldrh	r3, [r3, #32]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fec8 	bl	80002e8 <__aeabi_ui2f>
 8001558:	4604      	mov	r4, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001564:	f7fe fe0e 	bl	8000184 <__aeabi_fsub>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f7fe ff13 	bl	8000398 <__aeabi_fmul>
 8001572:	4603      	mov	r3, r0
 8001574:	461c      	mov	r4, r3
 8001576:	8bbb      	ldrh	r3, [r7, #28]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe feb5 	bl	80002e8 <__aeabi_ui2f>
 800157e:	4602      	mov	r2, r0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f7fe ff06 	bl	8000398 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f7fe fdf9 	bl	8000188 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f8e9 	bl	8000770 <__aeabi_f2uiz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	865a      	strh	r2, [r3, #50]	; 0x32
 80015b2:	e008      	b.n	80015c6 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	8bfa      	ldrh	r2, [r7, #30]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8c1b      	ldrh	r3, [r3, #32]
 80015d6:	8bba      	ldrh	r2, [r7, #28]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	8bfa      	ldrh	r2, [r7, #30]
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf28      	it	cs
 80015e8:	4613      	movcs	r3, r2
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	8bfa      	ldrh	r2, [r7, #30]
 80015f6:	4293      	cmp	r3, r2
 80015f8:	bf38      	it	cc
 80015fa:	4613      	movcc	r3, r2
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8b9b      	ldrh	r3, [r3, #28]
 8001606:	8bba      	ldrh	r2, [r7, #28]
 8001608:	4293      	cmp	r3, r2
 800160a:	bf28      	it	cs
 800160c:	4613      	movcs	r3, r2
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	8bdb      	ldrh	r3, [r3, #30]
 8001618:	8bba      	ldrh	r2, [r7, #28]
 800161a:	4293      	cmp	r3, r2
 800161c:	bf38      	it	cc
 800161e:	4613      	movcc	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8001626:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800162a:	2b00      	cmp	r3, #0
 800162c:	dd15      	ble.n	800165a <Joystick_Update+0x18e>
 800162e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fe5c 	bl	80002f0 <__aeabi_i2f>
 8001638:	4604      	mov	r4, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	88db      	ldrh	r3, [r3, #6]
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	891b      	ldrh	r3, [r3, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fe52 	bl	80002f0 <__aeabi_i2f>
 800164c:	4603      	mov	r3, r0
 800164e:	4619      	mov	r1, r3
 8001650:	4620      	mov	r0, r4
 8001652:	f7fe ff55 	bl	8000500 <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	e016      	b.n	8001688 <Joystick_Update+0x1bc>
 800165a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fe46 	bl	80002f0 <__aeabi_i2f>
 8001664:	4603      	mov	r3, r0
 8001666:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	889b      	ldrh	r3, [r3, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	891b      	ldrh	r3, [r3, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fe3a 	bl	80002f0 <__aeabi_i2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f7fe ff3d 	bl	8000500 <__aeabi_fdiv>
 8001686:	4603      	mov	r3, r0
 8001688:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 800168a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dd15      	ble.n	80016be <Joystick_Update+0x1f2>
 8001692:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fe2a 	bl	80002f0 <__aeabi_i2f>
 800169c:	4604      	mov	r4, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	8bdb      	ldrh	r3, [r3, #30]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8c1b      	ldrh	r3, [r3, #32]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe20 	bl	80002f0 <__aeabi_i2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7fe ff23 	bl	8000500 <__aeabi_fdiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	e016      	b.n	80016ec <Joystick_Update+0x220>
 80016be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe14 	bl	80002f0 <__aeabi_i2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8b9b      	ldrh	r3, [r3, #28]
 80016d2:	461a      	mov	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8c1b      	ldrh	r3, [r3, #32]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fe08 	bl	80002f0 <__aeabi_i2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7fe ff0b 	bl	8000500 <__aeabi_fdiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016ee:	f04f 0100 	mov.w	r1, #0
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff f80c 	bl	8000710 <__aeabi_fcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <Joystick_Update+0x236>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	e002      	b.n	8001708 <Joystick_Update+0x23c>
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001708:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	6938      	ldr	r0, [r7, #16]
 8001710:	f7fe fffe 	bl	8000710 <__aeabi_fcmpgt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <Joystick_Update+0x252>
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	e002      	b.n	8001724 <Joystick_Update+0x258>
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001724:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	4619      	mov	r1, r3
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7fe ffef 	bl	8000710 <__aeabi_fcmpgt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <Joystick_Update+0x282>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	4619      	mov	r1, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7fe ffc8 	bl	80006d4 <__aeabi_fcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <Joystick_Update+0x282>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	e001      	b.n	8001752 <Joystick_Update+0x286>
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	f7fe ffd7 	bl	8000710 <__aeabi_fcmpgt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <Joystick_Update+0x2b2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	4619      	mov	r1, r3
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f7fe ffb0 	bl	80006d4 <__aeabi_fcmplt>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <Joystick_Update+0x2b2>
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	e001      	b.n	8001782 <Joystick_Update+0x2b6>
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}

0800178e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 fe55 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 f80e 	bl	80017c0 <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e001      	b.n	80017b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b0:	f7ff fcfe 	bl	80011b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_InitTick+0x68>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d022      	beq.n	800181a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_InitTick+0x6c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_InitTick+0x68>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fe62 	bl	80024b2 <HAL_SYSTICK_Config>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d809      	bhi.n	800180e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001802:	f000 fe2c 	bl	800245e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_InitTick+0x70>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e007      	b.n	800181e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e004      	b.n	800181e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000008 	.word	0x20000008
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4413      	add	r3, r2
 8001842:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_IncTick+0x1c>)
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000358 	.word	0x20000358
 8001854:	20000008 	.word	0x20000008

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000358 	.word	0x20000358

0800186c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e127      	b.n	8001adc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b8e      	ldr	r3, [pc, #568]	; (8001ae4 <HAL_ADC_Init+0x278>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a8d      	ldr	r2, [pc, #564]	; (8001ae4 <HAL_ADC_Init+0x278>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	4b8b      	ldr	r3, [pc, #556]	; (8001ae4 <HAL_ADC_Init+0x278>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fca3 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80ff 	bne.w	8001ad2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018dc:	f023 0302 	bic.w	r3, r3, #2
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018e8:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_ADC_Init+0x27c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	497c      	ldr	r1, [pc, #496]	; (8001ae8 <HAL_ADC_Init+0x27c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001902:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190a:	4619      	mov	r1, r3
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001926:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800192c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	2302      	movs	r3, #2
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800194e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	4313      	orrs	r3, r2
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	2b10      	cmp	r3, #16
 800195c:	d007      	beq.n	800196e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001966:	4313      	orrs	r3, r2
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	4313      	orrs	r3, r2
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d04f      	beq.n	8001a1c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	4313      	orrs	r3, r2
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800198e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6912      	ldr	r2, [r2, #16]
 8001994:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001998:	d003      	beq.n	80019a2 <HAL_ADC_Init+0x136>
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6912      	ldr	r2, [r2, #16]
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_ADC_Init+0x13c>
 80019a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a6:	e000      	b.n	80019aa <HAL_ADC_Init+0x13e>
 80019a8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80019aa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ae:	4313      	orrs	r3, r2
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d125      	bne.n	8001a08 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d114      	bne.n	80019f0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	fa92 f2a2 	rbit	r2, r2
 80019d8:	617a      	str	r2, [r7, #20]
  return result;
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4093      	lsls	r3, r2
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ea:	4313      	orrs	r3, r2
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	e00b      	b.n	8001a08 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	f043 0220 	orr.w	r2, r3, #32
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_ADC_Init+0x280>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_ADC_Init+0x284>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d003      	beq.n	8001a42 <HAL_ADC_Init+0x1d6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d119      	bne.n	8001a76 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	fa03 f202 	lsl.w	r2, r3, r2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
 8001a74:	e007      	b.n	8001a86 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_ADC_Init+0x288>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d10b      	bne.n	8001aae <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	f023 0303 	bic.w	r3, r3, #3
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aac:	e014      	b.n	8001ad8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f023 0312 	bic.w	r3, r3, #18
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3738      	adds	r7, #56	; 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40012700 	.word	0x40012700
 8001aec:	fcfc16ff 	.word	0xfcfc16ff
 8001af0:	c0fff18d 	.word	0xc0fff18d
 8001af4:	bf80fffe 	.word	0xbf80fffe

08001af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start_DMA+0x1e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e074      	b.n	8001c00 <HAL_ADC_Start_DMA+0x108>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fae4 	bl	80020ec <ADC_Enable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d167      	bne.n	8001bfe <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6c:	d106      	bne.n	8001b7c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b72:	f023 0206 	bic.w	r2, r3, #6
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_ADC_Start_DMA+0x110>)
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_ADC_Start_DMA+0x114>)
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_ADC_Start_DMA+0x118>)
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001baa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3358      	adds	r3, #88	; 0x58
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f000 fcce 	bl	800257c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bfc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	080021a5 	.word	0x080021a5
 8001c0c:	0800224d 	.word	0x0800224d
 8001c10:	08002269 	.word	0x08002269

08001c14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d14e      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d147      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d12c      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d127      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d119      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0220 	bic.w	r2, r2, #32
 8001c92:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fa06 	bl	80010ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0212 	mvn.w	r2, #18
 8001cc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d15c      	bne.n	8001d90 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d155      	bne.n	8001d90 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d13a      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12c      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d125      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11e      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d119      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa8b 	bl	800229c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 020c 	mvn.w	r2, #12
 8001d8e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d114      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10d      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f834 	bl	8001e26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0201 	mvn.w	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dd6:	d119      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d112      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0220 	mvn.w	r2, #32
 8001dfa:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f81b 	bl	8001e38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0220 	mvn.w	r2, #32
 8001e0a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x20>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e134      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x28a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d81c      	bhi.n	8001eb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b05      	subs	r3, #5
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb4:	e07e      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d81c      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b23      	subs	r3, #35	; 0x23
 8001ed0:	221f      	movs	r2, #31
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4019      	ands	r1, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	; 0x23
 8001eea:	fa00 f203 	lsl.w	r2, r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ef6:	e05d      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b12      	cmp	r3, #18
 8001efe:	d81c      	bhi.n	8001f3a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	; 0x41
 8001f12:	221f      	movs	r2, #31
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b41      	subs	r3, #65	; 0x41
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
 8001f38:	e03c      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	d81c      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b5f      	subs	r3, #95	; 0x5f
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b5f      	subs	r3, #95	; 0x5f
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	e01b      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b7d      	subs	r3, #125	; 0x7d
 8001f8e:	221f      	movs	r2, #31
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4019      	ands	r1, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b7d      	subs	r3, #125	; 0x7d
 8001fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b09      	cmp	r3, #9
 8001fba:	d81a      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6959      	ldr	r1, [r3, #20]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	2207      	movs	r2, #7
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6898      	ldr	r0, [r3, #8]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	e042      	b.n	8002078 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b13      	cmp	r3, #19
 8001ff8:	d81c      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6919      	ldr	r1, [r3, #16]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	3b1e      	subs	r3, #30
 800200c:	2207      	movs	r2, #7
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6898      	ldr	r0, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	3b1e      	subs	r3, #30
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	e021      	b.n	8002078 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b1a      	cmp	r3, #26
 800203a:	d81c      	bhi.n	8002076 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	3b3c      	subs	r3, #60	; 0x3c
 800204e:	2207      	movs	r2, #7
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	4019      	ands	r1, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6898      	ldr	r0, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	3b3c      	subs	r3, #60	; 0x3c
 8002068:	fa00 f203 	lsl.w	r2, r0, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	e000      	b.n	8002078 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002076:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b10      	cmp	r3, #16
 800207e:	d003      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002084:	2b11      	cmp	r3, #17
 8002086:	d121      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_ADC_ConfigChannel+0x294>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11b      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_ADC_ConfigChannel+0x294>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x294>)
 800209a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800209e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d111      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_ADC_ConfigChannel+0x298>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_ADC_ConfigChannel+0x29c>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9a      	lsrs	r2, r3, #18
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40012700 	.word	0x40012700
 80020e4:	20000000 	.word	0x20000000
 80020e8:	431bde83 	.word	0x431bde83

080020ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d043      	beq.n	8002192 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <ADC_Enable+0xb0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <ADC_Enable+0xb4>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	0c9a      	lsrs	r2, r3, #18
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800212e:	e002      	b.n	8002136 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3b01      	subs	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800213c:	f7ff fb8c 	bl	8001858 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002142:	e01f      	b.n	8002184 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002144:	f7ff fb88 	bl	8001858 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d918      	bls.n	8002184 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d011      	beq.n	8002184 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d1d8      	bne.n	8002144 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000000 	.word	0x20000000
 80021a0:	431bde83 	.word	0x431bde83

080021a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d13d      	bne.n	800223a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12c      	bne.n	8002232 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d127      	bne.n	8002232 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0220 	bic.w	r2, r2, #32
 800220c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe ff49 	bl	80010ca <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002238:	e004      	b.n	8002244 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff fdda 	bl	8001e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7ff fdd2 	bl	8001e38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
	...

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <__NVIC_EnableIRQ+0x34>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff90 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff2d 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff42 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff90 	bl	80023a0 <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5f 	bl	800234c <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff35 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e043      	b.n	8002566 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_DMA_Init+0xa4>)
 80024e6:	4413      	add	r3, r2
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_DMA_Init+0xa8>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_DMA_Init+0xac>)
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	bffd9ff8 	.word	0xbffd9ff8
 8002574:	cccccccd 	.word	0xcccccccd
 8002578:	40026000 	.word	0x40026000

0800257c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_DMA_Start_IT+0x20>
 8002598:	2302      	movs	r3, #2
 800259a:	e04b      	b.n	8002634 <HAL_DMA_Start_IT+0xb8>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d13a      	bne.n	8002626 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f8e0 	bl	800279a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 020e 	orr.w	r2, r2, #14
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00f      	b.n	8002614 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 020a 	orr.w	r2, r2, #10
 8002612:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e005      	b.n	8002632 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 031c 	and.w	r3, r3, #28
 800265c:	2204      	movs	r2, #4
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d026      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x7a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d021      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d107      	bne.n	8002690 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f003 021c 	and.w	r2, r3, #28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	2104      	movs	r1, #4
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d071      	beq.n	8002790 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	e06c      	b.n	8002790 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 031c 	and.w	r3, r3, #28
 80026be:	2202      	movs	r2, #2
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02e      	beq.n	8002728 <HAL_DMA_IRQHandler+0xec>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d029      	beq.n	8002728 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020a 	bic.w	r2, r2, #10
 80026f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 021c 	and.w	r2, r3, #28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2102      	movs	r1, #2
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d038      	beq.n	8002790 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002726:	e033      	b.n	8002790 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f003 031c 	and.w	r3, r3, #28
 8002730:	2208      	movs	r2, #8
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02a      	beq.n	8002792 <HAL_DMA_IRQHandler+0x156>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d025      	beq.n	8002792 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 020e 	bic.w	r2, r2, #14
 8002754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 021c 	and.w	r2, r3, #28
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002790:	bf00      	nop
 8002792:	bf00      	nop
}
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f003 021c 	and.w	r2, r3, #28
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d108      	bne.n	80027de <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027dc:	e007      	b.n	80027ee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	60da      	str	r2, [r3, #12]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800280e:	e154      	b.n	8002aba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8146 	beq.w	8002ab4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d005      	beq.n	8002840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800283c:	2b02      	cmp	r3, #2
 800283e:	d130      	bne.n	80028a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002876:	2201      	movs	r2, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0201 	and.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d017      	beq.n	80028de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d123      	bne.n	8002932 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	6939      	ldr	r1, [r7, #16]
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80a0 	beq.w	8002ab4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <HAL_GPIO_Init+0x2e0>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <HAL_GPIO_Init+0x2e0>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <HAL_GPIO_Init+0x2e0>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800298c:	4a53      	ldr	r2, [pc, #332]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x2e8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d019      	beq.n	80029ec <HAL_GPIO_Init+0x1f4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x2ec>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_Init+0x1f0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_GPIO_Init+0x2f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a47      	ldr	r2, [pc, #284]	; (8002af0 <HAL_GPIO_Init+0x2f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029d8:	2304      	movs	r3, #4
 80029da:	e008      	b.n	80029ee <HAL_GPIO_Init+0x1f6>
 80029dc:	2305      	movs	r3, #5
 80029de:	e006      	b.n	80029ee <HAL_GPIO_Init+0x1f6>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e004      	b.n	80029ee <HAL_GPIO_Init+0x1f6>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e002      	b.n	80029ee <HAL_GPIO_Init+0x1f6>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_GPIO_Init+0x1f6>
 80029ec:	2300      	movs	r3, #0
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	f002 0203 	and.w	r2, r2, #3
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	4093      	lsls	r3, r2
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029fe:	4937      	ldr	r1, [pc, #220]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a30:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_GPIO_Init+0x2fc>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f47f aea3 	bne.w	8002810 <HAL_GPIO_Init+0x18>
  }
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b28:	b08b      	sub	sp, #44	; 0x2c
 8002b2a:	af06      	add	r7, sp, #24
 8002b2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d0      	b.n	8002cda <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f007 f975 	bl	8009e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 f80a 	bl	8005b78 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e04c      	b.n	8002c04 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3336      	adds	r3, #54	; 0x36
 8002ba8:	4602      	mov	r2, r0
 8002baa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3303      	adds	r3, #3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3338      	adds	r3, #56	; 0x38
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	333c      	adds	r3, #60	; 0x3c
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3340      	adds	r3, #64	; 0x40
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3301      	adds	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3ad      	bcc.n	8002b6a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e044      	b.n	8002c9e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d3b5      	bcc.n	8002c14 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	687e      	ldr	r6, [r7, #4]
 8002cb0:	466d      	mov	r5, sp
 8002cb2:	f106 0410 	add.w	r4, r6, #16
 8002cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	602b      	str	r3, [r5, #0]
 8002cbe:	1d33      	adds	r3, r6, #4
 8002cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f002 ff72 	bl	8005bac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ce2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_PCD_Start+0x16>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e016      	b.n	8002d26 <HAL_PCD_Start+0x44>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 ff21 	bl	8005b4c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f007 f877 	bl	8009e00 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f005 fc06 	bl	8008528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 fbfe 	bl	800853c <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4a:	d102      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fade 	bl	800330e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 fbf0 	bl	800853c <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	d112      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f007 f8d6 	bl	8009f32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d86:	2100      	movs	r1, #0
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8c7 	bl	8002f1c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f005 fbd2 	bl	800853c <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da2:	d10b      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002db6:	b292      	uxth	r2, r2
 8002db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f005 fbbb 	bl	800853c <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd0:	d10b      	bne.n	8002dea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de4:	b292      	uxth	r2, r2
 8002de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f005 fba4 	bl	800853c <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d126      	bne.n	8002e4e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0208 	bic.w	r2, r2, #8
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f007 f8b7 	bl	8009fa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fb72 	bl	800853c <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d126      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	b292      	uxth	r2, r2
 8002e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0204 	orr.w	r2, r2, #4
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f007 f85f 	bl	8009f70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f005 fb40 	bl	800853c <USB_ReadInterrupts>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eda:	b292      	uxth	r2, r2
 8002edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f007 f818 	bl	8009f16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f005 fb26 	bl	800853c <USB_ReadInterrupts>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efa:	d10b      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_PCD_SetAddress+0x1a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e013      	b.n	8002f5e <HAL_PCD_SetAddress+0x42>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 fad7 	bl	8008502 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	4608      	mov	r0, r1
 8002f70:	4611      	mov	r1, r2
 8002f72:	461a      	mov	r2, r3
 8002f74:	4603      	mov	r3, r0
 8002f76:	70fb      	strb	r3, [r7, #3]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	803b      	strh	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	da0e      	bge.n	8002faa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	705a      	strb	r2, [r3, #1]
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 0207 	and.w	r2, r3, #7
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fd4:	883a      	ldrh	r2, [r7, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	78ba      	ldrb	r2, [r7, #2]
 8002fde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ff2:	78bb      	ldrb	r3, [r7, #2]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d102      	bne.n	8002ffe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_PCD_EP_Open+0xa6>
 8003008:	2302      	movs	r3, #2
 800300a:	e00e      	b.n	800302a <HAL_PCD_EP_Open+0xc4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	f002 fde6 	bl	8005bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003028:	7afb      	ldrb	r3, [r7, #11]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0e      	bge.n	8003064 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00e      	b.n	8003082 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_EP_Close+0x6a>
 8003098:	2302      	movs	r3, #2
 800309a:	e00e      	b.n	80030ba <HAL_PCD_EP_Close+0x88>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f908 	bl	80062c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	460b      	mov	r3, r1
 80030d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f003 0207 	and.w	r2, r3, #7
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	b2da      	uxtb	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6979      	ldr	r1, [r7, #20]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 faba 	bl	8006698 <USB_EPStartXfer>
 8003124:	e005      	b.n	8003132 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fab3 	bl	8006698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2201      	movs	r2, #1
 8003186:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	b2da      	uxtb	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fa77 	bl	8006698 <USB_EPStartXfer>
 80031aa:	e005      	b.n	80031b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fa70 	bl	8006698 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0207 	and.w	r2, r3, #7
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d901      	bls.n	80031e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e03e      	b.n	800325e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0e      	bge.n	8003206 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	705a      	strb	r2, [r3, #1]
 8003204:	e00c      	b.n	8003220 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_SetStall+0x7e>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_SetStall+0x9c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f005 f85a 	bl	8008308 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d901      	bls.n	8003284 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e040      	b.n	8003306 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0e      	bge.n	80032aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00e      	b.n	80032c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0207 	and.w	r2, r3, #7
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_EP_ClrStall+0x82>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e00e      	b.n	8003306 <HAL_PCD_EP_ClrStall+0xa0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f005 f856 	bl	80083a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08e      	sub	sp, #56	; 0x38
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003316:	e2ec      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003320:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800332e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 8161 	bne.w	80035fa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003338:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d152      	bne.n	80033e8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	81fb      	strh	r3, [r7, #14]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3328      	adds	r3, #40	; 0x28
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	3302      	adds	r3, #2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	441a      	add	r2, r3
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033a6:	2100      	movs	r1, #0
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f006 fd9a 	bl	8009ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 829b 	beq.w	80038f2 <PCD_EP_ISR_Handler+0x5e4>
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 8296 	bne.w	80038f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b292      	uxth	r2, r2
 80033da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033e6:	e284      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d034      	beq.n	800346c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	3306      	adds	r3, #6
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003440:	b29b      	uxth	r3, r3
 8003442:	f005 f8cf 	bl	80085e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29a      	uxth	r2, r3
 800344e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003452:	4013      	ands	r3, r2
 8003454:	823b      	strh	r3, [r7, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	8a3a      	ldrh	r2, [r7, #16]
 800345c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003460:	b292      	uxth	r2, r2
 8003462:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f006 fd0f 	bl	8009e88 <HAL_PCD_SetupStageCallback>
 800346a:	e242      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800346c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003470:	2b00      	cmp	r3, #0
 8003472:	f280 823e 	bge.w	80038f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29a      	uxth	r2, r3
 800347e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003482:	4013      	ands	r3, r2
 8003484:	83bb      	strh	r3, [r7, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	8bba      	ldrh	r2, [r7, #28]
 800348c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003490:	b292      	uxth	r2, r2
 8003492:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	3306      	adds	r3, #6
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d019      	beq.n	80034fc <PCD_EP_ISR_Handler+0x1ee>
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	6959      	ldr	r1, [r3, #20]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f005 f87f 	bl	80085e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f006 fcd8 	bl	8009eac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 81f2 	bne.w	80038f2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351c:	b29b      	uxth	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d112      	bne.n	800355c <PCD_EP_ISR_Handler+0x24e>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003540:	b29a      	uxth	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	801a      	strh	r2, [r3, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003554:	b29a      	uxth	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	801a      	strh	r2, [r3, #0]
 800355a:	e02f      	b.n	80035bc <PCD_EP_ISR_Handler+0x2ae>
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b3e      	cmp	r3, #62	; 0x3e
 8003562:	d813      	bhi.n	800358c <PCD_EP_ISR_Handler+0x27e>
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <PCD_EP_ISR_Handler+0x270>
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	3301      	adds	r3, #1
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	b29b      	uxth	r3, r3
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	b29a      	uxth	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	e017      	b.n	80035bc <PCD_EP_ISR_Handler+0x2ae>
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <PCD_EP_ISR_Handler+0x298>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	3b01      	subs	r3, #1
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035cc:	827b      	strh	r3, [r7, #18]
 80035ce:	8a7b      	ldrh	r3, [r7, #18]
 80035d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035d4:	827b      	strh	r3, [r7, #18]
 80035d6:	8a7b      	ldrh	r3, [r7, #18]
 80035d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035dc:	827b      	strh	r3, [r7, #18]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	8a7b      	ldrh	r3, [r7, #18]
 80035e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8013      	strh	r3, [r2, #0]
 80035f8:	e17b      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800360c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003610:	2b00      	cmp	r3, #0
 8003612:	f280 80ea 	bge.w	80037ea <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29a      	uxth	r2, r3
 8003628:	f640 738f 	movw	r3, #3983	; 0xf8f
 800362c:	4013      	ands	r3, r2
 800362e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003644:	b292      	uxth	r2, r2
 8003646:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003648:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	7b1b      	ldrb	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d122      	bne.n	80036ac <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	3306      	adds	r3, #6
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800368e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	88da      	ldrh	r2, [r3, #6]
 80036a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036a6:	f004 ff9d 	bl	80085e4 <USB_ReadPMA>
 80036aa:	e07c      	b.n	80037a6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d108      	bne.n	80036c6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036b6:	461a      	mov	r2, r3
 80036b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f927 	bl	800390e <HAL_PCD_EP_DB_Receive>
 80036c0:	4603      	mov	r3, r0
 80036c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036c4:	e06f      	b.n	80037a6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	441a      	add	r2, r3
 80036f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d021      	beq.n	8003764 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	3302      	adds	r3, #2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003748:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800374a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02a      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	6959      	ldr	r1, [r3, #20]
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	891a      	ldrh	r2, [r3, #8]
 800375c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800375e:	f004 ff41 	bl	80085e4 <USB_ReadPMA>
 8003762:	e020      	b.n	80037a6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	3306      	adds	r3, #6
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800378e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	6959      	ldr	r1, [r3, #20]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	895a      	ldrh	r2, [r3, #10]
 80037a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a2:	f004 ff1f 	bl	80085e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ac:	441a      	add	r2, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b8:	441a      	add	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <PCD_EP_ISR_Handler+0x4c2>
 80037c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d206      	bcs.n	80037de <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f006 fb68 	bl	8009eac <HAL_PCD_DataOutStageCallback>
 80037dc:	e005      	b.n	80037ea <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 ff57 	bl	8006698 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07e      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80037f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	843b      	strh	r3, [r7, #32]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	8c3b      	ldrh	r3, [r7, #32]
 8003834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d00c      	beq.n	8003862 <PCD_EP_ISR_Handler+0x554>
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	78db      	ldrb	r3, [r3, #3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003854:	2b02      	cmp	r3, #2
 8003856:	d146      	bne.n	80038e6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003858:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d141      	bne.n	80038e6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386a:	b29b      	uxth	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	3302      	adds	r3, #2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	8bfb      	ldrh	r3, [r7, #30]
 8003892:	429a      	cmp	r2, r3
 8003894:	d906      	bls.n	80038a4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	8bfb      	ldrh	r3, [r7, #30]
 800389c:	1ad2      	subs	r2, r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	619a      	str	r2, [r3, #24]
 80038a2:	e002      	b.n	80038aa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f006 fb12 	bl	8009ee2 <HAL_PCD_DataInStageCallback>
 80038be:	e018      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	8bfb      	ldrh	r3, [r7, #30]
 80038c6:	441a      	add	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	8bfb      	ldrh	r3, [r7, #30]
 80038d2:	441a      	add	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 feda 	bl	8006698 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80038e4:	e005      	b.n	80038f2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f91b 	bl	8003b28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f6ff ad0a 	blt.w	8003318 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3738      	adds	r7, #56	; 0x38
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b088      	sub	sp, #32
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	4613      	mov	r3, r2
 800391a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07e      	beq.n	8003a24 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	3302      	adds	r3, #2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	8b7b      	ldrh	r3, [r7, #26]
 8003956:	429a      	cmp	r2, r3
 8003958:	d306      	bcc.n	8003968 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	8b7b      	ldrh	r3, [r7, #26]
 8003960:	1ad2      	subs	r2, r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e002      	b.n	800396e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d123      	bne.n	80039be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	833b      	strh	r3, [r7, #24]
 8003992:	8b3b      	ldrh	r3, [r7, #24]
 8003994:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003998:	833b      	strh	r3, [r7, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	8b3b      	ldrh	r3, [r7, #24]
 80039aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01f      	beq.n	8003a08 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e2:	82fb      	strh	r3, [r7, #22]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a08:	8b7b      	ldrh	r3, [r7, #26]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8087 	beq.w	8003b1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6959      	ldr	r1, [r3, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	891a      	ldrh	r2, [r3, #8]
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	f004 fde1 	bl	80085e4 <USB_ReadPMA>
 8003a22:	e07c      	b.n	8003b1e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	3306      	adds	r3, #6
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	8b7b      	ldrh	r3, [r7, #26]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d306      	bcc.n	8003a66 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	619a      	str	r2, [r3, #24]
 8003a64:	e002      	b.n	8003a6c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d123      	bne.n	8003abc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	83fb      	strh	r3, [r7, #30]
 8003a90:	8bfb      	ldrh	r3, [r7, #30]
 8003a92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a96:	83fb      	strh	r3, [r7, #30]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	8bfb      	ldrh	r3, [r7, #30]
 8003aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11f      	bne.n	8003b06 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae0:	83bb      	strh	r3, [r7, #28]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	8bbb      	ldrh	r3, [r7, #28]
 8003af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b06:	8b7b      	ldrh	r3, [r7, #26]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6959      	ldr	r1, [r3, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	895a      	ldrh	r2, [r3, #10]
 8003b18:	8b7b      	ldrh	r3, [r7, #26]
 8003b1a:	f004 fd63 	bl	80085e4 <USB_ReadPMA>
    }
  }

  return count;
 8003b1e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b0a2      	sub	sp, #136	; 0x88
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 81c7 	beq.w	8003ed0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	3302      	adds	r3, #2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d907      	bls.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	619a      	str	r2, [r3, #24]
 8003b88:	e002      	b.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 80b9 	bne.w	8003d0c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d126      	bne.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	011a      	lsls	r2, r3, #4
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	e01a      	b.n	8003c26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d116      	bne.n	8003c26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	4413      	add	r3, r2
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	011a      	lsls	r2, r3, #4
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	4413      	add	r3, r2
 8003c1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	2200      	movs	r2, #0
 8003c24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d126      	bne.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	011a      	lsls	r2, r3, #4
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e017      	b.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d113      	bne.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	4413      	add	r3, r2
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011a      	lsls	r2, r3, #4
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f006 f912 	bl	8009ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 82d4 	beq.w	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	827b      	strh	r3, [r7, #18]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
 8003d0a:	e2b2      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d021      	beq.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 8286 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d6e:	441a      	add	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d309      	bcc.n	8003da2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	621a      	str	r2, [r3, #32]
 8003da0:	e015      	b.n	8003dce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003db8:	e009      	b.n	8003dce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d155      	bne.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	4413      	add	r3, r2
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x302>
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e047      	b.n	8003eba <HAL_PCD_EP_DB_Transmit+0x392>
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e2e:	d811      	bhi.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e42:	3301      	adds	r3, #1
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	029b      	lsls	r3, r3, #10
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e032      	b.n	8003eba <HAL_PCD_EP_DB_Transmit+0x392>
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x342>
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e66:	3b01      	subs	r3, #1
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	e01b      	b.n	8003eba <HAL_PCD_EP_DB_Transmit+0x392>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d117      	bne.n	8003eba <HAL_PCD_EP_DB_Transmit+0x392>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9e:	4413      	add	r3, r2
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	011a      	lsls	r2, r3, #4
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	4413      	add	r3, r2
 8003eac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	6959      	ldr	r1, [r3, #20]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	891a      	ldrh	r2, [r3, #8]
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f004 fb46 	bl	800855a <USB_WritePMA>
 8003ece:	e1d0      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3306      	adds	r3, #6
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d307      	bcc.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f10:	1ad2      	subs	r2, r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	619a      	str	r2, [r3, #24]
 8003f16:	e002      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 80c4 	bne.w	80040b0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d126      	bne.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x456>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	4413      	add	r3, r2
 8003f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	011a      	lsls	r2, r3, #4
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	4413      	add	r3, r2
 8003f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	e01a      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d116      	bne.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	677b      	str	r3, [r7, #116]	; 0x74
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9a:	4413      	add	r3, r2
 8003f9c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011a      	lsls	r2, r3, #4
 8003fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fac:	673b      	str	r3, [r7, #112]	; 0x70
 8003fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12f      	bne.n	8004022 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fda:	4413      	add	r3, r2
 8003fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011a      	lsls	r2, r3, #4
 8003fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004000:	b29a      	uxth	r2, r3
 8004002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004018:	b29a      	uxth	r2, r3
 800401a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e017      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d113      	bne.n	8004052 <HAL_PCD_EP_DB_Transmit+0x52a>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004038:	4413      	add	r3, r2
 800403a:	67bb      	str	r3, [r7, #120]	; 0x78
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	011a      	lsls	r2, r3, #4
 8004042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004044:	4413      	add	r3, r2
 8004046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800404a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800404c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800404e:	2200      	movs	r2, #0
 8004050:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f005 ff42 	bl	8009ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 8104 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800409a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
 80040ae:	e0e0      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d121      	bne.n	80040fe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004104:	2b01      	cmp	r3, #1
 8004106:	f040 80b4 	bne.w	8004272 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004112:	441a      	add	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004120:	441a      	add	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d309      	bcc.n	8004146 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	621a      	str	r2, [r3, #32]
 8004144:	e015      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800414e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004152:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800415c:	e009      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	667b      	str	r3, [r7, #100]	; 0x64
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d155      	bne.n	800422c <HAL_PCD_EP_DB_Transmit+0x704>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	4413      	add	r3, r2
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	011a      	lsls	r2, r3, #4
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	4413      	add	r3, r2
 80041a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d112      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80041ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	e044      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x736>
 80041d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d6:	2b3e      	cmp	r3, #62	; 0x3e
 80041d8:	d811      	bhi.n	80041fe <HAL_PCD_EP_DB_Transmit+0x6d6>
 80041da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	657b      	str	r3, [r7, #84]	; 0x54
 80041e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	3301      	adds	r3, #1
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	e02f      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x736>
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	657b      	str	r3, [r7, #84]	; 0x54
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	3b01      	subs	r3, #1
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
 8004214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004216:	b29b      	uxth	r3, r3
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	b29b      	uxth	r3, r3
 800421c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004224:	b29a      	uxth	r2, r3
 8004226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	e018      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x736>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d114      	bne.n	800425e <HAL_PCD_EP_DB_Transmit+0x736>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423c:	b29b      	uxth	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004242:	4413      	add	r3, r2
 8004244:	667b      	str	r3, [r7, #100]	; 0x64
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	011a      	lsls	r2, r3, #4
 800424c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800424e:	4413      	add	r3, r2
 8004250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004254:	663b      	str	r3, [r7, #96]	; 0x60
 8004256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004258:	b29a      	uxth	r2, r3
 800425a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6959      	ldr	r1, [r3, #20]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	895a      	ldrh	r2, [r3, #10]
 800426a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	f004 f974 	bl	800855a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428c:	823b      	strh	r3, [r7, #16]
 800428e:	8a3b      	ldrh	r3, [r7, #16]
 8004290:	f083 0310 	eor.w	r3, r3, #16
 8004294:	823b      	strh	r3, [r7, #16]
 8004296:	8a3b      	ldrh	r3, [r7, #16]
 8004298:	f083 0320 	eor.w	r3, r3, #32
 800429c:	823b      	strh	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8a3b      	ldrh	r3, [r7, #16]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3788      	adds	r7, #136	; 0x88
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	4613      	mov	r3, r2
 80042dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e009      	b.n	8004316 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004302:	897a      	ldrh	r2, [r7, #10]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004316:	893b      	ldrh	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	b29a      	uxth	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	80da      	strh	r2, [r3, #6]
 800432a:	e00b      	b.n	8004344 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2201      	movs	r2, #1
 8004330:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	b29a      	uxth	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	b29a      	uxth	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e31d      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b94      	ldr	r3, [pc, #592]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004374:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d07b      	beq.n	800447a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d006      	beq.n	8004396 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b87      	ldr	r3, [pc, #540]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d06a      	beq.n	8004478 <HAL_RCC_OscConfig+0x128>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d166      	bne.n	8004478 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e2f7      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x74>
 80043b6:	4b7f      	ldr	r3, [pc, #508]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7e      	ldr	r2, [pc, #504]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e02d      	b.n	8004420 <HAL_RCC_OscConfig+0xd0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10c      	bne.n	80043e6 <HAL_RCC_OscConfig+0x96>
 80043cc:	4b79      	ldr	r3, [pc, #484]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a78      	ldr	r2, [pc, #480]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a75      	ldr	r2, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0xd0>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0xb8>
 80043ee:	4b71      	ldr	r3, [pc, #452]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a70      	ldr	r2, [pc, #448]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6e      	ldr	r3, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6d      	ldr	r2, [pc, #436]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xd0>
 8004408:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a66      	ldr	r2, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd fa16 	bl	8001858 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd fa12 	bl	8001858 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e2ad      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004442:	4b5c      	ldr	r3, [pc, #368]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xe0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd fa02 	bl	8001858 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd f9fe 	bl	8001858 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e299      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x108>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d05a      	beq.n	800453c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d119      	bne.n	80044c6 <HAL_RCC_OscConfig+0x176>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004498:	4b46      	ldr	r3, [pc, #280]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_OscConfig+0x160>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e276      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b40      	ldr	r3, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	493d      	ldr	r1, [pc, #244]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c4:	e03a      	b.n	800453c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d020      	beq.n	8004510 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ce:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <HAL_RCC_OscConfig+0x268>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd f9c0 	bl	8001858 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fd f9bc 	bl	8001858 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e257      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	492a      	ldr	r1, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
 800450e:	e015      	b.n	800453c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_RCC_OscConfig+0x268>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd f99f 	bl	8001858 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800451e:	f7fd f99b 	bl	8001858 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e236      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80b8 	beq.w	80046ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d170      	bne.n	8004632 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x218>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e21a      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004574:	429a      	cmp	r2, r3
 8004576:	d921      	bls.n	80045bc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fc4b 	bl	8004e18 <RCC_SetFlashLatencyFromMSIRange>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e208      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4906      	ldr	r1, [pc, #24]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	4901      	ldr	r1, [pc, #4]	; (80045b4 <HAL_RCC_OscConfig+0x264>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e020      	b.n	80045f6 <HAL_RCC_OscConfig+0x2a6>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045bc:	4b99      	ldr	r3, [pc, #612]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4996      	ldr	r1, [pc, #600]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ce:	4b95      	ldr	r3, [pc, #596]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	4991      	ldr	r1, [pc, #580]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fc16 	bl	8004e18 <RCC_SetFlashLatencyFromMSIRange>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1d3      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	0b5b      	lsrs	r3, r3, #13
 80045fc:	3301      	adds	r3, #1
 80045fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004606:	4a87      	ldr	r2, [pc, #540]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004608:	6892      	ldr	r2, [r2, #8]
 800460a:	0912      	lsrs	r2, r2, #4
 800460c:	f002 020f 	and.w	r2, r2, #15
 8004610:	4985      	ldr	r1, [pc, #532]	; (8004828 <HAL_RCC_OscConfig+0x4d8>)
 8004612:	5c8a      	ldrb	r2, [r1, r2]
 8004614:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004616:	4a85      	ldr	r2, [pc, #532]	; (800482c <HAL_RCC_OscConfig+0x4dc>)
 8004618:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800461a:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x4e0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd f8ce 	bl	80017c0 <HAL_InitTick>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d045      	beq.n	80046ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	e1b5      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d029      	beq.n	800468e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800463a:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x4e4>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd f90a 	bl	8001858 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004648:	f7fd f906 	bl	8001858 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1a1      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800465a:	4b72      	ldr	r3, [pc, #456]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004666:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	496c      	ldr	r1, [pc, #432]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004678:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	4967      	ldr	r1, [pc, #412]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800468e:	4b69      	ldr	r3, [pc, #420]	; (8004834 <HAL_RCC_OscConfig+0x4e4>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fd f8e0 	bl	8001858 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469c:	f7fd f8dc 	bl	8001858 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e177      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80046ae:	4b5d      	ldr	r3, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d030      	beq.n	8004728 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x4e8>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fd f8c0 	bl	8001858 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd f8bc 	bl	8001858 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e157      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ee:	4b4d      	ldr	r3, [pc, #308]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x38c>
 80046fa:	e015      	b.n	8004728 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fc:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <HAL_RCC_OscConfig+0x4e8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fd f8a9 	bl	8001858 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800470a:	f7fd f8a5 	bl	8001858 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e140      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800471c:	4b41      	ldr	r3, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80b5 	beq.w	80048a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473a:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	4a36      	ldr	r2, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6253      	str	r3, [r2, #36]	; 0x24
 8004752:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_RCC_OscConfig+0x4ec>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_RCC_OscConfig+0x4ec>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a32      	ldr	r2, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x4ec>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fd f86d 	bl	8001858 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fd f869 	bl	8001858 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e104      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCC_OscConfig+0x4ec>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x466>
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6353      	str	r3, [r2, #52]	; 0x34
 80047b4:	e02d      	b.n	8004812 <HAL_RCC_OscConfig+0x4c2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x488>
 80047be:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c8:	6353      	str	r3, [r2, #52]	; 0x34
 80047ca:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d4:	6353      	str	r3, [r2, #52]	; 0x34
 80047d6:	e01c      	b.n	8004812 <HAL_RCC_OscConfig+0x4c2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x4aa>
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ea:	6353      	str	r3, [r2, #52]	; 0x34
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f6:	6353      	str	r3, [r2, #52]	; 0x34
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x4c2>
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004804:	6353      	str	r3, [r2, #52]	; 0x34
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x4d4>)
 800480c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004810:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d024      	beq.n	8004864 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7fd f81d 	bl	8001858 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004820:	e019      	b.n	8004856 <HAL_RCC_OscConfig+0x506>
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	0800a420 	.word	0x0800a420
 800482c:	20000000 	.word	0x20000000
 8004830:	20000004 	.word	0x20000004
 8004834:	42470020 	.word	0x42470020
 8004838:	42470680 	.word	0x42470680
 800483c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd f80a 	bl	8001858 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0a3      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004856:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0ee      	beq.n	8004840 <HAL_RCC_OscConfig+0x4f0>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004864:	f7fc fff8 	bl	8001858 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fc fff4 	bl	8001858 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e08d      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ee      	bne.n	800486c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800488e:	7ffb      	ldrb	r3, [r7, #31]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d105      	bne.n	80048a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004894:	4b44      	ldr	r3, [pc, #272]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d079      	beq.n	800499c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d056      	beq.n	800495c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d13b      	bne.n	800492e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b3d      	ldr	r3, [pc, #244]	; (80049ac <HAL_RCC_OscConfig+0x65c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fc ffcc 	bl	8001858 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fc ffc8 	bl	8001858 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e063      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048d6:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4319      	orrs	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	430b      	orrs	r3, r1
 80048fa:	492b      	ldr	r1, [pc, #172]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCC_OscConfig+0x65c>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fc ffa7 	bl	8001858 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fc ffa3 	bl	8001858 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e03e      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x5be>
 800492c:	e036      	b.n	800499c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCC_OscConfig+0x65c>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fc ff90 	bl	8001858 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fc ff8c 	bl	8001858 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e027      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x5ec>
 800495a:	e01f      	b.n	800499c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e01a      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <HAL_RCC_OscConfig+0x658>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	429a      	cmp	r2, r3
 800497a:	d10d      	bne.n	8004998 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d106      	bne.n	8004998 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	42470060 	.word	0x42470060

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e11a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b8f      	ldr	r3, [pc, #572]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d919      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x34>
 80049d8:	4b8a      	ldr	r3, [pc, #552]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a89      	ldr	r2, [pc, #548]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b87      	ldr	r3, [pc, #540]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0201 	bic.w	r2, r3, #1
 80049ec:	4985      	ldr	r1, [pc, #532]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f4:	4b83      	ldr	r3, [pc, #524]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0f9      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a12:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	497a      	ldr	r1, [pc, #488]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 808e 	beq.w	8004b4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d107      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a3a:	4b73      	ldr	r3, [pc, #460]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0d7      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a52:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e0cb      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a6a:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0bf      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0b7      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	495c      	ldr	r1, [pc, #368]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a9c:	f7fc fedc 	bl	8001858 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d112      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fc fed4 	bl	8001858 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e09b      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac2:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d1ee      	bne.n	8004aac <HAL_RCC_ClockConfig+0xfc>
 8004ace:	e03e      	b.n	8004b4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d112      	bne.n	8004afe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ada:	f7fc febd 	bl	8001858 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e084      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004af0:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d1ee      	bne.n	8004ada <HAL_RCC_ClockConfig+0x12a>
 8004afc:	e027      	b.n	8004b4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d11d      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b08:	f7fc fea6 	bl	8001858 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e06d      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b1e:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d1ee      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x158>
 8004b2a:	e010      	b.n	8004b4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fc fe94 	bl	8001858 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e05b      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ee      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d219      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d105      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1be>
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b68:	f043 0304 	orr.w	r3, r3, #4
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	4923      	ldr	r1, [pc, #140]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <HAL_RCC_ClockConfig+0x254>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e034      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4917      	ldr	r1, [pc, #92]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490f      	ldr	r1, [pc, #60]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f823 	bl	8004c18 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <HAL_RCC_ClockConfig+0x258>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490b      	ldr	r1, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x25c>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x264>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fde6 	bl	80017c0 <HAL_InitTick>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023c00 	.word	0x40023c00
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	0800a420 	.word	0x0800a420
 8004c10:	20000000 	.word	0x20000000
 8004c14:	20000004 	.word	0x20000004

08004c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c1c:	b092      	sub	sp, #72	; 0x48
 8004c1e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c20:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	d00d      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x34>
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	f200 80d5 	bhi.w	8004de0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x28>
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x2e>
 8004c3e:	e0cf      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b72      	ldr	r3, [pc, #456]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004c42:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c44:	e0da      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c46:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004c48:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c4a:	e0d7      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	0c9b      	lsrs	r3, r3, #18
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	0d9b      	lsrs	r3, r3, #22
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d05d      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2200      	movs	r2, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	0159      	lsls	r1, r3, #5
 8004c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c90:	0150      	lsls	r0, r2, #5
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4621      	mov	r1, r4
 8004c98:	1a51      	subs	r1, r2, r1
 8004c9a:	6139      	str	r1, [r7, #16]
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	018b      	lsls	r3, r1, #6
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cba:	4651      	mov	r1, sl
 8004cbc:	018a      	lsls	r2, r1, #6
 8004cbe:	46d4      	mov	ip, sl
 8004cc0:	ebb2 080c 	subs.w	r8, r2, ip
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cde:	4690      	mov	r8, r2
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	eb18 0303 	adds.w	r3, r8, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	462b      	mov	r3, r5
 8004cec:	eb49 0303 	adc.w	r3, r9, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	024b      	lsls	r3, r1, #9
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	4604      	mov	r4, r0
 8004d08:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	024a      	lsls	r2, r1, #9
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	2200      	movs	r2, #0
 8004d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d20:	f7fb fd46 	bl	80007b0 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2c:	e055      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2200      	movs	r2, #0
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	627a      	str	r2, [r7, #36]	; 0x24
 8004d36:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4c:	0150      	lsls	r0, r2, #5
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	46c4      	mov	ip, r8
 8004d54:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004d58:	4640      	mov	r0, r8
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	468c      	mov	ip, r1
 8004d5e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d6e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d72:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d76:	ebb2 040a 	subs.w	r4, r2, sl
 8004d7a:	eb63 050b 	sbc.w	r5, r3, fp
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	00eb      	lsls	r3, r5, #3
 8004d88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d8c:	00e2      	lsls	r2, r4, #3
 8004d8e:	4614      	mov	r4, r2
 8004d90:	461d      	mov	r5, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	18e3      	adds	r3, r4, r3
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	eb45 0303 	adc.w	r3, r5, r3
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dac:	4629      	mov	r1, r5
 8004dae:	028b      	lsls	r3, r1, #10
 8004db0:	4620      	mov	r0, r4
 8004db2:	4629      	mov	r1, r5
 8004db4:	4604      	mov	r4, r0
 8004db6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004dba:	4601      	mov	r1, r0
 8004dbc:	028a      	lsls	r2, r1, #10
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	61fa      	str	r2, [r7, #28]
 8004dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dce:	f7fb fcef 	bl	80007b0 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ddc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004dde:	e00d      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0b5b      	lsrs	r3, r3, #13
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	3301      	adds	r3, #1
 8004df0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3748      	adds	r7, #72	; 0x48
 8004e02:	46bd      	mov	sp, r7
 8004e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	007a1200 	.word	0x007a1200
 8004e14:	0800a414 	.word	0x0800a414

08004e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e24:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d12c      	bne.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e30:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e3c:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e016      	b.n	8004e76 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6253      	str	r3, [r2, #36]	; 0x24
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e68:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e7c:	d105      	bne.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e84:	d101      	bne.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e86:	2301      	movs	r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e96:	f043 0304 	orr.w	r3, r3, #4
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0201 	bic.w	r2, r3, #1
 8004ea4:	490b      	ldr	r1, [pc, #44]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d001      	beq.n	8004ebe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	40023c00 	.word	0x40023c00

08004ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e031      	b.n	8004f4e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc f9f8 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f000 fba8 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e032      	b.n	8004fd6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d00e      	beq.n	8004fa0 <HAL_TIM_Base_Start+0x48>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <HAL_TIM_Base_Start+0x88>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIM_Base_Start+0x48>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <HAL_TIM_Base_Start+0x8c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIM_Base_Start+0x48>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <HAL_TIM_Base_Start+0x90>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d111      	bne.n	8004fc4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d010      	beq.n	8004fd4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e007      	b.n	8004fd4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40010800 	.word	0x40010800

08004fec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e031      	b.n	8005062 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f829 	bl	800506a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 fb1e 	bl	800566c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_OC_Start_IT+0x24>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e022      	b.n	80050e6 <HAL_TIM_OC_Start_IT+0x6a>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d109      	bne.n	80050ba <HAL_TIM_OC_Start_IT+0x3e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e015      	b.n	80050e6 <HAL_TIM_OC_Start_IT+0x6a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_OC_Start_IT+0x58>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e008      	b.n	80050e6 <HAL_TIM_OC_Start_IT+0x6a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e097      	b.n	800521e <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_OC_Start_IT+0x82>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050fc:	e013      	b.n	8005126 <HAL_TIM_OC_Start_IT+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_OC_Start_IT+0x92>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800510c:	e00b      	b.n	8005126 <HAL_TIM_OC_Start_IT+0xaa>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_OC_Start_IT+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800511c:	e003      	b.n	8005126 <HAL_TIM_OC_Start_IT+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d841      	bhi.n	80051b0 <HAL_TIM_OC_Start_IT+0x134>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_TIM_OC_Start_IT+0xb8>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005169 	.word	0x08005169
 8005138:	080051b1 	.word	0x080051b1
 800513c:	080051b1 	.word	0x080051b1
 8005140:	080051b1 	.word	0x080051b1
 8005144:	0800517b 	.word	0x0800517b
 8005148:	080051b1 	.word	0x080051b1
 800514c:	080051b1 	.word	0x080051b1
 8005150:	080051b1 	.word	0x080051b1
 8005154:	0800518d 	.word	0x0800518d
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051b1 	.word	0x080051b1
 8005160:	080051b1 	.word	0x080051b1
 8005164:	0800519f 	.word	0x0800519f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0202 	orr.w	r2, r2, #2
 8005176:	60da      	str	r2, [r3, #12]
      break;
 8005178:	e01b      	b.n	80051b2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0204 	orr.w	r2, r2, #4
 8005188:	60da      	str	r2, [r3, #12]
      break;
 800518a:	e012      	b.n	80051b2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0208 	orr.w	r2, r2, #8
 800519a:	60da      	str	r2, [r3, #12]
      break;
 800519c:	e009      	b.n	80051b2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0210 	orr.w	r2, r2, #16
 80051ac:	60da      	str	r2, [r3, #12]
      break;
 80051ae:	e000      	b.n	80051b2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80051b0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fc43 	bl	8005a46 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_OC_Start_IT+0x16c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a16      	ldr	r2, [pc, #88]	; (8005228 <HAL_TIM_OC_Start_IT+0x1ac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_OC_Start_IT+0x16c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <HAL_TIM_OC_Start_IT+0x1b0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_OC_Start_IT+0x16c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_TIM_OC_Start_IT+0x1b4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d111      	bne.n	800520c <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d010      	beq.n	800521c <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e007      	b.n	800521c <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40010800 	.word	0x40010800

08005234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b02      	cmp	r3, #2
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0202 	mvn.w	r2, #2
 8005260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9dd 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb ff0c 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9df 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0204 	mvn.w	r2, #4
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9b3 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fee2 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f9b5 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0208 	mvn.w	r2, #8
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2204      	movs	r2, #4
 800530e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f989 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb feb8 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f98b 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0210 	mvn.w	r2, #16
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2208      	movs	r2, #8
 8005362:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f95f 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb fe8e 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f961 	bl	8005648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0201 	mvn.w	r2, #1
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f936 	bl	8005624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f93b 	bl	800565a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005402:	2302      	movs	r3, #2
 8005404:	e046      	b.n	8005494 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d839      	bhi.n	8005488 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	08005451 	.word	0x08005451
 8005420:	08005489 	.word	0x08005489
 8005424:	08005489 	.word	0x08005489
 8005428:	08005489 	.word	0x08005489
 800542c:	0800545f 	.word	0x0800545f
 8005430:	08005489 	.word	0x08005489
 8005434:	08005489 	.word	0x08005489
 8005438:	08005489 	.word	0x08005489
 800543c:	0800546d 	.word	0x0800546d
 8005440:	08005489 	.word	0x08005489
 8005444:	08005489 	.word	0x08005489
 8005448:	08005489 	.word	0x08005489
 800544c:	0800547b 	.word	0x0800547b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f96a 	bl	8005730 <TIM_OC1_SetConfig>
      break;
 800545c:	e015      	b.n	800548a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f99f 	bl	80057a8 <TIM_OC2_SetConfig>
      break;
 800546a:	e00e      	b.n	800548a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f9d6 	bl	8005824 <TIM_OC3_SetConfig>
      break;
 8005478:	e007      	b.n	800548a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fa0c 	bl	800589e <TIM_OC4_SetConfig>
      break;
 8005486:	e000      	b.n	800548a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_ConfigClockSource+0x18>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0b3      	b.n	800561c <HAL_TIM_ConfigClockSource+0x180>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ec:	d03e      	beq.n	800556c <HAL_TIM_ConfigClockSource+0xd0>
 80054ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f2:	f200 8087 	bhi.w	8005604 <HAL_TIM_ConfigClockSource+0x168>
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	f000 8085 	beq.w	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005502:	d87f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d01a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0xa2>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d87b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d050      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x116>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d877      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d03c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xf6>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d873      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d058      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x136>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d86f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d064      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x156>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d86b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d060      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x156>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d867      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x156>
 8005538:	2b10      	cmp	r3, #16
 800553a:	d05a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800553c:	e062      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f000 fa5b 	bl	8005a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005560:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
      break;
 800556a:	e04e      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f000 fa44 	bl	8005a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558e:	609a      	str	r2, [r3, #8]
      break;
 8005590:	e03b      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 f9bb 	bl	800591a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2150      	movs	r1, #80	; 0x50
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa12 	bl	80059d4 <TIM_ITRx_SetConfig>
      break;
 80055b0:	e02b      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f9d9 	bl	8005976 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2160      	movs	r1, #96	; 0x60
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fa02 	bl	80059d4 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e01b      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f99b 	bl	800591a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2140      	movs	r1, #64	; 0x40
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f9f2 	bl	80059d4 <TIM_ITRx_SetConfig>
      break;
 80055f0:	e00b      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 f9e9 	bl	80059d4 <TIM_ITRx_SetConfig>
        break;
 8005602:	e002      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005608:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x28>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_Base_SetConfig+0xb0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x28>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a24      	ldr	r2, [pc, #144]	; (8005720 <TIM_Base_SetConfig+0xb4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d013      	beq.n	80056d6 <TIM_Base_SetConfig+0x6a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1a      	ldr	r2, [pc, #104]	; (800571c <TIM_Base_SetConfig+0xb0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_Base_SetConfig+0x6a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <TIM_Base_SetConfig+0xb4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0x6a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <TIM_Base_SetConfig+0xb8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0x6a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <TIM_Base_SetConfig+0xbc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0x6a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <TIM_Base_SetConfig+0xc0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	615a      	str	r2, [r3, #20]
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40010800 	.word	0x40010800
 8005728:	40010c00 	.word	0x40010c00
 800572c:	40011000 	.word	0x40011000

08005730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 0302 	bic.w	r3, r3, #2
 8005778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	031b      	lsls	r3, r3, #12
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f023 0201 	bic.w	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f023 030a 	bic.w	r3, r3, #10
 8005956:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0210 	bic.w	r2, r3, #16
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f043 0307 	orr.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	609a      	str	r2, [r3, #8]
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2201      	movs	r2, #1
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	401a      	ands	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e046      	b.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a10      	ldr	r2, [pc, #64]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10c      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40010800 	.word	0x40010800

08005b4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b80:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	4013      	ands	r3, r2
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bac:	b084      	sub	sp, #16
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	f107 0014 	add.w	r0, r7, #20
 8005bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	b004      	add	sp, #16
 8005bea:	4770      	bx	lr

08005bec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b09b      	sub	sp, #108	; 0x6c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d81f      	bhi.n	8005c5e <USB_ActivateEndpoint+0x72>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <USB_ActivateEndpoint+0x38>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c67 	.word	0x08005c67
 8005c30:	08005c43 	.word	0x08005c43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c40:	e012      	b.n	8005c68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c4e:	e00b      	b.n	8005c68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c5c:	e004      	b.n	8005c68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c64:	e000      	b.n	8005c68 <USB_ActivateEndpoint+0x7c>
      break;
 8005c66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	7b1b      	ldrb	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8149 	bne.w	8005f6c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8084 	beq.w	8005dec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	011a      	lsls	r2, r3, #4
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	88db      	ldrh	r3, [r3, #6]
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	81fb      	strh	r3, [r7, #14]
 8005d26:	89fb      	ldrh	r3, [r7, #14]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <USB_ActivateEndpoint+0x17c>
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	81bb      	strh	r3, [r7, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	89bb      	ldrh	r3, [r7, #12]
 8005d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d020      	beq.n	8005db2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d86:	813b      	strh	r3, [r7, #8]
 8005d88:	893b      	ldrh	r3, [r7, #8]
 8005d8a:	f083 0320 	eor.w	r3, r3, #32
 8005d8e:	813b      	strh	r3, [r7, #8]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	893b      	ldrh	r3, [r7, #8]
 8005d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
 8005db0:	e27f      	b.n	80062b2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc8:	817b      	strh	r3, [r7, #10]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	897b      	ldrh	r3, [r7, #10]
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
 8005dea:	e262      	b.n	80062b2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	4413      	add	r3, r2
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	011a      	lsls	r2, r3, #4
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	88db      	ldrh	r3, [r3, #6]
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	4413      	add	r3, r2
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	011a      	lsls	r2, r3, #4
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d112      	bne.n	8005e72 <USB_ActivateEndpoint+0x286>
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e02f      	b.n	8005ed2 <USB_ActivateEndpoint+0x2e6>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b3e      	cmp	r3, #62	; 0x3e
 8005e78:	d813      	bhi.n	8005ea2 <USB_ActivateEndpoint+0x2b6>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	663b      	str	r3, [r7, #96]	; 0x60
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <USB_ActivateEndpoint+0x2a8>
 8005e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e90:	3301      	adds	r3, #1
 8005e92:	663b      	str	r3, [r7, #96]	; 0x60
 8005e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e017      	b.n	8005ed2 <USB_ActivateEndpoint+0x2e6>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <USB_ActivateEndpoint+0x2d0>
 8005eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	663b      	str	r3, [r7, #96]	; 0x60
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	83fb      	strh	r3, [r7, #30]
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01b      	beq.n	8005f22 <USB_ActivateEndpoint+0x336>
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	83bb      	strh	r3, [r7, #28]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	8bbb      	ldrh	r3, [r7, #28]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	837b      	strh	r3, [r7, #26]
 8005f3a:	8b7b      	ldrh	r3, [r7, #26]
 8005f3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f40:	837b      	strh	r3, [r7, #26]
 8005f42:	8b7b      	ldrh	r3, [r7, #26]
 8005f44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f48:	837b      	strh	r3, [r7, #26]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	8b7b      	ldrh	r3, [r7, #26]
 8005f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	8013      	strh	r3, [r2, #0]
 8005f6a:	e1a2      	b.n	80062b2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fb8:	4413      	add	r3, r2
 8005fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	891b      	ldrh	r3, [r3, #8]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fec:	4413      	add	r3, r2
 8005fee:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	011a      	lsls	r2, r3, #4
 8005ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	895b      	ldrh	r3, [r3, #10]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8091 	bne.w	800613c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006028:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800602a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01b      	beq.n	800606a <USB_ActivateEndpoint+0x47e>
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	877b      	strh	r3, [r7, #58]	; 0x3a
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	873b      	strh	r3, [r7, #56]	; 0x38
 8006078:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01b      	beq.n	80060ba <USB_ActivateEndpoint+0x4ce>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006098:	86fb      	strh	r3, [r7, #54]	; 0x36
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	867b      	strh	r3, [r7, #50]	; 0x32
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e0ba      	b.n	80062b2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800614c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <USB_ActivateEndpoint+0x5a8>
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	b29b      	uxth	r3, r3
 8006192:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80061a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01d      	beq.n	80061ec <USB_ActivateEndpoint+0x600>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	78db      	ldrb	r3, [r3, #3]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d024      	beq.n	800623e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800620e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006212:	f083 0320 	eor.w	r3, r3, #32
 8006216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]
 800623c:	e01d      	b.n	800627a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006254:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80062b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	376c      	adds	r7, #108	; 0x6c
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b08d      	sub	sp, #52	; 0x34
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	7b1b      	ldrb	r3, [r3, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 808e 	bne.w	80063f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d044      	beq.n	8006366 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	81bb      	strh	r3, [r7, #12]
 80062ea:	89bb      	ldrh	r3, [r7, #12]
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01b      	beq.n	800632c <USB_DeactivateEndpoint+0x6c>
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	817b      	strh	r3, [r7, #10]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006328:	b29b      	uxth	r3, r3
 800632a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006342:	813b      	strh	r3, [r7, #8]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	893b      	ldrh	r3, [r7, #8]
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]
 8006364:	e192      	b.n	800668c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	827b      	strh	r3, [r7, #18]
 8006374:	8a7b      	ldrh	r3, [r7, #18]
 8006376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01b      	beq.n	80063b6 <USB_DeactivateEndpoint+0xf6>
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	823b      	strh	r3, [r7, #16]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	8a3b      	ldrh	r3, [r7, #16]
 80063a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	81fb      	strh	r3, [r7, #14]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	89fb      	ldrh	r3, [r7, #14]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
 80063ee:	e14d      	b.n	800668c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 80a5 	bne.w	8006544 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	843b      	strh	r3, [r7, #32]
 8006408:	8c3b      	ldrh	r3, [r7, #32]
 800640a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <USB_DeactivateEndpoint+0x18a>
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006428:	83fb      	strh	r3, [r7, #30]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	8bfb      	ldrh	r3, [r7, #30]
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	83bb      	strh	r3, [r7, #28]
 8006458:	8bbb      	ldrh	r3, [r7, #28]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01b      	beq.n	800649a <USB_DeactivateEndpoint+0x1da>
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006478:	837b      	strh	r3, [r7, #26]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	8b7b      	ldrh	r3, [r7, #26]
 8006486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006496:	b29b      	uxth	r3, r3
 8006498:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b0:	833b      	strh	r3, [r7, #24]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	8b3b      	ldrh	r3, [r7, #24]
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e8:	82fb      	strh	r3, [r7, #22]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	441a      	add	r2, r3
 80064f4:	8afb      	ldrh	r3, [r7, #22]
 80064f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	b29b      	uxth	r3, r3
 8006508:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006520:	82bb      	strh	r3, [r7, #20]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	441a      	add	r2, r3
 800652c:	8abb      	ldrh	r3, [r7, #20]
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]
 8006542:	e0a3      	b.n	800668c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01b      	beq.n	8006594 <USB_DeactivateEndpoint+0x2d4>
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80065a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <USB_DeactivateEndpoint+0x324>
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006650:	b29b      	uxth	r3, r3
 8006652:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	847b      	strh	r3, [r7, #34]	; 0x22
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006688:	b29b      	uxth	r3, r3
 800668a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3734      	adds	r7, #52	; 0x34
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0cc      	sub	sp, #304	; 0x130
 800669c:	af00      	add	r7, sp, #0
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a6:	6018      	str	r0, [r3, #0]
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	f041 817d 	bne.w	80079be <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d908      	bls.n	80066f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80066f0:	e007      	b.n	8006702 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	7b1b      	ldrb	r3, [r3, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d152      	bne.n	80067b8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6959      	ldr	r1, [r3, #20]
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	88da      	ldrh	r2, [r3, #6]
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672e:	b29b      	uxth	r3, r3
 8006730:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006734:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006738:	6800      	ldr	r0, [r0, #0]
 800673a:	f001 ff0e 	bl	800855a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006746:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800674a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006760:	b29b      	uxth	r3, r3
 8006762:	4619      	mov	r1, r3
 8006764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006768:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800676c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006770:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	440a      	add	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	011a      	lsls	r2, r3, #4
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4413      	add	r3, r2
 8006794:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	f001 b8b5 	b.w	8007922 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	78db      	ldrb	r3, [r3, #3]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	f040 84c6 	bne.w	8007156 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80067ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	f240 8443 	bls.w	800706e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a1a      	ldr	r2, [r3, #32]
 8006850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 823e 	beq.w	8006d06 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800688a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006892:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006896:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800689a:	6812      	ldr	r2, [r2, #0]
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 809a 	bne.w	80069e4 <USB_EPStartXfer+0x34c>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068e2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	440a      	add	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	011a      	lsls	r2, r3, #4
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4413      	add	r3, r2
 8006906:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d122      	bne.n	8006962 <USB_EPStartXfer+0x2ca>
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800692e:	b29a      	uxth	r2, r3
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006952:	b29a      	uxth	r2, r3
 8006954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	e079      	b.n	8006a56 <USB_EPStartXfer+0x3be>
 8006962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006966:	2b3e      	cmp	r3, #62	; 0x3e
 8006968:	d81b      	bhi.n	80069a2 <USB_EPStartXfer+0x30a>
 800696a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <USB_EPStartXfer+0x2f2>
 8006980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006984:	3301      	adds	r3, #1
 8006986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800698a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800698e:	b29b      	uxth	r3, r3
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	b29a      	uxth	r2, r3
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	e059      	b.n	8006a56 <USB_EPStartXfer+0x3be>
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <USB_EPStartXfer+0x32a>
 80069b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069bc:	3b01      	subs	r3, #1
 80069be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	801a      	strh	r2, [r3, #0]
 80069e2:	e038      	b.n	8006a56 <USB_EPStartXfer+0x3be>
 80069e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d130      	bne.n	8006a56 <USB_EPStartXfer+0x3be>
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a12:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	440a      	add	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	895b      	ldrh	r3, [r3, #10]
 8006a62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6959      	ldr	r1, [r3, #20]
 8006a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a84:	6800      	ldr	r0, [r0, #0]
 8006a86:	f001 fd68 	bl	800855a <USB_WritePMA>
            ep->xfer_buff += len;
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9a:	441a      	add	r2, r3
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90f      	bls.n	8006ae4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad4:	1ad2      	subs	r2, r2, r3
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	621a      	str	r2, [r3, #32]
 8006ae2:	e00e      	b.n	8006b02 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 809a 	bne.w	8006c48 <USB_EPStartXfer+0x5b0>
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b46:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	011a      	lsls	r2, r3, #4
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d122      	bne.n	8006bc6 <USB_EPStartXfer+0x52e>
 8006b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e083      	b.n	8006cce <USB_EPStartXfer+0x636>
 8006bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bca:	2b3e      	cmp	r3, #62	; 0x3e
 8006bcc:	d81b      	bhi.n	8006c06 <USB_EPStartXfer+0x56e>
 8006bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <USB_EPStartXfer+0x556>
 8006be4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006be8:	3301      	adds	r3, #1
 8006bea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e063      	b.n	8006cce <USB_EPStartXfer+0x636>
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USB_EPStartXfer+0x58e>
 8006c1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c20:	3b01      	subs	r3, #1
 8006c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e042      	b.n	8006cce <USB_EPStartXfer+0x636>
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d13a      	bne.n	8006cce <USB_EPStartXfer+0x636>
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	440a      	add	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	011a      	lsls	r2, r3, #4
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	891b      	ldrh	r3, [r3, #8]
 8006cda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cf4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cf8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f001 fc2c 	bl	800855a <USB_WritePMA>
 8006d02:	f000 be0e 	b.w	8007922 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d16d      	bne.n	8006df2 <USB_EPStartXfer+0x75a>
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d36:	4413      	add	r3, r2
 8006d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	011a      	lsls	r2, r3, #4
 8006d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d50:	647b      	str	r3, [r7, #68]	; 0x44
 8006d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d112      	bne.n	8006d80 <USB_EPStartXfer+0x6e8>
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e063      	b.n	8006e48 <USB_EPStartXfer+0x7b0>
 8006d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d84:	2b3e      	cmp	r3, #62	; 0x3e
 8006d86:	d817      	bhi.n	8006db8 <USB_EPStartXfer+0x720>
 8006d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <USB_EPStartXfer+0x710>
 8006d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006da2:	3301      	adds	r3, #1
 8006da4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	029b      	lsls	r3, r3, #10
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	e047      	b.n	8006e48 <USB_EPStartXfer+0x7b0>
 8006db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <USB_EPStartXfer+0x740>
 8006dce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	e02a      	b.n	8006e48 <USB_EPStartXfer+0x7b0>
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d122      	bne.n	8006e48 <USB_EPStartXfer+0x7b0>
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e22:	4413      	add	r3, r2
 8006e24:	653b      	str	r3, [r7, #80]	; 0x50
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	011a      	lsls	r2, r3, #4
 8006e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e36:	4413      	add	r3, r2
 8006e38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	891b      	ldrh	r3, [r3, #8]
 8006e54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6959      	ldr	r1, [r3, #20]
 8006e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e6e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e72:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	f001 fb6f 	bl	800855a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90f      	bls.n	8006ed6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	621a      	str	r2, [r3, #32]
 8006ed4:	e00e      	b.n	8006ef4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40
 8006f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d16d      	bne.n	8006fec <USB_EPStartXfer+0x954>
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	4413      	add	r3, r2
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	011a      	lsls	r2, r3, #4
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d112      	bne.n	8006f7a <USB_EPStartXfer+0x8e2>
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e05d      	b.n	8007036 <USB_EPStartXfer+0x99e>
 8006f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f80:	d817      	bhi.n	8006fb2 <USB_EPStartXfer+0x91a>
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <USB_EPStartXfer+0x90a>
 8006f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	029b      	lsls	r3, r3, #10
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e041      	b.n	8007036 <USB_EPStartXfer+0x99e>
 8006fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0x93a>
 8006fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	e024      	b.n	8007036 <USB_EPStartXfer+0x99e>
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d11c      	bne.n	8007036 <USB_EPStartXfer+0x99e>
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700a:	b29b      	uxth	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007010:	4413      	add	r3, r2
 8007012:	643b      	str	r3, [r7, #64]	; 0x40
 8007014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	011a      	lsls	r2, r3, #4
 8007022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007024:	4413      	add	r3, r2
 8007026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800702c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007030:	b29a      	uxth	r2, r3
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	895b      	ldrh	r3, [r3, #10]
 8007042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6959      	ldr	r1, [r3, #20]
 8007052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007056:	b29b      	uxth	r3, r3
 8007058:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800705c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007060:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007064:	6800      	ldr	r0, [r0, #0]
 8007066:	f001 fa78 	bl	800855a <USB_WritePMA>
 800706a:	f000 bc5a 	b.w	8007922 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070fa:	4413      	add	r3, r2
 80070fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	011a      	lsls	r2, r3, #4
 800710c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800710e:	4413      	add	r3, r2
 8007110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007114:	65bb      	str	r3, [r7, #88]	; 0x58
 8007116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711a:	b29a      	uxth	r2, r3
 800711c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	891b      	ldrh	r3, [r3, #8]
 800712c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6959      	ldr	r1, [r3, #20]
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007140:	b29b      	uxth	r3, r3
 8007142:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007146:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800714a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800714e:	6800      	ldr	r0, [r0, #0]
 8007150:	f001 fa03 	bl	800855a <USB_WritePMA>
 8007154:	e3e5      	b.n	8007922 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 81bc 	beq.w	8007570 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d16d      	bne.n	80072f2 <USB_EPStartXfer+0xc5a>
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	67bb      	str	r3, [r7, #120]	; 0x78
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007230:	b29b      	uxth	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007236:	4413      	add	r3, r2
 8007238:	67bb      	str	r3, [r7, #120]	; 0x78
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	011a      	lsls	r2, r3, #4
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	4413      	add	r3, r2
 800724c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007250:	677b      	str	r3, [r7, #116]	; 0x74
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d112      	bne.n	8007280 <USB_EPStartXfer+0xbe8>
 800725a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007264:	b29a      	uxth	r2, r3
 8007266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29b      	uxth	r3, r3
 8007270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007278:	b29a      	uxth	r2, r3
 800727a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	e060      	b.n	8007342 <USB_EPStartXfer+0xcaa>
 8007280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007284:	2b3e      	cmp	r3, #62	; 0x3e
 8007286:	d817      	bhi.n	80072b8 <USB_EPStartXfer+0xc20>
 8007288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <USB_EPStartXfer+0xc10>
 800729e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072a2:	3301      	adds	r3, #1
 80072a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	029b      	lsls	r3, r3, #10
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	e044      	b.n	8007342 <USB_EPStartXfer+0xcaa>
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <USB_EPStartXfer+0xc40>
 80072ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072d2:	3b01      	subs	r3, #1
 80072d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80072d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072dc:	b29b      	uxth	r3, r3
 80072de:	029b      	lsls	r3, r3, #10
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e027      	b.n	8007342 <USB_EPStartXfer+0xcaa>
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d11f      	bne.n	8007342 <USB_EPStartXfer+0xcaa>
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007318:	4413      	add	r3, r2
 800731a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	011a      	lsls	r2, r3, #4
 800732c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007330:	4413      	add	r3, r2
 8007332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007336:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733c:	b29a      	uxth	r2, r3
 800733e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007340:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6959      	ldr	r1, [r3, #20]
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	b29b      	uxth	r3, r3
 8007364:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007368:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800736c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007370:	6800      	ldr	r0, [r0, #0]
 8007372:	f001 f8f2 	bl	800855a <USB_WritePMA>
          ep->xfer_buff += len;
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007386:	441a      	add	r2, r3
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d90f      	bls.n	80073d0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a1a      	ldr	r2, [r3, #32]
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	621a      	str	r2, [r3, #32]
 80073ce:	e00e      	b.n	80073ee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80073d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2200      	movs	r2, #0
 80073ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80073ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8295 	beq.w	8007922 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d16d      	bne.n	80074e4 <USB_EPStartXfer+0xe4c>
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	66bb      	str	r3, [r7, #104]	; 0x68
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007428:	4413      	add	r3, r2
 800742a:	66bb      	str	r3, [r7, #104]	; 0x68
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	011a      	lsls	r2, r3, #4
 800743a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800743c:	4413      	add	r3, r2
 800743e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007442:	667b      	str	r3, [r7, #100]	; 0x64
 8007444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d112      	bne.n	8007472 <USB_EPStartXfer+0xdda>
 800744c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007456:	b29a      	uxth	r2, r3
 8007458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746a:	b29a      	uxth	r2, r3
 800746c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e063      	b.n	800753a <USB_EPStartXfer+0xea2>
 8007472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007476:	2b3e      	cmp	r3, #62	; 0x3e
 8007478:	d817      	bhi.n	80074aa <USB_EPStartXfer+0xe12>
 800747a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <USB_EPStartXfer+0xe02>
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	3301      	adds	r3, #1
 8007496:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749e:	b29b      	uxth	r3, r3
 80074a0:	029b      	lsls	r3, r3, #10
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	e047      	b.n	800753a <USB_EPStartXfer+0xea2>
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <USB_EPStartXfer+0xe32>
 80074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	029b      	lsls	r3, r3, #10
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e02a      	b.n	800753a <USB_EPStartXfer+0xea2>
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d122      	bne.n	800753a <USB_EPStartXfer+0xea2>
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007514:	4413      	add	r3, r2
 8007516:	673b      	str	r3, [r7, #112]	; 0x70
 8007518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007528:	4413      	add	r3, r2
 800752a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800752e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	b29a      	uxth	r2, r3
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	891b      	ldrh	r3, [r3, #8]
 8007546:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6959      	ldr	r1, [r3, #20]
 8007556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755a:	b29b      	uxth	r3, r3
 800755c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007560:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007564:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007568:	6800      	ldr	r0, [r0, #0]
 800756a:	f000 fff6 	bl	800855a <USB_WritePMA>
 800756e:	e1d8      	b.n	8007922 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d178      	bne.n	8007672 <USB_EPStartXfer+0xfda>
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a4:	4413      	add	r3, r2
 80075a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	011a      	lsls	r2, r3, #4
 80075b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075bc:	4413      	add	r3, r2
 80075be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d116      	bne.n	80075fc <USB_EPStartXfer+0xf64>
 80075ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e06b      	b.n	80076d4 <USB_EPStartXfer+0x103c>
 80075fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007600:	2b3e      	cmp	r3, #62	; 0x3e
 8007602:	d818      	bhi.n	8007636 <USB_EPStartXfer+0xf9e>
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	085b      	lsrs	r3, r3, #1
 800760a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800760e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <USB_EPStartXfer+0xf8c>
 800761a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800761e:	3301      	adds	r3, #1
 8007620:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007624:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007628:	b29b      	uxth	r3, r3
 800762a:	029b      	lsls	r3, r3, #10
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e04e      	b.n	80076d4 <USB_EPStartXfer+0x103c>
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <USB_EPStartXfer+0xfbe>
 800764c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007650:	3b01      	subs	r3, #1
 8007652:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007656:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800765a:	b29b      	uxth	r3, r3
 800765c:	029b      	lsls	r3, r3, #10
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007668:	b29a      	uxth	r2, r3
 800766a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	e030      	b.n	80076d4 <USB_EPStartXfer+0x103c>
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d128      	bne.n	80076d4 <USB_EPStartXfer+0x103c>
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076a6:	4413      	add	r3, r2
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	011a      	lsls	r2, r3, #4
 80076ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076be:	4413      	add	r3, r2
 80076c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	891b      	ldrh	r3, [r3, #8]
 80076e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6959      	ldr	r1, [r3, #20]
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007702:	6800      	ldr	r0, [r0, #0]
 8007704:	f000 ff29 	bl	800855a <USB_WritePMA>
          ep->xfer_buff += len;
 8007708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007718:	441a      	add	r2, r3
 800771a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	429a      	cmp	r2, r3
 8007740:	d90f      	bls.n	8007762 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a1a      	ldr	r2, [r3, #32]
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	621a      	str	r2, [r3, #32]
 8007760:	e00e      	b.n	8007780 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80cc 	beq.w	8007922 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800778a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d178      	bne.n	800789a <USB_EPStartXfer+0x1202>
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077cc:	4413      	add	r3, r2
 80077ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	011a      	lsls	r2, r3, #4
 80077e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e4:	4413      	add	r3, r2
 80077e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d116      	bne.n	8007824 <USB_EPStartXfer+0x118c>
 80077f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781a:	b29a      	uxth	r2, r3
 800781c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	e064      	b.n	80078ee <USB_EPStartXfer+0x1256>
 8007824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007828:	2b3e      	cmp	r3, #62	; 0x3e
 800782a:	d818      	bhi.n	800785e <USB_EPStartXfer+0x11c6>
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d004      	beq.n	800784c <USB_EPStartXfer+0x11b4>
 8007842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007846:	3301      	adds	r3, #1
 8007848:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800784c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29a      	uxth	r2, r3
 8007856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e047      	b.n	80078ee <USB_EPStartXfer+0x1256>
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USB_EPStartXfer+0x11e6>
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	3b01      	subs	r3, #1
 800787a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800787e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007890:	b29a      	uxth	r2, r3
 8007892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	e029      	b.n	80078ee <USB_EPStartXfer+0x1256>
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d121      	bne.n	80078ee <USB_EPStartXfer+0x1256>
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	011a      	lsls	r2, r3, #4
 80078d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d8:	4413      	add	r3, r2
 80078da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	895b      	ldrh	r3, [r3, #10]
 80078fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6959      	ldr	r1, [r3, #20]
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	b29b      	uxth	r3, r3
 8007910:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007914:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007918:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f000 fe1c 	bl	800855a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007944:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007950:	8013      	strh	r3, [r2, #0]
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800795a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800795e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007962:	8812      	ldrh	r2, [r2, #0]
 8007964:	f082 0210 	eor.w	r2, r2, #16
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007972:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007976:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800797a:	8812      	ldrh	r2, [r2, #0]
 800797c:	f082 0220 	eor.w	r2, r2, #32
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	441a      	add	r2, r3
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8013      	strh	r3, [r2, #0]
 80079ba:	f000 bc9f 	b.w	80082fc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	7b1b      	ldrb	r3, [r3, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 80ae 	bne.w	8007b2c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699a      	ldr	r2, [r3, #24]
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d917      	bls.n	8007a1c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	619a      	str	r2, [r3, #24]
 8007a1a:	e00e      	b.n	8007a3a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a5e:	4413      	add	r3, r2
 8007a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	011a      	lsls	r2, r3, #4
 8007a72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a76:	4413      	add	r3, r2
 8007a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <USB_EPStartXfer+0x141e>
 8007a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	e3e8      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
 8007ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aba:	2b3e      	cmp	r3, #62	; 0x3e
 8007abc:	d818      	bhi.n	8007af0 <USB_EPStartXfer+0x1458>
 8007abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <USB_EPStartXfer+0x1446>
 8007ad4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ad8:	3301      	adds	r3, #1
 8007ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	029b      	lsls	r3, r3, #10
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aec:	801a      	strh	r2, [r3, #0]
 8007aee:	e3cb      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
 8007af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afe:	f003 031f 	and.w	r3, r3, #31
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <USB_EPStartXfer+0x1478>
 8007b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	029b      	lsls	r3, r3, #10
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	e3ad      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	f040 8200 	bne.w	8007f3e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 8091 	bne.w	8007c72 <USB_EPStartXfer+0x15da>
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b74:	4413      	add	r3, r2
 8007b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d116      	bne.n	8007bd4 <USB_EPStartXfer+0x153c>
 8007ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e083      	b.n	8007cdc <USB_EPStartXfer+0x1644>
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b3e      	cmp	r3, #62	; 0x3e
 8007be2:	d820      	bhi.n	8007c26 <USB_EPStartXfer+0x158e>
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USB_EPStartXfer+0x157c>
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	029b      	lsls	r3, r3, #10
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e05a      	b.n	8007cdc <USB_EPStartXfer+0x1644>
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <USB_EPStartXfer+0x15be>
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	029b      	lsls	r3, r3, #10
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	e034      	b.n	8007cdc <USB_EPStartXfer+0x1644>
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d12c      	bne.n	8007cdc <USB_EPStartXfer+0x1644>
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	011a      	lsls	r2, r3, #4
 8007cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 8091 	bne.w	8007e1e <USB_EPStartXfer+0x1786>
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d20:	4413      	add	r3, r2
 8007d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	011a      	lsls	r2, r3, #4
 8007d34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d116      	bne.n	8007d80 <USB_EPStartXfer+0x16e8>
 8007d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e07c      	b.n	8007e7a <USB_EPStartXfer+0x17e2>
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d8e:	d820      	bhi.n	8007dd2 <USB_EPStartXfer+0x173a>
 8007d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <USB_EPStartXfer+0x1728>
 8007db6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	e053      	b.n	8007e7a <USB_EPStartXfer+0x17e2>
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <USB_EPStartXfer+0x176a>
 8007df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e02d      	b.n	8007e7a <USB_EPStartXfer+0x17e2>
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d125      	bne.n	8007e7a <USB_EPStartXfer+0x17e2>
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e44:	4413      	add	r3, r2
 8007e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	011a      	lsls	r2, r3, #4
 8007e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 81fe 	beq.w	8008288 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007eac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <USB_EPStartXfer+0x182c>
 8007eb8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ec4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 81db 	bne.w	8008288 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ed2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 81d4 	bne.w	8008288 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	441a      	add	r2, r3
 8007f24:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	8013      	strh	r3, [r2, #0]
 8007f3c:	e1a4      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	78db      	ldrb	r3, [r3, #3]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	f040 819a 	bne.w	8008284 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d917      	bls.n	8007f9c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699a      	ldr	r2, [r3, #24]
 8007f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8c:	1ad2      	subs	r2, r2, r3
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	619a      	str	r2, [r3, #24]
 8007f9a:	e00e      	b.n	8007fba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d178      	bne.n	80080bc <USB_EPStartXfer+0x1a24>
 8007fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fee:	4413      	add	r3, r2
 8007ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	011a      	lsls	r2, r3, #4
 8008002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008006:	4413      	add	r3, r2
 8008008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800800c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d116      	bne.n	8008046 <USB_EPStartXfer+0x19ae>
 8008018:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008024:	b29a      	uxth	r2, r3
 8008026:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e06b      	b.n	800811e <USB_EPStartXfer+0x1a86>
 8008046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804a:	2b3e      	cmp	r3, #62	; 0x3e
 800804c:	d818      	bhi.n	8008080 <USB_EPStartXfer+0x19e8>
 800804e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <USB_EPStartXfer+0x19d6>
 8008064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008068:	3301      	adds	r3, #1
 800806a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008072:	b29b      	uxth	r3, r3
 8008074:	029b      	lsls	r3, r3, #10
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e04e      	b.n	800811e <USB_EPStartXfer+0x1a86>
 8008080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800808a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808e:	f003 031f 	and.w	r3, r3, #31
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <USB_EPStartXfer+0x1a08>
 8008096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800809a:	3b01      	subs	r3, #1
 800809c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	029b      	lsls	r3, r3, #10
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e030      	b.n	800811e <USB_EPStartXfer+0x1a86>
 80080bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d128      	bne.n	800811e <USB_EPStartXfer+0x1a86>
 80080cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	4413      	add	r3, r2
 80080f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	011a      	lsls	r2, r3, #4
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	4413      	add	r3, r2
 800810a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800810e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008116:	b29a      	uxth	r2, r3
 8008118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d178      	bne.n	800822e <USB_EPStartXfer+0x1b96>
 800813c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800814a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008160:	4413      	add	r3, r2
 8008162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	011a      	lsls	r2, r3, #4
 8008174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008178:	4413      	add	r3, r2
 800817a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800817e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d116      	bne.n	80081b8 <USB_EPStartXfer+0x1b20>
 800818a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008196:	b29a      	uxth	r2, r3
 8008198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	e067      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
 80081b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081bc:	2b3e      	cmp	r3, #62	; 0x3e
 80081be:	d818      	bhi.n	80081f2 <USB_EPStartXfer+0x1b5a>
 80081c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <USB_EPStartXfer+0x1b48>
 80081d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081da:	3301      	adds	r3, #1
 80081dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	e04a      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <USB_EPStartXfer+0x1b7a>
 8008208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800820c:	3b01      	subs	r3, #1
 800820e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008216:	b29b      	uxth	r3, r3
 8008218:	029b      	lsls	r3, r3, #10
 800821a:	b29b      	uxth	r3, r3
 800821c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008224:	b29a      	uxth	r2, r3
 8008226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	e02c      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
 800822e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d124      	bne.n	8008288 <USB_EPStartXfer+0x1bf0>
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824c:	b29b      	uxth	r3, r3
 800824e:	461a      	mov	r2, r3
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	4413      	add	r3, r2
 8008256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800825a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	011a      	lsls	r2, r3, #4
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826c:	4413      	add	r3, r2
 800826e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008272:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827a:	b29a      	uxth	r2, r3
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e001      	b.n	8008288 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e03a      	b.n	80082fe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80082ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80082e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d020      	beq.n	800835c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008330:	81bb      	strh	r3, [r7, #12]
 8008332:	89bb      	ldrh	r3, [r7, #12]
 8008334:	f083 0310 	eor.w	r3, r3, #16
 8008338:	81bb      	strh	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	441a      	add	r2, r3
 8008344:	89bb      	ldrh	r3, [r7, #12]
 8008346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]
 800835a:	e01f      	b.n	800839c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	81fb      	strh	r3, [r7, #14]
 8008374:	89fb      	ldrh	r3, [r7, #14]
 8008376:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800837a:	81fb      	strh	r3, [r7, #14]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	441a      	add	r2, r3
 8008386:	89fb      	ldrh	r3, [r7, #14]
 8008388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800838c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008398:	b29b      	uxth	r3, r3
 800839a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	7b1b      	ldrb	r3, [r3, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 809d 	bne.w	80084f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d04c      	beq.n	800845e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	823b      	strh	r3, [r7, #16]
 80083d2:	8a3b      	ldrh	r3, [r7, #16]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01b      	beq.n	8008414 <USB_EPClearStall+0x6c>
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	81fb      	strh	r3, [r7, #14]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008410:	b29b      	uxth	r3, r3
 8008412:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d06c      	beq.n	80084f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008432:	81bb      	strh	r3, [r7, #12]
 8008434:	89bb      	ldrh	r3, [r7, #12]
 8008436:	f083 0320 	eor.w	r3, r3, #32
 800843a:	81bb      	strh	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	89bb      	ldrh	r3, [r7, #12]
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]
 800845c:	e04b      	b.n	80084f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	82fb      	strh	r3, [r7, #22]
 800846c:	8afb      	ldrh	r3, [r7, #22]
 800846e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01b      	beq.n	80084ae <USB_EPClearStall+0x106>
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848c:	82bb      	strh	r3, [r7, #20]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	441a      	add	r2, r3
 8008498:	8abb      	ldrh	r3, [r7, #20]
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c4:	827b      	strh	r3, [r7, #18]
 80084c6:	8a7b      	ldrh	r3, [r7, #18]
 80084c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084cc:	827b      	strh	r3, [r7, #18]
 80084ce:	8a7b      	ldrh	r3, [r7, #18]
 80084d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d4:	827b      	strh	r3, [r7, #18]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	8a7b      	ldrh	r3, [r7, #18]
 80084e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d103      	bne.n	800851c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2280      	movs	r2, #128	; 0x80
 8008518:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800854a:	b29b      	uxth	r3, r3
 800854c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800854e:	68fb      	ldr	r3, [r7, #12]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800855a:	b480      	push	{r7}
 800855c:	b08d      	sub	sp, #52	; 0x34
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4611      	mov	r1, r2
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	80fb      	strh	r3, [r7, #6]
 800856c:	4613      	mov	r3, r2
 800856e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008570:	88bb      	ldrh	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	085b      	lsrs	r3, r3, #1
 8008576:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	005a      	lsls	r2, r3, #1
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008592:	e01e      	b.n	80085d2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	3301      	adds	r3, #1
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	3302      	adds	r3, #2
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	3302      	adds	r3, #2
 80085c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	3301      	adds	r3, #1
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	3b01      	subs	r3, #1
 80085d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1dd      	bne.n	8008594 <USB_WritePMA+0x3a>
  }
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	3734      	adds	r7, #52	; 0x34
 80085de:	46bd      	mov	sp, r7
 80085e0:	bc80      	pop	{r7}
 80085e2:	4770      	bx	lr

080085e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b08b      	sub	sp, #44	; 0x2c
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4611      	mov	r1, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	460b      	mov	r3, r1
 80085f4:	80fb      	strh	r3, [r7, #6]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085fa:	88bb      	ldrh	r3, [r7, #4]
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	b29b      	uxth	r3, r3
 8008600:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	005a      	lsls	r2, r3, #1
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008616:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
 800861c:	e01b      	b.n	8008656 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	3302      	adds	r3, #2
 800862a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	b2da      	uxtb	r2, r3
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	b2da      	uxtb	r2, r3
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	3301      	adds	r3, #1
 8008648:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	3302      	adds	r3, #2
 800864e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	3b01      	subs	r3, #1
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e0      	bne.n	800861e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800865c:	88bb      	ldrh	r3, [r7, #4]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	701a      	strb	r2, [r3, #0]
  }
}
 8008678:	bf00      	nop
 800867a:	372c      	adds	r7, #44	; 0x2c
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008692:	2302      	movs	r3, #2
 8008694:	2203      	movs	r2, #3
 8008696:	2181      	movs	r1, #129	; 0x81
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fcfc 	bl	800a096 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80086a4:	2302      	movs	r3, #2
 80086a6:	2203      	movs	r2, #3
 80086a8:	2101      	movs	r1, #1
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fcf3 	bl	800a096 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80086b8:	2024      	movs	r0, #36	; 0x24
 80086ba:	f001 fe01 	bl	800a2c0 <USBD_static_malloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
 80086d4:	e012      	b.n	80086fc <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086dc:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	230d      	movs	r3, #13
 80086f4:	2101      	movs	r1, #1
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 fdbe 	bl	800a278 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008712:	2181      	movs	r1, #129	; 0x81
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fce4 	bl	800a0e2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008720:	2101      	movs	r1, #1
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fcdd 	bl	800a0e2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00e      	beq.n	8008758 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fdc4 	bl	800a2d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008774:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800878e:	2b00      	cmp	r3, #0
 8008790:	d051      	beq.n	8008836 <USBD_CUSTOM_HID_Setup+0xd2>
 8008792:	2b20      	cmp	r3, #32
 8008794:	f040 80d8 	bne.w	8008948 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	3b02      	subs	r3, #2
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d841      	bhi.n	8008826 <USBD_CUSTOM_HID_Setup+0xc2>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USBD_CUSTOM_HID_Setup+0x44>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	08008801 	.word	0x08008801
 80087ac:	080087df 	.word	0x080087df
 80087b0:	08008827 	.word	0x08008827
 80087b4:	08008827 	.word	0x08008827
 80087b8:	08008827 	.word	0x08008827
 80087bc:	08008827 	.word	0x08008827
 80087c0:	08008827 	.word	0x08008827
 80087c4:	08008811 	.word	0x08008811
 80087c8:	080087ef 	.word	0x080087ef
 80087cc:	080087d1 	.word	0x080087d1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	611a      	str	r2, [r3, #16]
      break;
 80087dc:	e02a      	b.n	8008834 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3310      	adds	r3, #16
 80087e2:	2201      	movs	r2, #1
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f92b 	bl	8009a42 <USBD_CtlSendData>
      break;
 80087ec:	e022      	b.n	8008834 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	615a      	str	r2, [r3, #20]
      break;
 80087fe:	e019      	b.n	8008834 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	3314      	adds	r3, #20
 8008804:	2201      	movs	r2, #1
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f91a 	bl	8009a42 <USBD_CtlSendData>
      break;
 800880e:	e011      	b.n	8008834 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2201      	movs	r2, #1
 8008814:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8008816:	6939      	ldr	r1, [r7, #16]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	88db      	ldrh	r3, [r3, #6]
 800881c:	461a      	mov	r2, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 f93d 	bl	8009a9e <USBD_CtlPrepareRx>
      break;
 8008824:	e006      	b.n	8008834 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 f8a0 	bl	800996e <USBD_CtlError>
      ret = USBD_FAIL;
 800882e:	2302      	movs	r3, #2
 8008830:	75fb      	strb	r3, [r7, #23]
      break;
 8008832:	bf00      	nop
    }
    break;
 8008834:	e08f      	b.n	8008956 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b0b      	cmp	r3, #11
 800883c:	d87c      	bhi.n	8008938 <USBD_CUSTOM_HID_Setup+0x1d4>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008875 	.word	0x08008875
 8008848:	08008939 	.word	0x08008939
 800884c:	08008939 	.word	0x08008939
 8008850:	08008939 	.word	0x08008939
 8008854:	08008939 	.word	0x08008939
 8008858:	08008939 	.word	0x08008939
 800885c:	0800889d 	.word	0x0800889d
 8008860:	08008939 	.word	0x08008939
 8008864:	08008939 	.word	0x08008939
 8008868:	08008939 	.word	0x08008939
 800886c:	080088eb 	.word	0x080088eb
 8008870:	08008913 	.word	0x08008913
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800887a:	2b03      	cmp	r3, #3
 800887c:	d107      	bne.n	800888e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800887e:	f107 030e 	add.w	r3, r7, #14
 8008882:	2202      	movs	r2, #2
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f8db 	bl	8009a42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800888c:	e05b      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f86c 	bl	800996e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	75fb      	strb	r3, [r7, #23]
      break;
 800889a:	e054      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	0a1b      	lsrs	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	2b22      	cmp	r3, #34	; 0x22
 80088a6:	d10b      	bne.n	80088c0 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	88db      	ldrh	r3, [r3, #6]
 80088ac:	2b41      	cmp	r3, #65	; 0x41
 80088ae:	bf28      	it	cs
 80088b0:	2341      	movcs	r3, #65	; 0x41
 80088b2:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	e00d      	b.n	80088dc <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b21      	cmp	r3, #33	; 0x21
 80088ca:	d107      	bne.n	80088dc <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80088cc:	4b24      	ldr	r3, [pc, #144]	; (8008960 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80088ce:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	88db      	ldrh	r3, [r3, #6]
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	bf28      	it	cs
 80088d8:	2309      	movcs	r3, #9
 80088da:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80088dc:	8bfb      	ldrh	r3, [r7, #30]
 80088de:	461a      	mov	r2, r3
 80088e0:	69b9      	ldr	r1, [r7, #24]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 f8ad 	bl	8009a42 <USBD_CtlSendData>
      break;
 80088e8:	e02d      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d107      	bne.n	8008904 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	3318      	adds	r3, #24
 80088f8:	2201      	movs	r2, #1
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f8a0 	bl	8009a42 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008902:	e020      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 f831 	bl	800996e <USBD_CtlError>
			  ret = USBD_FAIL;
 800890c:	2302      	movs	r3, #2
 800890e:	75fb      	strb	r3, [r7, #23]
      break;
 8008910:	e019      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008918:	2b03      	cmp	r3, #3
 800891a:	d106      	bne.n	800892a <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	885b      	ldrh	r3, [r3, #2]
 8008920:	b2db      	uxtb	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008928:	e00d      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f81e 	bl	800996e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008932:	2302      	movs	r3, #2
 8008934:	75fb      	strb	r3, [r7, #23]
      break;
 8008936:	e006      	b.n	8008946 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f817 	bl	800996e <USBD_CtlError>
      ret = USBD_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	75fb      	strb	r3, [r7, #23]
      break;
 8008944:	bf00      	nop
    }
    break;
 8008946:	e006      	b.n	8008956 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 f80f 	bl	800996e <USBD_CtlError>
    ret = USBD_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	75fb      	strb	r3, [r7, #23]
    break;
 8008954:	bf00      	nop
  }
  return ret;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	200000c8 	.word	0x200000c8

08008964 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008978:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008980:	2b03      	cmp	r3, #3
 8008982:	d111      	bne.n	80089a8 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	2181      	movs	r1, #129	; 0x81
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f001 fc48 	bl	800a232 <USBD_LL_Transmit>
 80089a2:	e001      	b.n	80089a8 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2229      	movs	r2, #41	; 0x29
 80089c0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80089c2:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000044 	.word	0x20000044

080089d4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2229      	movs	r2, #41	; 0x29
 80089e0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000070 	.word	0x20000070

080089f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2229      	movs	r2, #41	; 0x29
 8008a00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	2000009c 	.word	0x2000009c

08008a14 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a4a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	7810      	ldrb	r0, [r2, #0]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	7852      	ldrb	r2, [r2, #1]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	230d      	movs	r3, #13
 8008a64:	2101      	movs	r1, #1
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fc06 	bl	800a278 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a84:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d10c      	bne.n	8008aa8 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	7810      	ldrb	r0, [r2, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	7852      	ldrb	r2, [r2, #1]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	220a      	movs	r2, #10
 8008ac0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008ac2:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	200000d4 	.word	0x200000d4

08008ad4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b14:	2302      	movs	r3, #2
 8008b16:	e01a      	b.n	8008b4e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	79fa      	ldrb	r2, [r7, #7]
 8008b44:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f001 fa3a 	bl	8009fc0 <USBD_LL_Init>

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d006      	beq.n	8008b78 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
 8008b76:	e001      	b.n	8008b7c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fa65 	bl	800a060 <USBD_LL_Start>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr

08008bb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fe63 	bl	80098f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d016      	beq.n	8008c82 <USBD_LL_SetupStage+0x6a>
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d81c      	bhi.n	8008c92 <USBD_LL_SetupStage+0x7a>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <USBD_LL_SetupStage+0x4a>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d008      	beq.n	8008c72 <USBD_LL_SetupStage+0x5a>
 8008c60:	e017      	b.n	8008c92 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f9c6 	bl	8008ffc <USBD_StdDevReq>
    break;
 8008c70:	e01a      	b.n	8008ca8 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa28 	bl	80090d0 <USBD_StdItfReq>
    break;
 8008c80:	e012      	b.n	8008ca8 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa68 	bl	8009160 <USBD_StdEPReq>
    break;
 8008c90:	e00a      	b.n	8008ca8 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fa3d 	bl	800a120 <USBD_LL_StallEP>
    break;
 8008ca6:	bf00      	nop
  }

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d14b      	bne.n	8008d5e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ccc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d134      	bne.n	8008d42 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d919      	bls.n	8008d18 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	1ad2      	subs	r2, r2, r3
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d203      	bcs.n	8008d06 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	e002      	b.n	8008d0c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fee2 	bl	8009ada <USBD_CtlContinueRx>
 8008d16:	e038      	b.n	8008d8a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d105      	bne.n	8008d3a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fedf 	bl	8009afe <USBD_CtlSendStatus>
 8008d40:	e023      	b.n	8008d8a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d11e      	bne.n	8008d8a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008d54:	2100      	movs	r1, #0
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f001 f9e2 	bl	800a120 <USBD_LL_StallEP>
 8008d5c:	e015      	b.n	8008d8a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00d      	beq.n	8008d86 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d108      	bne.n	8008d86 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	7afa      	ldrb	r2, [r7, #11]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	4798      	blx	r3
 8008d84:	e001      	b.n	8008d8a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d86:	2302      	movs	r3, #2
 8008d88:	e000      	b.n	8008d8c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008da2:	7afb      	ldrb	r3, [r7, #11]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d17f      	bne.n	8008ea8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3314      	adds	r3, #20
 8008dac:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d15c      	bne.n	8008e72 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d915      	bls.n	8008df0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fe4c 	bl	8009a7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008de2:	2300      	movs	r3, #0
 8008de4:	2200      	movs	r2, #0
 8008de6:	2100      	movs	r1, #0
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f001 fa45 	bl	800a278 <USBD_LL_PrepareReceive>
 8008dee:	e04e      	b.n	8008e8e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	6912      	ldr	r2, [r2, #16]
 8008df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dfc:	fb01 f202 	mul.w	r2, r1, r2
 8008e00:	1a9b      	subs	r3, r3, r2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d11c      	bne.n	8008e40 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d316      	bcc.n	8008e40 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d20f      	bcs.n	8008e40 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e20:	2200      	movs	r2, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fe28 	bl	8009a7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f001 fa1d 	bl	800a278 <USBD_LL_PrepareReceive>
 8008e3e:	e026      	b.n	8008e8e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d105      	bne.n	8008e62 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e62:	2180      	movs	r1, #128	; 0x80
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f001 f95b 	bl	800a120 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 fe5a 	bl	8009b24 <USBD_CtlReceiveStatus>
 8008e70:	e00d      	b.n	8008e8e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d004      	beq.n	8008e86 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f001 f949 	bl	800a120 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d11d      	bne.n	8008ed4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fe81 	bl	8008ba0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008ea6:	e015      	b.n	8008ed4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d108      	bne.n	8008ed0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	7afa      	ldrb	r2, [r7, #11]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	4798      	blx	r3
 8008ece:	e001      	b.n	8008ed4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e000      	b.n	8008ed6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ee6:	2340      	movs	r3, #64	; 0x40
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2100      	movs	r1, #0
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f8d2 	bl	800a096 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2240      	movs	r2, #64	; 0x40
 8008efe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	2200      	movs	r2, #0
 8008f06:	2180      	movs	r1, #128	; 0x80
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f8c4 	bl	800a096 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2240      	movs	r2, #64	; 0x40
 8008f18:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6852      	ldr	r2, [r2, #4]
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	4611      	mov	r1, r2
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4798      	blx	r3
  }

  return USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2204      	movs	r2, #4
 8008f96:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d10b      	bne.n	8008ff0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	d005      	beq.n	8009022 <USBD_StdDevReq+0x26>
 8009016:	2b40      	cmp	r3, #64	; 0x40
 8009018:	d84f      	bhi.n	80090ba <USBD_StdDevReq+0xbe>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <USBD_StdDevReq+0x36>
 800901e:	2b20      	cmp	r3, #32
 8009020:	d14b      	bne.n	80090ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
    break;
 8009030:	e048      	b.n	80090c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b09      	cmp	r3, #9
 8009038:	d839      	bhi.n	80090ae <USBD_StdDevReq+0xb2>
 800903a:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <USBD_StdDevReq+0x44>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009091 	.word	0x08009091
 8009044:	080090a5 	.word	0x080090a5
 8009048:	080090af 	.word	0x080090af
 800904c:	0800909b 	.word	0x0800909b
 8009050:	080090af 	.word	0x080090af
 8009054:	08009073 	.word	0x08009073
 8009058:	08009069 	.word	0x08009069
 800905c:	080090af 	.word	0x080090af
 8009060:	08009087 	.word	0x08009087
 8009064:	0800907d 	.word	0x0800907d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9da 	bl	8009424 <USBD_GetDescriptor>
      break;
 8009070:	e022      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 facf 	bl	8009618 <USBD_SetAddress>
      break;
 800907a:	e01d      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fb0e 	bl	80096a0 <USBD_SetConfig>
      break;
 8009084:	e018      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fb97 	bl	80097bc <USBD_GetConfig>
      break;
 800908e:	e013      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fbc7 	bl	8009826 <USBD_GetStatus>
      break;
 8009098:	e00e      	b.n	80090b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fbf5 	bl	800988c <USBD_SetFeature>
      break;
 80090a2:	e009      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fc04 	bl	80098b4 <USBD_ClrFeature>
      break;
 80090ac:	e004      	b.n	80090b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fc5c 	bl	800996e <USBD_CtlError>
      break;
 80090b6:	bf00      	nop
    }
    break;
 80090b8:	e004      	b.n	80090c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc56 	bl	800996e <USBD_CtlError>
    break;
 80090c2:	bf00      	nop
  }

  return ret;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop

080090d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d005      	beq.n	80090f6 <USBD_StdItfReq+0x26>
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d82e      	bhi.n	800914c <USBD_StdItfReq+0x7c>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <USBD_StdItfReq+0x26>
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d12a      	bne.n	800914c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090fc:	3b01      	subs	r3, #1
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d81d      	bhi.n	800913e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	889b      	ldrh	r3, [r3, #4]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b01      	cmp	r3, #1
 800910a:	d813      	bhi.n	8009134 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	88db      	ldrh	r3, [r3, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d110      	bne.n	8009148 <USBD_StdItfReq+0x78>
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10d      	bne.n	8009148 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fce6 	bl	8009afe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009132:	e009      	b.n	8009148 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc19 	bl	800996e <USBD_CtlError>
      break;
 800913c:	e004      	b.n	8009148 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fc14 	bl	800996e <USBD_CtlError>
      break;
 8009146:	e000      	b.n	800914a <USBD_StdItfReq+0x7a>
      break;
 8009148:	bf00      	nop
    }
    break;
 800914a:	e004      	b.n	8009156 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc0d 	bl	800996e <USBD_CtlError>
    break;
 8009154:	bf00      	nop
  }

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	889b      	ldrh	r3, [r3, #4]
 8009172:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800917c:	2b40      	cmp	r3, #64	; 0x40
 800917e:	d007      	beq.n	8009190 <USBD_StdEPReq+0x30>
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	f200 8144 	bhi.w	800940e <USBD_StdEPReq+0x2ae>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <USBD_StdEPReq+0x40>
 800918a:	2b20      	cmp	r3, #32
 800918c:	f040 813f 	bne.w	800940e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
    break;
 800919e:	e13b      	b.n	8009418 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d10a      	bne.n	80091c2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

      return ret;
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	e12b      	b.n	800941a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d007      	beq.n	80091da <USBD_StdEPReq+0x7a>
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	f300 8119 	bgt.w	8009402 <USBD_StdEPReq+0x2a2>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d072      	beq.n	80092ba <USBD_StdEPReq+0x15a>
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d03a      	beq.n	800924e <USBD_StdEPReq+0xee>
 80091d8:	e113      	b.n	8009402 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d002      	beq.n	80091ea <USBD_StdEPReq+0x8a>
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d015      	beq.n	8009214 <USBD_StdEPReq+0xb4>
 80091e8:	e02b      	b.n	8009242 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00c      	beq.n	800920a <USBD_StdEPReq+0xaa>
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b80      	cmp	r3, #128	; 0x80
 80091f4:	d009      	beq.n	800920a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 ff90 	bl	800a120 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009200:	2180      	movs	r1, #128	; 0x80
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 ff8c 	bl	800a120 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009208:	e020      	b.n	800924c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fbae 	bl	800996e <USBD_CtlError>
        break;
 8009212:	e01b      	b.n	800924c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10e      	bne.n	800923a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <USBD_StdEPReq+0xda>
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b80      	cmp	r3, #128	; 0x80
 8009226:	d008      	beq.n	800923a <USBD_StdEPReq+0xda>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	88db      	ldrh	r3, [r3, #6]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 ff73 	bl	800a120 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc5f 	bl	8009afe <USBD_CtlSendStatus>

        break;
 8009240:	e004      	b.n	800924c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fb92 	bl	800996e <USBD_CtlError>
        break;
 800924a:	bf00      	nop
      }
      break;
 800924c:	e0de      	b.n	800940c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009254:	2b02      	cmp	r3, #2
 8009256:	d002      	beq.n	800925e <USBD_StdEPReq+0xfe>
 8009258:	2b03      	cmp	r3, #3
 800925a:	d015      	beq.n	8009288 <USBD_StdEPReq+0x128>
 800925c:	e026      	b.n	80092ac <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00c      	beq.n	800927e <USBD_StdEPReq+0x11e>
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b80      	cmp	r3, #128	; 0x80
 8009268:	d009      	beq.n	800927e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 ff56 	bl	800a120 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009274:	2180      	movs	r1, #128	; 0x80
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 ff52 	bl	800a120 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800927c:	e01c      	b.n	80092b8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fb74 	bl	800996e <USBD_CtlError>
        break;
 8009286:	e017      	b.n	80092b8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	885b      	ldrh	r3, [r3, #2]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d112      	bne.n	80092b6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 ff5d 	bl	800a15e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fc2a 	bl	8009afe <USBD_CtlSendStatus>
        }
        break;
 80092aa:	e004      	b.n	80092b6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fb5d 	bl	800996e <USBD_CtlError>
        break;
 80092b4:	e000      	b.n	80092b8 <USBD_StdEPReq+0x158>
        break;
 80092b6:	bf00      	nop
      }
      break;
 80092b8:	e0a8      	b.n	800940c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d002      	beq.n	80092ca <USBD_StdEPReq+0x16a>
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d031      	beq.n	800932c <USBD_StdEPReq+0x1cc>
 80092c8:	e095      	b.n	80093f6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d007      	beq.n	80092e0 <USBD_StdEPReq+0x180>
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d004      	beq.n	80092e0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fb48 	bl	800996e <USBD_CtlError>
          break;
 80092de:	e08f      	b.n	8009400 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da0b      	bge.n	8009300 <USBD_StdEPReq+0x1a0>
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	3310      	adds	r3, #16
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	4413      	add	r3, r2
 80092fc:	3304      	adds	r3, #4
 80092fe:	e00a      	b.n	8009316 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	4413      	add	r3, r2
 8009316:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2202      	movs	r2, #2
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb8c 	bl	8009a42 <USBD_CtlSendData>
          break;
 800932a:	e069      	b.n	8009400 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800932c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009330:	2b00      	cmp	r3, #0
 8009332:	da11      	bge.n	8009358 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	f003 020f 	and.w	r2, r3, #15
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	3318      	adds	r3, #24
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d117      	bne.n	800937e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fb0c 	bl	800996e <USBD_CtlError>
            break;
 8009356:	e053      	b.n	8009400 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	f003 020f 	and.w	r2, r3, #15
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 faf9 	bl	800996e <USBD_CtlError>
            break;
 800937c:	e040      	b.n	8009400 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800937e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	da0b      	bge.n	800939e <USBD_StdEPReq+0x23e>
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	3310      	adds	r3, #16
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	e00a      	b.n	80093b4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <USBD_StdEPReq+0x262>
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b80      	cmp	r3, #128	; 0x80
 80093c0:	d103      	bne.n	80093ca <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e00e      	b.n	80093e8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fee4 	bl	800a19c <USBD_LL_IsStallEP>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2201      	movs	r2, #1
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e002      	b.n	80093e8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2202      	movs	r2, #2
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fb27 	bl	8009a42 <USBD_CtlSendData>
          break;
 80093f4:	e004      	b.n	8009400 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fab8 	bl	800996e <USBD_CtlError>
        break;
 80093fe:	bf00      	nop
      }
      break;
 8009400:	e004      	b.n	800940c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fab2 	bl	800996e <USBD_CtlError>
      break;
 800940a:	bf00      	nop
    }
    break;
 800940c:	e004      	b.n	8009418 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 faac 	bl	800996e <USBD_CtlError>
    break;
 8009416:	bf00      	nop
  }

  return ret;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	885b      	ldrh	r3, [r3, #2]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	2b06      	cmp	r3, #6
 800943a:	f200 80c9 	bhi.w	80095d0 <USBD_GetDescriptor+0x1ac>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBD_GetDescriptor+0x20>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009461 	.word	0x08009461
 8009448:	08009479 	.word	0x08009479
 800944c:	080094b9 	.word	0x080094b9
 8009450:	080095d1 	.word	0x080095d1
 8009454:	080095d1 	.word	0x080095d1
 8009458:	0800957d 	.word	0x0800957d
 800945c:	080095a3 	.word	0x080095a3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	7c12      	ldrb	r2, [r2, #16]
 800946c:	f107 010a 	add.w	r1, r7, #10
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	60f8      	str	r0, [r7, #12]
    break;
 8009476:	e0b0      	b.n	80095da <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7c1b      	ldrb	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10d      	bne.n	800949c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	f107 020a 	add.w	r2, r7, #10
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800949a:	e09e      	b.n	80095da <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	f107 020a 	add.w	r2, r7, #10
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	2202      	movs	r2, #2
 80094b4:	701a      	strb	r2, [r3, #0]
    break;
 80094b6:	e090      	b.n	80095da <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d856      	bhi.n	8009570 <USBD_GetDescriptor+0x14c>
 80094c2:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <USBD_GetDescriptor+0xa4>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094e1 	.word	0x080094e1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	08009511 	.word	0x08009511
 80094d4:	08009529 	.word	0x08009529
 80094d8:	08009541 	.word	0x08009541
 80094dc:	08009559 	.word	0x08009559
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	7c12      	ldrb	r2, [r2, #16]
 80094ec:	f107 010a 	add.w	r1, r7, #10
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	60f8      	str	r0, [r7, #12]
      break;
 80094f6:	e040      	b.n	800957a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 010a 	add.w	r1, r7, #10
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
      break;
 800950e:	e034      	b.n	800957a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 010a 	add.w	r1, r7, #10
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
      break;
 8009526:	e028      	b.n	800957a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	7c12      	ldrb	r2, [r2, #16]
 8009534:	f107 010a 	add.w	r1, r7, #10
 8009538:	4610      	mov	r0, r2
 800953a:	4798      	blx	r3
 800953c:	60f8      	str	r0, [r7, #12]
      break;
 800953e:	e01c      	b.n	800957a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	7c12      	ldrb	r2, [r2, #16]
 800954c:	f107 010a 	add.w	r1, r7, #10
 8009550:	4610      	mov	r0, r2
 8009552:	4798      	blx	r3
 8009554:	60f8      	str	r0, [r7, #12]
      break;
 8009556:	e010      	b.n	800957a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 010a 	add.w	r1, r7, #10
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
      break;
 800956e:	e004      	b.n	800957a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f9fb 	bl	800996e <USBD_CtlError>
      return;
 8009578:	e04b      	b.n	8009612 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800957a:	e02e      	b.n	80095da <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7c1b      	ldrb	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	f107 020a 	add.w	r2, r7, #10
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
      break;
 8009596:	e020      	b.n	80095da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9e7 	bl	800996e <USBD_CtlError>
      return;
 80095a0:	e037      	b.n	8009612 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	7c1b      	ldrb	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f107 020a 	add.w	r2, r7, #10
 80095b6:	4610      	mov	r0, r2
 80095b8:	4798      	blx	r3
 80095ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3301      	adds	r3, #1
 80095c0:	2207      	movs	r2, #7
 80095c2:	701a      	strb	r2, [r3, #0]
      break;
 80095c4:	e009      	b.n	80095da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f9d0 	bl	800996e <USBD_CtlError>
      return;
 80095ce:	e020      	b.n	8009612 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f9cb 	bl	800996e <USBD_CtlError>
    return;
 80095d8:	e01b      	b.n	8009612 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80095da:	897b      	ldrh	r3, [r7, #10]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d011      	beq.n	8009604 <USBD_GetDescriptor+0x1e0>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	88db      	ldrh	r3, [r3, #6]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	88da      	ldrh	r2, [r3, #6]
 80095ec:	897b      	ldrh	r3, [r7, #10]
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bf28      	it	cs
 80095f2:	4613      	movcs	r3, r2
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80095f8:	897b      	ldrh	r3, [r7, #10]
 80095fa:	461a      	mov	r2, r3
 80095fc:	68f9      	ldr	r1, [r7, #12]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa1f 	bl	8009a42 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fa76 	bl	8009afe <USBD_CtlSendStatus>
  }
}
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	889b      	ldrh	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d130      	bne.n	800968c <USBD_SetAddress+0x74>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d12c      	bne.n	800968c <USBD_SetAddress+0x74>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	2b7f      	cmp	r3, #127	; 0x7f
 8009638:	d828      	bhi.n	800968c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009644:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800964c:	2b03      	cmp	r3, #3
 800964e:	d104      	bne.n	800965a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f98b 	bl	800996e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009658:	e01d      	b.n	8009696 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7bfa      	ldrb	r2, [r7, #15]
 800965e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fdc4 	bl	800a1f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fa46 	bl	8009afe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009680:	e009      	b.n	8009696 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	e004      	b.n	8009696 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f96d 	bl	800996e <USBD_CtlError>
  }
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <USBD_SetConfig+0x118>)
 80096b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096b4:	4b40      	ldr	r3, [pc, #256]	; (80097b8 <USBD_SetConfig+0x118>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d904      	bls.n	80096c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f955 	bl	800996e <USBD_CtlError>
 80096c4:	e075      	b.n	80097b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d002      	beq.n	80096d6 <USBD_SetConfig+0x36>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d023      	beq.n	800971c <USBD_SetConfig+0x7c>
 80096d4:	e062      	b.n	800979c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80096d6:	4b38      	ldr	r3, [pc, #224]	; (80097b8 <USBD_SetConfig+0x118>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01a      	beq.n	8009714 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80096de:	4b36      	ldr	r3, [pc, #216]	; (80097b8 <USBD_SetConfig+0x118>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2203      	movs	r2, #3
 80096ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096f0:	4b31      	ldr	r3, [pc, #196]	; (80097b8 <USBD_SetConfig+0x118>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff fa5c 	bl	8008bb4 <USBD_SetClassConfig>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d104      	bne.n	800970c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f932 	bl	800996e <USBD_CtlError>
          return;
 800970a:	e052      	b.n	80097b2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9f6 	bl	8009afe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009712:	e04e      	b.n	80097b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f9f2 	bl	8009afe <USBD_CtlSendStatus>
      break;
 800971a:	e04a      	b.n	80097b2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800971c:	4b26      	ldr	r3, [pc, #152]	; (80097b8 <USBD_SetConfig+0x118>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d112      	bne.n	800974a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800972c:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <USBD_SetConfig+0x118>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009736:	4b20      	ldr	r3, [pc, #128]	; (80097b8 <USBD_SetConfig+0x118>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fa58 	bl	8008bf2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f9db 	bl	8009afe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009748:	e033      	b.n	80097b2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800974a:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <USBD_SetConfig+0x118>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d01d      	beq.n	8009794 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fa46 	bl	8008bf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <USBD_SetConfig+0x118>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009770:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <USBD_SetConfig+0x118>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff fa1c 	bl	8008bb4 <USBD_SetClassConfig>
 800977c:	4603      	mov	r3, r0
 800977e:	2b02      	cmp	r3, #2
 8009780:	d104      	bne.n	800978c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f8f2 	bl	800996e <USBD_CtlError>
          return;
 800978a:	e012      	b.n	80097b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9b6 	bl	8009afe <USBD_CtlSendStatus>
      break;
 8009792:	e00e      	b.n	80097b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f9b2 	bl	8009afe <USBD_CtlSendStatus>
      break;
 800979a:	e00a      	b.n	80097b2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f8e5 	bl	800996e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80097a4:	4b04      	ldr	r3, [pc, #16]	; (80097b8 <USBD_SetConfig+0x118>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fa21 	bl	8008bf2 <USBD_ClrClassConfig>
      break;
 80097b0:	bf00      	nop
    }
  }
}
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	2000035c 	.word	0x2000035c

080097bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d004      	beq.n	80097d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f8cc 	bl	800996e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80097d6:	e022      	b.n	800981e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097de:	2b02      	cmp	r3, #2
 80097e0:	dc02      	bgt.n	80097e8 <USBD_GetConfig+0x2c>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc03      	bgt.n	80097ee <USBD_GetConfig+0x32>
 80097e6:	e015      	b.n	8009814 <USBD_GetConfig+0x58>
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d00b      	beq.n	8009804 <USBD_GetConfig+0x48>
 80097ec:	e012      	b.n	8009814 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3308      	adds	r3, #8
 80097f8:	2201      	movs	r2, #1
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f920 	bl	8009a42 <USBD_CtlSendData>
      break;
 8009802:	e00c      	b.n	800981e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	2201      	movs	r2, #1
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f918 	bl	8009a42 <USBD_CtlSendData>
      break;
 8009812:	e004      	b.n	800981e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8a9 	bl	800996e <USBD_CtlError>
      break;
 800981c:	bf00      	nop
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009836:	3b01      	subs	r3, #1
 8009838:	2b02      	cmp	r3, #2
 800983a:	d81e      	bhi.n	800987a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	88db      	ldrh	r3, [r3, #6]
 8009840:	2b02      	cmp	r3, #2
 8009842:	d004      	beq.n	800984e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f891 	bl	800996e <USBD_CtlError>
      break;
 800984c:	e01a      	b.n	8009884 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f043 0202 	orr.w	r2, r3, #2
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	330c      	adds	r3, #12
 800986e:	2202      	movs	r2, #2
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8e5 	bl	8009a42 <USBD_CtlSendData>
    break;
 8009878:	e004      	b.n	8009884 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f876 	bl	800996e <USBD_CtlError>
    break;
 8009882:	bf00      	nop
  }
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	885b      	ldrh	r3, [r3, #2]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d106      	bne.n	80098ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f929 	bl	8009afe <USBD_CtlSendStatus>
  }

}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098c4:	3b01      	subs	r3, #1
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d80b      	bhi.n	80098e2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	885b      	ldrh	r3, [r3, #2]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d10c      	bne.n	80098ec <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f90f 	bl	8009afe <USBD_CtlSendStatus>
    }
    break;
 80098e0:	e004      	b.n	80098ec <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f842 	bl	800996e <USBD_CtlError>
    break;
 80098ea:	e000      	b.n	80098ee <USBD_ClrFeature+0x3a>
    break;
 80098ec:	bf00      	nop
  }
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781a      	ldrb	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	785a      	ldrb	r2, [r3, #1]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	3302      	adds	r3, #2
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b29a      	uxth	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	3303      	adds	r3, #3
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b29b      	uxth	r3, r3
 8009920:	021b      	lsls	r3, r3, #8
 8009922:	b29b      	uxth	r3, r3
 8009924:	4413      	add	r3, r2
 8009926:	b29a      	uxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	3304      	adds	r3, #4
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b29a      	uxth	r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	3305      	adds	r3, #5
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	b29b      	uxth	r3, r3
 8009940:	4413      	add	r3, r2
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3306      	adds	r3, #6
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b29a      	uxth	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	3307      	adds	r3, #7
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	b29b      	uxth	r3, r3
 800995c:	4413      	add	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	80da      	strh	r2, [r3, #6]

}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr

0800996e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009978:	2180      	movs	r1, #128	; 0x80
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fbd0 	bl	800a120 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009980:	2100      	movs	r1, #0
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fbcc 	bl	800a120 <USBD_LL_StallEP>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d032      	beq.n	8009a0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f834 	bl	8009a14 <USBD_GetLen>
 80099ac:	4603      	mov	r3, r0
 80099ae:	3301      	adds	r3, #1
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	75fa      	strb	r2, [r7, #23]
 80099c0:	461a      	mov	r2, r3
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	4413      	add	r3, r2
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	7812      	ldrb	r2, [r2, #0]
 80099ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	75fa      	strb	r2, [r7, #23]
 80099d2:	461a      	mov	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4413      	add	r3, r2
 80099d8:	2203      	movs	r2, #3
 80099da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80099dc:	e012      	b.n	8009a04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	60fa      	str	r2, [r7, #12]
 80099e4:	7dfa      	ldrb	r2, [r7, #23]
 80099e6:	1c51      	adds	r1, r2, #1
 80099e8:	75f9      	strb	r1, [r7, #23]
 80099ea:	4611      	mov	r1, r2
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	440a      	add	r2, r1
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	75fa      	strb	r2, [r7, #23]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	4413      	add	r3, r2
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e8      	bne.n	80099de <USBD_GetString+0x4e>
    }
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009a20:	e005      	b.n	8009a2e <USBD_GetLen+0x1a>
    {
        len++;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	3301      	adds	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f5      	bne.n	8009a22 <USBD_GetLen+0xe>
    }

    return len;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bc80      	pop	{r7}
 8009a40:	4770      	bx	lr

08009a42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009a58:	88fa      	ldrh	r2, [r7, #6]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a64:	88fb      	ldrh	r3, [r7, #6]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fbe1 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fbcf 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	60f8      	str	r0, [r7, #12]
 8009aa6:	60b9      	str	r1, [r7, #8]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2203      	movs	r2, #3
 8009ab0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009ab4:	88fa      	ldrh	r2, [r7, #6]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009ac4:	88fb      	ldrh	r3, [r7, #6]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fbd4 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	2100      	movs	r1, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fbc2 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2200      	movs	r2, #0
 8009b12:	2100      	movs	r1, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fb8c 	bl	800a232 <USBD_LL_Transmit>

  return USBD_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2205      	movs	r2, #5
 8009b30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009b34:	2300      	movs	r3, #0
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fb9c 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b50:	2200      	movs	r2, #0
 8009b52:	4912      	ldr	r1, [pc, #72]	; (8009b9c <MX_USB_DEVICE_Init+0x50>)
 8009b54:	4812      	ldr	r0, [pc, #72]	; (8009ba0 <MX_USB_DEVICE_Init+0x54>)
 8009b56:	f7fe ffd3 	bl	8008b00 <USBD_Init>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b60:	f7f7 fb20 	bl	80011a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b64:	490f      	ldr	r1, [pc, #60]	; (8009ba4 <MX_USB_DEVICE_Init+0x58>)
 8009b66:	480e      	ldr	r0, [pc, #56]	; (8009ba0 <MX_USB_DEVICE_Init+0x54>)
 8009b68:	f7fe fff5 	bl	8008b56 <USBD_RegisterClass>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b72:	f7f7 fb17 	bl	80011a4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b76:	490c      	ldr	r1, [pc, #48]	; (8009ba8 <MX_USB_DEVICE_Init+0x5c>)
 8009b78:	4809      	ldr	r0, [pc, #36]	; (8009ba0 <MX_USB_DEVICE_Init+0x54>)
 8009b7a:	f7fe ffab 	bl	8008ad4 <USBD_CUSTOM_HID_RegisterInterface>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b84:	f7f7 fb0e 	bl	80011a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b88:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <MX_USB_DEVICE_Init+0x54>)
 8009b8a:	f7fe fffd 	bl	8008b88 <USBD_Start>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b94:	f7f7 fb06 	bl	80011a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b98:	bf00      	nop
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000134 	.word	0x20000134
 8009ba0:	20000360 	.word	0x20000360
 8009ba4:	2000000c 	.word	0x2000000c
 8009ba8:	20000124 	.word	0x20000124

08009bac <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009bbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr

08009bc8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	71fb      	strb	r3, [r7, #7]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009bd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bc80      	pop	{r7}
 8009be2:	4770      	bx	lr

08009be4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2212      	movs	r2, #18
 8009bf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bf6:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	20000150 	.word	0x20000150

08009c08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2204      	movs	r2, #4
 8009c18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c1a:	4b03      	ldr	r3, [pc, #12]	; (8009c28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bc80      	pop	{r7}
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	20000164 	.word	0x20000164

08009c2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4907      	ldr	r1, [pc, #28]	; (8009c60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c42:	4808      	ldr	r0, [pc, #32]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c44:	f7ff fea4 	bl	8009990 <USBD_GetString>
 8009c48:	e004      	b.n	8009c54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4904      	ldr	r1, [pc, #16]	; (8009c60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c4e:	4805      	ldr	r0, [pc, #20]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c50:	f7ff fe9e 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c54:	4b02      	ldr	r3, [pc, #8]	; (8009c60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	200005fc 	.word	0x200005fc
 8009c64:	0800a3b4 	.word	0x0800a3b4

08009c68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	4904      	ldr	r1, [pc, #16]	; (8009c88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c78:	4804      	ldr	r0, [pc, #16]	; (8009c8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c7a:	f7ff fe89 	bl	8009990 <USBD_GetString>
  return USBD_StrDesc;
 8009c7e:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200005fc 	.word	0x200005fc
 8009c8c:	0800a3d4 	.word	0x0800a3d4

08009c90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	221a      	movs	r2, #26
 8009ca0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ca2:	f000 f843 	bl	8009d2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ca6:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20000168 	.word	0x20000168

08009cb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	4907      	ldr	r1, [pc, #28]	; (8009ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cca:	4808      	ldr	r0, [pc, #32]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ccc:	f7ff fe60 	bl	8009990 <USBD_GetString>
 8009cd0:	e004      	b.n	8009cdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4904      	ldr	r1, [pc, #16]	; (8009ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cd6:	4805      	ldr	r0, [pc, #20]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cd8:	f7ff fe5a 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200005fc 	.word	0x200005fc
 8009cec:	0800a3e8 	.word	0x0800a3e8

08009cf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	4907      	ldr	r1, [pc, #28]	; (8009d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d06:	4808      	ldr	r0, [pc, #32]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d08:	f7ff fe42 	bl	8009990 <USBD_GetString>
 8009d0c:	e004      	b.n	8009d18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	4904      	ldr	r1, [pc, #16]	; (8009d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d12:	4805      	ldr	r0, [pc, #20]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d14:	f7ff fe3c 	bl	8009990 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d18:	4b02      	ldr	r3, [pc, #8]	; (8009d24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200005fc 	.word	0x200005fc
 8009d28:	0800a3fc 	.word	0x0800a3fc

08009d2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <Get_SerialNum+0x44>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d38:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <Get_SerialNum+0x48>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <Get_SerialNum+0x4c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4413      	add	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d52:	2208      	movs	r2, #8
 8009d54:	4909      	ldr	r1, [pc, #36]	; (8009d7c <Get_SerialNum+0x50>)
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f814 	bl	8009d84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	4908      	ldr	r1, [pc, #32]	; (8009d80 <Get_SerialNum+0x54>)
 8009d60:	68b8      	ldr	r0, [r7, #8]
 8009d62:	f000 f80f 	bl	8009d84 <IntToUnicode>
  }
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	1ff80050 	.word	0x1ff80050
 8009d74:	1ff80054 	.word	0x1ff80054
 8009d78:	1ff80058 	.word	0x1ff80058
 8009d7c:	2000016a 	.word	0x2000016a
 8009d80:	2000017a 	.word	0x2000017a

08009d84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]
 8009d9a:	e027      	b.n	8009dec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	0f1b      	lsrs	r3, r3, #28
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	d80b      	bhi.n	8009dbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	0f1b      	lsrs	r3, r3, #28
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	4619      	mov	r1, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	440b      	add	r3, r1
 8009db4:	3230      	adds	r2, #48	; 0x30
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	e00a      	b.n	8009dd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	0f1b      	lsrs	r3, r3, #28
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	440b      	add	r3, r1
 8009dcc:	3237      	adds	r2, #55	; 0x37
 8009dce:	b2d2      	uxtb	r2, r2
 8009dd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	011b      	lsls	r3, r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	3301      	adds	r3, #1
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	3301      	adds	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
 8009dec:	7dfa      	ldrb	r2, [r7, #23]
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d3d3      	bcc.n	8009d9c <IntToUnicode+0x18>
  }
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d106      	bne.n	8009e20 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009e12:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4a08      	ldr	r2, [pc, #32]	; (8009e38 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009e1e:	e005      	b.n	8009e2c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <HAL_PCDEx_SetConnectionState+0x38>)
 8009e26:	f023 0301 	bic.w	r3, r3, #1
 8009e2a:	6053      	str	r3, [r2, #4]
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bc80      	pop	{r7}
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	40010000 	.word	0x40010000

08009e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a0d      	ldr	r2, [pc, #52]	; (8009e80 <HAL_PCD_MspInit+0x44>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d113      	bne.n	8009e76 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e4e:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <HAL_PCD_MspInit+0x48>)
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	4a0c      	ldr	r2, [pc, #48]	; (8009e84 <HAL_PCD_MspInit+0x48>)
 8009e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e58:	6253      	str	r3, [r2, #36]	; 0x24
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <HAL_PCD_MspInit+0x48>)
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	2014      	movs	r0, #20
 8009e6c:	f7f8 faf7 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e70:	2014      	movs	r0, #20
 8009e72:	f7f8 fb10 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e76:	bf00      	nop
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40005c00 	.word	0x40005c00
 8009e84:	40023800 	.word	0x40023800

08009e88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	f7fe feba 	bl	8008c18 <USBD_LL_SetupStage>
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f7fe feec 	bl	8008cb2 <USBD_LL_DataOutStage>
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ef4:	78fa      	ldrb	r2, [r7, #3]
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	440b      	add	r3, r1
 8009f02:	333c      	adds	r3, #60	; 0x3c
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f7fe ff43 	bl	8008d94 <USBD_LL_DataInStage>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff f84e 	bl	8008fc6 <USBD_LL_SOF>
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d001      	beq.n	8009f4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f46:	f7f7 f92d 	bl	80011a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f50:	7bfa      	ldrb	r2, [r7, #15]
 8009f52:	4611      	mov	r1, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff f803 	bl	8008f60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe ffbc 	bl	8008ede <USBD_LL_Reset>
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fffd 	bl	8008f7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <HAL_PCD_SuspendCallback+0x30>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	4a03      	ldr	r2, [pc, #12]	; (8009fa0 <HAL_PCD_SuspendCallback+0x30>)
 8009f92:	f043 0306 	orr.w	r3, r3, #6
 8009f96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fff7 	bl	8008fa6 <USBD_LL_Resume>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fc8:	4a23      	ldr	r2, [pc, #140]	; (800a058 <USBD_LL_Init+0x98>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a21      	ldr	r2, [pc, #132]	; (800a058 <USBD_LL_Init+0x98>)
 8009fd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009fd8:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <USBD_LL_Init+0x98>)
 8009fda:	4a20      	ldr	r2, [pc, #128]	; (800a05c <USBD_LL_Init+0x9c>)
 8009fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fde:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <USBD_LL_Init+0x98>)
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	; (800a058 <USBD_LL_Init+0x98>)
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fea:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <USBD_LL_Init+0x98>)
 8009fec:	2202      	movs	r2, #2
 8009fee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <USBD_LL_Init+0x98>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <USBD_LL_Init+0x98>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ffc:	4816      	ldr	r0, [pc, #88]	; (800a058 <USBD_LL_Init+0x98>)
 8009ffe:	f7f8 fd92 	bl	8002b26 <HAL_PCD_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a008:	f7f7 f8cc 	bl	80011a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a012:	2318      	movs	r3, #24
 800a014:	2200      	movs	r2, #0
 800a016:	2100      	movs	r1, #0
 800a018:	f7fa f958 	bl	80042cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a022:	2358      	movs	r3, #88	; 0x58
 800a024:	2200      	movs	r2, #0
 800a026:	2180      	movs	r1, #128	; 0x80
 800a028:	f7fa f950 	bl	80042cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a032:	2398      	movs	r3, #152	; 0x98
 800a034:	2200      	movs	r2, #0
 800a036:	2181      	movs	r1, #129	; 0x81
 800a038:	f7fa f948 	bl	80042cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a042:	23d8      	movs	r3, #216	; 0xd8
 800a044:	2200      	movs	r2, #0
 800a046:	2101      	movs	r1, #1
 800a048:	f7fa f940 	bl	80042cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200007fc 	.word	0x200007fc
 800a05c:	40005c00 	.word	0x40005c00

0800a060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a076:	4618      	mov	r0, r3
 800a078:	f7f8 fe33 	bl	8002ce2 <HAL_PCD_Start>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f932 	bl	800a2ec <USBD_Get_USB_Status>
 800a088:	4603      	mov	r3, r0
 800a08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	70fb      	strb	r3, [r7, #3]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70bb      	strb	r3, [r7, #2]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a0be:	78bb      	ldrb	r3, [r7, #2]
 800a0c0:	883a      	ldrh	r2, [r7, #0]
 800a0c2:	78f9      	ldrb	r1, [r7, #3]
 800a0c4:	f7f8 ff4f 	bl	8002f66 <HAL_PCD_EP_Open>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f90c 	bl	800a2ec <USBD_Get_USB_Status>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0fc:	78fa      	ldrb	r2, [r7, #3]
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7f8 ff96 	bl	8003032 <HAL_PCD_EP_Close>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f8ed 	bl	800a2ec <USBD_Get_USB_Status>
 800a112:	4603      	mov	r3, r0
 800a114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a116:	7bbb      	ldrb	r3, [r7, #14]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f9 f83f 	bl	80031c2 <HAL_PCD_EP_SetStall>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f8ce 	bl	800a2ec <USBD_Get_USB_Status>
 800a150:	4603      	mov	r3, r0
 800a152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a154:	7bbb      	ldrb	r3, [r7, #14]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a178:	78fa      	ldrb	r2, [r7, #3]
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7f9 f872 	bl	8003266 <HAL_PCD_EP_ClrStall>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f8af 	bl	800a2ec <USBD_Get_USB_Status>
 800a18e:	4603      	mov	r3, r0
 800a190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a192:	7bbb      	ldrb	r3, [r7, #14]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da0c      	bge.n	800a1d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1be:	68f9      	ldr	r1, [r7, #12]
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	e00b      	b.n	800a1ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1d8:	68f9      	ldr	r1, [r7, #12]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	440b      	add	r3, r1
 800a1e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a1e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7f8 fe82 	bl	8002f1c <HAL_PCD_SetAddress>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f864 	bl	800a2ec <USBD_Get_USB_Status>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a228:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	461a      	mov	r2, r3
 800a23e:	460b      	mov	r3, r1
 800a240:	72fb      	strb	r3, [r7, #11]
 800a242:	4613      	mov	r3, r2
 800a244:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a254:	893b      	ldrh	r3, [r7, #8]
 800a256:	7af9      	ldrb	r1, [r7, #11]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	f7f8 ff6f 	bl	800313c <HAL_PCD_EP_Transmit>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f841 	bl	800a2ec <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a26e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	461a      	mov	r2, r3
 800a284:	460b      	mov	r3, r1
 800a286:	72fb      	strb	r3, [r7, #11]
 800a288:	4613      	mov	r3, r2
 800a28a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	7af9      	ldrb	r1, [r7, #11]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f7f8 ff0f 	bl	80030c2 <HAL_PCD_EP_Receive>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f81e 	bl	800a2ec <USBD_Get_USB_Status>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a2c8:	4b02      	ldr	r3, [pc, #8]	; (800a2d4 <USBD_static_malloc+0x14>)
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bc80      	pop	{r7}
 800a2d2:	4770      	bx	lr
 800a2d4:	20000ae8 	.word	0x20000ae8

0800a2d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]

}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr
	...

0800a2ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d817      	bhi.n	800a330 <USBD_Get_USB_Status+0x44>
 800a300:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <USBD_Get_USB_Status+0x1c>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a319 	.word	0x0800a319
 800a30c:	0800a31f 	.word	0x0800a31f
 800a310:	0800a325 	.word	0x0800a325
 800a314:	0800a32b 	.word	0x0800a32b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	e00b      	b.n	800a336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	73fb      	strb	r3, [r7, #15]
    break;
 800a322:	e008      	b.n	800a336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a324:	2301      	movs	r3, #1
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	e005      	b.n	800a336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a32a:	2302      	movs	r3, #2
 800a32c:	73fb      	strb	r3, [r7, #15]
    break;
 800a32e:	e002      	b.n	800a336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a330:	2302      	movs	r3, #2
 800a332:	73fb      	strb	r3, [r7, #15]
    break;
 800a334:	bf00      	nop
  }
  return usb_status;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	2600      	movs	r6, #0
 800a348:	4d0c      	ldr	r5, [pc, #48]	; (800a37c <__libc_init_array+0x38>)
 800a34a:	4c0d      	ldr	r4, [pc, #52]	; (800a380 <__libc_init_array+0x3c>)
 800a34c:	1b64      	subs	r4, r4, r5
 800a34e:	10a4      	asrs	r4, r4, #2
 800a350:	42a6      	cmp	r6, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	f000 f822 	bl	800a39c <_init>
 800a358:	2600      	movs	r6, #0
 800a35a:	4d0a      	ldr	r5, [pc, #40]	; (800a384 <__libc_init_array+0x40>)
 800a35c:	4c0a      	ldr	r4, [pc, #40]	; (800a388 <__libc_init_array+0x44>)
 800a35e:	1b64      	subs	r4, r4, r5
 800a360:	10a4      	asrs	r4, r4, #2
 800a362:	42a6      	cmp	r6, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36c:	4798      	blx	r3
 800a36e:	3601      	adds	r6, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f855 3b04 	ldr.w	r3, [r5], #4
 800a376:	4798      	blx	r3
 800a378:	3601      	adds	r6, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800a438 	.word	0x0800a438
 800a380:	0800a438 	.word	0x0800a438
 800a384:	0800a438 	.word	0x0800a438
 800a388:	0800a43c 	.word	0x0800a43c

0800a38c <memset>:
 800a38c:	4603      	mov	r3, r0
 800a38e:	4402      	add	r2, r0
 800a390:	4293      	cmp	r3, r2
 800a392:	d100      	bne.n	800a396 <memset+0xa>
 800a394:	4770      	bx	lr
 800a396:	f803 1b01 	strb.w	r1, [r3], #1
 800a39a:	e7f9      	b.n	800a390 <memset+0x4>

0800a39c <_init>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	bf00      	nop
 800a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a2:	bc08      	pop	{r3}
 800a3a4:	469e      	mov	lr, r3
 800a3a6:	4770      	bx	lr

0800a3a8 <_fini>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr
