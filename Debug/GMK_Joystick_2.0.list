
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009cc0  08009cc0  00019cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d3c  08009d3c  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d44  08009d44  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  08009ed0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  08009ed0  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012186  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323d  00000000  00000000  00032333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a93  00000000  00000000  00037388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001473d  00000000  00000000  0004ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b27  00000000  00000000  00063558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  000ea0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	08009ca8 	.word	0x08009ca8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	08009ca8 	.word	0x08009ca8

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe08 	bl	80016d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f915 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa75 	bl	8000fb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa55 	bl	8000f78 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f008 fcb5 	bl	800943c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9c3 	bl	8000e5c <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f95b 	bl	8000d90 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4878      	ldr	r0, [pc, #480]	; (8000cbc <main+0x204>)
 8000adc:	f004 f8b4 	bl	8004c48 <HAL_TIM_Base_Start>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000ae0:	4c77      	ldr	r4, [pc, #476]	; (8000cc0 <main+0x208>)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4a77      	ldr	r2, [pc, #476]	; (8000cc4 <main+0x20c>)
 8000ae6:	4978      	ldr	r1, [pc, #480]	; (8000cc8 <main+0x210>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc45 	bl	8001378 <Joystick_Init>
 8000aee:	4625      	mov	r5, r4
 8000af0:	463c      	mov	r4, r7
 8000af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b0c:	e009      	b.n	8000b22 <main+0x6a>
  	  event_state[i] = EVENT_WAIT;
 8000b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b12:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <main+0x214>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	daf1      	bge.n	8000b0e <main+0x56>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <main+0x218>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <main+0x214>)
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	f200 8092 	bhi.w	8000c5e <main+0x1a6>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <main+0x88>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000c5f 	.word	0x08000c5f
 8000b44:	08000b55 	.word	0x08000b55
 8000b48:	08000b61 	.word	0x08000b61
 8000b4c:	08000b69 	.word	0x08000b69
 8000b50:	08000c57 	.word	0x08000c57
		case EVENT_WAIT:
			// Do nothing...
			break;
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b54:	2202      	movs	r2, #2
 8000b56:	495c      	ldr	r1, [pc, #368]	; (8000cc8 <main+0x210>)
 8000b58:	485e      	ldr	r0, [pc, #376]	; (8000cd4 <main+0x21c>)
 8000b5a:	f000 ff6f 	bl	8001a3c <HAL_ADC_Start_DMA>
			break;
 8000b5e:	e07e      	b.n	8000c5e <main+0x1a6>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b60:	2004      	movs	r0, #4
 8000b62:	f000 fa49 	bl	8000ff8 <write_next_event_state>
			break;
 8000b66:	e07a      	b.n	8000c5e <main+0x1a6>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b68:	4855      	ldr	r0, [pc, #340]	; (8000cc0 <main+0x208>)
 8000b6a:	f000 fc51 	bl	8001410 <Joystick_Update>
			uint8_t invert_x = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b7a:	4b57      	ldr	r3, [pc, #348]	; (8000cd8 <main+0x220>)
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <main+0x220>)
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b82:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <main+0xdc>
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <main+0x208>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	e001      	b.n	8000b98 <main+0xe0>
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <main+0x208>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000b9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <main+0xf4>
 8000ba2:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <main+0x208>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	e001      	b.n	8000bb0 <main+0xf8>
 8000bac:	4b44      	ldr	r3, [pc, #272]	; (8000cc0 <main+0x208>)
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <main+0x224>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <main+0x224>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bc2:	f7ff fda5 	bl	8000710 <__aeabi_fcmpgt>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d109      	bne.n	8000be0 <main+0x128>
 8000bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bd6:	f7ff fd7d 	bl	80006d4 <__aeabi_fcmplt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <main+0x150>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <main+0x224>)
 8000be2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000be6:	b29c      	uxth	r4, r3
 8000be8:	493d      	ldr	r1, [pc, #244]	; (8000ce0 <main+0x228>)
 8000bea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bec:	f7ff fbd4 	bl	8000398 <__aeabi_fmul>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd96 	bl	8000724 <__aeabi_f2iz>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4423      	add	r3, r4
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <main+0x224>)
 8000c06:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c0c:	f7ff fd80 	bl	8000710 <__aeabi_fcmpgt>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10a      	bne.n	8000c2c <main+0x174>
 8000c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c20:	f7ff fd58 	bl	80006d4 <__aeabi_fcmplt>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <main+0x174>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c2a:	e018      	b.n	8000c5e <main+0x1a6>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <main+0x224>)
 8000c2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	492b      	ldr	r1, [pc, #172]	; (8000ce4 <main+0x22c>)
 8000c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c38:	f7ff fbae 	bl	8000398 <__aeabi_fmul>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd70 	bl	8000724 <__aeabi_f2iz>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4423      	add	r3, r4
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <main+0x224>)
 8000c52:	809a      	strh	r2, [r3, #4]
			break;
 8000c54:	e003      	b.n	8000c5e <main+0x1a6>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c56:	4821      	ldr	r0, [pc, #132]	; (8000cdc <main+0x224>)
 8000c58:	f000 f9fc 	bl	8001054 <Send_HID_Data>
			break;
 8000c5c:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <main+0x218>)
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <main+0x230>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d00d      	beq.n	8000c86 <main+0x1ce>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <main+0x218>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	425a      	negs	r2, r3
 8000c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c7a:	bf58      	it	pl
 8000c7c:	4253      	negpl	r3, r2
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <main+0x218>)
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e002      	b.n	8000c8c <main+0x1d4>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f9b6 	bl	8000ff8 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <main+0x230>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <main+0x218>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d306      	bcc.n	8000ca6 <main+0x1ee>
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <main+0x230>)
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <main+0x218>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	e007      	b.n	8000cb6 <main+0x1fe>
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <main+0x230>)
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <main+0x218>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <main+0x234>)
 8000cb8:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cba:	e736      	b.n	8000b2a <main+0x72>
 8000cbc:	20000238 	.word	0x20000238
 8000cc0:	20000300 	.word	0x20000300
 8000cc4:	200002fe 	.word	0x200002fe
 8000cc8:	200002fc 	.word	0x200002fc
 8000ccc:	20000278 	.word	0x20000278
 8000cd0:	200002f8 	.word	0x200002f8
 8000cd4:	200001a0 	.word	0x200001a0
 8000cd8:	3d4ccccd 	.word	0x3d4ccccd
 8000cdc:	2000033c 	.word	0x2000033c
 8000ce0:	c6fffe00 	.word	0xc6fffe00
 8000ce4:	46fffe00 	.word	0x46fffe00
 8000ce8:	200002f9 	.word	0x200002f9
 8000cec:	200002fa 	.word	0x200002fa

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b092      	sub	sp, #72	; 0x48
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2234      	movs	r2, #52	; 0x34
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f008 ffca 	bl	8009c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <SystemClock_Config+0x9c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <SystemClock_Config+0x9c>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d22:	2303      	movs	r3, #3
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 f977 	bl	8004040 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d58:	f000 f9ea 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2303      	movs	r3, #3
 8000d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2101      	movs	r1, #1
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fc93 	bl	80046a0 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d80:	f000 f9d6 	bl	8001130 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3748      	adds	r7, #72	; 0x48
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40007000 	.word	0x40007000

08000d90 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000da2:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <MX_ADC_Init+0xc8>)
 8000da4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000da8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dac:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000df2:	2210      	movs	r2, #16
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000e06:	f000 fcd3 	bl	80017b0 <HAL_ADC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e10:	f000 f98e 	bl	8001130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000e26:	f000 fea9 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e30:	f000 f97e 	bl	8001130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC_Init+0xc4>)
 8000e3e:	f000 fe9d 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000e48:	f000 f972 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001a0 	.word	0x200001a0
 8000e58:	40012400 	.word	0x40012400

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000e9c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eae:	4831      	ldr	r0, [pc, #196]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000eb0:	f003 fe8a 	bl	8004bc8 <HAL_TIM_Base_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000eba:	f000 f939 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482a      	ldr	r0, [pc, #168]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000ecc:	f003 ffa6 	bl	8004e1c <HAL_TIM_ConfigClockSource>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ed6:	f000 f92b 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000eda:	4826      	ldr	r0, [pc, #152]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000edc:	f003 fefe 	bl	8004cdc <HAL_TIM_OC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee6:	f000 f923 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000efa:	f004 fa41 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f04:	f000 f914 	bl	8001130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f0c:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f22:	f003 ff23 	bl	8004d6c <HAL_TIM_OC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f2c:	f000 f900 	bl	8001130 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f40:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f4e:	f003 ff0d 	bl	8004d6c <HAL_TIM_OC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f58:	f000 f8ea 	bl	8001130 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <MX_TIM2_Init+0x118>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000238 	.word	0x20000238

08000f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_DMA_Init+0x38>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <MX_DMA_Init+0x38>)
 8000f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_DMA_Init+0x38>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200b      	movs	r0, #11
 8000f9c:	f001 f8ed 	bl	800217a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa0:	200b      	movs	r0, #11
 8000fa2:	f001 f906 	bl	80021b2 <HAL_NVIC_EnableIRQ>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_GPIO_Init+0x40>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <write_next_event_state+0x3c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	425a      	negs	r2, r3
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001012:	bf58      	it	pl
 8001014:	4253      	negpl	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <write_next_event_state+0x3c>)
 800101a:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <write_next_event_state+0x3c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <write_next_event_state+0x40>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	5453      	strb	r3, [r2, r1]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002f9 	.word	0x200002f9
 8001038:	20000278 	.word	0x20000278

0800103c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001044:	2003      	movs	r0, #3
 8001046:	f7ff ffd7 	bl	8000ff8 <write_next_event_state>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <Send_HID_Data>:

void Send_HID_Data(Controller_HandleTypeDef* controller){
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 800105a:	afa6      	add	r7, sp, #664	; 0x298
 800105c:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <Send_HID_Data+0xd4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <Send_HID_Data+0xd4>)
 800106c:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <Send_HID_Data+0xd4>)
 800107a:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <Send_HID_Data+0xd4>)
 8001086:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800108e:	121b      	asrs	r3, r3, #8
 8001090:	b21b      	sxth	r3, r3
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <Send_HID_Data+0xd4>)
 8001096:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <Send_HID_Data+0xd4>)
 80010a2:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010aa:	121b      	asrs	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <Send_HID_Data+0xd4>)
 80010b2:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <Send_HID_Data+0xd4>)
 80010be:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010c6:	121b      	asrs	r3, r3, #8
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <Send_HID_Data+0xd4>)
 80010ce:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <Send_HID_Data+0xd4>)
 80010da:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010e2:	121b      	asrs	r3, r3, #8
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <Send_HID_Data+0xd4>)
 80010ea:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7a9a      	ldrb	r2, [r3, #10]
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <Send_HID_Data+0xd4>)
 80010f2:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7ada      	ldrb	r2, [r3, #11]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <Send_HID_Data+0xd4>)
 80010fa:	731a      	strb	r2, [r3, #12]
	USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <Send_HID_Data+0xd8>)
 80010fe:	230d      	movs	r3, #13
 8001100:	93a4      	str	r3, [sp, #656]	; 0x290
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <Send_HID_Data+0xd4>)
 8001104:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001106:	4668      	mov	r0, sp
 8001108:	f104 0310 	add.w	r3, r4, #16
 800110c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8001110:	4619      	mov	r1, r3
 8001112:	f008 fdb3 	bl	8009c7c <memcpy>
 8001116:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800111a:	f007 f89b 	bl	8008254 <USBD_CUSTOM_HID_SendReport>
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	20000348 	.word	0x20000348
 800112c:	20000360 	.word	0x20000360

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_MspInit+0x58>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_MspInit+0x58>)
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	6253      	str	r3, [r2, #36]	; 0x24
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_MspInit+0x58>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_MspInit+0x58>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_MspInit+0x58>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_MspInit+0x58>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_MspInit+0x58>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_MspInit+0x58>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6253      	str	r3, [r2, #36]	; 0x24
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_MspInit+0x58>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_ADC_MspInit+0xc4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d14c      	bne.n	8001254 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_ADC_MspInit+0xc8>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ea:	2303      	movs	r3, #3
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <HAL_ADC_MspInit+0xcc>)
 80011fe:	f001 f989 	bl	8002514 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_ADC_MspInit+0xd4>)
 8001206:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 800123a:	f000 ffd5 	bl	80021e8 <HAL_DMA_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001244:	f7ff ff74 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_ADC_MspInit+0xd0>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40012400 	.word	0x40012400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	200001f4 	.word	0x200001f4
 800126c:	40026008 	.word	0x40026008

08001270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d10b      	bne.n	800129a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_TIM_Base_MspInit+0x34>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_TIM_Base_MspInit+0x34>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6253      	str	r3, [r2, #36]	; 0x24
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_TIM_Base_MspInit+0x34>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 fa43 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA1_Channel1_IRQHandler+0x10>)
 80012fe:	f001 f82b 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f4 	.word	0x200001f4

0800130c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <USB_LP_IRQHandler+0x10>)
 8001312:	f001 fb83 	bl	8002a1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200007fc 	.word	0x200007fc

08001320 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001352:	f7ff ffe5 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f008 fc6d 	bl	8009c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135a:	f7ff fbad 	bl	8000ab8 <main>
  bx lr
 800135e:	4770      	bx	lr
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001368:	08009d4c 	.word	0x08009d4c
  ldr r2, =_sbss
 800136c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001370:	20000b10 	.word	0x20000b10

08001374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_IRQHandler>
	...

08001378 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001378:	b4b0      	push	{r4, r5, r7}
 800137a:	b095      	sub	sp, #84	; 0x54
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138c:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 800138e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001392:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <Joystick_Init+0x90>)
 800139a:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <Joystick_Init+0x94>)
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 80013aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ae:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 80013b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b4:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <Joystick_Init+0x90>)
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <Joystick_Init+0x94>)
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 80013da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	461d      	mov	r5, r3
 80013e4:	f107 0414 	add.w	r4, r7, #20
 80013e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	3754      	adds	r7, #84	; 0x54
 8001400:	46bd      	mov	sp, r7
 8001402:	bcb0      	pop	{r4, r5, r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	3ccccccd 	.word	0x3ccccccd
 800140c:	3f8ccccd 	.word	0x3f8ccccd

08001410 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800142e:	2b00      	cmp	r3, #0
 8001430:	d062      	beq.n	80014f8 <Joystick_Update+0xe8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001436:	2b00      	cmp	r3, #0
 8001438:	d05e      	beq.n	80014f8 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	891b      	ldrh	r3, [r3, #8]
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ff52 	bl	80002e8 <__aeabi_ui2f>
 8001444:	4604      	mov	r4, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001450:	f7fe fe98 	bl	8000184 <__aeabi_fsub>
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f7fe ff9d 	bl	8000398 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	461c      	mov	r4, r3
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ff3f 	bl	80002e8 <__aeabi_ui2f>
 800146a:	4602      	mov	r2, r0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f7fe ff90 	bl	8000398 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4620      	mov	r0, r4
 800147e:	f7fe fe83 	bl	8000188 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f973 	bl	8000770 <__aeabi_f2uiz>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8c1b      	ldrh	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff26 	bl	80002e8 <__aeabi_ui2f>
 800149c:	4604      	mov	r4, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014a8:	f7fe fe6c 	bl	8000184 <__aeabi_fsub>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7fe ff71 	bl	8000398 <__aeabi_fmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
 80014ba:	8bbb      	ldrh	r3, [r7, #28]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff13 	bl	80002e8 <__aeabi_ui2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7fe ff64 	bl	8000398 <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7fe fe57 	bl	8000188 <__addsf3>
 80014da:	4603      	mov	r3, r0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f947 	bl	8000770 <__aeabi_f2uiz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	865a      	strh	r2, [r3, #50]	; 0x32
 80014f6:	e008      	b.n	800150a <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	8bfa      	ldrh	r2, [r7, #30]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	8c1b      	ldrh	r3, [r3, #32]
 800151a:	8bba      	ldrh	r2, [r7, #28]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	889b      	ldrh	r3, [r3, #4]
 8001526:	8bfa      	ldrh	r2, [r7, #30]
 8001528:	4293      	cmp	r3, r2
 800152a:	bf28      	it	cs
 800152c:	4613      	movcs	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	8bfa      	ldrh	r2, [r7, #30]
 800153a:	4293      	cmp	r3, r2
 800153c:	bf38      	it	cc
 800153e:	4613      	movcc	r3, r2
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8b9b      	ldrh	r3, [r3, #28]
 800154a:	8bba      	ldrh	r2, [r7, #28]
 800154c:	4293      	cmp	r3, r2
 800154e:	bf28      	it	cs
 8001550:	4613      	movcs	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8bdb      	ldrh	r3, [r3, #30]
 800155c:	8bba      	ldrh	r2, [r7, #28]
 800155e:	4293      	cmp	r3, r2
 8001560:	bf38      	it	cc
 8001562:	4613      	movcc	r3, r2
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 800156a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dd15      	ble.n	800159e <Joystick_Update+0x18e>
 8001572:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe feba 	bl	80002f0 <__aeabi_i2f>
 800157c:	4604      	mov	r4, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	88db      	ldrh	r3, [r3, #6]
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	891b      	ldrh	r3, [r3, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe feb0 	bl	80002f0 <__aeabi_i2f>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7fe ffb3 	bl	8000500 <__aeabi_fdiv>
 800159a:	4603      	mov	r3, r0
 800159c:	e016      	b.n	80015cc <Joystick_Update+0x1bc>
 800159e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fea4 	bl	80002f0 <__aeabi_i2f>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	889b      	ldrh	r3, [r3, #4]
 80015b2:	461a      	mov	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	891b      	ldrh	r3, [r3, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe98 	bl	80002f0 <__aeabi_i2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7fe ff9b 	bl	8000500 <__aeabi_fdiv>
 80015ca:	4603      	mov	r3, r0
 80015cc:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 80015ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dd15      	ble.n	8001602 <Joystick_Update+0x1f2>
 80015d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fe88 	bl	80002f0 <__aeabi_i2f>
 80015e0:	4604      	mov	r4, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8bdb      	ldrh	r3, [r3, #30]
 80015e6:	461a      	mov	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8c1b      	ldrh	r3, [r3, #32]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe7e 	bl	80002f0 <__aeabi_i2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7fe ff81 	bl	8000500 <__aeabi_fdiv>
 80015fe:	4603      	mov	r3, r0
 8001600:	e016      	b.n	8001630 <Joystick_Update+0x220>
 8001602:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fe72 	bl	80002f0 <__aeabi_i2f>
 800160c:	4603      	mov	r3, r0
 800160e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8b9b      	ldrh	r3, [r3, #28]
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8c1b      	ldrh	r3, [r3, #32]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe66 	bl	80002f0 <__aeabi_i2f>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	4620      	mov	r0, r4
 800162a:	f7fe ff69 	bl	8000500 <__aeabi_fdiv>
 800162e:	4603      	mov	r3, r0
 8001630:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff f86a 	bl	8000710 <__aeabi_fcmpgt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <Joystick_Update+0x236>
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	e002      	b.n	800164c <Joystick_Update+0x23c>
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800164c:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	6938      	ldr	r0, [r7, #16]
 8001654:	f7ff f85c 	bl	8000710 <__aeabi_fcmpgt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <Joystick_Update+0x252>
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	e002      	b.n	8001668 <Joystick_Update+0x258>
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001668:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff f84d 	bl	8000710 <__aeabi_fcmpgt>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <Joystick_Update+0x282>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4619      	mov	r1, r3
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff f826 	bl	80006d4 <__aeabi_fcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <Joystick_Update+0x282>
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	e001      	b.n	8001696 <Joystick_Update+0x286>
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff f835 	bl	8000710 <__aeabi_fcmpgt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <Joystick_Update+0x2b2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	4619      	mov	r1, r3
 80016b2:	68b8      	ldr	r0, [r7, #8]
 80016b4:	f7ff f80e 	bl	80006d4 <__aeabi_fcmplt>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <Joystick_Update+0x2b2>
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	e001      	b.n	80016c6 <Joystick_Update+0x2b6>
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}

080016d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fd41 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f80e 	bl	8001704 <HAL_InitTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	e001      	b.n	80016f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016f4:	f7ff fd22 	bl	800113c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_InitTick+0x68>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d022      	beq.n	800175e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_InitTick+0x6c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_InitTick+0x68>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001724:	fbb1 f3f3 	udiv	r3, r1, r3
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fd4e 	bl	80021ce <HAL_SYSTICK_Config>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10f      	bne.n	8001758 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	d809      	bhi.n	8001752 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173e:	2200      	movs	r2, #0
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	f04f 30ff 	mov.w	r0, #4294967295
 8001746:	f000 fd18 	bl	800217a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_InitTick+0x70>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e007      	b.n	8001762 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e004      	b.n	8001762 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000008 	.word	0x20000008
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_IncTick+0x1c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_IncTick+0x20>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4413      	add	r3, r2
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <HAL_IncTick+0x1c>)
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000358 	.word	0x20000358
 8001798:	20000008 	.word	0x20000008

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <HAL_GetTick+0x10>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000358 	.word	0x20000358

080017b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e127      	b.n	8001a20 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ec:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_ADC_Init+0x278>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a8d      	ldr	r2, [pc, #564]	; (8001a28 <HAL_ADC_Init+0x278>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_ADC_Init+0x278>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fcc7 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80ff 	bne.w	8001a16 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001820:	f023 0302 	bic.w	r3, r3, #2
 8001824:	f043 0202 	orr.w	r2, r3, #2
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800182c:	4b7f      	ldr	r3, [pc, #508]	; (8001a2c <HAL_ADC_Init+0x27c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	497c      	ldr	r1, [pc, #496]	; (8001a2c <HAL_ADC_Init+0x27c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001846:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184e:	4619      	mov	r1, r3
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800186a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001870:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001892:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001896:	4313      	orrs	r3, r2
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80018aa:	4313      	orrs	r3, r2
 80018ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d04f      	beq.n	8001960 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c6:	4313      	orrs	r3, r2
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018d2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6912      	ldr	r2, [r2, #16]
 80018d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80018dc:	d003      	beq.n	80018e6 <HAL_ADC_Init+0x136>
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6912      	ldr	r2, [r2, #16]
 80018e2:	2a01      	cmp	r2, #1
 80018e4:	d102      	bne.n	80018ec <HAL_ADC_Init+0x13c>
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	e000      	b.n	80018ee <HAL_ADC_Init+0x13e>
 80018ec:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80018ee:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f2:	4313      	orrs	r3, r2
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d125      	bne.n	800194c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d114      	bne.n	8001934 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	3b01      	subs	r3, #1
 8001910:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	fa92 f2a2 	rbit	r2, r2
 800191c:	617a      	str	r2, [r7, #20]
  return result;
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4093      	lsls	r3, r2
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800192e:	4313      	orrs	r3, r2
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
 8001932:	e00b      	b.n	800194c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_ADC_Init+0x280>)
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800195c:	430b      	orrs	r3, r1
 800195e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_ADC_Init+0x284>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197c:	d003      	beq.n	8001986 <HAL_ADC_Init+0x1d6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d119      	bne.n	80019ba <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	3b01      	subs	r3, #1
 8001996:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800199a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	fa92 f2a2 	rbit	r2, r2
 80019a2:	60fa      	str	r2, [r7, #12]
  return result;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	fab2 f282 	clz	r2, r2
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	fa03 f202 	lsl.w	r2, r3, r2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
 80019b8:	e007      	b.n	80019ca <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_ADC_Init+0x288>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f023 0303 	bic.w	r3, r3, #3
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f0:	e014      	b.n	8001a1c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f023 0312 	bic.w	r3, r3, #18
 80019fa:	f043 0210 	orr.w	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40012700 	.word	0x40012700
 8001a30:	fcfc16ff 	.word	0xfcfc16ff
 8001a34:	c0fff18d 	.word	0xc0fff18d
 8001a38:	bf80fffe 	.word	0xbf80fffe

08001a3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Start_DMA+0x1e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e074      	b.n	8001b44 <HAL_ADC_Start_DMA+0x108>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9da 	bl	8001e1c <ADC_Enable>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d167      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab6:	f023 0206 	bic.w	r2, r3, #6
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
 8001abe:	e002      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_ADC_Start_DMA+0x110>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_ADC_Start_DMA+0x114>)
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_ADC_Start_DMA+0x118>)
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001afe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3358      	adds	r3, #88	; 0x58
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f000 fbba 	bl	8002298 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	08001ed5 	.word	0x08001ed5
 8001b50:	08001f7d 	.word	0x08001f7d
 8001b54:	08001f99 	.word	0x08001f99

08001b58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x20>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e134      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x28a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d81c      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b05      	subs	r3, #5
 8001bbe:	221f      	movs	r2, #31
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b05      	subs	r3, #5
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
 8001be4:	e07e      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d81c      	bhi.n	8001c28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b23      	subs	r3, #35	; 0x23
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b23      	subs	r3, #35	; 0x23
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c26:	e05d      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d81c      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b41      	subs	r3, #65	; 0x41
 8001c42:	221f      	movs	r2, #31
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b41      	subs	r3, #65	; 0x41
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
 8001c68:	e03c      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b18      	cmp	r3, #24
 8001c70:	d81c      	bhi.n	8001cac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b5f      	subs	r3, #95	; 0x5f
 8001c84:	221f      	movs	r2, #31
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4019      	ands	r1, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b5f      	subs	r3, #95	; 0x5f
 8001c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8001caa:	e01b      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b7d      	subs	r3, #125	; 0x7d
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b7d      	subs	r3, #125	; 0x7d
 8001cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	d81a      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6959      	ldr	r1, [r3, #20]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6898      	ldr	r0, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	fa00 f203 	lsl.w	r2, r0, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	e042      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b13      	cmp	r3, #19
 8001d28:	d81c      	bhi.n	8001d64 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6919      	ldr	r1, [r3, #16]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b1e      	subs	r3, #30
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4019      	ands	r1, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6898      	ldr	r0, [r3, #8]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	e021      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b1a      	cmp	r3, #26
 8001d6a:	d81c      	bhi.n	8001da6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b3c      	subs	r3, #60	; 0x3c
 8001d7e:	2207      	movs	r2, #7
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4019      	ands	r1, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6898      	ldr	r0, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	3b3c      	subs	r3, #60	; 0x3c
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e000      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001da6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d003      	beq.n	8001db8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db4:	2b11      	cmp	r3, #17
 8001db6:	d121      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_ADC_ConfigChannel+0x294>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_ADC_ConfigChannel+0x294>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_ADC_ConfigChannel+0x294>)
 8001dca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dce:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d111      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_ADC_ConfigChannel+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_ADC_ConfigChannel+0x29c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9a      	lsrs	r2, r3, #18
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001dee:	e002      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f9      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40012700 	.word	0x40012700
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83

08001e1c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d043      	beq.n	8001ec2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <ADC_Enable+0xb0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <ADC_Enable+0xb4>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9a      	lsrs	r2, r3, #18
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e5e:	e002      	b.n	8001e66 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001e6c:	f7ff fc96 	bl	800179c <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e72:	e01f      	b.n	8001eb4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001e74:	f7ff fc92 	bl	800179c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d918      	bls.n	8001eb4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d011      	beq.n	8001eb4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e007      	b.n	8001ec4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d1d8      	bne.n	8001e74 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d13d      	bne.n	8001f6a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12c      	bne.n	8001f62 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d127      	bne.n	8001f62 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0220 	bic.w	r2, r2, #32
 8001f3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff f86a 	bl	800103c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f68:	e004      	b.n	8001f74 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fde4 	bl	8001b58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fdd3 	bl	8001b6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4906      	ldr	r1, [pc, #24]	; (8002064 <__NVIC_EnableIRQ+0x34>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002130:	d301      	bcc.n	8002136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002132:	2301      	movs	r3, #1
 8002134:	e00f      	b.n	8002156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <SysTick_Config+0x40>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213e:	210f      	movs	r1, #15
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f7ff ff90 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SysTick_Config+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SysTick_Config+0x40>)
 8002150:	2207      	movs	r2, #7
 8002152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	e000e010 	.word	0xe000e010

08002164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff2d 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff42 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff90 	bl	80020bc <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5f 	bl	8002068 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff35 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa2 	bl	8002120 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e043      	b.n	8002282 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_DMA_Init+0xa4>)
 8002202:	4413      	add	r3, r2
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Init+0xa8>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_DMA_Init+0xac>)
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	bffd9ff8 	.word	0xbffd9ff8
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	40026000 	.word	0x40026000

08002298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Start_IT+0x20>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e04b      	b.n	8002350 <HAL_DMA_Start_IT+0xb8>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d13a      	bne.n	8002342 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f8e0 	bl	80024b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 020e 	orr.w	r2, r2, #14
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00f      	b.n	8002330 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 020a 	orr.w	r2, r2, #10
 800232e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e005      	b.n	800234e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 031c 	and.w	r3, r3, #28
 8002378:	2204      	movs	r2, #4
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d026      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x7a>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d021      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f003 021c 	and.w	r2, r3, #28
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	2104      	movs	r1, #4
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d071      	beq.n	80024ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	e06c      	b.n	80024ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 031c 	and.w	r3, r3, #28
 80023da:	2202      	movs	r2, #2
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02e      	beq.n	8002444 <HAL_DMA_IRQHandler+0xec>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d029      	beq.n	8002444 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 020a 	bic.w	r2, r2, #10
 800240c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 021c 	and.w	r2, r3, #28
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	2102      	movs	r1, #2
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	2b00      	cmp	r3, #0
 8002438:	d038      	beq.n	80024ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002442:	e033      	b.n	80024ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	2208      	movs	r2, #8
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02a      	beq.n	80024ae <HAL_DMA_IRQHandler+0x156>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d025      	beq.n	80024ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 020e 	bic.w	r2, r2, #14
 8002470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 021c 	and.w	r2, r3, #28
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
}
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 021c 	and.w	r2, r3, #28
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d108      	bne.n	80024fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024f8:	e007      	b.n	800250a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800252a:	e154      	b.n	80027d6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8146 	beq.w	80027d0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d005      	beq.n	800255c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002558:	2b02      	cmp	r3, #2
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d017      	beq.n	80025fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d123      	bne.n	800264e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002612:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	6939      	ldr	r1, [r7, #16]
 800264a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0203 	and.w	r2, r3, #3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a0 	beq.w	80027d0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002690:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_GPIO_Init+0x2e0>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x2e0>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_GPIO_Init+0x2e0>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80026a8:	4a53      	ldr	r2, [pc, #332]	; (80027f8 <HAL_GPIO_Init+0x2e4>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x2e8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d019      	beq.n	8002708 <HAL_GPIO_Init+0x1f4>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x2ec>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_GPIO_Init+0x1f0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_GPIO_Init+0x2f0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00d      	beq.n	8002700 <HAL_GPIO_Init+0x1ec>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a48      	ldr	r2, [pc, #288]	; (8002808 <HAL_GPIO_Init+0x2f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d007      	beq.n	80026fc <HAL_GPIO_Init+0x1e8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a47      	ldr	r2, [pc, #284]	; (800280c <HAL_GPIO_Init+0x2f8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e008      	b.n	800270a <HAL_GPIO_Init+0x1f6>
 80026f8:	2305      	movs	r3, #5
 80026fa:	e006      	b.n	800270a <HAL_GPIO_Init+0x1f6>
 80026fc:	2303      	movs	r3, #3
 80026fe:	e004      	b.n	800270a <HAL_GPIO_Init+0x1f6>
 8002700:	2302      	movs	r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x1f6>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_GPIO_Init+0x1f6>
 8002708:	2300      	movs	r3, #0
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	4093      	lsls	r3, r2
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800271a:	4937      	ldr	r1, [pc, #220]	; (80027f8 <HAL_GPIO_Init+0x2e4>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800274c:	4a30      	ldr	r2, [pc, #192]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_GPIO_Init+0x2fc>)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f aea3 	bne.w	800252c <HAL_GPIO_Init+0x18>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af06      	add	r7, sp, #24
 800281a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0d0      	b.n	80029c8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f006 ff76 	bl	800972c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fe0b 	bl	8005468 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e04c      	b.n	80028f2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	3301      	adds	r3, #1
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	b298      	uxth	r0, r3
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	3336      	adds	r3, #54	; 0x36
 8002896:	4602      	mov	r2, r0
 8002898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3303      	adds	r3, #3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3338      	adds	r3, #56	; 0x38
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3340      	adds	r3, #64	; 0x40
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3301      	adds	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3ad      	bcc.n	8002858 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e044      	b.n	800298c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	3301      	adds	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d3b5      	bcc.n	8002902 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	687e      	ldr	r6, [r7, #4]
 800299e:	466d      	mov	r5, sp
 80029a0:	f106 0410 	add.w	r4, r6, #16
 80029a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	602b      	str	r3, [r5, #0]
 80029ac:	1d33      	adds	r3, r6, #4
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	6838      	ldr	r0, [r7, #0]
 80029b2:	f002 fd73 	bl	800549c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_PCD_Start+0x16>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e016      	b.n	8002a14 <HAL_PCD_Start+0x44>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fd22 	bl	800543c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029f8:	2101      	movs	r1, #1
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f006 fe78 	bl	80096f0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 fa07 	bl	8007e18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f005 f9ff 	bl	8007e2c <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a38:	d102      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fade 	bl	8002ffc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f005 f9f1 	bl	8007e2c <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d112      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f006 fed7 	bl	8009822 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a74:	2100      	movs	r1, #0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8c7 	bl	8002c0a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 f9d3 	bl	8007e2c <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a90:	d10b      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f005 f9bc 	bl	8007e2c <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abe:	d10b      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f005 f9a5 	bl	8007e2c <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d126      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0204 	bic.w	r2, r2, #4
 8002b00:	b292      	uxth	r2, r2
 8002b02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f006 feb8 	bl	8009894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b36:	b292      	uxth	r2, r2
 8002b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f005 f973 	bl	8007e2c <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b50:	d126      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0208 	orr.w	r2, r2, #8
 8002b64:	b292      	uxth	r2, r2
 8002b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7c:	b292      	uxth	r2, r2
 8002b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0204 	orr.w	r2, r2, #4
 8002b94:	b292      	uxth	r2, r2
 8002b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f006 fe60 	bl	8009860 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 f941 	bl	8007e2c <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f006 fe19 	bl	8009806 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 f927 	bl	8007e2c <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d10b      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_SetAddress+0x1a>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e013      	b.n	8002c4c <HAL_PCD_SetAddress+0x42>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f005 f8d8 	bl	8007df2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	70fb      	strb	r3, [r7, #3]
 8002c66:	460b      	mov	r3, r1
 8002c68:	803b      	strh	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da0e      	bge.n	8002c98 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	705a      	strb	r2, [r3, #1]
 8002c96:	e00e      	b.n	8002cb6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 0207 	and.w	r2, r3, #7
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cc2:	883a      	ldrh	r2, [r7, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	78ba      	ldrb	r2, [r7, #2]
 8002ccc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_EP_Open+0xa6>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e00e      	b.n	8002d18 <HAL_PCD_EP_Open+0xc4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fbe7 	bl	80054dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0e      	bge.n	8002d52 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	705a      	strb	r2, [r3, #1]
 8002d50:	e00e      	b.n	8002d70 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0207 	and.w	r2, r3, #7
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_PCD_EP_Close+0x6a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e00e      	b.n	8002da8 <HAL_PCD_EP_Close+0x88>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 ff09 	bl	8005bb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	f003 0207 	and.w	r2, r3, #7
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 f8bb 	bl	8005f88 <USB_EPStartXfer>
 8002e12:	e005      	b.n	8002e20 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6979      	ldr	r1, [r7, #20]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 f8b4 	bl	8005f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	460b      	mov	r3, r1
 8002e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6979      	ldr	r1, [r7, #20]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 f878 	bl	8005f88 <USB_EPStartXfer>
 8002e98:	e005      	b.n	8002ea6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6979      	ldr	r1, [r7, #20]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 f871 	bl	8005f88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d901      	bls.n	8002ece <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e03e      	b.n	8002f4c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da0e      	bge.n	8002ef4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	705a      	strb	r2, [r3, #1]
 8002ef2:	e00c      	b.n	8002f0e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_EP_SetStall+0x7e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_SetStall+0x9c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f004 fe5b 	bl	8007bf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d901      	bls.n	8002f72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e040      	b.n	8002ff4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0e      	bge.n	8002f98 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	705a      	strb	r2, [r3, #1]
 8002f96:	e00e      	b.n	8002fb6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 0207 	and.w	r2, r3, #7
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_EP_ClrStall+0x82>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_ClrStall+0xa0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 fe57 	bl	8007c98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	; 0x38
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003004:	e2ec      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800300e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800301c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 8161 	bne.w	80032e8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d152      	bne.n	80030d6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	81fb      	strh	r3, [r7, #14]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	89fb      	ldrh	r3, [r7, #14]
 8003048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800304c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003050:	b29b      	uxth	r3, r3
 8003052:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3328      	adds	r3, #40	; 0x28
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	3302      	adds	r3, #2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	441a      	add	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003094:	2100      	movs	r1, #0
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f006 fb9b 	bl	80097d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 829b 	beq.w	80035e0 <PCD_EP_ISR_Handler+0x5e4>
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 8296 	bne.w	80035e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b292      	uxth	r2, r2
 80030c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030d4:	e284      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d034      	beq.n	800315a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	3306      	adds	r3, #6
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800312e:	b29b      	uxth	r3, r3
 8003130:	f004 fed0 	bl	8007ed4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29a      	uxth	r2, r3
 800313c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003140:	4013      	ands	r3, r2
 8003142:	823b      	strh	r3, [r7, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	8a3a      	ldrh	r2, [r7, #16]
 800314a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314e:	b292      	uxth	r2, r2
 8003150:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f006 fb10 	bl	8009778 <HAL_PCD_SetupStageCallback>
 8003158:	e242      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800315a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800315e:	2b00      	cmp	r3, #0
 8003160:	f280 823e 	bge.w	80035e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003170:	4013      	ands	r3, r2
 8003172:	83bb      	strh	r3, [r7, #28]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	8bba      	ldrh	r2, [r7, #28]
 800317a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800317e:	b292      	uxth	r2, r2
 8003180:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	3306      	adds	r3, #6
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <PCD_EP_ISR_Handler+0x1ee>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d015      	beq.n	80031ea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6959      	ldr	r1, [r3, #20]
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f004 fe80 	bl	8007ed4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	441a      	add	r2, r3
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031e2:	2100      	movs	r1, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f006 fad9 	bl	800979c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 81f2 	bne.w	80035e0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d112      	bne.n	800324a <PCD_EP_ISR_Handler+0x24e>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800322e:	b29a      	uxth	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003242:	b29a      	uxth	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	e02f      	b.n	80032aa <PCD_EP_ISR_Handler+0x2ae>
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b3e      	cmp	r3, #62	; 0x3e
 8003250:	d813      	bhi.n	800327a <PCD_EP_ISR_Handler+0x27e>
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <PCD_EP_ISR_Handler+0x270>
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	3301      	adds	r3, #1
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	b29b      	uxth	r3, r3
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	b29a      	uxth	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e017      	b.n	80032aa <PCD_EP_ISR_Handler+0x2ae>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <PCD_EP_ISR_Handler+0x298>
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	3b01      	subs	r3, #1
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	b29b      	uxth	r3, r3
 8003298:	029b      	lsls	r3, r3, #10
 800329a:	b29b      	uxth	r3, r3
 800329c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	827b      	strh	r3, [r7, #18]
 80032bc:	8a7b      	ldrh	r3, [r7, #18]
 80032be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032c2:	827b      	strh	r3, [r7, #18]
 80032c4:	8a7b      	ldrh	r3, [r7, #18]
 80032c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032ca:	827b      	strh	r3, [r7, #18]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	8a7b      	ldrh	r3, [r7, #18]
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e17b      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f280 80ea 	bge.w	80034d8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29a      	uxth	r2, r3
 8003316:	f640 738f 	movw	r3, #3983	; 0xf8f
 800331a:	4013      	ands	r3, r2
 800331c:	853b      	strh	r3, [r7, #40]	; 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800332e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003332:	b292      	uxth	r2, r2
 8003334:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003336:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	7b1b      	ldrb	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d122      	bne.n	800339a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	3306      	adds	r3, #6
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800337e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8087 	beq.w	8003494 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	6959      	ldr	r1, [r3, #20]
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	88da      	ldrh	r2, [r3, #6]
 8003392:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003394:	f004 fd9e 	bl	8007ed4 <USB_ReadPMA>
 8003398:	e07c      	b.n	8003494 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	78db      	ldrb	r3, [r3, #3]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d108      	bne.n	80033b4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033a4:	461a      	mov	r2, r3
 80033a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f927 	bl	80035fc <HAL_PCD_EP_DB_Receive>
 80033ae:	4603      	mov	r3, r0
 80033b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033b2:	e06f      	b.n	8003494 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d021      	beq.n	8003452 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	3302      	adds	r3, #2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003436:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003438:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02a      	beq.n	8003494 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	6959      	ldr	r1, [r3, #20]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	891a      	ldrh	r2, [r3, #8]
 800344a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800344c:	f004 fd42 	bl	8007ed4 <USB_ReadPMA>
 8003450:	e020      	b.n	8003494 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	3306      	adds	r3, #6
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800347c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	6959      	ldr	r1, [r3, #20]
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	895a      	ldrh	r2, [r3, #10]
 800348e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003490:	f004 fd20 	bl	8007ed4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800349a:	441a      	add	r2, r3
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034a6:	441a      	add	r2, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <PCD_EP_ISR_Handler+0x4c2>
 80034b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d206      	bcs.n	80034cc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f006 f969 	bl	800979c <HAL_PCD_DataOutStageCallback>
 80034ca:	e005      	b.n	80034d8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fd58 	bl	8005f88 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07e      	beq.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80034e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	843b      	strh	r3, [r7, #32]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	8c3b      	ldrh	r3, [r7, #32]
 8003522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352a:	b29b      	uxth	r3, r3
 800352c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	78db      	ldrb	r3, [r3, #3]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d00c      	beq.n	8003550 <PCD_EP_ISR_Handler+0x554>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	78db      	ldrb	r3, [r3, #3]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003542:	2b02      	cmp	r3, #2
 8003544:	d146      	bne.n	80035d4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d141      	bne.n	80035d4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	3302      	adds	r3, #2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003578:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	8bfb      	ldrh	r3, [r7, #30]
 8003580:	429a      	cmp	r2, r3
 8003582:	d906      	bls.n	8003592 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	8bfb      	ldrh	r3, [r7, #30]
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	619a      	str	r2, [r3, #24]
 8003590:	e002      	b.n	8003598 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f006 f913 	bl	80097d2 <HAL_PCD_DataInStageCallback>
 80035ac:	e018      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	8bfb      	ldrh	r3, [r7, #30]
 80035b4:	441a      	add	r2, r3
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	8bfb      	ldrh	r3, [r7, #30]
 80035c0:	441a      	add	r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fcdb 	bl	8005f88 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80035d2:	e005      	b.n	80035e0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035d6:	461a      	mov	r2, r3
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f91b 	bl	8003816 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f6ff ad0a 	blt.w	8003006 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3738      	adds	r7, #56	; 0x38
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d07e      	beq.n	8003712 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	3302      	adds	r3, #2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	8b7b      	ldrh	r3, [r7, #26]
 8003644:	429a      	cmp	r2, r3
 8003646:	d306      	bcc.n	8003656 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	8b7b      	ldrh	r3, [r7, #26]
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	619a      	str	r2, [r3, #24]
 8003654:	e002      	b.n	800365c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d123      	bne.n	80036ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	833b      	strh	r3, [r7, #24]
 8003680:	8b3b      	ldrh	r3, [r7, #24]
 8003682:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003686:	833b      	strh	r3, [r7, #24]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	8b3b      	ldrh	r3, [r7, #24]
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01f      	beq.n	80036f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	82fb      	strh	r3, [r7, #22]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	8afb      	ldrh	r3, [r7, #22]
 80036e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036f6:	8b7b      	ldrh	r3, [r7, #26]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8087 	beq.w	800380c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	6959      	ldr	r1, [r3, #20]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	891a      	ldrh	r2, [r3, #8]
 800370a:	8b7b      	ldrh	r3, [r7, #26]
 800370c:	f004 fbe2 	bl	8007ed4 <USB_ReadPMA>
 8003710:	e07c      	b.n	800380c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	3306      	adds	r3, #6
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	429a      	cmp	r2, r3
 8003744:	d306      	bcc.n	8003754 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	8b7b      	ldrh	r3, [r7, #26]
 800374c:	1ad2      	subs	r2, r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
 8003752:	e002      	b.n	800375a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d123      	bne.n	80037aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	83fb      	strh	r3, [r7, #30]
 800377e:	8bfb      	ldrh	r3, [r7, #30]
 8003780:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003784:	83fb      	strh	r3, [r7, #30]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	8bfb      	ldrh	r3, [r7, #30]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11f      	bne.n	80037f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	83bb      	strh	r3, [r7, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	8bbb      	ldrh	r3, [r7, #28]
 80037e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f4:	8b7b      	ldrh	r3, [r7, #26]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6959      	ldr	r1, [r3, #20]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	895a      	ldrh	r2, [r3, #10]
 8003806:	8b7b      	ldrh	r3, [r7, #26]
 8003808:	f004 fb64 	bl	8007ed4 <USB_ReadPMA>
    }
  }

  return count;
 800380c:	8b7b      	ldrh	r3, [r7, #26]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b0a2      	sub	sp, #136	; 0x88
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 81c7 	beq.w	8003bbe <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	3302      	adds	r3, #2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003858:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003864:	429a      	cmp	r2, r3
 8003866:	d907      	bls.n	8003878 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	619a      	str	r2, [r3, #24]
 8003876:	e002      	b.n	800387e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 80b9 	bne.w	80039fa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d126      	bne.n	80038de <HAL_PCD_EP_DB_Transmit+0xc8>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	4413      	add	r3, r2
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	011a      	lsls	r2, r3, #4
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e01a      	b.n	8003914 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d116      	bne.n	8003914 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	4413      	add	r3, r2
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	011a      	lsls	r2, r3, #4
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	4413      	add	r3, r2
 8003908:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	2200      	movs	r2, #0
 8003912:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d126      	bne.n	8003970 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	4413      	add	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	011a      	lsls	r2, r3, #4
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003954:	b29a      	uxth	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003968:	b29a      	uxth	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	e017      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d113      	bne.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	4413      	add	r3, r2
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	011a      	lsls	r2, r3, #4
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2200      	movs	r2, #0
 800399e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f005 ff13 	bl	80097d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 82d4 	beq.w	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	827b      	strh	r3, [r7, #18]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	8a7b      	ldrh	r3, [r7, #18]
 80039e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8013      	strh	r3, [r2, #0]
 80039f8:	e2b2      	b.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d021      	beq.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	f040 8286 	bne.w	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a6a:	441a      	add	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d309      	bcc.n	8003a90 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	621a      	str	r2, [r3, #32]
 8003a8e:	e015      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003aa6:	e009      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d155      	bne.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	4413      	add	r3, r2
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	011a      	lsls	r2, r3, #4
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
 8003aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d112      	bne.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x302>
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e047      	b.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b1c:	d811      	bhi.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	3301      	adds	r3, #1
 8003b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e032      	b.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x342>
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	3b01      	subs	r3, #1
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e01b      	b.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d117      	bne.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8c:	4413      	add	r3, r2
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	011a      	lsls	r2, r3, #4
 8003b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b98:	4413      	add	r3, r2
 8003b9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	891a      	ldrh	r2, [r3, #8]
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f004 f947 	bl	8007e4a <USB_WritePMA>
 8003bbc:	e1d0      	b.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3306      	adds	r3, #6
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d307      	bcc.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	619a      	str	r2, [r3, #24]
 8003c04:	e002      	b.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 80c4 	bne.w	8003d9e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d126      	bne.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x456>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	4413      	add	r3, r2
 8003c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	011a      	lsls	r2, r3, #4
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	4413      	add	r3, r2
 8003c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	e01a      	b.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	785b      	ldrb	r3, [r3, #1]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d116      	bne.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	4413      	add	r3, r2
 8003c8a:	677b      	str	r3, [r7, #116]	; 0x74
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	011a      	lsls	r2, r3, #4
 8003c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c94:	4413      	add	r3, r2
 8003c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d12f      	bne.n	8003d10 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cc8:	4413      	add	r3, r2
 8003cca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd8:	4413      	add	r3, r2
 8003cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	e017      	b.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d113      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d26:	4413      	add	r3, r2
 8003d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f005 fd43 	bl	80097d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 8104 	bne.w	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8013      	strh	r3, [r2, #0]
 8003d9c:	e0e0      	b.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d121      	bne.n	8003dec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 80b4 	bne.w	8003f60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e00:	441a      	add	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e0e:	441a      	add	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d309      	bcc.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	e015      	b.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e4a:	e009      	b.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	667b      	str	r3, [r7, #100]	; 0x64
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d155      	bne.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x704>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e82:	4413      	add	r3, r2
 8003e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	011a      	lsls	r2, r3, #4
 8003e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e8e:	4413      	add	r3, r2
 8003e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d112      	bne.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e044      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x736>
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec6:	d811      	bhi.n	8003eec <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eda:	3301      	adds	r3, #1
 8003edc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e02f      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x736>
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	3b01      	subs	r3, #1
 8003f00:	657b      	str	r3, [r7, #84]	; 0x54
 8003f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	e018      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x736>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d114      	bne.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x736>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f30:	4413      	add	r3, r2
 8003f32:	667b      	str	r3, [r7, #100]	; 0x64
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	011a      	lsls	r2, r3, #4
 8003f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f42:	663b      	str	r3, [r7, #96]	; 0x60
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6959      	ldr	r1, [r3, #20]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	895a      	ldrh	r2, [r3, #10]
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f003 ff75 	bl	8007e4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f7a:	823b      	strh	r3, [r7, #16]
 8003f7c:	8a3b      	ldrh	r3, [r7, #16]
 8003f7e:	f083 0310 	eor.w	r3, r3, #16
 8003f82:	823b      	strh	r3, [r7, #16]
 8003f84:	8a3b      	ldrh	r3, [r7, #16]
 8003f86:	f083 0320 	eor.w	r3, r3, #32
 8003f8a:	823b      	strh	r3, [r7, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	8a3b      	ldrh	r3, [r7, #16]
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3788      	adds	r7, #136	; 0x88
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fcc:	897b      	ldrh	r3, [r7, #10]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd8:	897b      	ldrh	r3, [r7, #10]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e009      	b.n	8004004 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ff0:	897a      	ldrh	r2, [r7, #10]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b29a      	uxth	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	80da      	strh	r2, [r3, #6]
 8004018:	e00b      	b.n	8004032 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2201      	movs	r2, #1
 800401e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	b29a      	uxth	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	b29a      	uxth	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e31d      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004052:	4b94      	ldr	r3, [pc, #592]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800405c:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d07b      	beq.n	800416a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d006      	beq.n	8004086 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d10f      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d10b      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4b87      	ldr	r3, [pc, #540]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d06a      	beq.n	8004168 <HAL_RCC_OscConfig+0x128>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d166      	bne.n	8004168 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e2f7      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x74>
 80040a6:	4b7f      	ldr	r3, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7e      	ldr	r2, [pc, #504]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e02d      	b.n	8004110 <HAL_RCC_OscConfig+0xd0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x96>
 80040bc:	4b79      	ldr	r3, [pc, #484]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a78      	ldr	r2, [pc, #480]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a75      	ldr	r2, [pc, #468]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0xd0>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0xb8>
 80040de:	4b71      	ldr	r3, [pc, #452]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a70      	ldr	r2, [pc, #448]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b6e      	ldr	r3, [pc, #440]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6d      	ldr	r2, [pc, #436]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0xd0>
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a66      	ldr	r2, [pc, #408]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800410a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd fb40 	bl	800179c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004120:	f7fd fb3c 	bl	800179c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e2ad      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004132:	4b5c      	ldr	r3, [pc, #368]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xe0>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fd fb2c 	bl	800179c <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004148:	f7fd fb28 	bl	800179c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e299      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800415a:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x108>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d05a      	beq.n	800422c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d005      	beq.n	8004188 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d119      	bne.n	80041b6 <HAL_RCC_OscConfig+0x176>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x160>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e276      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	493d      	ldr	r1, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b4:	e03a      	b.n	800422c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d020      	beq.n	8004200 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <HAL_RCC_OscConfig+0x268>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fd faea 	bl	800179c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fd fae6 	bl	800179c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e257      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	492a      	ldr	r1, [pc, #168]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
 80041fe:	e015      	b.n	800422c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_RCC_OscConfig+0x268>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fd fac9 	bl	800179c <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420e:	f7fd fac5 	bl	800179c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e236      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80b8 	beq.w	80043aa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d170      	bne.n	8004322 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_OscConfig+0x218>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e21a      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004264:	429a      	cmp	r2, r3
 8004266:	d921      	bls.n	80042ac <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fc4b 	bl	8004b08 <RCC_SetFlashLatencyFromMSIRange>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e208      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4906      	ldr	r1, [pc, #24]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	061b      	lsls	r3, r3, #24
 800429c:	4901      	ldr	r1, [pc, #4]	; (80042a4 <HAL_RCC_OscConfig+0x264>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
 80042a2:	e020      	b.n	80042e6 <HAL_RCC_OscConfig+0x2a6>
 80042a4:	40023800 	.word	0x40023800
 80042a8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ac:	4b99      	ldr	r3, [pc, #612]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4996      	ldr	r1, [pc, #600]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042be:	4b95      	ldr	r3, [pc, #596]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	4991      	ldr	r1, [pc, #580]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fc16 	bl	8004b08 <RCC_SetFlashLatencyFromMSIRange>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e1d3      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	0b5b      	lsrs	r3, r3, #13
 80042ec:	3301      	adds	r3, #1
 80042ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80042f6:	4a87      	ldr	r2, [pc, #540]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80042f8:	6892      	ldr	r2, [r2, #8]
 80042fa:	0912      	lsrs	r2, r2, #4
 80042fc:	f002 020f 	and.w	r2, r2, #15
 8004300:	4985      	ldr	r1, [pc, #532]	; (8004518 <HAL_RCC_OscConfig+0x4d8>)
 8004302:	5c8a      	ldrb	r2, [r1, r2]
 8004304:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004306:	4a85      	ldr	r2, [pc, #532]	; (800451c <HAL_RCC_OscConfig+0x4dc>)
 8004308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800430a:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCC_OscConfig+0x4e0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd f9f8 	bl	8001704 <HAL_InitTick>
 8004314:	4603      	mov	r3, r0
 8004316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d045      	beq.n	80043aa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	e1b5      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d029      	beq.n	800437e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800432a:	4b7e      	ldr	r3, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x4e4>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fd fa34 	bl	800179c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004338:	f7fd fa30 	bl	800179c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1a1      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800434a:	4b72      	ldr	r3, [pc, #456]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004356:	4b6f      	ldr	r3, [pc, #444]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	496c      	ldr	r1, [pc, #432]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004368:	4b6a      	ldr	r3, [pc, #424]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	4967      	ldr	r1, [pc, #412]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800437e:	4b69      	ldr	r3, [pc, #420]	; (8004524 <HAL_RCC_OscConfig+0x4e4>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd fa0a 	bl	800179c <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800438c:	f7fd fa06 	bl	800179c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e177      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d030      	beq.n	8004418 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b5a      	ldr	r3, [pc, #360]	; (8004528 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fd f9ea 	bl	800179c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd f9e6 	bl	800179c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e157      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043de:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x38c>
 80043ea:	e015      	b.n	8004418 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b4e      	ldr	r3, [pc, #312]	; (8004528 <HAL_RCC_OscConfig+0x4e8>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd f9d3 	bl	800179c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd f9cf 	bl	800179c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e140      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800440c:	4b41      	ldr	r3, [pc, #260]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80b5 	beq.w	8004590 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	4a36      	ldr	r2, [pc, #216]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6253      	str	r3, [r2, #36]	; 0x24
 8004442:	4b34      	ldr	r3, [pc, #208]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x4ec>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d118      	bne.n	8004490 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445e:	4b33      	ldr	r3, [pc, #204]	; (800452c <HAL_RCC_OscConfig+0x4ec>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <HAL_RCC_OscConfig+0x4ec>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fd f997 	bl	800179c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fd f993 	bl	800179c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e104      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_OscConfig+0x4ec>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x466>
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800449e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a2:	6353      	str	r3, [r2, #52]	; 0x34
 80044a4:	e02d      	b.n	8004502 <HAL_RCC_OscConfig+0x4c2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x488>
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	6353      	str	r3, [r2, #52]	; 0x34
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	4a15      	ldr	r2, [pc, #84]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c4:	6353      	str	r3, [r2, #52]	; 0x34
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x4c2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x4aa>
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044da:	6353      	str	r3, [r2, #52]	; 0x34
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6353      	str	r3, [r2, #52]	; 0x34
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x4c2>
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f4:	6353      	str	r3, [r2, #52]	; 0x34
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	4a06      	ldr	r2, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 80044fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004500:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d024      	beq.n	8004554 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fd f947 	bl	800179c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004510:	e019      	b.n	8004546 <HAL_RCC_OscConfig+0x506>
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800
 8004518:	08009d2c 	.word	0x08009d2c
 800451c:	20000000 	.word	0x20000000
 8004520:	20000004 	.word	0x20000004
 8004524:	42470020 	.word	0x42470020
 8004528:	42470680 	.word	0x42470680
 800452c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fd f934 	bl	800179c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0a3      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ee      	beq.n	8004530 <HAL_RCC_OscConfig+0x4f0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fd f922 	bl	800179c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fd f91e 	bl	800179c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e08d      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004572:	4b49      	ldr	r3, [pc, #292]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ee      	bne.n	800455c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	4b44      	ldr	r3, [pc, #272]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	4a43      	ldr	r2, [pc, #268]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	d079      	beq.n	800468c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d056      	beq.n	800464c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d13b      	bne.n	800461e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x65c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fd f8f6 	bl	800179c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd f8f2 	bl	800179c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e063      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045c6:	4b34      	ldr	r3, [pc, #208]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	4319      	orrs	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	430b      	orrs	r3, r1
 80045ea:	492b      	ldr	r1, [pc, #172]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x65c>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd f8d1 	bl	800179c <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fd f8cd 	bl	800179c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e03e      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004610:	4b21      	ldr	r3, [pc, #132]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x5be>
 800461c:	e036      	b.n	800468c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b1f      	ldr	r3, [pc, #124]	; (800469c <HAL_RCC_OscConfig+0x65c>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fd f8ba 	bl	800179c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fd f8b6 	bl	800179c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e027      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x5ec>
 800464a:	e01f      	b.n	800468c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e01a      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <HAL_RCC_OscConfig+0x658>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	429a      	cmp	r2, r3
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	42470060 	.word	0x42470060

080046a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e11a      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b8f      	ldr	r3, [pc, #572]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d919      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x34>
 80046c8:	4b8a      	ldr	r3, [pc, #552]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a89      	ldr	r2, [pc, #548]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b87      	ldr	r3, [pc, #540]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 0201 	bic.w	r2, r3, #1
 80046dc:	4985      	ldr	r1, [pc, #532]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b83      	ldr	r3, [pc, #524]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0f9      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004702:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	497a      	ldr	r1, [pc, #488]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 808e 	beq.w	800483e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800472a:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d121      	bne.n	800477a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0d7      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004742:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d115      	bne.n	800477a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e0cb      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800475a:	4b67      	ldr	r3, [pc, #412]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0bf      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800476a:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0b7      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	495c      	ldr	r1, [pc, #368]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800478c:	f7fd f806 	bl	800179c <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d112      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fc fffe 	bl	800179c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e09b      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_ClockConfig+0xfc>
 80047be:	e03e      	b.n	800483e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d112      	bne.n	80047ee <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ca:	f7fc ffe7 	bl	800179c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e084      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e0:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d1ee      	bne.n	80047ca <HAL_RCC_ClockConfig+0x12a>
 80047ec:	e027      	b.n	800483e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d11d      	bne.n	8004832 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fc ffd0 	bl	800179c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e06d      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d1ee      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x158>
 800481a:	e010      	b.n	800483e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fc ffbe 	bl	800179c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e05b      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004832:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ee      	bne.n	800481c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d219      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_RCC_ClockConfig+0x1be>
 8004852:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0201 	bic.w	r2, r3, #1
 8004866:	4923      	ldr	r1, [pc, #140]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_RCC_ClockConfig+0x254>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e034      	b.n	80048ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4917      	ldr	r1, [pc, #92]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490f      	ldr	r1, [pc, #60]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f823 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_ClockConfig+0x258>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490b      	ldr	r1, [pc, #44]	; (80048fc <HAL_RCC_ClockConfig+0x25c>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc ff10 	bl	8001704 <HAL_InitTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80048e8:	7afb      	ldrb	r3, [r7, #11]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08009d2c 	.word	0x08009d2c
 8004900:	20000000 	.word	0x20000000
 8004904:	20000004 	.word	0x20000004

08004908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490c:	b092      	sub	sp, #72	; 0x48
 800490e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004910:	4b79      	ldr	r3, [pc, #484]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d00d      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x34>
 8004920:	2b0c      	cmp	r3, #12
 8004922:	f200 80d5 	bhi.w	8004ad0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004926:	2b04      	cmp	r3, #4
 8004928:	d002      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x28>
 800492a:	2b08      	cmp	r3, #8
 800492c:	d003      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x2e>
 800492e:	e0cf      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b72      	ldr	r3, [pc, #456]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004934:	e0da      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004936:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004938:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800493a:	e0d7      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	f003 020f 	and.w	r2, r3, #15
 8004944:	4b6f      	ldr	r3, [pc, #444]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	0d9b      	lsrs	r3, r3, #22
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004956:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d05d      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2200      	movs	r2, #0
 8004966:	4618      	mov	r0, r3
 8004968:	4611      	mov	r1, r2
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
 800496e:	4622      	mov	r2, r4
 8004970:	462b      	mov	r3, r5
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	0159      	lsls	r1, r3, #5
 800497c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004980:	0150      	lsls	r0, r2, #5
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	4621      	mov	r1, r4
 8004988:	1a51      	subs	r1, r2, r1
 800498a:	6139      	str	r1, [r7, #16]
 800498c:	4629      	mov	r1, r5
 800498e:	eb63 0301 	sbc.w	r3, r3, r1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a0:	4659      	mov	r1, fp
 80049a2:	018b      	lsls	r3, r1, #6
 80049a4:	4651      	mov	r1, sl
 80049a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049aa:	4651      	mov	r1, sl
 80049ac:	018a      	lsls	r2, r1, #6
 80049ae:	46d4      	mov	ip, sl
 80049b0:	ebb2 080c 	subs.w	r8, r2, ip
 80049b4:	4659      	mov	r1, fp
 80049b6:	eb63 0901 	sbc.w	r9, r3, r1
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ce:	4690      	mov	r8, r2
 80049d0:	4699      	mov	r9, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	eb18 0303 	adds.w	r3, r8, r3
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	462b      	mov	r3, r5
 80049dc:	eb49 0303 	adc.w	r3, r9, r3
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ee:	4629      	mov	r1, r5
 80049f0:	024b      	lsls	r3, r1, #9
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	4604      	mov	r4, r0
 80049f8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80049fc:	4601      	mov	r1, r0
 80049fe:	024a      	lsls	r2, r1, #9
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	2200      	movs	r2, #0
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a10:	f7fb fece 	bl	80007b0 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4613      	mov	r3, r2
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a1c:	e055      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2200      	movs	r2, #0
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	627a      	str	r2, [r7, #36]	; 0x24
 8004a26:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	0159      	lsls	r1, r3, #5
 8004a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a3c:	0150      	lsls	r0, r2, #5
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	46c4      	mov	ip, r8
 8004a44:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	468c      	mov	ip, r1
 8004a4e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a5e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a62:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a66:	ebb2 040a 	subs.w	r4, r2, sl
 8004a6a:	eb63 050b 	sbc.w	r5, r3, fp
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	00eb      	lsls	r3, r5, #3
 8004a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7c:	00e2      	lsls	r2, r4, #3
 8004a7e:	4614      	mov	r4, r2
 8004a80:	461d      	mov	r5, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	18e3      	adds	r3, r4, r3
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	eb45 0303 	adc.w	r3, r5, r3
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	028b      	lsls	r3, r1, #10
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004aaa:	4601      	mov	r1, r0
 8004aac:	028a      	lsls	r2, r1, #10
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	61fa      	str	r2, [r7, #28]
 8004aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abe:	f7fb fe77 	bl	80007b0 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004ace:	e00d      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0b5b      	lsrs	r3, r3, #13
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3748      	adds	r7, #72	; 0x48
 8004af2:	46bd      	mov	sp, r7
 8004af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	007a1200 	.word	0x007a1200
 8004b04:	08009d20 	.word	0x08009d20

08004b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b14:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d12c      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e016      	b.n	8004b66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6253      	str	r3, [r2, #36]	; 0x24
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004b58:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b6c:	d105      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b74:	d101      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b76:	2301      	movs	r3, #1
 8004b78:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0201 	bic.w	r2, r3, #1
 8004b94:	490b      	ldr	r1, [pc, #44]	; (8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	40023c00 	.word	0x40023c00

08004bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e031      	b.n	8004c3e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fb3e 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 f9cc 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e032      	b.n	8004cc6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d00e      	beq.n	8004c90 <HAL_TIM_Base_Start+0x48>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_TIM_Base_Start+0x88>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_TIM_Base_Start+0x48>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_TIM_Base_Start+0x8c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIM_Base_Start+0x48>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <HAL_TIM_Base_Start+0x90>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d111      	bne.n	8004cb4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d010      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	e007      	b.n	8004cc4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40010800 	.word	0x40010800

08004cdc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e031      	b.n	8004d52 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f829 	bl	8004d5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 f942 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e046      	b.n	8004e14 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d839      	bhi.n	8004e08 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004e09 	.word	0x08004e09
 8004da8:	08004e09 	.word	0x08004e09
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004dfb 	.word	0x08004dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f946 	bl	8005068 <TIM_OC1_SetConfig>
      break;
 8004ddc:	e015      	b.n	8004e0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f97b 	bl	80050e0 <TIM_OC2_SetConfig>
      break;
 8004dea:	e00e      	b.n	8004e0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f9b2 	bl	800515c <TIM_OC3_SetConfig>
      break;
 8004df8:	e007      	b.n	8004e0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9e8 	bl	80051d6 <TIM_OC4_SetConfig>
      break;
 8004e06:	e000      	b.n	8004e0a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIM_ConfigClockSource+0x18>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0b3      	b.n	8004f9c <HAL_TIM_ConfigClockSource+0x180>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6c:	d03e      	beq.n	8004eec <HAL_TIM_ConfigClockSource+0xd0>
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e72:	f200 8087 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	f000 8085 	beq.w	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e82:	d87f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d01a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xa2>
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d87b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d050      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x116>
 8004e90:	2b60      	cmp	r3, #96	; 0x60
 8004e92:	d877      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004e94:	2b50      	cmp	r3, #80	; 0x50
 8004e96:	d03c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0xf6>
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d873      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d058      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x136>
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d86f      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d064      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x156>
 8004ea8:	2b30      	cmp	r3, #48	; 0x30
 8004eaa:	d86b      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d060      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x156>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d867      	bhi.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05c      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x156>
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d05a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ebc:	e062      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f000 fa37 	bl	8005340 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	609a      	str	r2, [r3, #8]
      break;
 8004eea:	e04e      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6899      	ldr	r1, [r3, #8]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f000 fa20 	bl	8005340 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0e:	609a      	str	r2, [r3, #8]
      break;
 8004f10:	e03b      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 f997 	bl	8005252 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2150      	movs	r1, #80	; 0x50
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f9ee 	bl	800530c <TIM_ITRx_SetConfig>
      break;
 8004f30:	e02b      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 f9b5 	bl	80052ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2160      	movs	r1, #96	; 0x60
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f9de 	bl	800530c <TIM_ITRx_SetConfig>
      break;
 8004f50:	e01b      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6859      	ldr	r1, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f000 f977 	bl	8005252 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f9ce 	bl	800530c <TIM_ITRx_SetConfig>
      break;
 8004f70:	e00b      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f000 f9c5 	bl	800530c <TIM_ITRx_SetConfig>
        break;
 8004f82:	e002      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x28>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a25      	ldr	r2, [pc, #148]	; (8005054 <TIM_Base_SetConfig+0xb0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x28>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <TIM_Base_SetConfig+0xb4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d013      	beq.n	800500e <TIM_Base_SetConfig+0x6a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <TIM_Base_SetConfig+0xb0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x6a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <TIM_Base_SetConfig+0xb4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x6a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <TIM_Base_SetConfig+0xb8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x6a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_Base_SetConfig+0xbc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x6a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_Base_SetConfig+0xc0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40010800 	.word	0x40010800
 8005060:	40010c00 	.word	0x40010c00
 8005064:	40011000 	.word	0x40011000

08005068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0302 	bic.w	r3, r3, #2
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b087      	sub	sp, #28
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005204:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	031b      	lsls	r3, r3, #12
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f023 0201 	bic.w	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 030a 	bic.w	r3, r3, #10
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	f043 0307 	orr.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
	...

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e046      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40010800 	.word	0x40010800

0800543c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800544c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005450:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	b29a      	uxth	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005470:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005474:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	b29b      	uxth	r3, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	4013      	ands	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800549c:	b084      	sub	sp, #16
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	f107 0014 	add.w	r0, r7, #20
 80054aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	b004      	add	sp, #16
 80054da:	4770      	bx	lr

080054dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054dc:	b480      	push	{r7}
 80054de:	b09b      	sub	sp, #108	; 0x6c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d81f      	bhi.n	800554e <USB_ActivateEndpoint+0x72>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <USB_ActivateEndpoint+0x38>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	08005541 	.word	0x08005541
 800551c:	08005557 	.word	0x08005557
 8005520:	08005533 	.word	0x08005533
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005524:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800552c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005530:	e012      	b.n	8005558 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005532:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005536:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800553a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800553e:	e00b      	b.n	8005558 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005540:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005548:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800554c:	e004      	b.n	8005558 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005554:	e000      	b.n	8005558 <USB_ActivateEndpoint+0x7c>
      break;
 8005556:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	b29a      	uxth	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7b1b      	ldrb	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 8149 	bne.w	800585c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8084 	beq.w	80056dc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	011a      	lsls	r2, r3, #4
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	88db      	ldrh	r3, [r3, #6]
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	81fb      	strh	r3, [r7, #14]
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01b      	beq.n	8005658 <USB_ActivateEndpoint+0x17c>
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	81bb      	strh	r3, [r7, #12]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	89bb      	ldrh	r3, [r7, #12]
 8005644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	78db      	ldrb	r3, [r3, #3]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d020      	beq.n	80056a2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005676:	813b      	strh	r3, [r7, #8]
 8005678:	893b      	ldrh	r3, [r7, #8]
 800567a:	f083 0320 	eor.w	r3, r3, #32
 800567e:	813b      	strh	r3, [r7, #8]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	893b      	ldrh	r3, [r7, #8]
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
 80056a0:	e27f      	b.n	8005ba2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b8:	817b      	strh	r3, [r7, #10]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	897b      	ldrh	r3, [r7, #10]
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]
 80056da:	e262      	b.n	8005ba2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	4413      	add	r3, r2
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	88db      	ldrh	r3, [r3, #6]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571a:	b29b      	uxth	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	4413      	add	r3, r2
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	011a      	lsls	r2, r3, #4
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	4413      	add	r3, r2
 800572e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d112      	bne.n	8005762 <USB_ActivateEndpoint+0x286>
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005746:	b29a      	uxth	r2, r3
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575a:	b29a      	uxth	r2, r3
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	e02f      	b.n	80057c2 <USB_ActivateEndpoint+0x2e6>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b3e      	cmp	r3, #62	; 0x3e
 8005768:	d813      	bhi.n	8005792 <USB_ActivateEndpoint+0x2b6>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	663b      	str	r3, [r7, #96]	; 0x60
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <USB_ActivateEndpoint+0x2a8>
 800577e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005780:	3301      	adds	r3, #1
 8005782:	663b      	str	r3, [r7, #96]	; 0x60
 8005784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29a      	uxth	r2, r3
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e017      	b.n	80057c2 <USB_ActivateEndpoint+0x2e6>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <USB_ActivateEndpoint+0x2d0>
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	3b01      	subs	r3, #1
 80057aa:	663b      	str	r3, [r7, #96]	; 0x60
 80057ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	83fb      	strh	r3, [r7, #30]
 80057d0:	8bfb      	ldrh	r3, [r7, #30]
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01b      	beq.n	8005812 <USB_ActivateEndpoint+0x336>
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	83bb      	strh	r3, [r7, #28]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	8bbb      	ldrh	r3, [r7, #28]
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	837b      	strh	r3, [r7, #26]
 800582a:	8b7b      	ldrh	r3, [r7, #26]
 800582c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005830:	837b      	strh	r3, [r7, #26]
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005838:	837b      	strh	r3, [r7, #26]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8b7b      	ldrh	r3, [r7, #26]
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]
 800585a:	e1a2      	b.n	8005ba2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65bb      	str	r3, [r7, #88]	; 0x58
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a8:	4413      	add	r3, r2
 80058aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	011a      	lsls	r2, r3, #4
 80058b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ba:	657b      	str	r3, [r7, #84]	; 0x54
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	891b      	ldrh	r3, [r3, #8]
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	653b      	str	r3, [r7, #80]	; 0x50
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	4413      	add	r3, r2
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 8091 	bne.w	8005a2c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005918:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800591a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01b      	beq.n	800595a <USB_ActivateEndpoint+0x47e>
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	877b      	strh	r3, [r7, #58]	; 0x3a
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	873b      	strh	r3, [r7, #56]	; 0x38
 8005968:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01b      	beq.n	80059aa <USB_ActivateEndpoint+0x4ce>
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	86fb      	strh	r3, [r7, #54]	; 0x36
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80059c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80059ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	441a      	add	r2, r3
 80059dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]
 8005a2a:	e0ba      	b.n	8005ba2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01d      	beq.n	8005a84 <USB_ActivateEndpoint+0x5a8>
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01d      	beq.n	8005adc <USB_ActivateEndpoint+0x600>
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d024      	beq.n	8005b2e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b02:	f083 0320 	eor.w	r3, r3, #32
 8005b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	8013      	strh	r3, [r2, #0]
 8005b2c:	e01d      	b.n	8005b6a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ba2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	376c      	adds	r7, #108	; 0x6c
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b08d      	sub	sp, #52	; 0x34
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	7b1b      	ldrb	r3, [r3, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 808e 	bne.w	8005ce0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d044      	beq.n	8005c56 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	81bb      	strh	r3, [r7, #12]
 8005bda:	89bb      	ldrh	r3, [r7, #12]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <USB_DeactivateEndpoint+0x6c>
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	817b      	strh	r3, [r7, #10]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	897b      	ldrh	r3, [r7, #10]
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c32:	813b      	strh	r3, [r7, #8]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	893b      	ldrh	r3, [r7, #8]
 8005c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]
 8005c54:	e192      	b.n	8005f7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	827b      	strh	r3, [r7, #18]
 8005c64:	8a7b      	ldrh	r3, [r7, #18]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <USB_DeactivateEndpoint+0xf6>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	823b      	strh	r3, [r7, #16]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8a3b      	ldrh	r3, [r7, #16]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbc:	81fb      	strh	r3, [r7, #14]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e14d      	b.n	8005f7c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f040 80a5 	bne.w	8005e34 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	843b      	strh	r3, [r7, #32]
 8005cf8:	8c3b      	ldrh	r3, [r7, #32]
 8005cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01b      	beq.n	8005d3a <USB_DeactivateEndpoint+0x18a>
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	83fb      	strh	r3, [r7, #30]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	8bfb      	ldrh	r3, [r7, #30]
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	83bb      	strh	r3, [r7, #28]
 8005d48:	8bbb      	ldrh	r3, [r7, #28]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <USB_DeactivateEndpoint+0x1da>
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	837b      	strh	r3, [r7, #26]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8b7b      	ldrh	r3, [r7, #26]
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da0:	833b      	strh	r3, [r7, #24]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	8b3b      	ldrh	r3, [r7, #24]
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	82fb      	strh	r3, [r7, #22]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8afb      	ldrh	r3, [r7, #22]
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e10:	82bb      	strh	r3, [r7, #20]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8abb      	ldrh	r3, [r7, #20]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
 8005e32:	e0a3      	b.n	8005f7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <USB_DeactivateEndpoint+0x2d4>
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <USB_DeactivateEndpoint+0x324>
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3734      	adds	r7, #52	; 0x34
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b0cc      	sub	sp, #304	; 0x130
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f96:	6018      	str	r0, [r3, #0]
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	f041 817d 	bne.w	80072ae <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d908      	bls.n	8005fe2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005fe0:	e007      	b.n	8005ff2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	7b1b      	ldrb	r3, [r3, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d152      	bne.n	80060a8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6959      	ldr	r1, [r3, #20]
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	88da      	ldrh	r2, [r3, #6]
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601e:	b29b      	uxth	r3, r3
 8006020:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006024:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006028:	6800      	ldr	r0, [r0, #0]
 800602a:	f001 ff0e 	bl	8007e4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006036:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800603a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800605c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006060:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	440a      	add	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	011a      	lsls	r2, r3, #4
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4413      	add	r3, r2
 8006084:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	f001 b8b5 	b.w	8007212 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	78db      	ldrb	r3, [r3, #3]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f040 84c6 	bne.w	8006a46 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	f240 8443 	bls.w	800695e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006128:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006130:	b29b      	uxth	r3, r3
 8006132:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	1ad2      	subs	r2, r2, r3
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 823e 	beq.w	80065f6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006186:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 809a 	bne.w	80062d4 <USB_EPStartXfer+0x34c>
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	4619      	mov	r1, r3
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061d2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	440a      	add	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	011a      	lsls	r2, r3, #4
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d122      	bne.n	8006252 <USB_EPStartXfer+0x2ca>
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800621e:	b29a      	uxth	r2, r3
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e079      	b.n	8006346 <USB_EPStartXfer+0x3be>
 8006252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006256:	2b3e      	cmp	r3, #62	; 0x3e
 8006258:	d81b      	bhi.n	8006292 <USB_EPStartXfer+0x30a>
 800625a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <USB_EPStartXfer+0x2f2>
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006274:	3301      	adds	r3, #1
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800627a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29a      	uxth	r2, r3
 8006284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	e059      	b.n	8006346 <USB_EPStartXfer+0x3be>
 8006292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800629c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <USB_EPStartXfer+0x32a>
 80062a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ac:	3b01      	subs	r3, #1
 80062ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e038      	b.n	8006346 <USB_EPStartXfer+0x3be>
 80062d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d130      	bne.n	8006346 <USB_EPStartXfer+0x3be>
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	4619      	mov	r1, r3
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80062fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006302:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	440a      	add	r2, r1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	011a      	lsls	r2, r3, #4
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4413      	add	r3, r2
 8006326:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	b29a      	uxth	r2, r3
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	895b      	ldrh	r3, [r3, #10]
 8006352:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6959      	ldr	r1, [r3, #20]
 8006362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006366:	b29b      	uxth	r3, r3
 8006368:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800636c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006370:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006374:	6800      	ldr	r0, [r0, #0]
 8006376:	f001 fd68 	bl	8007e4a <USB_WritePMA>
            ep->xfer_buff += len;
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	441a      	add	r2, r3
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d90f      	bls.n	80063d4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a1a      	ldr	r2, [r3, #32]
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	621a      	str	r2, [r3, #32]
 80063d2:	e00e      	b.n	80063f2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 809a 	bne.w	8006538 <USB_EPStartXfer+0x5b0>
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800640c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006410:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006426:	b29b      	uxth	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006432:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006436:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	440a      	add	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4413      	add	r3, r2
 800645a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d122      	bne.n	80064b6 <USB_EPStartXfer+0x52e>
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006482:	b29a      	uxth	r2, r3
 8006484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006488:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	e083      	b.n	80065be <USB_EPStartXfer+0x636>
 80064b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ba:	2b3e      	cmp	r3, #62	; 0x3e
 80064bc:	d81b      	bhi.n	80064f6 <USB_EPStartXfer+0x56e>
 80064be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <USB_EPStartXfer+0x556>
 80064d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064d8:	3301      	adds	r3, #1
 80064da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e063      	b.n	80065be <USB_EPStartXfer+0x636>
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <USB_EPStartXfer+0x58e>
 800650c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006510:	3b01      	subs	r3, #1
 8006512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006516:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800651a:	b29b      	uxth	r3, r3
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	e042      	b.n	80065be <USB_EPStartXfer+0x636>
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d13a      	bne.n	80065be <USB_EPStartXfer+0x636>
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006550:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006554:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006576:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800657a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	440a      	add	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	011a      	lsls	r2, r3, #4
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4413      	add	r3, r2
 800659e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	891b      	ldrh	r3, [r3, #8]
 80065ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6959      	ldr	r1, [r3, #20]
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f001 fc2c 	bl	8007e4a <USB_WritePMA>
 80065f2:	f000 be0e 	b.w	8007212 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d16d      	bne.n	80066e2 <USB_EPStartXfer+0x75a>
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
 8006612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	4413      	add	r3, r2
 8006628:	64bb      	str	r3, [r7, #72]	; 0x48
 800662a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	011a      	lsls	r2, r3, #4
 8006638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663a:	4413      	add	r3, r2
 800663c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
 8006642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d112      	bne.n	8006670 <USB_EPStartXfer+0x6e8>
 800664a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006654:	b29a      	uxth	r2, r3
 8006656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e063      	b.n	8006738 <USB_EPStartXfer+0x7b0>
 8006670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006674:	2b3e      	cmp	r3, #62	; 0x3e
 8006676:	d817      	bhi.n	80066a8 <USB_EPStartXfer+0x720>
 8006678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <USB_EPStartXfer+0x710>
 800668e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006692:	3301      	adds	r3, #1
 8006694:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800669c:	b29b      	uxth	r3, r3
 800669e:	029b      	lsls	r3, r3, #10
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e047      	b.n	8006738 <USB_EPStartXfer+0x7b0>
 80066a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <USB_EPStartXfer+0x740>
 80066be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066c2:	3b01      	subs	r3, #1
 80066c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e02a      	b.n	8006738 <USB_EPStartXfer+0x7b0>
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d122      	bne.n	8006738 <USB_EPStartXfer+0x7b0>
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	653b      	str	r3, [r7, #80]	; 0x50
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006712:	4413      	add	r3, r2
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	011a      	lsls	r2, r3, #4
 8006724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006726:	4413      	add	r3, r2
 8006728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	b29a      	uxth	r2, r3
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	891b      	ldrh	r3, [r3, #8]
 8006744:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6959      	ldr	r1, [r3, #20]
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	b29b      	uxth	r3, r3
 800675a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800675e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006762:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	f001 fb6f 	bl	8007e4a <USB_WritePMA>
            ep->xfer_buff += len;
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677c:	441a      	add	r2, r3
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800678a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d90f      	bls.n	80067c6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	621a      	str	r2, [r3, #32]
 80067c4:	e00e      	b.n	80067e4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80067d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2200      	movs	r2, #0
 80067e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	643b      	str	r3, [r7, #64]	; 0x40
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d16d      	bne.n	80068dc <USB_EPStartXfer+0x954>
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38
 800680c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	4413      	add	r3, r2
 8006822:	63bb      	str	r3, [r7, #56]	; 0x38
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	4413      	add	r3, r2
 8006836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d112      	bne.n	800686a <USB_EPStartXfer+0x8e2>
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800684e:	b29a      	uxth	r2, r3
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006862:	b29a      	uxth	r2, r3
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e05d      	b.n	8006926 <USB_EPStartXfer+0x99e>
 800686a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686e:	2b3e      	cmp	r3, #62	; 0x3e
 8006870:	d817      	bhi.n	80068a2 <USB_EPStartXfer+0x91a>
 8006872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800687c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <USB_EPStartXfer+0x90a>
 8006888:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800688c:	3301      	adds	r3, #1
 800688e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006896:	b29b      	uxth	r3, r3
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	b29a      	uxth	r2, r3
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e041      	b.n	8006926 <USB_EPStartXfer+0x99e>
 80068a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <USB_EPStartXfer+0x93a>
 80068b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068bc:	3b01      	subs	r3, #1
 80068be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	029b      	lsls	r3, r3, #10
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e024      	b.n	8006926 <USB_EPStartXfer+0x99e>
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d11c      	bne.n	8006926 <USB_EPStartXfer+0x99e>
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006900:	4413      	add	r3, r2
 8006902:	643b      	str	r3, [r7, #64]	; 0x40
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006914:	4413      	add	r3, r2
 8006916:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006920:	b29a      	uxth	r2, r3
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6959      	ldr	r1, [r3, #20]
 8006942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006946:	b29b      	uxth	r3, r3
 8006948:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800694c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006950:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006954:	6800      	ldr	r0, [r0, #0]
 8006956:	f001 fa78 	bl	8007e4a <USB_WritePMA>
 800695a:	f000 bc5a 	b.w	8007212 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800695e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800696e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006994:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ea:	4413      	add	r3, r2
 80069ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	011a      	lsls	r2, r3, #4
 80069fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	891b      	ldrh	r3, [r3, #8]
 8006a1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6959      	ldr	r1, [r3, #20]
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a36:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a3a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a3e:	6800      	ldr	r0, [r0, #0]
 8006a40:	f001 fa03 	bl	8007e4a <USB_WritePMA>
 8006a44:	e3e5      	b.n	8007212 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 81bc 	beq.w	8006e60 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d16d      	bne.n	8006be2 <USB_EPStartXfer+0xc5a>
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b26:	4413      	add	r3, r2
 8006b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	011a      	lsls	r2, r3, #4
 8006b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
 8006b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d112      	bne.n	8006b70 <USB_EPStartXfer+0xbe8>
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	e060      	b.n	8006c32 <USB_EPStartXfer+0xcaa>
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	2b3e      	cmp	r3, #62	; 0x3e
 8006b76:	d817      	bhi.n	8006ba8 <USB_EPStartXfer+0xc20>
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <USB_EPStartXfer+0xc10>
 8006b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b92:	3301      	adds	r3, #1
 8006b94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	029b      	lsls	r3, r3, #10
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	e044      	b.n	8006c32 <USB_EPStartXfer+0xcaa>
 8006ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USB_EPStartXfer+0xc40>
 8006bbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006bc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	029b      	lsls	r3, r3, #10
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	e027      	b.n	8006c32 <USB_EPStartXfer+0xcaa>
 8006be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d11f      	bne.n	8006c32 <USB_EPStartXfer+0xcaa>
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c08:	4413      	add	r3, r2
 8006c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	011a      	lsls	r2, r3, #4
 8006c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6959      	ldr	r1, [r3, #20]
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c60:	6800      	ldr	r0, [r0, #0]
 8006c62:	f001 f8f2 	bl	8007e4a <USB_WritePMA>
          ep->xfer_buff += len;
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c76:	441a      	add	r2, r3
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d90f      	bls.n	8006cc0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	621a      	str	r2, [r3, #32]
 8006cbe:	e00e      	b.n	8006cde <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8295 	beq.w	8007212 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d16d      	bne.n	8006dd4 <USB_EPStartXfer+0xe4c>
 8006cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d18:	4413      	add	r3, r2
 8006d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	011a      	lsls	r2, r3, #4
 8006d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d32:	667b      	str	r3, [r7, #100]	; 0x64
 8006d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <USB_EPStartXfer+0xdda>
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e063      	b.n	8006e2a <USB_EPStartXfer+0xea2>
 8006d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d66:	2b3e      	cmp	r3, #62	; 0x3e
 8006d68:	d817      	bhi.n	8006d9a <USB_EPStartXfer+0xe12>
 8006d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <USB_EPStartXfer+0xe02>
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e047      	b.n	8006e2a <USB_EPStartXfer+0xea2>
 8006d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <USB_EPStartXfer+0xe32>
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	029b      	lsls	r3, r3, #10
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e02a      	b.n	8006e2a <USB_EPStartXfer+0xea2>
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d122      	bne.n	8006e2a <USB_EPStartXfer+0xea2>
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	673b      	str	r3, [r7, #112]	; 0x70
 8006df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e04:	4413      	add	r3, r2
 8006e06:	673b      	str	r3, [r7, #112]	; 0x70
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	011a      	lsls	r2, r3, #4
 8006e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	891b      	ldrh	r3, [r3, #8]
 8006e36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6959      	ldr	r1, [r3, #20]
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e50:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e54:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e58:	6800      	ldr	r0, [r0, #0]
 8006e5a:	f000 fff6 	bl	8007e4a <USB_WritePMA>
 8006e5e:	e1d8      	b.n	8007212 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d178      	bne.n	8006f62 <USB_EPStartXfer+0xfda>
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e94:	4413      	add	r3, r2
 8006e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	011a      	lsls	r2, r3, #4
 8006ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d116      	bne.n	8006eec <USB_EPStartXfer+0xf64>
 8006ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e06b      	b.n	8006fc4 <USB_EPStartXfer+0x103c>
 8006eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef2:	d818      	bhi.n	8006f26 <USB_EPStartXfer+0xf9e>
 8006ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <USB_EPStartXfer+0xf8c>
 8006f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e04e      	b.n	8006fc4 <USB_EPStartXfer+0x103c>
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <USB_EPStartXfer+0xfbe>
 8006f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f40:	3b01      	subs	r3, #1
 8006f42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006f46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	e030      	b.n	8006fc4 <USB_EPStartXfer+0x103c>
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d128      	bne.n	8006fc4 <USB_EPStartXfer+0x103c>
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f96:	4413      	add	r3, r2
 8006f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	011a      	lsls	r2, r3, #4
 8006faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	891b      	ldrh	r3, [r3, #8]
 8006fd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6959      	ldr	r1, [r3, #20]
 8006fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	f000 ff29 	bl	8007e4a <USB_WritePMA>
          ep->xfer_buff += len;
 8006ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695a      	ldr	r2, [r3, #20]
 8007004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007008:	441a      	add	r2, r3
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	429a      	cmp	r2, r3
 8007030:	d90f      	bls.n	8007052 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	621a      	str	r2, [r3, #32]
 8007050:	e00e      	b.n	8007070 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2200      	movs	r2, #0
 800706e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80cc 	beq.w	8007212 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	785b      	ldrb	r3, [r3, #1]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d178      	bne.n	800718a <USB_EPStartXfer+0x1202>
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070bc:	4413      	add	r3, r2
 80070be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	011a      	lsls	r2, r3, #4
 80070d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070d4:	4413      	add	r3, r2
 80070d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d116      	bne.n	8007114 <USB_EPStartXfer+0x118c>
 80070e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f8:	801a      	strh	r2, [r3, #0]
 80070fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710a:	b29a      	uxth	r2, r3
 800710c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007110:	801a      	strh	r2, [r3, #0]
 8007112:	e064      	b.n	80071de <USB_EPStartXfer+0x1256>
 8007114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007118:	2b3e      	cmp	r3, #62	; 0x3e
 800711a:	d818      	bhi.n	800714e <USB_EPStartXfer+0x11c6>
 800711c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <USB_EPStartXfer+0x11b4>
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007136:	3301      	adds	r3, #1
 8007138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800713c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007140:	b29b      	uxth	r3, r3
 8007142:	029b      	lsls	r3, r3, #10
 8007144:	b29a      	uxth	r2, r3
 8007146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e047      	b.n	80071de <USB_EPStartXfer+0x1256>
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <USB_EPStartXfer+0x11e6>
 8007164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007168:	3b01      	subs	r3, #1
 800716a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800716e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007172:	b29b      	uxth	r3, r3
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	b29b      	uxth	r3, r3
 8007178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007180:	b29a      	uxth	r2, r3
 8007182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e029      	b.n	80071de <USB_EPStartXfer+0x1256>
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d121      	bne.n	80071de <USB_EPStartXfer+0x1256>
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b0:	4413      	add	r3, r2
 80071b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	011a      	lsls	r2, r3, #4
 80071c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	895b      	ldrh	r3, [r3, #10]
 80071ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6959      	ldr	r1, [r3, #20]
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007204:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007208:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800720c:	6800      	ldr	r0, [r0, #0]
 800720e:	f000 fe1c 	bl	8007e4a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007234:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007240:	8013      	strh	r3, [r2, #0]
 8007242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007246:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800724a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800724e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007252:	8812      	ldrh	r2, [r2, #0]
 8007254:	f082 0210 	eor.w	r2, r2, #16
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007262:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007266:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800726a:	8812      	ldrh	r2, [r2, #0]
 800726c:	f082 0220 	eor.w	r2, r2, #32
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
 80072aa:	f000 bc9f 	b.w	8007bec <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	7b1b      	ldrb	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 80ae 	bne.w	800741c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d917      	bls.n	800730c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699a      	ldr	r2, [r3, #24]
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	1ad2      	subs	r2, r2, r3
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	619a      	str	r2, [r3, #24]
 800730a:	e00e      	b.n	800732a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2200      	movs	r2, #0
 8007328:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007346:	b29b      	uxth	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800734e:	4413      	add	r3, r2
 8007350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	011a      	lsls	r2, r3, #4
 8007362:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007366:	4413      	add	r3, r2
 8007368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800736c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d116      	bne.n	80073a6 <USB_EPStartXfer+0x141e>
 8007378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	e3e8      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	2b3e      	cmp	r3, #62	; 0x3e
 80073ac:	d818      	bhi.n	80073e0 <USB_EPStartXfer+0x1458>
 80073ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <USB_EPStartXfer+0x1446>
 80073c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c8:	3301      	adds	r3, #1
 80073ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	e3cb      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
 80073e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80073ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <USB_EPStartXfer+0x1478>
 80073f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fa:	3b01      	subs	r3, #1
 80073fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007404:	b29b      	uxth	r3, r3
 8007406:	029b      	lsls	r3, r3, #10
 8007408:	b29b      	uxth	r3, r3
 800740a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e3ad      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800741c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	78db      	ldrb	r3, [r3, #3]
 8007428:	2b02      	cmp	r3, #2
 800742a:	f040 8200 	bne.w	800782e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f040 8091 	bne.w	8007562 <USB_EPStartXfer+0x15da>
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745c:	b29b      	uxth	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007464:	4413      	add	r3, r2
 8007466:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	011a      	lsls	r2, r3, #4
 8007478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800747c:	4413      	add	r3, r2
 800747e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d116      	bne.n	80074c4 <USB_EPStartXfer+0x153c>
 8007496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	e083      	b.n	80075cc <USB_EPStartXfer+0x1644>
 80074c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b3e      	cmp	r3, #62	; 0x3e
 80074d2:	d820      	bhi.n	8007516 <USB_EPStartXfer+0x158e>
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <USB_EPStartXfer+0x157c>
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e05a      	b.n	80075cc <USB_EPStartXfer+0x1644>
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <USB_EPStartXfer+0x15be>
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007540:	3b01      	subs	r3, #1
 8007542:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754a:	b29b      	uxth	r3, r3
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	b29b      	uxth	r3, r3
 8007550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e034      	b.n	80075cc <USB_EPStartXfer+0x1644>
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d12c      	bne.n	80075cc <USB_EPStartXfer+0x1644>
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800758e:	b29b      	uxth	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007596:	4413      	add	r3, r2
 8007598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	011a      	lsls	r2, r3, #4
 80075aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 8091 	bne.w	800770e <USB_EPStartXfer+0x1786>
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007608:	b29b      	uxth	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007610:	4413      	add	r3, r2
 8007612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	011a      	lsls	r2, r3, #4
 8007624:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007628:	4413      	add	r3, r2
 800762a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800762e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d116      	bne.n	8007670 <USB_EPStartXfer+0x16e8>
 8007642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764e:	b29a      	uxth	r2, r3
 8007650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e07c      	b.n	800776a <USB_EPStartXfer+0x17e2>
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	2b3e      	cmp	r3, #62	; 0x3e
 800767e:	d820      	bhi.n	80076c2 <USB_EPStartXfer+0x173a>
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <USB_EPStartXfer+0x1728>
 80076a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076aa:	3301      	adds	r3, #1
 80076ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	029b      	lsls	r3, r3, #10
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	e053      	b.n	800776a <USB_EPStartXfer+0x17e2>
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <USB_EPStartXfer+0x176a>
 80076e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e02d      	b.n	800776a <USB_EPStartXfer+0x17e2>
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d125      	bne.n	800776a <USB_EPStartXfer+0x17e2>
 800771e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007734:	4413      	add	r3, r2
 8007736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	011a      	lsls	r2, r3, #4
 8007748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800774c:	4413      	add	r3, r2
 800774e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	b29a      	uxth	r2, r3
 8007764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007768:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 81fe 	beq.w	8007b78 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800779c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <USB_EPStartXfer+0x182c>
 80077a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 81db 	bne.w	8007b78 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 81d4 	bne.w	8007b78 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80077fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	441a      	add	r2, r3
 8007814:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007824:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
 800782c:	e1a4      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	78db      	ldrb	r3, [r3, #3]
 800783a:	2b01      	cmp	r3, #1
 800783c:	f040 819a 	bne.w	8007b74 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	429a      	cmp	r2, r3
 800785a:	d917      	bls.n	800788c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	619a      	str	r2, [r3, #24]
 800788a:	e00e      	b.n	80078aa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800789c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d178      	bne.n	80079ac <USB_EPStartXfer+0x1a24>
 80078ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078de:	4413      	add	r3, r2
 80078e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	011a      	lsls	r2, r3, #4
 80078f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d116      	bne.n	8007936 <USB_EPStartXfer+0x19ae>
 8007908:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792c:	b29a      	uxth	r2, r3
 800792e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	e06b      	b.n	8007a0e <USB_EPStartXfer+0x1a86>
 8007936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793a:	2b3e      	cmp	r3, #62	; 0x3e
 800793c:	d818      	bhi.n	8007970 <USB_EPStartXfer+0x19e8>
 800793e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007942:	085b      	lsrs	r3, r3, #1
 8007944:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <USB_EPStartXfer+0x19d6>
 8007954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007958:	3301      	adds	r3, #1
 800795a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007962:	b29b      	uxth	r3, r3
 8007964:	029b      	lsls	r3, r3, #10
 8007966:	b29a      	uxth	r2, r3
 8007968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e04e      	b.n	8007a0e <USB_EPStartXfer+0x1a86>
 8007970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800797a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <USB_EPStartXfer+0x1a08>
 8007986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800798a:	3b01      	subs	r3, #1
 800798c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007994:	b29b      	uxth	r3, r3
 8007996:	029b      	lsls	r3, r3, #10
 8007998:	b29b      	uxth	r3, r3
 800799a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e030      	b.n	8007a0e <USB_EPStartXfer+0x1a86>
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d128      	bne.n	8007a0e <USB_EPStartXfer+0x1a86>
 80079bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e0:	4413      	add	r3, r2
 80079e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	011a      	lsls	r2, r3, #4
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	4413      	add	r3, r2
 80079fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d178      	bne.n	8007b1e <USB_EPStartXfer+0x1b96>
 8007a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a50:	4413      	add	r3, r2
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	011a      	lsls	r2, r3, #4
 8007a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a68:	4413      	add	r3, r2
 8007a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d116      	bne.n	8007aa8 <USB_EPStartXfer+0x1b20>
 8007a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e067      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
 8007aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aac:	2b3e      	cmp	r3, #62	; 0x3e
 8007aae:	d818      	bhi.n	8007ae2 <USB_EPStartXfer+0x1b5a>
 8007ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <USB_EPStartXfer+0x1b48>
 8007ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aca:	3301      	adds	r3, #1
 8007acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ad0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	029b      	lsls	r3, r3, #10
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	e04a      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
 8007ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <USB_EPStartXfer+0x1b7a>
 8007af8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007afc:	3b01      	subs	r3, #1
 8007afe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e02c      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d124      	bne.n	8007b78 <USB_EPStartXfer+0x1bf0>
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b44:	4413      	add	r3, r2
 8007b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	011a      	lsls	r2, r3, #4
 8007b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	e001      	b.n	8007b78 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e03a      	b.n	8007bee <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007ba2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ba6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007baa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d020      	beq.n	8007c4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	81bb      	strh	r3, [r7, #12]
 8007c22:	89bb      	ldrh	r3, [r7, #12]
 8007c24:	f083 0310 	eor.w	r3, r3, #16
 8007c28:	81bb      	strh	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8013      	strh	r3, [r2, #0]
 8007c4a:	e01f      	b.n	8007c8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	81fb      	strh	r3, [r7, #14]
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c6a:	81fb      	strh	r3, [r7, #14]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	7b1b      	ldrb	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f040 809d 	bne.w	8007de6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d04c      	beq.n	8007d4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	823b      	strh	r3, [r7, #16]
 8007cc2:	8a3b      	ldrh	r3, [r7, #16]
 8007cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01b      	beq.n	8007d04 <USB_EPClearStall+0x6c>
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	81fb      	strh	r3, [r7, #14]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	89fb      	ldrh	r3, [r7, #14]
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d06c      	beq.n	8007de6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	81bb      	strh	r3, [r7, #12]
 8007d24:	89bb      	ldrh	r3, [r7, #12]
 8007d26:	f083 0320 	eor.w	r3, r3, #32
 8007d2a:	81bb      	strh	r3, [r7, #12]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	89bb      	ldrh	r3, [r7, #12]
 8007d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	8013      	strh	r3, [r2, #0]
 8007d4c:	e04b      	b.n	8007de6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	82fb      	strh	r3, [r7, #22]
 8007d5c:	8afb      	ldrh	r3, [r7, #22]
 8007d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01b      	beq.n	8007d9e <USB_EPClearStall+0x106>
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7c:	82bb      	strh	r3, [r7, #20]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	441a      	add	r2, r3
 8007d88:	8abb      	ldrh	r3, [r7, #20]
 8007d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	827b      	strh	r3, [r7, #18]
 8007db6:	8a7b      	ldrh	r3, [r7, #18]
 8007db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dbc:	827b      	strh	r3, [r7, #18]
 8007dbe:	8a7b      	ldrh	r3, [r7, #18]
 8007dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dc4:	827b      	strh	r3, [r7, #18]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	8a7b      	ldrh	r3, [r7, #18]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr

08007e4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b08d      	sub	sp, #52	; 0x34
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	4611      	mov	r1, r2
 8007e56:	461a      	mov	r2, r3
 8007e58:	460b      	mov	r3, r1
 8007e5a:	80fb      	strh	r3, [r7, #6]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e60:	88bb      	ldrh	r3, [r7, #4]
 8007e62:	3301      	adds	r3, #1
 8007e64:	085b      	lsrs	r3, r3, #1
 8007e66:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	005a      	lsls	r2, r3, #1
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e82:	e01e      	b.n	8007ec2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	3302      	adds	r3, #2
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	3301      	adds	r3, #1
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1dd      	bne.n	8007e84 <USB_WritePMA+0x3a>
  }
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3734      	adds	r7, #52	; 0x34
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b08b      	sub	sp, #44	; 0x2c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	80fb      	strh	r3, [r7, #6]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f06:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0c:	e01b      	b.n	8007f46 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	3301      	adds	r3, #1
 8007f38:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	3b01      	subs	r3, #1
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e0      	bne.n	8007f0e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f4c:	88bb      	ldrh	r3, [r7, #4]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	701a      	strb	r2, [r3, #0]
  }
}
 8007f68:	bf00      	nop
 8007f6a:	372c      	adds	r7, #44	; 0x2c
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr

08007f72 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f82:	2302      	movs	r3, #2
 8007f84:	2203      	movs	r2, #3
 8007f86:	2181      	movs	r1, #129	; 0x81
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fcfc 	bl	8009986 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f94:	2302      	movs	r3, #2
 8007f96:	2203      	movs	r2, #3
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fcf3 	bl	8009986 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8007fa8:	2024      	movs	r0, #36	; 0x24
 8007faa:	f001 fe01 	bl	8009bb0 <USBD_static_malloc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	e012      	b.n	8007fec <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fcc:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	230d      	movs	r3, #13
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fdbe 	bl	8009b68 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008002:	2181      	movs	r1, #129	; 0x81
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fce4 	bl	80099d2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fcdd 	bl	80099d2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fdc4 	bl	8009bc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008064:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807e:	2b00      	cmp	r3, #0
 8008080:	d051      	beq.n	8008126 <USBD_CUSTOM_HID_Setup+0xd2>
 8008082:	2b20      	cmp	r3, #32
 8008084:	f040 80d8 	bne.w	8008238 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	3b02      	subs	r3, #2
 800808e:	2b09      	cmp	r3, #9
 8008090:	d841      	bhi.n	8008116 <USBD_CUSTOM_HID_Setup+0xc2>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBD_CUSTOM_HID_Setup+0x44>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080f1 	.word	0x080080f1
 800809c:	080080cf 	.word	0x080080cf
 80080a0:	08008117 	.word	0x08008117
 80080a4:	08008117 	.word	0x08008117
 80080a8:	08008117 	.word	0x08008117
 80080ac:	08008117 	.word	0x08008117
 80080b0:	08008117 	.word	0x08008117
 80080b4:	08008101 	.word	0x08008101
 80080b8:	080080df 	.word	0x080080df
 80080bc:	080080c1 	.word	0x080080c1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	885b      	ldrh	r3, [r3, #2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	611a      	str	r2, [r3, #16]
      break;
 80080cc:	e02a      	b.n	8008124 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3310      	adds	r3, #16
 80080d2:	2201      	movs	r2, #1
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 f92b 	bl	8009332 <USBD_CtlSendData>
      break;
 80080dc:	e022      	b.n	8008124 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	0a1b      	lsrs	r3, r3, #8
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	615a      	str	r2, [r3, #20]
      break;
 80080ee:	e019      	b.n	8008124 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3314      	adds	r3, #20
 80080f4:	2201      	movs	r2, #1
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f91a 	bl	8009332 <USBD_CtlSendData>
      break;
 80080fe:	e011      	b.n	8008124 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2201      	movs	r2, #1
 8008104:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8008106:	6939      	ldr	r1, [r7, #16]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	88db      	ldrh	r3, [r3, #6]
 800810c:	461a      	mov	r2, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f93d 	bl	800938e <USBD_CtlPrepareRx>
      break;
 8008114:	e006      	b.n	8008124 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f8a0 	bl	800925e <USBD_CtlError>
      ret = USBD_FAIL;
 800811e:	2302      	movs	r3, #2
 8008120:	75fb      	strb	r3, [r7, #23]
      break;
 8008122:	bf00      	nop
    }
    break;
 8008124:	e08f      	b.n	8008246 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b0b      	cmp	r3, #11
 800812c:	d87c      	bhi.n	8008228 <USBD_CUSTOM_HID_Setup+0x1d4>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008165 	.word	0x08008165
 8008138:	08008229 	.word	0x08008229
 800813c:	08008229 	.word	0x08008229
 8008140:	08008229 	.word	0x08008229
 8008144:	08008229 	.word	0x08008229
 8008148:	08008229 	.word	0x08008229
 800814c:	0800818d 	.word	0x0800818d
 8008150:	08008229 	.word	0x08008229
 8008154:	08008229 	.word	0x08008229
 8008158:	08008229 	.word	0x08008229
 800815c:	080081db 	.word	0x080081db
 8008160:	08008203 	.word	0x08008203
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800816a:	2b03      	cmp	r3, #3
 800816c:	d107      	bne.n	800817e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800816e:	f107 030e 	add.w	r3, r7, #14
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f8db 	bl	8009332 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800817c:	e05b      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 f86c 	bl	800925e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	75fb      	strb	r3, [r7, #23]
      break;
 800818a:	e054      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b22      	cmp	r3, #34	; 0x22
 8008196:	d10b      	bne.n	80081b0 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b41      	cmp	r3, #65	; 0x41
 800819e:	bf28      	it	cs
 80081a0:	2341      	movcs	r3, #65	; 0x41
 80081a2:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e00d      	b.n	80081cc <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	885b      	ldrh	r3, [r3, #2]
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2b21      	cmp	r3, #33	; 0x21
 80081ba:	d107      	bne.n	80081cc <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80081bc:	4b24      	ldr	r3, [pc, #144]	; (8008250 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80081be:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	88db      	ldrh	r3, [r3, #6]
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	bf28      	it	cs
 80081c8:	2309      	movcs	r3, #9
 80081ca:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80081cc:	8bfb      	ldrh	r3, [r7, #30]
 80081ce:	461a      	mov	r2, r3
 80081d0:	69b9      	ldr	r1, [r7, #24]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f8ad 	bl	8009332 <USBD_CtlSendData>
      break;
 80081d8:	e02d      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d107      	bne.n	80081f4 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3318      	adds	r3, #24
 80081e8:	2201      	movs	r2, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f8a0 	bl	8009332 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80081f2:	e020      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 f831 	bl	800925e <USBD_CtlError>
			  ret = USBD_FAIL;
 80081fc:	2302      	movs	r3, #2
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	e019      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008208:	2b03      	cmp	r3, #3
 800820a:	d106      	bne.n	800821a <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	885b      	ldrh	r3, [r3, #2]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008218:	e00d      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f81e 	bl	800925e <USBD_CtlError>
			  ret = USBD_FAIL;
 8008222:	2302      	movs	r3, #2
 8008224:	75fb      	strb	r3, [r7, #23]
      break;
 8008226:	e006      	b.n	8008236 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 f817 	bl	800925e <USBD_CtlError>
      ret = USBD_FAIL;
 8008230:	2302      	movs	r3, #2
 8008232:	75fb      	strb	r3, [r7, #23]
      break;
 8008234:	bf00      	nop
    }
    break;
 8008236:	e006      	b.n	8008246 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 f80f 	bl	800925e <USBD_CtlError>
    ret = USBD_FAIL;
 8008240:	2302      	movs	r3, #2
 8008242:	75fb      	strb	r3, [r7, #23]
    break;
 8008244:	bf00      	nop
  }
  return ret;
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200000c8 	.word	0x200000c8

08008254 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008268:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008270:	2b03      	cmp	r3, #3
 8008272:	d111      	bne.n	8008298 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	2181      	movs	r1, #129	; 0x81
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fc48 	bl	8009b22 <USBD_LL_Transmit>
 8008292:	e001      	b.n	8008298 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2229      	movs	r2, #41	; 0x29
 80082b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000044 	.word	0x20000044

080082c4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2229      	movs	r2, #41	; 0x29
 80082d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80082d2:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	20000070 	.word	0x20000070

080082e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2229      	movs	r2, #41	; 0x29
 80082f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	2000009c 	.word	0x2000009c

08008304 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800833a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	7810      	ldrb	r0, [r2, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	7852      	ldrb	r2, [r2, #1]
 800834c:	4611      	mov	r1, r2
 800834e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	230d      	movs	r3, #13
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fc06 	bl	8009b68 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008374:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d10c      	bne.n	8008398 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	7810      	ldrb	r0, [r2, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	7852      	ldrb	r2, [r2, #1]
 800838e:	4611      	mov	r1, r2
 8008390:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	220a      	movs	r2, #10
 80083b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200000d4 	.word	0x200000d4

080083c4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	e01a      	b.n	800843e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	79fa      	ldrb	r2, [r7, #7]
 8008434:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f001 fa3a 	bl	80098b0 <USBD_LL_Init>

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d006      	beq.n	8008468 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
 8008466:	e001      	b.n	800846c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008468:	2302      	movs	r3, #2
 800846a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr

08008478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fa65 	bl	8009950 <USBD_LL_Start>

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr

080084a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4611      	mov	r1, r2
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fe63 	bl	80091e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800852e:	461a      	mov	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	2b02      	cmp	r3, #2
 8008542:	d016      	beq.n	8008572 <USBD_LL_SetupStage+0x6a>
 8008544:	2b02      	cmp	r3, #2
 8008546:	d81c      	bhi.n	8008582 <USBD_LL_SetupStage+0x7a>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <USBD_LL_SetupStage+0x4a>
 800854c:	2b01      	cmp	r3, #1
 800854e:	d008      	beq.n	8008562 <USBD_LL_SetupStage+0x5a>
 8008550:	e017      	b.n	8008582 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9c6 	bl	80088ec <USBD_StdDevReq>
    break;
 8008560:	e01a      	b.n	8008598 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa28 	bl	80089c0 <USBD_StdItfReq>
    break;
 8008570:	e012      	b.n	8008598 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa68 	bl	8008a50 <USBD_StdEPReq>
    break;
 8008580:	e00a      	b.n	8008598 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 fa3d 	bl	8009a10 <USBD_LL_StallEP>
    break;
 8008596:	bf00      	nop
  }

  return USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b086      	sub	sp, #24
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	460b      	mov	r3, r1
 80085ac:	607a      	str	r2, [r7, #4]
 80085ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d14b      	bne.n	800864e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80085bc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d134      	bne.n	8008632 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d919      	bls.n	8008608 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	1ad2      	subs	r2, r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d203      	bcs.n	80085f6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	e002      	b.n	80085fc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fee2 	bl	80093ca <USBD_CtlContinueRx>
 8008606:	e038      	b.n	800867a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800861a:	2b03      	cmp	r3, #3
 800861c:	d105      	bne.n	800862a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fedf 	bl	80093ee <USBD_CtlSendStatus>
 8008630:	e023      	b.n	800867a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008638:	2b05      	cmp	r3, #5
 800863a:	d11e      	bne.n	800867a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008644:	2100      	movs	r1, #0
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f001 f9e2 	bl	8009a10 <USBD_LL_StallEP>
 800864c:	e015      	b.n	800867a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008660:	2b03      	cmp	r3, #3
 8008662:	d108      	bne.n	8008676 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	7afa      	ldrb	r2, [r7, #11]
 800866e:	4611      	mov	r1, r2
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	4798      	blx	r3
 8008674:	e001      	b.n	800867a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008676:	2302      	movs	r3, #2
 8008678:	e000      	b.n	800867c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d17f      	bne.n	8008798 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3314      	adds	r3, #20
 800869c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d15c      	bne.n	8008762 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d915      	bls.n	80086e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fe4c 	bl	800936a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80086d2:	2300      	movs	r3, #0
 80086d4:	2200      	movs	r2, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f001 fa45 	bl	8009b68 <USBD_LL_PrepareReceive>
 80086de:	e04e      	b.n	800877e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	6912      	ldr	r2, [r2, #16]
 80086e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ec:	fb01 f202 	mul.w	r2, r1, r2
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d11c      	bne.n	8008730 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80086fe:	429a      	cmp	r2, r3
 8008700:	d316      	bcc.n	8008730 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800870c:	429a      	cmp	r2, r3
 800870e:	d20f      	bcs.n	8008730 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fe28 	bl	800936a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008722:	2300      	movs	r3, #0
 8008724:	2200      	movs	r2, #0
 8008726:	2100      	movs	r1, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 fa1d 	bl	8009b68 <USBD_LL_PrepareReceive>
 800872e:	e026      	b.n	800877e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008742:	2b03      	cmp	r3, #3
 8008744:	d105      	bne.n	8008752 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f001 f95b 	bl	8009a10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fe5a 	bl	8009414 <USBD_CtlReceiveStatus>
 8008760:	e00d      	b.n	800877e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008768:	2b04      	cmp	r3, #4
 800876a:	d004      	beq.n	8008776 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008776:	2180      	movs	r1, #128	; 0x80
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 f949 	bl	8009a10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008784:	2b01      	cmp	r3, #1
 8008786:	d11d      	bne.n	80087c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fe81 	bl	8008490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008796:	e015      	b.n	80087c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00d      	beq.n	80087c0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d108      	bne.n	80087c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	7afa      	ldrb	r2, [r7, #11]
 80087b8:	4611      	mov	r1, r2
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3
 80087be:	e001      	b.n	80087c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087c0:	2302      	movs	r3, #2
 80087c2:	e000      	b.n	80087c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f8d2 	bl	8009986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2240      	movs	r2, #64	; 0x40
 80087ee:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	2200      	movs	r2, #0
 80087f6:	2180      	movs	r1, #128	; 0x80
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f8c4 	bl	8009986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2240      	movs	r2, #64	; 0x40
 8008808:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6852      	ldr	r2, [r2, #4]
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	4611      	mov	r1, r2
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
  }

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr

0800886e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2204      	movs	r2, #4
 8008886:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr

08008896 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d10b      	bne.n	80088e0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d005      	beq.n	8008912 <USBD_StdDevReq+0x26>
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d84f      	bhi.n	80089aa <USBD_StdDevReq+0xbe>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <USBD_StdDevReq+0x36>
 800890e:	2b20      	cmp	r3, #32
 8008910:	d14b      	bne.n	80089aa <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
    break;
 8008920:	e048      	b.n	80089b4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b09      	cmp	r3, #9
 8008928:	d839      	bhi.n	800899e <USBD_StdDevReq+0xb2>
 800892a:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <USBD_StdDevReq+0x44>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008981 	.word	0x08008981
 8008934:	08008995 	.word	0x08008995
 8008938:	0800899f 	.word	0x0800899f
 800893c:	0800898b 	.word	0x0800898b
 8008940:	0800899f 	.word	0x0800899f
 8008944:	08008963 	.word	0x08008963
 8008948:	08008959 	.word	0x08008959
 800894c:	0800899f 	.word	0x0800899f
 8008950:	08008977 	.word	0x08008977
 8008954:	0800896d 	.word	0x0800896d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f9da 	bl	8008d14 <USBD_GetDescriptor>
      break;
 8008960:	e022      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 facf 	bl	8008f08 <USBD_SetAddress>
      break;
 800896a:	e01d      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fb0e 	bl	8008f90 <USBD_SetConfig>
      break;
 8008974:	e018      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fb97 	bl	80090ac <USBD_GetConfig>
      break;
 800897e:	e013      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbc7 	bl	8009116 <USBD_GetStatus>
      break;
 8008988:	e00e      	b.n	80089a8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fbf5 	bl	800917c <USBD_SetFeature>
      break;
 8008992:	e009      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fc04 	bl	80091a4 <USBD_ClrFeature>
      break;
 800899c:	e004      	b.n	80089a8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc5c 	bl	800925e <USBD_CtlError>
      break;
 80089a6:	bf00      	nop
    }
    break;
 80089a8:	e004      	b.n	80089b4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc56 	bl	800925e <USBD_CtlError>
    break;
 80089b2:	bf00      	nop
  }

  return ret;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop

080089c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d005      	beq.n	80089e6 <USBD_StdItfReq+0x26>
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d82e      	bhi.n	8008a3c <USBD_StdItfReq+0x7c>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <USBD_StdItfReq+0x26>
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d12a      	bne.n	8008a3c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089ec:	3b01      	subs	r3, #1
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d81d      	bhi.n	8008a2e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	889b      	ldrh	r3, [r3, #4]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d813      	bhi.n	8008a24 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d110      	bne.n	8008a38 <USBD_StdItfReq+0x78>
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10d      	bne.n	8008a38 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fce6 	bl	80093ee <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a22:	e009      	b.n	8008a38 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc19 	bl	800925e <USBD_CtlError>
      break;
 8008a2c:	e004      	b.n	8008a38 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc14 	bl	800925e <USBD_CtlError>
      break;
 8008a36:	e000      	b.n	8008a3a <USBD_StdItfReq+0x7a>
      break;
 8008a38:	bf00      	nop
    }
    break;
 8008a3a:	e004      	b.n	8008a46 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc0d 	bl	800925e <USBD_CtlError>
    break;
 8008a44:	bf00      	nop
  }

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	889b      	ldrh	r3, [r3, #4]
 8008a62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d007      	beq.n	8008a80 <USBD_StdEPReq+0x30>
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	f200 8144 	bhi.w	8008cfe <USBD_StdEPReq+0x2ae>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <USBD_StdEPReq+0x40>
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	f040 813f 	bne.w	8008cfe <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	4798      	blx	r3
    break;
 8008a8e:	e13b      	b.n	8008d08 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d10a      	bne.n	8008ab2 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	e12b      	b.n	8008d0a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d007      	beq.n	8008aca <USBD_StdEPReq+0x7a>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	f300 8119 	bgt.w	8008cf2 <USBD_StdEPReq+0x2a2>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d072      	beq.n	8008baa <USBD_StdEPReq+0x15a>
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d03a      	beq.n	8008b3e <USBD_StdEPReq+0xee>
 8008ac8:	e113      	b.n	8008cf2 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d002      	beq.n	8008ada <USBD_StdEPReq+0x8a>
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d015      	beq.n	8008b04 <USBD_StdEPReq+0xb4>
 8008ad8:	e02b      	b.n	8008b32 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <USBD_StdEPReq+0xaa>
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b80      	cmp	r3, #128	; 0x80
 8008ae4:	d009      	beq.n	8008afa <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 ff90 	bl	8009a10 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008af0:	2180      	movs	r1, #128	; 0x80
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 ff8c 	bl	8009a10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008af8:	e020      	b.n	8008b3c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fbae 	bl	800925e <USBD_CtlError>
        break;
 8008b02:	e01b      	b.n	8008b3c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	885b      	ldrh	r3, [r3, #2]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10e      	bne.n	8008b2a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00b      	beq.n	8008b2a <USBD_StdEPReq+0xda>
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d008      	beq.n	8008b2a <USBD_StdEPReq+0xda>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	88db      	ldrh	r3, [r3, #6]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d104      	bne.n	8008b2a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 ff73 	bl	8009a10 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fc5f 	bl	80093ee <USBD_CtlSendStatus>

        break;
 8008b30:	e004      	b.n	8008b3c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fb92 	bl	800925e <USBD_CtlError>
        break;
 8008b3a:	bf00      	nop
      }
      break;
 8008b3c:	e0de      	b.n	8008cfc <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d002      	beq.n	8008b4e <USBD_StdEPReq+0xfe>
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d015      	beq.n	8008b78 <USBD_StdEPReq+0x128>
 8008b4c:	e026      	b.n	8008b9c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00c      	beq.n	8008b6e <USBD_StdEPReq+0x11e>
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d009      	beq.n	8008b6e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 ff56 	bl	8009a10 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 ff52 	bl	8009a10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b6c:	e01c      	b.n	8008ba8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb74 	bl	800925e <USBD_CtlError>
        break;
 8008b76:	e017      	b.n	8008ba8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	885b      	ldrh	r3, [r3, #2]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d112      	bne.n	8008ba6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 ff5d 	bl	8009a4e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fc2a 	bl	80093ee <USBD_CtlSendStatus>
        }
        break;
 8008b9a:	e004      	b.n	8008ba6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fb5d 	bl	800925e <USBD_CtlError>
        break;
 8008ba4:	e000      	b.n	8008ba8 <USBD_StdEPReq+0x158>
        break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e0a8      	b.n	8008cfc <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d002      	beq.n	8008bba <USBD_StdEPReq+0x16a>
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d031      	beq.n	8008c1c <USBD_StdEPReq+0x1cc>
 8008bb8:	e095      	b.n	8008ce6 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <USBD_StdEPReq+0x180>
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d004      	beq.n	8008bd0 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fb48 	bl	800925e <USBD_CtlError>
          break;
 8008bce:	e08f      	b.n	8008cf0 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	da0b      	bge.n	8008bf0 <USBD_StdEPReq+0x1a0>
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3310      	adds	r3, #16
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	e00a      	b.n	8008c06 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2202      	movs	r2, #2
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fb8c 	bl	8009332 <USBD_CtlSendData>
          break;
 8008c1a:	e069      	b.n	8008cf0 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da11      	bge.n	8008c48 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	f003 020f 	and.w	r2, r3, #15
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3318      	adds	r3, #24
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d117      	bne.n	8008c6e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fb0c 	bl	800925e <USBD_CtlError>
            break;
 8008c46:	e053      	b.n	8008cf0 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	f003 020f 	and.w	r2, r3, #15
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 faf9 	bl	800925e <USBD_CtlError>
            break;
 8008c6c:	e040      	b.n	8008cf0 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da0b      	bge.n	8008c8e <USBD_StdEPReq+0x23e>
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	3310      	adds	r3, #16
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	e00a      	b.n	8008ca4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_StdEPReq+0x262>
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	2b80      	cmp	r3, #128	; 0x80
 8008cb0:	d103      	bne.n	8008cba <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e00e      	b.n	8008cd8 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fee4 	bl	8009a8c <USBD_LL_IsStallEP>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e002      	b.n	8008cd8 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fb27 	bl	8009332 <USBD_CtlSendData>
          break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fab8 	bl	800925e <USBD_CtlError>
        break;
 8008cee:	bf00      	nop
      }
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fab2 	bl	800925e <USBD_CtlError>
      break;
 8008cfa:	bf00      	nop
    }
    break;
 8008cfc:	e004      	b.n	8008d08 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 faac 	bl	800925e <USBD_CtlError>
    break;
 8008d06:	bf00      	nop
  }

  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	2b06      	cmp	r3, #6
 8008d2a:	f200 80c9 	bhi.w	8008ec0 <USBD_GetDescriptor+0x1ac>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBD_GetDescriptor+0x20>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d51 	.word	0x08008d51
 8008d38:	08008d69 	.word	0x08008d69
 8008d3c:	08008da9 	.word	0x08008da9
 8008d40:	08008ec1 	.word	0x08008ec1
 8008d44:	08008ec1 	.word	0x08008ec1
 8008d48:	08008e6d 	.word	0x08008e6d
 8008d4c:	08008e93 	.word	0x08008e93
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 010a 	add.w	r1, r7, #10
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
    break;
 8008d66:	e0b0      	b.n	8008eca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7c1b      	ldrb	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10d      	bne.n	8008d8c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	f107 020a 	add.w	r2, r7, #10
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008d8a:	e09e      	b.n	8008eca <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	f107 020a 	add.w	r2, r7, #10
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	2202      	movs	r2, #2
 8008da4:	701a      	strb	r2, [r3, #0]
    break;
 8008da6:	e090      	b.n	8008eca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d856      	bhi.n	8008e60 <USBD_GetDescriptor+0x14c>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBD_GetDescriptor+0xa4>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e19 	.word	0x08008e19
 8008dc8:	08008e31 	.word	0x08008e31
 8008dcc:	08008e49 	.word	0x08008e49
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	7c12      	ldrb	r2, [r2, #16]
 8008ddc:	f107 010a 	add.w	r1, r7, #10
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
 8008de4:	60f8      	str	r0, [r7, #12]
      break;
 8008de6:	e040      	b.n	8008e6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7c12      	ldrb	r2, [r2, #16]
 8008df4:	f107 010a 	add.w	r1, r7, #10
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
      break;
 8008dfe:	e034      	b.n	8008e6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 010a 	add.w	r1, r7, #10
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
      break;
 8008e16:	e028      	b.n	8008e6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7c12      	ldrb	r2, [r2, #16]
 8008e24:	f107 010a 	add.w	r1, r7, #10
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	60f8      	str	r0, [r7, #12]
      break;
 8008e2e:	e01c      	b.n	8008e6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 010a 	add.w	r1, r7, #10
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      break;
 8008e46:	e010      	b.n	8008e6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 010a 	add.w	r1, r7, #10
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
      break;
 8008e5e:	e004      	b.n	8008e6a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f9fb 	bl	800925e <USBD_CtlError>
      return;
 8008e68:	e04b      	b.n	8008f02 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008e6a:	e02e      	b.n	8008eca <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7c1b      	ldrb	r3, [r3, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d109      	bne.n	8008e88 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	f107 020a 	add.w	r2, r7, #10
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	60f8      	str	r0, [r7, #12]
      break;
 8008e86:	e020      	b.n	8008eca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9e7 	bl	800925e <USBD_CtlError>
      return;
 8008e90:	e037      	b.n	8008f02 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7c1b      	ldrb	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	f107 020a 	add.w	r2, r7, #10
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4798      	blx	r3
 8008eaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	701a      	strb	r2, [r3, #0]
      break;
 8008eb4:	e009      	b.n	8008eca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f9d0 	bl	800925e <USBD_CtlError>
      return;
 8008ebe:	e020      	b.n	8008f02 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9cb 	bl	800925e <USBD_CtlError>
    return;
 8008ec8:	e01b      	b.n	8008f02 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008eca:	897b      	ldrh	r3, [r7, #10]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d011      	beq.n	8008ef4 <USBD_GetDescriptor+0x1e0>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	88db      	ldrh	r3, [r3, #6]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00d      	beq.n	8008ef4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	88da      	ldrh	r2, [r3, #6]
 8008edc:	897b      	ldrh	r3, [r7, #10]
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	bf28      	it	cs
 8008ee2:	4613      	movcs	r3, r2
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008ee8:	897b      	ldrh	r3, [r7, #10]
 8008eea:	461a      	mov	r2, r3
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa1f 	bl	8009332 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	88db      	ldrh	r3, [r3, #6]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa76 	bl	80093ee <USBD_CtlSendStatus>
  }
}
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	889b      	ldrh	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d130      	bne.n	8008f7c <USBD_SetAddress+0x74>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12c      	bne.n	8008f7c <USBD_SetAddress+0x74>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	2b7f      	cmp	r3, #127	; 0x7f
 8008f28:	d828      	bhi.n	8008f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d104      	bne.n	8008f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f98b 	bl	800925e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f48:	e01d      	b.n	8008f86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fdc4 	bl	8009ae4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa46 	bl	80093ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f70:	e009      	b.n	8008f86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7a:	e004      	b.n	8008f86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f96d 	bl	800925e <USBD_CtlError>
  }
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <USBD_SetConfig+0x118>)
 8008fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa4:	4b40      	ldr	r3, [pc, #256]	; (80090a8 <USBD_SetConfig+0x118>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d904      	bls.n	8008fb6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f955 	bl	800925e <USBD_CtlError>
 8008fb4:	e075      	b.n	80090a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d002      	beq.n	8008fc6 <USBD_SetConfig+0x36>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d023      	beq.n	800900c <USBD_SetConfig+0x7c>
 8008fc4:	e062      	b.n	800908c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008fc6:	4b38      	ldr	r3, [pc, #224]	; (80090a8 <USBD_SetConfig+0x118>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d01a      	beq.n	8009004 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008fce:	4b36      	ldr	r3, [pc, #216]	; (80090a8 <USBD_SetConfig+0x118>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fe0:	4b31      	ldr	r3, [pc, #196]	; (80090a8 <USBD_SetConfig+0x118>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fa5c 	bl	80084a4 <USBD_SetClassConfig>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d104      	bne.n	8008ffc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f932 	bl	800925e <USBD_CtlError>
          return;
 8008ffa:	e052      	b.n	80090a2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f9f6 	bl	80093ee <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009002:	e04e      	b.n	80090a2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f9f2 	bl	80093ee <USBD_CtlSendStatus>
      break;
 800900a:	e04a      	b.n	80090a2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800900c:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <USBD_SetConfig+0x118>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d112      	bne.n	800903a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800901c:	4b22      	ldr	r3, [pc, #136]	; (80090a8 <USBD_SetConfig+0x118>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009026:	4b20      	ldr	r3, [pc, #128]	; (80090a8 <USBD_SetConfig+0x118>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff fa58 	bl	80084e2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9db 	bl	80093ee <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009038:	e033      	b.n	80090a2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <USBD_SetConfig+0x118>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	429a      	cmp	r2, r3
 8009046:	d01d      	beq.n	8009084 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff fa46 	bl	80084e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <USBD_SetConfig+0x118>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009060:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <USBD_SetConfig+0x118>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fa1c 	bl	80084a4 <USBD_SetClassConfig>
 800906c:	4603      	mov	r3, r0
 800906e:	2b02      	cmp	r3, #2
 8009070:	d104      	bne.n	800907c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f8f2 	bl	800925e <USBD_CtlError>
          return;
 800907a:	e012      	b.n	80090a2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f9b6 	bl	80093ee <USBD_CtlSendStatus>
      break;
 8009082:	e00e      	b.n	80090a2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f9b2 	bl	80093ee <USBD_CtlSendStatus>
      break;
 800908a:	e00a      	b.n	80090a2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f8e5 	bl	800925e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009094:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <USBD_SetConfig+0x118>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fa21 	bl	80084e2 <USBD_ClrClassConfig>
      break;
 80090a0:	bf00      	nop
    }
  }
}
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	2000035c 	.word	0x2000035c

080090ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	88db      	ldrh	r3, [r3, #6]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d004      	beq.n	80090c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f8cc 	bl	800925e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80090c6:	e022      	b.n	800910e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	dc02      	bgt.n	80090d8 <USBD_GetConfig+0x2c>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	dc03      	bgt.n	80090de <USBD_GetConfig+0x32>
 80090d6:	e015      	b.n	8009104 <USBD_GetConfig+0x58>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d00b      	beq.n	80090f4 <USBD_GetConfig+0x48>
 80090dc:	e012      	b.n	8009104 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3308      	adds	r3, #8
 80090e8:	2201      	movs	r2, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f920 	bl	8009332 <USBD_CtlSendData>
      break;
 80090f2:	e00c      	b.n	800910e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3304      	adds	r3, #4
 80090f8:	2201      	movs	r2, #1
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f918 	bl	8009332 <USBD_CtlSendData>
      break;
 8009102:	e004      	b.n	800910e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8a9 	bl	800925e <USBD_CtlError>
      break;
 800910c:	bf00      	nop
}
 800910e:	bf00      	nop
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009126:	3b01      	subs	r3, #1
 8009128:	2b02      	cmp	r3, #2
 800912a:	d81e      	bhi.n	800916a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	88db      	ldrh	r3, [r3, #6]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d004      	beq.n	800913e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f891 	bl	800925e <USBD_CtlError>
      break;
 800913c:	e01a      	b.n	8009174 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f043 0202 	orr.w	r2, r3, #2
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	330c      	adds	r3, #12
 800915e:	2202      	movs	r2, #2
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f8e5 	bl	8009332 <USBD_CtlSendData>
    break;
 8009168:	e004      	b.n	8009174 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f876 	bl	800925e <USBD_CtlError>
    break;
 8009172:	bf00      	nop
  }
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d106      	bne.n	800919c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f929 	bl	80093ee <USBD_CtlSendStatus>
  }

}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091b4:	3b01      	subs	r3, #1
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d80b      	bhi.n	80091d2 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d10c      	bne.n	80091dc <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f90f 	bl	80093ee <USBD_CtlSendStatus>
    }
    break;
 80091d0:	e004      	b.n	80091dc <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f842 	bl	800925e <USBD_CtlError>
    break;
 80091da:	e000      	b.n	80091de <USBD_ClrFeature+0x3a>
    break;
 80091dc:	bf00      	nop
  }
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	785a      	ldrb	r2, [r3, #1]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	3302      	adds	r3, #2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	b29a      	uxth	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	3303      	adds	r3, #3
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b29b      	uxth	r3, r3
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	b29b      	uxth	r3, r3
 8009214:	4413      	add	r3, r2
 8009216:	b29a      	uxth	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	3304      	adds	r3, #4
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	b29a      	uxth	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	3305      	adds	r3, #5
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	b29b      	uxth	r3, r3
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	b29b      	uxth	r3, r3
 8009230:	4413      	add	r3, r2
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	3306      	adds	r3, #6
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b29a      	uxth	r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	3307      	adds	r3, #7
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	b29b      	uxth	r3, r3
 800924c:	4413      	add	r3, r2
 800924e:	b29a      	uxth	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	80da      	strh	r2, [r3, #6]

}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr

0800925e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009268:	2180      	movs	r1, #128	; 0x80
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fbd0 	bl	8009a10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fbcc 	bl	8009a10 <USBD_LL_StallEP>
}
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d032      	beq.n	80092fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f834 	bl	8009304 <USBD_GetLen>
 800929c:	4603      	mov	r3, r0
 800929e:	3301      	adds	r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	75fa      	strb	r2, [r7, #23]
 80092b0:	461a      	mov	r2, r3
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	4413      	add	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	7812      	ldrb	r2, [r2, #0]
 80092ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	75fa      	strb	r2, [r7, #23]
 80092c2:	461a      	mov	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	2203      	movs	r2, #3
 80092ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092cc:	e012      	b.n	80092f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	60fa      	str	r2, [r7, #12]
 80092d4:	7dfa      	ldrb	r2, [r7, #23]
 80092d6:	1c51      	adds	r1, r2, #1
 80092d8:	75f9      	strb	r1, [r7, #23]
 80092da:	4611      	mov	r1, r2
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	440a      	add	r2, r1
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	75fa      	strb	r2, [r7, #23]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4413      	add	r3, r2
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e8      	bne.n	80092ce <USBD_GetString+0x4e>
    }
  }
}
 80092fc:	bf00      	nop
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009310:	e005      	b.n	800931e <USBD_GetLen+0x1a>
    {
        len++;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	3301      	adds	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3301      	adds	r3, #1
 800931c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f5      	bne.n	8009312 <USBD_GetLen+0xe>
    }

    return len;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr

08009332 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	4613      	mov	r3, r2
 800933e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2202      	movs	r2, #2
 8009344:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	2100      	movs	r1, #0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fbe1 	bl	8009b22 <USBD_LL_Transmit>

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	4613      	mov	r3, r2
 8009376:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	2100      	movs	r1, #0
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fbcf 	bl	8009b22 <USBD_LL_Transmit>

  return USBD_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	4613      	mov	r3, r2
 800939a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2203      	movs	r2, #3
 80093a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80093a4:	88fa      	ldrh	r2, [r7, #6]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80093ac:	88fa      	ldrh	r2, [r7, #6]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	2100      	movs	r1, #0
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fbd4 	bl	8009b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	4613      	mov	r3, r2
 80093d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	2100      	movs	r1, #0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fbc2 	bl	8009b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2204      	movs	r2, #4
 80093fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093fe:	2300      	movs	r3, #0
 8009400:	2200      	movs	r2, #0
 8009402:	2100      	movs	r1, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fb8c 	bl	8009b22 <USBD_LL_Transmit>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2205      	movs	r2, #5
 8009420:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009424:	2300      	movs	r3, #0
 8009426:	2200      	movs	r2, #0
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fb9c 	bl	8009b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009440:	2200      	movs	r2, #0
 8009442:	4912      	ldr	r1, [pc, #72]	; (800948c <MX_USB_DEVICE_Init+0x50>)
 8009444:	4812      	ldr	r0, [pc, #72]	; (8009490 <MX_USB_DEVICE_Init+0x54>)
 8009446:	f7fe ffd3 	bl	80083f0 <USBD_Init>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009450:	f7f7 fe6e 	bl	8001130 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009454:	490f      	ldr	r1, [pc, #60]	; (8009494 <MX_USB_DEVICE_Init+0x58>)
 8009456:	480e      	ldr	r0, [pc, #56]	; (8009490 <MX_USB_DEVICE_Init+0x54>)
 8009458:	f7fe fff5 	bl	8008446 <USBD_RegisterClass>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009462:	f7f7 fe65 	bl	8001130 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009466:	490c      	ldr	r1, [pc, #48]	; (8009498 <MX_USB_DEVICE_Init+0x5c>)
 8009468:	4809      	ldr	r0, [pc, #36]	; (8009490 <MX_USB_DEVICE_Init+0x54>)
 800946a:	f7fe ffab 	bl	80083c4 <USBD_CUSTOM_HID_RegisterInterface>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009474:	f7f7 fe5c 	bl	8001130 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009478:	4805      	ldr	r0, [pc, #20]	; (8009490 <MX_USB_DEVICE_Init+0x54>)
 800947a:	f7fe fffd 	bl	8008478 <USBD_Start>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009484:	f7f7 fe54 	bl	8001130 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009488:	bf00      	nop
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20000134 	.word	0x20000134
 8009490:	20000360 	.word	0x20000360
 8009494:	2000000c 	.word	0x2000000c
 8009498:	20000124 	.word	0x20000124

0800949c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80094aa:	b480      	push	{r7}
 80094ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80094ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	460a      	mov	r2, r1
 80094c2:	71fb      	strb	r3, [r7, #7]
 80094c4:	4613      	mov	r3, r2
 80094c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80094c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr

080094d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2212      	movs	r2, #18
 80094e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094e6:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bc80      	pop	{r7}
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20000150 	.word	0x20000150

080094f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	6039      	str	r1, [r7, #0]
 8009502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2204      	movs	r2, #4
 8009508:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000164 	.word	0x20000164

0800951c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4907      	ldr	r1, [pc, #28]	; (8009550 <USBD_FS_ProductStrDescriptor+0x34>)
 8009532:	4808      	ldr	r0, [pc, #32]	; (8009554 <USBD_FS_ProductStrDescriptor+0x38>)
 8009534:	f7ff fea4 	bl	8009280 <USBD_GetString>
 8009538:	e004      	b.n	8009544 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4904      	ldr	r1, [pc, #16]	; (8009550 <USBD_FS_ProductStrDescriptor+0x34>)
 800953e:	4805      	ldr	r0, [pc, #20]	; (8009554 <USBD_FS_ProductStrDescriptor+0x38>)
 8009540:	f7ff fe9e 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009544:	4b02      	ldr	r3, [pc, #8]	; (8009550 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200005fc 	.word	0x200005fc
 8009554:	08009cc0 	.word	0x08009cc0

08009558 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	4603      	mov	r3, r0
 8009560:	6039      	str	r1, [r7, #0]
 8009562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	4904      	ldr	r1, [pc, #16]	; (8009578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009568:	4804      	ldr	r0, [pc, #16]	; (800957c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800956a:	f7ff fe89 	bl	8009280 <USBD_GetString>
  return USBD_StrDesc;
 800956e:	4b02      	ldr	r3, [pc, #8]	; (8009578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	200005fc 	.word	0x200005fc
 800957c:	08009ce0 	.word	0x08009ce0

08009580 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	6039      	str	r1, [r7, #0]
 800958a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	221a      	movs	r2, #26
 8009590:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009592:	f000 f843 	bl	800961c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009596:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000168 	.word	0x20000168

080095a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d105      	bne.n	80095c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4907      	ldr	r1, [pc, #28]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ba:	4808      	ldr	r0, [pc, #32]	; (80095dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80095bc:	f7ff fe60 	bl	8009280 <USBD_GetString>
 80095c0:	e004      	b.n	80095cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4904      	ldr	r1, [pc, #16]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c6:	4805      	ldr	r0, [pc, #20]	; (80095dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c8:	f7ff fe5a 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095cc:	4b02      	ldr	r3, [pc, #8]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200005fc 	.word	0x200005fc
 80095dc:	08009cf4 	.word	0x08009cf4

080095e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	6039      	str	r1, [r7, #0]
 80095ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d105      	bne.n	80095fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	4907      	ldr	r1, [pc, #28]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095f6:	4808      	ldr	r0, [pc, #32]	; (8009618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f8:	f7ff fe42 	bl	8009280 <USBD_GetString>
 80095fc:	e004      	b.n	8009608 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009602:	4805      	ldr	r0, [pc, #20]	; (8009618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009604:	f7ff fe3c 	bl	8009280 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200005fc 	.word	0x200005fc
 8009618:	08009d08 	.word	0x08009d08

0800961c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <Get_SerialNum+0x44>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009628:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <Get_SerialNum+0x48>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800962e:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <Get_SerialNum+0x4c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4413      	add	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009642:	2208      	movs	r2, #8
 8009644:	4909      	ldr	r1, [pc, #36]	; (800966c <Get_SerialNum+0x50>)
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f814 	bl	8009674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800964c:	2204      	movs	r2, #4
 800964e:	4908      	ldr	r1, [pc, #32]	; (8009670 <Get_SerialNum+0x54>)
 8009650:	68b8      	ldr	r0, [r7, #8]
 8009652:	f000 f80f 	bl	8009674 <IntToUnicode>
  }
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	1ff80050 	.word	0x1ff80050
 8009664:	1ff80054 	.word	0x1ff80054
 8009668:	1ff80058 	.word	0x1ff80058
 800966c:	2000016a 	.word	0x2000016a
 8009670:	2000017a 	.word	0x2000017a

08009674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
 800968a:	e027      	b.n	80096dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	0f1b      	lsrs	r3, r3, #28
 8009690:	2b09      	cmp	r3, #9
 8009692:	d80b      	bhi.n	80096ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	0f1b      	lsrs	r3, r3, #28
 8009698:	b2da      	uxtb	r2, r3
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4619      	mov	r1, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	440b      	add	r3, r1
 80096a4:	3230      	adds	r2, #48	; 0x30
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	e00a      	b.n	80096c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0f1b      	lsrs	r3, r3, #28
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4619      	mov	r1, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	440b      	add	r3, r1
 80096bc:	3237      	adds	r2, #55	; 0x37
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	3301      	adds	r3, #1
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	3301      	adds	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
 80096dc:	7dfa      	ldrb	r2, [r7, #23]
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d3d3      	bcc.n	800968c <IntToUnicode+0x18>
  }
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr

080096f0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d106      	bne.n	8009710 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <HAL_PCDEx_SetConnectionState+0x38>)
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4a08      	ldr	r2, [pc, #32]	; (8009728 <HAL_PCDEx_SetConnectionState+0x38>)
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800970e:	e005      	b.n	800971c <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <HAL_PCDEx_SetConnectionState+0x38>)
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	4a04      	ldr	r2, [pc, #16]	; (8009728 <HAL_PCDEx_SetConnectionState+0x38>)
 8009716:	f023 0301 	bic.w	r3, r3, #1
 800971a:	6053      	str	r3, [r2, #4]
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	40010000 	.word	0x40010000

0800972c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a0d      	ldr	r2, [pc, #52]	; (8009770 <HAL_PCD_MspInit+0x44>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d113      	bne.n	8009766 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800973e:	4b0d      	ldr	r3, [pc, #52]	; (8009774 <HAL_PCD_MspInit+0x48>)
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	4a0c      	ldr	r2, [pc, #48]	; (8009774 <HAL_PCD_MspInit+0x48>)
 8009744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009748:	6253      	str	r3, [r2, #36]	; 0x24
 800974a:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <HAL_PCD_MspInit+0x48>)
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	2014      	movs	r0, #20
 800975c:	f7f8 fd0d 	bl	800217a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009760:	2014      	movs	r0, #20
 8009762:	f7f8 fd26 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40005c00 	.word	0x40005c00
 8009774:	40023800 	.word	0x40023800

08009778 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fe feba 	bl	8008508 <USBD_LL_SetupStage>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f7fe feec 	bl	80085a2 <USBD_LL_DataOutStage>
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	440b      	add	r3, r1
 80097f2:	333c      	adds	r3, #60	; 0x3c
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f7fe ff43 	bl	8008684 <USBD_LL_DataInStage>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff f84e 	bl	80088b6 <USBD_LL_SOF>
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	2b02      	cmp	r3, #2
 8009834:	d001      	beq.n	800983a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009836:	f7f7 fc7b 	bl	8001130 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009840:	7bfa      	ldrb	r2, [r7, #15]
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff f803 	bl	8008850 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe ffbc 	bl	80087ce <USBD_LL_Reset>
}
 8009856:	bf00      	nop
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fffd 	bl	800886e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <HAL_PCD_SuspendCallback+0x30>)
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	4a03      	ldr	r2, [pc, #12]	; (8009890 <HAL_PCD_SuspendCallback+0x30>)
 8009882:	f043 0306 	orr.w	r3, r3, #6
 8009886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fff7 	bl	8008896 <USBD_LL_Resume>
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098b8:	4a23      	ldr	r2, [pc, #140]	; (8009948 <USBD_LL_Init+0x98>)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a21      	ldr	r2, [pc, #132]	; (8009948 <USBD_LL_Init+0x98>)
 80098c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80098c8:	4b1f      	ldr	r3, [pc, #124]	; (8009948 <USBD_LL_Init+0x98>)
 80098ca:	4a20      	ldr	r2, [pc, #128]	; (800994c <USBD_LL_Init+0x9c>)
 80098cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098ce:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <USBD_LL_Init+0x98>)
 80098d0:	2208      	movs	r2, #8
 80098d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098d4:	4b1c      	ldr	r3, [pc, #112]	; (8009948 <USBD_LL_Init+0x98>)
 80098d6:	2202      	movs	r2, #2
 80098d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <USBD_LL_Init+0x98>)
 80098dc:	2202      	movs	r2, #2
 80098de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098e0:	4b19      	ldr	r3, [pc, #100]	; (8009948 <USBD_LL_Init+0x98>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098e6:	4b18      	ldr	r3, [pc, #96]	; (8009948 <USBD_LL_Init+0x98>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098ec:	4816      	ldr	r0, [pc, #88]	; (8009948 <USBD_LL_Init+0x98>)
 80098ee:	f7f8 ff91 	bl	8002814 <HAL_PCD_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098f8:	f7f7 fc1a 	bl	8001130 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009902:	2318      	movs	r3, #24
 8009904:	2200      	movs	r2, #0
 8009906:	2100      	movs	r1, #0
 8009908:	f7fa fb57 	bl	8003fba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009912:	2358      	movs	r3, #88	; 0x58
 8009914:	2200      	movs	r2, #0
 8009916:	2180      	movs	r1, #128	; 0x80
 8009918:	f7fa fb4f 	bl	8003fba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009922:	2398      	movs	r3, #152	; 0x98
 8009924:	2200      	movs	r2, #0
 8009926:	2181      	movs	r1, #129	; 0x81
 8009928:	f7fa fb47 	bl	8003fba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009932:	23d8      	movs	r3, #216	; 0xd8
 8009934:	2200      	movs	r2, #0
 8009936:	2101      	movs	r1, #1
 8009938:	f7fa fb3f 	bl	8003fba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200007fc 	.word	0x200007fc
 800994c:	40005c00 	.word	0x40005c00

08009950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009966:	4618      	mov	r0, r3
 8009968:	f7f9 f832 	bl	80029d0 <HAL_PCD_Start>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f932 	bl	8009bdc <USBD_Get_USB_Status>
 8009978:	4603      	mov	r3, r0
 800997a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997c:	7bbb      	ldrb	r3, [r7, #14]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	461a      	mov	r2, r3
 8009994:	4603      	mov	r3, r0
 8009996:	70fb      	strb	r3, [r7, #3]
 8009998:	460b      	mov	r3, r1
 800999a:	70bb      	strb	r3, [r7, #2]
 800999c:	4613      	mov	r3, r2
 800999e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80099ae:	78bb      	ldrb	r3, [r7, #2]
 80099b0:	883a      	ldrh	r2, [r7, #0]
 80099b2:	78f9      	ldrb	r1, [r7, #3]
 80099b4:	f7f9 f94e 	bl	8002c54 <HAL_PCD_EP_Open>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f90c 	bl	8009bdc <USBD_Get_USB_Status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7f9 f995 	bl	8002d20 <HAL_PCD_EP_Close>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f8ed 	bl	8009bdc <USBD_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7f9 fa3e 	bl	8002eb0 <HAL_PCD_EP_SetStall>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f8ce 	bl	8009bdc <USBD_Get_USB_Status>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7f9 fa71 	bl	8002f54 <HAL_PCD_EP_ClrStall>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f8af 	bl	8009bdc <USBD_Get_USB_Status>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	da0c      	bge.n	8009ac2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	440b      	add	r3, r1
 8009abc:	3302      	adds	r3, #2
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	e00b      	b.n	8009ada <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ac8:	68f9      	ldr	r1, [r7, #12]
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	440b      	add	r3, r1
 8009ad4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ad8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr

08009ae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009afe:	78fa      	ldrb	r2, [r7, #3]
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7f9 f881 	bl	8002c0a <HAL_PCD_SetAddress>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f864 	bl	8009bdc <USBD_Get_USB_Status>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	460b      	mov	r3, r1
 8009b30:	72fb      	strb	r3, [r7, #11]
 8009b32:	4613      	mov	r3, r2
 8009b34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009b44:	893b      	ldrh	r3, [r7, #8]
 8009b46:	7af9      	ldrb	r1, [r7, #11]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	f7f9 f96e 	bl	8002e2a <HAL_PCD_EP_Transmit>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 f841 	bl	8009bdc <USBD_Get_USB_Status>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	461a      	mov	r2, r3
 8009b74:	460b      	mov	r3, r1
 8009b76:	72fb      	strb	r3, [r7, #11]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009b8a:	893b      	ldrh	r3, [r7, #8]
 8009b8c:	7af9      	ldrb	r1, [r7, #11]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	f7f9 f90e 	bl	8002db0 <HAL_PCD_EP_Receive>
 8009b94:	4603      	mov	r3, r0
 8009b96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f81e 	bl	8009bdc <USBD_Get_USB_Status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009bb8:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <USBD_static_malloc+0x14>)
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	20000ae8 	.word	0x20000ae8

08009bc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr
	...

08009bdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d817      	bhi.n	8009c20 <USBD_Get_USB_Status+0x44>
 8009bf0:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <USBD_Get_USB_Status+0x1c>)
 8009bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf6:	bf00      	nop
 8009bf8:	08009c09 	.word	0x08009c09
 8009bfc:	08009c0f 	.word	0x08009c0f
 8009c00:	08009c15 	.word	0x08009c15
 8009c04:	08009c1b 	.word	0x08009c1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0c:	e00b      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	73fb      	strb	r3, [r7, #15]
    break;
 8009c12:	e008      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
    break;
 8009c18:	e005      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1e:	e002      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c20:	2302      	movs	r3, #2
 8009c22:	73fb      	strb	r3, [r7, #15]
    break;
 8009c24:	bf00      	nop
  }
  return usb_status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	2600      	movs	r6, #0
 8009c38:	4d0c      	ldr	r5, [pc, #48]	; (8009c6c <__libc_init_array+0x38>)
 8009c3a:	4c0d      	ldr	r4, [pc, #52]	; (8009c70 <__libc_init_array+0x3c>)
 8009c3c:	1b64      	subs	r4, r4, r5
 8009c3e:	10a4      	asrs	r4, r4, #2
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	d109      	bne.n	8009c58 <__libc_init_array+0x24>
 8009c44:	f000 f830 	bl	8009ca8 <_init>
 8009c48:	2600      	movs	r6, #0
 8009c4a:	4d0a      	ldr	r5, [pc, #40]	; (8009c74 <__libc_init_array+0x40>)
 8009c4c:	4c0a      	ldr	r4, [pc, #40]	; (8009c78 <__libc_init_array+0x44>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	42a6      	cmp	r6, r4
 8009c54:	d105      	bne.n	8009c62 <__libc_init_array+0x2e>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5c:	4798      	blx	r3
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7ee      	b.n	8009c40 <__libc_init_array+0xc>
 8009c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c66:	4798      	blx	r3
 8009c68:	3601      	adds	r6, #1
 8009c6a:	e7f2      	b.n	8009c52 <__libc_init_array+0x1e>
 8009c6c:	08009d44 	.word	0x08009d44
 8009c70:	08009d44 	.word	0x08009d44
 8009c74:	08009d44 	.word	0x08009d44
 8009c78:	08009d48 	.word	0x08009d48

08009c7c <memcpy>:
 8009c7c:	440a      	add	r2, r1
 8009c7e:	4291      	cmp	r1, r2
 8009c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c84:	d100      	bne.n	8009c88 <memcpy+0xc>
 8009c86:	4770      	bx	lr
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8e:	4291      	cmp	r1, r2
 8009c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c94:	d1f9      	bne.n	8009c8a <memcpy+0xe>
 8009c96:	bd10      	pop	{r4, pc}

08009c98 <memset>:
 8009c98:	4603      	mov	r3, r0
 8009c9a:	4402      	add	r2, r0
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d100      	bne.n	8009ca2 <memset+0xa>
 8009ca0:	4770      	bx	lr
 8009ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca6:	e7f9      	b.n	8009c9c <memset+0x4>

08009ca8 <_init>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr

08009cb4 <_fini>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	bf00      	nop
 8009cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cba:	bc08      	pop	{r3}
 8009cbc:	469e      	mov	lr, r3
 8009cbe:	4770      	bx	lr
