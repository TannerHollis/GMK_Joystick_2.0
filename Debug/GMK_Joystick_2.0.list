
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1c4  0800a1c4  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1cc  0800a1cc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d0  0800a1d0  0001a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a358  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a358  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132e1  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  0003348e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000368f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca6  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015285  00000000  00000000  00050476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee3  00000000  00000000  000656fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004380  00000000  00000000  000ec630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a130 	.word	0x0800a130

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a130 	.word	0x0800a130

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe2e 	bl	800171e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f917 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa77 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa57 	bl	8000f7c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f008 fef9 	bl	80098c4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9c5 	bl	8000e60 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f95d 	bl	8000d94 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4879      	ldr	r0, [pc, #484]	; (8000cc0 <main+0x208>)
 8000adc:	f004 f9ee 	bl	8004ebc <HAL_TIM_Base_Start>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000ae0:	4c78      	ldr	r4, [pc, #480]	; (8000cc4 <main+0x20c>)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4a78      	ldr	r2, [pc, #480]	; (8000cc8 <main+0x210>)
 8000ae6:	4979      	ldr	r1, [pc, #484]	; (8000ccc <main+0x214>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc6b 	bl	80013c4 <Joystick_Init>
 8000aee:	4625      	mov	r5, r4
 8000af0:	463c      	mov	r4, r7
 8000af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b0c:	e009      	b.n	8000b22 <main+0x6a>
  	  event_state[i] = EVENT_WAIT;
 8000b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b12:	4a6f      	ldr	r2, [pc, #444]	; (8000cd0 <main+0x218>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	daf1      	bge.n	8000b0e <main+0x56>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <main+0x21c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <main+0x218>)
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	f200 8094 	bhi.w	8000c62 <main+0x1aa>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <main+0x88>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b65 	.word	0x08000b65
 8000b4c:	08000b6d 	.word	0x08000b6d
 8000b50:	08000c5b 	.word	0x08000c5b
		case EVENT_WAIT:
			asm("NOP");
 8000b54:	bf00      	nop
			break;
 8000b56:	e084      	b.n	8000c62 <main+0x1aa>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b58:	2202      	movs	r2, #2
 8000b5a:	495c      	ldr	r1, [pc, #368]	; (8000ccc <main+0x214>)
 8000b5c:	485e      	ldr	r0, [pc, #376]	; (8000cd8 <main+0x220>)
 8000b5e:	f000 ff93 	bl	8001a88 <HAL_ADC_Start_DMA>
			break;
 8000b62:	e07e      	b.n	8000c62 <main+0x1aa>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f000 fa49 	bl	8000ffc <write_next_event_state>
			break;
 8000b6a:	e07a      	b.n	8000c62 <main+0x1aa>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b6c:	4855      	ldr	r0, [pc, #340]	; (8000cc4 <main+0x20c>)
 8000b6e:	f000 fc75 	bl	800145c <Joystick_Update>
			uint8_t invert_x = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b7e:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <main+0x224>)
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b82:	4b56      	ldr	r3, [pc, #344]	; (8000cdc <main+0x224>)
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b86:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <main+0xe0>
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <main+0x20c>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	e001      	b.n	8000b9c <main+0xe4>
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <main+0x20c>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000b9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <main+0xf8>
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <main+0x20c>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	e001      	b.n	8000bb4 <main+0xfc>
 8000bb0:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <main+0x20c>)
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <main+0x228>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bbc:	4b48      	ldr	r3, [pc, #288]	; (8000ce0 <main+0x228>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bc4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bc6:	f7ff fda3 	bl	8000710 <__aeabi_fcmpgt>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <main+0x12c>
 8000bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bda:	f7ff fd7b 	bl	80006d4 <__aeabi_fcmplt>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <main+0x154>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000be4:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <main+0x228>)
 8000be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bea:	b29c      	uxth	r4, r3
 8000bec:	493d      	ldr	r1, [pc, #244]	; (8000ce4 <main+0x22c>)
 8000bee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bf0:	f7ff fbd2 	bl	8000398 <__aeabi_fmul>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fd94 	bl	8000724 <__aeabi_f2iz>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4423      	add	r3, r4
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <main+0x228>)
 8000c0a:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c10:	f7ff fd7e 	bl	8000710 <__aeabi_fcmpgt>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10a      	bne.n	8000c30 <main+0x178>
 8000c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c20:	4619      	mov	r1, r3
 8000c22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c24:	f7ff fd56 	bl	80006d4 <__aeabi_fcmplt>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <main+0x178>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c2e:	e018      	b.n	8000c62 <main+0x1aa>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <main+0x228>)
 8000c32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c36:	b29c      	uxth	r4, r3
 8000c38:	492b      	ldr	r1, [pc, #172]	; (8000ce8 <main+0x230>)
 8000c3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c3c:	f7ff fbac 	bl	8000398 <__aeabi_fmul>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fd6e 	bl	8000724 <__aeabi_f2iz>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4423      	add	r3, r4
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <main+0x228>)
 8000c56:	809a      	strh	r2, [r3, #4]
			break;
 8000c58:	e003      	b.n	8000c62 <main+0x1aa>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c5a:	4821      	ldr	r0, [pc, #132]	; (8000ce0 <main+0x228>)
 8000c5c:	f000 f9fc 	bl	8001058 <Send_HID_Data>
			break;
 8000c60:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <main+0x21c>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <main+0x234>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d00d      	beq.n	8000c8a <main+0x1d2>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <main+0x21c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	425a      	negs	r2, r3
 8000c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c7e:	bf58      	it	pl
 8000c80:	4253      	negpl	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <main+0x21c>)
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <main+0x1d8>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f9b6 	bl	8000ffc <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <main+0x234>)
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <main+0x21c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d306      	bcc.n	8000caa <main+0x1f2>
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <main+0x234>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <main+0x21c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	e007      	b.n	8000cba <main+0x202>
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <main+0x234>)
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <main+0x21c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <main+0x238>)
 8000cbc:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cbe:	e734      	b.n	8000b2a <main+0x72>
 8000cc0:	20000238 	.word	0x20000238
 8000cc4:	20000300 	.word	0x20000300
 8000cc8:	200002fe 	.word	0x200002fe
 8000ccc:	200002fc 	.word	0x200002fc
 8000cd0:	20000278 	.word	0x20000278
 8000cd4:	200002f8 	.word	0x200002f8
 8000cd8:	200001a0 	.word	0x200001a0
 8000cdc:	3d4ccccd 	.word	0x3d4ccccd
 8000ce0:	2000033c 	.word	0x2000033c
 8000ce4:	c6fffe00 	.word	0xc6fffe00
 8000ce8:	46fffe00 	.word	0x46fffe00
 8000cec:	200002f9 	.word	0x200002f9
 8000cf0:	200002fa 	.word	0x200002fa

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f009 fa0c 	bl	800a120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d24:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d26:	2303      	movs	r3, #3
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2310      	movs	r3, #16
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 faaf 	bl	80042b4 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d5c:	f000 f9ea 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2101      	movs	r1, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fdcb 	bl	8004914 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d84:	f000 f9d6 	bl	8001134 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3748      	adds	r7, #72	; 0x48
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <MX_ADC_Init+0xc8>)
 8000da8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e0a:	f000 fcf7 	bl	80017fc <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e14:	f000 f98e 	bl	8001134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e2a:	f000 ffd7 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e34:	f000 f97e 	bl	8001134 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e42:	f000 ffcb 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000e4c:	f000 f972 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001a0 	.word	0x200001a0
 8000e5c:	40012400 	.word	0x40012400

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ea0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000eb4:	f003 ffc2 	bl	8004e3c <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ebe:	f000 f939 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ed0:	f004 f9ba 	bl	8005248 <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eda:	f000 f92b 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ede:	4826      	ldr	r0, [pc, #152]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ee0:	f004 f836 	bl	8004f50 <HAL_TIM_OC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 f923 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000efe:	f004 fc83 	bl	8005808 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f08:	f000 f914 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f10:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f26:	f004 f937 	bl	8005198 <HAL_TIM_OC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f30:	f000 f900 	bl	8001134 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0208 	orr.w	r2, r2, #8
 8000f42:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f44:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f52:	f004 f921 	bl	8005198 <HAL_TIM_OC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f5c:	f000 f8ea 	bl	8001134 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f6e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000238 	.word	0x20000238

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f001 fa25 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f001 fa3e 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40023800 	.word	0x40023800

08000ffc <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <write_next_event_state+0x3c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	425a      	negs	r2, r3
 800100e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001016:	bf58      	it	pl
 8001018:	4253      	negpl	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <write_next_event_state+0x3c>)
 800101e:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <write_next_event_state+0x3c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <write_next_event_state+0x40>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	5453      	strb	r3, [r2, r1]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200002f9 	.word	0x200002f9
 800103c:	20000278 	.word	0x20000278

08001040 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001048:	2003      	movs	r0, #3
 800104a:	f7ff ffd7 	bl	8000ffc <write_next_event_state>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <Send_HID_Data>:

void Send_HID_Data(Controller_HandleTypeDef* controller){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 800105e:	afa6      	add	r7, sp, #664	; 0x298
 8001060:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <Send_HID_Data+0xd4>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <Send_HID_Data+0xd4>)
 8001070:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <Send_HID_Data+0xd4>)
 800107e:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <Send_HID_Data+0xd4>)
 800108a:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001092:	121b      	asrs	r3, r3, #8
 8001094:	b21b      	sxth	r3, r3
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <Send_HID_Data+0xd4>)
 800109a:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <Send_HID_Data+0xd4>)
 80010a6:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ae:	121b      	asrs	r3, r3, #8
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <Send_HID_Data+0xd4>)
 80010b6:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <Send_HID_Data+0xd4>)
 80010c2:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ca:	121b      	asrs	r3, r3, #8
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <Send_HID_Data+0xd4>)
 80010d2:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <Send_HID_Data+0xd4>)
 80010de:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010e6:	121b      	asrs	r3, r3, #8
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <Send_HID_Data+0xd4>)
 80010ee:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7a9a      	ldrb	r2, [r3, #10]
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <Send_HID_Data+0xd4>)
 80010f6:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7ada      	ldrb	r2, [r3, #11]
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <Send_HID_Data+0xd4>)
 80010fe:	731a      	strb	r2, [r3, #12]
	USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <Send_HID_Data+0xd8>)
 8001102:	230d      	movs	r3, #13
 8001104:	93a4      	str	r3, [sp, #656]	; 0x290
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <Send_HID_Data+0xd4>)
 8001108:	93a3      	str	r3, [sp, #652]	; 0x28c
 800110a:	4668      	mov	r0, sp
 800110c:	f104 0310 	add.w	r3, r4, #16
 8001110:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8001114:	4619      	mov	r1, r3
 8001116:	f008 fff5 	bl	800a104 <memcpy>
 800111a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800111e:	f007 fadd 	bl	80086dc <USBD_CUSTOM_HID_SendReport>
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	20000348 	.word	0x20000348
 8001130:	20000360 	.word	0x20000360

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_MspInit+0x58>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_MspInit+0x58>)
 800114c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_MspInit+0x58>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_MspInit+0x58>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_MspInit+0x58>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_MspInit+0x58>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_MspInit+0x58>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_MspInit+0x58>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6253      	str	r3, [r2, #36]	; 0x24
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_MspInit+0x58>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <HAL_ADC_MspInit+0xd4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d154      	bne.n	8001268 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a2c      	ldr	r2, [pc, #176]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_ADC_MspInit+0xd8>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ee:	2303      	movs	r3, #3
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <HAL_ADC_MspInit+0xdc>)
 8001202:	f001 fac1 	bl	8002788 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_ADC_MspInit+0xe4>)
 800120a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_ADC_MspInit+0xe0>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_ADC_MspInit+0xe0>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001224:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <HAL_ADC_MspInit+0xe0>)
 800123e:	f001 f90d 	bl	800245c <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001248:	f7ff ff74 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_ADC_MspInit+0xe0>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2012      	movs	r0, #18
 800125e:	f001 f8c6 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001262:	2012      	movs	r0, #18
 8001264:	f001 f8df 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40012400 	.word	0x40012400
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	200001f4 	.word	0x200001f4
 8001280:	40026008 	.word	0x40026008

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001294:	d113      	bne.n	80012be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6253      	str	r3, [r2, #36]	; 0x24
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	201c      	movs	r0, #28
 80012b4:	f001 f89b 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b8:	201c      	movs	r0, #28
 80012ba:	f001 f8b4 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 fa57 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Channel1_IRQHandler+0x10>)
 8001322:	f001 f953 	bl	80025cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001f4 	.word	0x200001f4

08001330 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <ADC1_IRQHandler+0x10>)
 8001336:	f000 fc35 	bl	8001ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001a0 	.word	0x200001a0

08001344 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <USB_LP_IRQHandler+0x10>)
 800134a:	f001 fca1 	bl	8002c90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200007fc 	.word	0x200007fc

08001358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM2_IRQHandler+0x10>)
 800135e:	f003 fe3f 	bl	8004fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000238 	.word	0x20000238

0800136c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffe5 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f008 fe8b 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fb87 	bl	8000ab8 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013b4:	0800a1d4 	.word	0x0800a1d4
  ldr r2, =_sbss
 80013b8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013bc:	20000b10 	.word	0x20000b10

080013c0 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <COMP_IRQHandler>
	...

080013c4 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 80013c4:	b4b0      	push	{r4, r5, r7}
 80013c6:	b095      	sub	sp, #84	; 0x54
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 80013da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013de:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <Joystick_Init+0x90>)
 80013e6:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <Joystick_Init+0x94>)
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 80013fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001400:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <Joystick_Init+0x90>)
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <Joystick_Init+0x94>)
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001426:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	461d      	mov	r5, r3
 8001430:	f107 0414 	add.w	r4, r7, #20
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001440:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001444:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	3754      	adds	r7, #84	; 0x54
 800144c:	46bd      	mov	sp, r7
 800144e:	bcb0      	pop	{r4, r5, r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	3ccccccd 	.word	0x3ccccccd
 8001458:	3f8ccccd 	.word	0x3f8ccccd

0800145c <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800147a:	2b00      	cmp	r3, #0
 800147c:	d062      	beq.n	8001544 <Joystick_Update+0xe8>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001482:	2b00      	cmp	r3, #0
 8001484:	d05e      	beq.n	8001544 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	891b      	ldrh	r3, [r3, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ff2c 	bl	80002e8 <__aeabi_ui2f>
 8001490:	4604      	mov	r4, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800149c:	f7fe fe72 	bl	8000184 <__aeabi_fsub>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7fe ff77 	bl	8000398 <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461c      	mov	r4, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ff19 	bl	80002e8 <__aeabi_ui2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7fe ff6a 	bl	8000398 <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7fe fe5d 	bl	8000188 <__addsf3>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f94d 	bl	8000770 <__aeabi_f2uiz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8c1b      	ldrh	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff00 	bl	80002e8 <__aeabi_ui2f>
 80014e8:	4604      	mov	r4, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014f4:	f7fe fe46 	bl	8000184 <__aeabi_fsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7fe ff4b 	bl	8000398 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	461c      	mov	r4, r3
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe feed 	bl	80002e8 <__aeabi_ui2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f7fe ff3e 	bl	8000398 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	4619      	mov	r1, r3
 8001520:	4620      	mov	r0, r4
 8001522:	f7fe fe31 	bl	8000188 <__addsf3>
 8001526:	4603      	mov	r3, r0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f921 	bl	8000770 <__aeabi_f2uiz>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	865a      	strh	r2, [r3, #50]	; 0x32
 8001542:	e008      	b.n	8001556 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	8bfa      	ldrh	r2, [r7, #30]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8c1b      	ldrh	r3, [r3, #32]
 8001566:	8bba      	ldrh	r2, [r7, #28]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	8bfa      	ldrh	r2, [r7, #30]
 8001574:	4293      	cmp	r3, r2
 8001576:	bf28      	it	cs
 8001578:	4613      	movcs	r3, r2
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	88db      	ldrh	r3, [r3, #6]
 8001584:	8bfa      	ldrh	r2, [r7, #30]
 8001586:	4293      	cmp	r3, r2
 8001588:	bf38      	it	cc
 800158a:	4613      	movcc	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8b9b      	ldrh	r3, [r3, #28]
 8001596:	8bba      	ldrh	r2, [r7, #28]
 8001598:	4293      	cmp	r3, r2
 800159a:	bf28      	it	cs
 800159c:	4613      	movcs	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8bdb      	ldrh	r3, [r3, #30]
 80015a8:	8bba      	ldrh	r2, [r7, #28]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	bf38      	it	cc
 80015ae:	4613      	movcc	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 80015b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd15      	ble.n	80015ea <Joystick_Update+0x18e>
 80015be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe94 	bl	80002f0 <__aeabi_i2f>
 80015c8:	4604      	mov	r4, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	88db      	ldrh	r3, [r3, #6]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	891b      	ldrh	r3, [r3, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fe8a 	bl	80002f0 <__aeabi_i2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7fe ff8d 	bl	8000500 <__aeabi_fdiv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	e016      	b.n	8001618 <Joystick_Update+0x1bc>
 80015ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe7e 	bl	80002f0 <__aeabi_i2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	461a      	mov	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	891b      	ldrh	r3, [r3, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fe72 	bl	80002f0 <__aeabi_i2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7fe ff75 	bl	8000500 <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 800161a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd15      	ble.n	800164e <Joystick_Update+0x1f2>
 8001622:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe62 	bl	80002f0 <__aeabi_i2f>
 800162c:	4604      	mov	r4, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8bdb      	ldrh	r3, [r3, #30]
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8c1b      	ldrh	r3, [r3, #32]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fe58 	bl	80002f0 <__aeabi_i2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	4620      	mov	r0, r4
 8001646:	f7fe ff5b 	bl	8000500 <__aeabi_fdiv>
 800164a:	4603      	mov	r3, r0
 800164c:	e016      	b.n	800167c <Joystick_Update+0x220>
 800164e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe4c 	bl	80002f0 <__aeabi_i2f>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8b9b      	ldrh	r3, [r3, #28]
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8c1b      	ldrh	r3, [r3, #32]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fe40 	bl	80002f0 <__aeabi_i2f>
 8001670:	4603      	mov	r3, r0
 8001672:	4619      	mov	r1, r3
 8001674:	4620      	mov	r0, r4
 8001676:	f7fe ff43 	bl	8000500 <__aeabi_fdiv>
 800167a:	4603      	mov	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff f844 	bl	8000710 <__aeabi_fcmpgt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <Joystick_Update+0x236>
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	e002      	b.n	8001698 <Joystick_Update+0x23c>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001698:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	6938      	ldr	r0, [r7, #16]
 80016a0:	f7ff f836 	bl	8000710 <__aeabi_fcmpgt>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <Joystick_Update+0x252>
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	e002      	b.n	80016b4 <Joystick_Update+0x258>
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016b4:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4619      	mov	r1, r3
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff f827 	bl	8000710 <__aeabi_fcmpgt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00a      	beq.n	80016de <Joystick_Update+0x282>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4619      	mov	r1, r3
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff f800 	bl	80006d4 <__aeabi_fcmplt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <Joystick_Update+0x282>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	e001      	b.n	80016e2 <Joystick_Update+0x286>
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f7ff f80f 	bl	8000710 <__aeabi_fcmpgt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <Joystick_Update+0x2b2>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	4619      	mov	r1, r3
 80016fe:	68b8      	ldr	r0, [r7, #8]
 8001700:	f7fe ffe8 	bl	80006d4 <__aeabi_fcmplt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <Joystick_Update+0x2b2>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	e001      	b.n	8001712 <Joystick_Update+0x2b6>
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}

0800171e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 fe55 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	200f      	movs	r0, #15
 8001730:	f000 f80e 	bl	8001750 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fcfe 	bl	8001140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_InitTick+0x68>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d022      	beq.n	80017aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_InitTick+0x6c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_InitTick+0x68>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fe62 	bl	8002442 <HAL_SYSTICK_Config>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d809      	bhi.n	800179e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178a:	2200      	movs	r2, #0
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	f04f 30ff 	mov.w	r0, #4294967295
 8001792:	f000 fe2c 	bl	80023ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_InitTick+0x70>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e007      	b.n	80017ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e004      	b.n	80017ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x1c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_IncTick+0x1c>)
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000358 	.word	0x20000358
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <HAL_GetTick+0x10>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000358 	.word	0x20000358

080017fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e127      	b.n	8001a6c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_ADC_Init+0x278>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a8d      	ldr	r2, [pc, #564]	; (8001a74 <HAL_ADC_Init+0x278>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_ADC_Init+0x278>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fca3 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80ff 	bne.w	8001a62 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800186c:	f023 0302 	bic.w	r3, r3, #2
 8001870:	f043 0202 	orr.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001878:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <HAL_ADC_Init+0x27c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	497c      	ldr	r1, [pc, #496]	; (8001a78 <HAL_ADC_Init+0x27c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001892:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189a:	4619      	mov	r1, r3
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80018b6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	2302      	movs	r3, #2
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80018de:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e2:	4313      	orrs	r3, r2
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80018f6:	4313      	orrs	r3, r2
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	4313      	orrs	r3, r2
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d04f      	beq.n	80019ac <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	4313      	orrs	r3, r2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800191e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6912      	ldr	r2, [r2, #16]
 8001924:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001928:	d003      	beq.n	8001932 <HAL_ADC_Init+0x136>
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6912      	ldr	r2, [r2, #16]
 800192e:	2a01      	cmp	r2, #1
 8001930:	d102      	bne.n	8001938 <HAL_ADC_Init+0x13c>
 8001932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001936:	e000      	b.n	800193a <HAL_ADC_Init+0x13e>
 8001938:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800193a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800193c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800193e:	4313      	orrs	r3, r2
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d125      	bne.n	8001998 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d114      	bne.n	8001980 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	3b01      	subs	r3, #1
 800195c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001960:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	fa92 f2a2 	rbit	r2, r2
 8001968:	617a      	str	r2, [r7, #20]
  return result;
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	4093      	lsls	r3, r2
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197a:	4313      	orrs	r3, r2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
 800197e:	e00b      	b.n	8001998 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_ADC_Init+0x280>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_ADC_Init+0x284>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019bc:	430b      	orrs	r3, r1
 80019be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c8:	d003      	beq.n	80019d2 <HAL_ADC_Init+0x1d6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d119      	bne.n	8001a06 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80019e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	fa92 f2a2 	rbit	r2, r2
 80019ee:	60fa      	str	r2, [r7, #12]
  return result;
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	fa03 f202 	lsl.w	r2, r3, r2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
 8001a04:	e007      	b.n	8001a16 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_ADC_Init+0x288>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10b      	bne.n	8001a3e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a3c:	e014      	b.n	8001a68 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f023 0312 	bic.w	r3, r3, #18
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3738      	adds	r7, #56	; 0x38
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40012700 	.word	0x40012700
 8001a7c:	fcfc16ff 	.word	0xfcfc16ff
 8001a80:	c0fff18d 	.word	0xc0fff18d
 8001a84:	bf80fffe 	.word	0xbf80fffe

08001a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0x1e>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e074      	b.n	8001b90 <HAL_ADC_Start_DMA+0x108>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 fae4 	bl	800207c <ADC_Enable>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d167      	bne.n	8001b8e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afc:	d106      	bne.n	8001b0c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	f023 0206 	bic.w	r2, r3, #6
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0a:	e002      	b.n	8001b12 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_ADC_Start_DMA+0x110>)
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_ADC_Start_DMA+0x114>)
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_ADC_Start_DMA+0x118>)
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3358      	adds	r3, #88	; 0x58
 8001b66:	4619      	mov	r1, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f000 fcce 	bl	800250c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b8c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	08002135 	.word	0x08002135
 8001b9c:	080021dd 	.word	0x080021dd
 8001ba0:	080021f9 	.word	0x080021f9

08001ba4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d14e      	bne.n	8001c58 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d147      	bne.n	8001c58 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d12c      	bne.n	8001c48 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d127      	bne.n	8001c48 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d119      	bne.n	8001c48 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0220 	bic.w	r2, r2, #32
 8001c22:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff f9f9 	bl	8001040 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0212 	mvn.w	r2, #18
 8001c56:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	d15c      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d155      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d13a      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12c      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d125      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11e      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d119      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa8b 	bl	800222c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 020c 	mvn.w	r2, #12
 8001d1e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d114      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10d      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f834 	bl	8001db6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0201 	mvn.w	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d66:	d119      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d112      	bne.n	8001d9c <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7a:	f043 0202 	orr.w	r2, r3, #2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0220 	mvn.w	r2, #32
 8001d8a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f81b 	bl	8001dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0220 	mvn.w	r2, #32
 8001d9a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x20>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e134      	b.n	8002066 <HAL_ADC_ConfigChannel+0x28a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	d81c      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b05      	subs	r3, #5
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4019      	ands	r1, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b05      	subs	r3, #5
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
 8001e44:	e07e      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d81c      	bhi.n	8001e88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	; 0x23
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4019      	ands	r1, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b23      	subs	r3, #35	; 0x23
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e86:	e05d      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d81c      	bhi.n	8001eca <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	; 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec8:	e03c      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b18      	cmp	r3, #24
 8001ed0:	d81c      	bhi.n	8001f0c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b5f      	subs	r3, #95	; 0x5f
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4019      	ands	r1, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b5f      	subs	r3, #95	; 0x5f
 8001efe:	fa00 f203 	lsl.w	r2, r0, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0a:	e01b      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b7d      	subs	r3, #125	; 0x7d
 8001f1e:	221f      	movs	r2, #31
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b7d      	subs	r3, #125	; 0x7d
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b09      	cmp	r3, #9
 8001f4a:	d81a      	bhi.n	8001f82 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6959      	ldr	r1, [r3, #20]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4019      	ands	r1, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6898      	ldr	r0, [r3, #8]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	fa00 f203 	lsl.w	r2, r0, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	e042      	b.n	8002008 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b13      	cmp	r3, #19
 8001f88:	d81c      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4019      	ands	r1, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6898      	ldr	r0, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b1e      	subs	r3, #30
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	e021      	b.n	8002008 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b1a      	cmp	r3, #26
 8001fca:	d81c      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68d9      	ldr	r1, [r3, #12]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b3c      	subs	r3, #60	; 0x3c
 8001fde:	2207      	movs	r2, #7
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6898      	ldr	r0, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b3c      	subs	r3, #60	; 0x3c
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	e000      	b.n	8002008 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002006:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b10      	cmp	r3, #16
 800200e:	d003      	beq.n	8002018 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002014:	2b11      	cmp	r3, #17
 8002016:	d121      	bne.n	800205c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_ADC_ConfigChannel+0x294>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d11b      	bne.n	800205c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_ADC_ConfigChannel+0x294>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_ADC_ConfigChannel+0x294>)
 800202a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800202e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b10      	cmp	r3, #16
 8002036:	d111      	bne.n	800205c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_ADC_ConfigChannel+0x298>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_ADC_ConfigChannel+0x29c>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9a      	lsrs	r2, r3, #18
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800204e:	e002      	b.n	8002056 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3b01      	subs	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f9      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	40012700 	.word	0x40012700
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83

0800207c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d043      	beq.n	8002122 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <ADC_Enable+0xb0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a20      	ldr	r2, [pc, #128]	; (8002130 <ADC_Enable+0xb4>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9a      	lsrs	r2, r3, #18
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020be:	e002      	b.n	80020c6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80020cc:	f7ff fb8c 	bl	80017e8 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020d2:	e01f      	b.n	8002114 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80020d4:	f7ff fb88 	bl	80017e8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d918      	bls.n	8002114 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d011      	beq.n	8002114 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d1d8      	bne.n	80020d4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000000 	.word	0x20000000
 8002130:	431bde83 	.word	0x431bde83

08002134 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d13d      	bne.n	80021ca <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d12c      	bne.n	80021c2 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d127      	bne.n	80021c2 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0220 	bic.w	r2, r2, #32
 800219c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7fe ff3c 	bl	8001040 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021c8:	e004      	b.n	80021d4 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fdda 	bl	8001da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	f043 0204 	orr.w	r2, r3, #4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff fdd2 	bl	8001dc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <__NVIC_EnableIRQ+0x34>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff90 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff2d 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff42 	bl	8002288 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff90 	bl	8002330 <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5f 	bl	80022dc <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff35 	bl	80022a4 <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e043      	b.n	80024f6 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_DMA_Init+0xa4>)
 8002476:	4413      	add	r3, r2
 8002478:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_DMA_Init+0xa8>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <HAL_DMA_Init+0xac>)
 800248a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	bffd9ff8 	.word	0xbffd9ff8
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	40026000 	.word	0x40026000

0800250c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_DMA_Start_IT+0x20>
 8002528:	2302      	movs	r3, #2
 800252a:	e04b      	b.n	80025c4 <HAL_DMA_Start_IT+0xb8>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d13a      	bne.n	80025b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f8e0 	bl	800272a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 020e 	orr.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e00f      	b.n	80025a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 020a 	orr.w	r2, r2, #10
 80025a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e005      	b.n	80025c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f003 031c 	and.w	r3, r3, #28
 80025ec:	2204      	movs	r2, #4
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d026      	beq.n	8002646 <HAL_DMA_IRQHandler+0x7a>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d021      	beq.n	8002646 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 021c 	and.w	r2, r3, #28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	2104      	movs	r1, #4
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d071      	beq.n	8002720 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002644:	e06c      	b.n	8002720 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	2202      	movs	r2, #2
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d02e      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xec>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d029      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 020a 	bic.w	r2, r2, #10
 8002680:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 021c 	and.w	r2, r3, #28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2102      	movs	r1, #2
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d038      	beq.n	8002720 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b6:	e033      	b.n	8002720 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 031c 	and.w	r3, r3, #28
 80026c0:	2208      	movs	r2, #8
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02a      	beq.n	8002722 <HAL_DMA_IRQHandler+0x156>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d025      	beq.n	8002722 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 020e 	bic.w	r2, r2, #14
 80026e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 021c 	and.w	r2, r3, #28
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002720:	bf00      	nop
 8002722:	bf00      	nop
}
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 021c 	and.w	r2, r3, #28
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d108      	bne.n	800276e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800276c:	e007      	b.n	800277e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	60da      	str	r2, [r3, #12]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800279e:	e154      	b.n	8002a4a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8146 	beq.w	8002a44 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d130      	bne.n	8002832 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002806:	2201      	movs	r2, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0201 	and.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d017      	beq.n	800286e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d123      	bne.n	80028c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a0 	beq.w	8002a44 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_GPIO_Init+0x2e0>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_GPIO_Init+0x2e0>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_GPIO_Init+0x2e0>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800291c:	4a53      	ldr	r2, [pc, #332]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x2e8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d019      	beq.n	800297c <HAL_GPIO_Init+0x1f4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x2ec>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_GPIO_Init+0x1f0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x2f0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00d      	beq.n	8002974 <HAL_GPIO_Init+0x1ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_GPIO_Init+0x2f4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <HAL_GPIO_Init+0x1e8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a47      	ldr	r2, [pc, #284]	; (8002a80 <HAL_GPIO_Init+0x2f8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_GPIO_Init+0x1e4>
 8002968:	2304      	movs	r3, #4
 800296a:	e008      	b.n	800297e <HAL_GPIO_Init+0x1f6>
 800296c:	2305      	movs	r3, #5
 800296e:	e006      	b.n	800297e <HAL_GPIO_Init+0x1f6>
 8002970:	2303      	movs	r3, #3
 8002972:	e004      	b.n	800297e <HAL_GPIO_Init+0x1f6>
 8002974:	2302      	movs	r3, #2
 8002976:	e002      	b.n	800297e <HAL_GPIO_Init+0x1f6>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_GPIO_Init+0x1f6>
 800297c:	2300      	movs	r3, #0
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800298e:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_GPIO_Init+0x2e4>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299c:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029c0:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029ea:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aea3 	bne.w	80027a0 <HAL_GPIO_Init+0x18>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	af06      	add	r7, sp, #24
 8002a8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0d0      	b.n	8002c3c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 f880 	bl	8009bb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 ff15 	bl	80058f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	e04c      	b.n	8002b66 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3301      	adds	r3, #1
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	b298      	uxth	r0, r3
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3336      	adds	r3, #54	; 0x36
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3303      	adds	r3, #3
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3338      	adds	r3, #56	; 0x38
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	333c      	adds	r3, #60	; 0x3c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	3340      	adds	r3, #64	; 0x40
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3ad      	bcc.n	8002acc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e044      	b.n	8002c00 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3b5      	bcc.n	8002b76 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	687e      	ldr	r6, [r7, #4]
 8002c12:	466d      	mov	r5, sp
 8002c14:	f106 0410 	add.w	r4, r6, #16
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	602b      	str	r3, [r5, #0]
 8002c20:	1d33      	adds	r3, r6, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f002 fe7d 	bl	8005924 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_PCD_Start+0x16>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e016      	b.n	8002c88 <HAL_PCD_Start+0x44>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 fe2c 	bl	80058c4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 ff82 	bl	8009b78 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f005 fb11 	bl	80082a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 fb09 	bl	80082b4 <USB_ReadInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cac:	d102      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fade 	bl	8003270 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fafb 	bl	80082b4 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc8:	d112      	bne.n	8002cf0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f006 ffe1 	bl	8009caa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8c7 	bl	8002e7e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 fadd 	bl	80082b4 <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d04:	d10b      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fac6 	bl	80082b4 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	d10b      	bne.n	8002d4c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 faaf 	bl	80082b4 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d126      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0204 	bic.w	r2, r2, #4
 8002d74:	b292      	uxth	r2, r2
 8002d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f006 ffc2 	bl	8009d1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002daa:	b292      	uxth	r2, r2
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 fa7d 	bl	80082b4 <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc4:	d126      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0204 	orr.w	r2, r2, #4
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f006 ff6a 	bl	8009ce8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 fa4b 	bl	80082b4 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d10e      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 ff23 	bl	8009c8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f005 fa31 	bl	80082b4 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d10b      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e70:	b292      	uxth	r2, r2
 8002e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_PCD_SetAddress+0x1a>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e013      	b.n	8002ec0 <HAL_PCD_SetAddress+0x42>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f005 f9e2 	bl	800827a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	70fb      	strb	r3, [r7, #3]
 8002eda:	460b      	mov	r3, r1
 8002edc:	803b      	strh	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da0e      	bge.n	8002f0c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	705a      	strb	r2, [r3, #1]
 8002f0a:	e00e      	b.n	8002f2a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 0207 	and.w	r2, r3, #7
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f36:	883a      	ldrh	r2, [r7, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	78ba      	ldrb	r2, [r7, #2]
 8002f40:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f54:	78bb      	ldrb	r3, [r7, #2]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d102      	bne.n	8002f60 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_PCD_EP_Open+0xa6>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e00e      	b.n	8002f8c <HAL_PCD_EP_Open+0xc4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 fcf1 	bl	8005964 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da0e      	bge.n	8002fc6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	705a      	strb	r2, [r3, #1]
 8002fc4:	e00e      	b.n	8002fe4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0207 	and.w	r2, r3, #7
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_PCD_EP_Close+0x6a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e00e      	b.n	800301c <HAL_PCD_EP_Close+0x88>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68f9      	ldr	r1, [r7, #12]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f813 	bl	8006038 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	b2da      	uxtb	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	4618      	mov	r0, r3
 8003082:	f003 f9c5 	bl	8006410 <USB_EPStartXfer>
 8003086:	e005      	b.n	8003094 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 f9be 	bl	8006410 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	460b      	mov	r3, r1
 80030ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2201      	movs	r2, #1
 80030e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6979      	ldr	r1, [r7, #20]
 8003106:	4618      	mov	r0, r3
 8003108:	f003 f982 	bl	8006410 <USB_EPStartXfer>
 800310c:	e005      	b.n	800311a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 f97b 	bl	8006410 <USB_EPStartXfer>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d901      	bls.n	8003142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e03e      	b.n	80031c0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0e      	bge.n	8003168 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00c      	b.n	8003182 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_PCD_EP_SetStall+0x7e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e00e      	b.n	80031c0 <HAL_PCD_EP_SetStall+0x9c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 ff65 	bl	8008080 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d901      	bls.n	80031e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e040      	b.n	8003268 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0e      	bge.n	800320c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	705a      	strb	r2, [r3, #1]
 800320a:	e00e      	b.n	800322a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 0207 	and.w	r2, r3, #7
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_PCD_EP_ClrStall+0x82>
 8003246:	2302      	movs	r3, #2
 8003248:	e00e      	b.n	8003268 <HAL_PCD_EP_ClrStall+0xa0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	4618      	mov	r0, r3
 800325a:	f004 ff61 	bl	8008120 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003278:	e2ec      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003282:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003284:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003290:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 8161 	bne.w	800355c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800329a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d152      	bne.n	800334a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b4:	81fb      	strh	r3, [r7, #14]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	89fb      	ldrh	r3, [r7, #14]
 80032bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3328      	adds	r3, #40	; 0x28
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	3302      	adds	r3, #2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	441a      	add	r2, r3
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f006 fca5 	bl	8009c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 829b 	beq.w	8003854 <PCD_EP_ISR_Handler+0x5e4>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8296 	bne.w	8003854 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003334:	b2da      	uxtb	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003348:	e284      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800335a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	2b00      	cmp	r3, #0
 8003362:	d034      	beq.n	80033ce <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336c:	b29b      	uxth	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	3306      	adds	r3, #6
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f004 ffda 	bl	800835c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033b4:	4013      	ands	r3, r2
 80033b6:	823b      	strh	r3, [r7, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	8a3a      	ldrh	r2, [r7, #16]
 80033be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c2:	b292      	uxth	r2, r2
 80033c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f006 fc1a 	bl	8009c00 <HAL_PCD_SetupStageCallback>
 80033cc:	e242      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f280 823e 	bge.w	8003854 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033e4:	4013      	ands	r3, r2
 80033e6:	83bb      	strh	r3, [r7, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	8bba      	ldrh	r2, [r7, #28]
 80033ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f2:	b292      	uxth	r2, r2
 80033f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	3306      	adds	r3, #6
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d019      	beq.n	800345e <PCD_EP_ISR_Handler+0x1ee>
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d015      	beq.n	800345e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	6959      	ldr	r1, [r3, #20]
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003442:	b29b      	uxth	r3, r3
 8003444:	f004 ff8a 	bl	800835c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	441a      	add	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003456:	2100      	movs	r1, #0
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f006 fbe3 	bl	8009c24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 81f2 	bne.w	8003854 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d112      	bne.n	80034be <PCD_EP_ISR_Handler+0x24e>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e02f      	b.n	800351e <PCD_EP_ISR_Handler+0x2ae>
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b3e      	cmp	r3, #62	; 0x3e
 80034c4:	d813      	bhi.n	80034ee <PCD_EP_ISR_Handler+0x27e>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x270>
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	3301      	adds	r3, #1
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	029b      	lsls	r3, r3, #10
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e017      	b.n	800351e <PCD_EP_ISR_Handler+0x2ae>
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <PCD_EP_ISR_Handler+0x298>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	3b01      	subs	r3, #1
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	b29b      	uxth	r3, r3
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	b29b      	uxth	r3, r3
 8003510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003518:	b29a      	uxth	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	827b      	strh	r3, [r7, #18]
 8003530:	8a7b      	ldrh	r3, [r7, #18]
 8003532:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003536:	827b      	strh	r3, [r7, #18]
 8003538:	8a7b      	ldrh	r3, [r7, #18]
 800353a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800353e:	827b      	strh	r3, [r7, #18]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	8a7b      	ldrh	r3, [r7, #18]
 8003546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
 800355a:	e17b      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800356e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003572:	2b00      	cmp	r3, #0
 8003574:	f280 80ea 	bge.w	800374c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800358e:	4013      	ands	r3, r2
 8003590:	853b      	strh	r3, [r7, #40]	; 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a6:	b292      	uxth	r2, r2
 80035a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	7b1b      	ldrb	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d122      	bne.n	800360e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	3306      	adds	r3, #6
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80035f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8087 	beq.w	8003708 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	6959      	ldr	r1, [r3, #20]
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	88da      	ldrh	r2, [r3, #6]
 8003606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003608:	f004 fea8 	bl	800835c <USB_ReadPMA>
 800360c:	e07c      	b.n	8003708 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d108      	bne.n	8003628 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003618:	461a      	mov	r2, r3
 800361a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f927 	bl	8003870 <HAL_PCD_EP_DB_Receive>
 8003622:	4603      	mov	r3, r0
 8003624:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003626:	e06f      	b.n	8003708 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	847b      	strh	r3, [r7, #34]	; 0x22
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d021      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	3302      	adds	r3, #2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	6959      	ldr	r1, [r3, #20]
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	891a      	ldrh	r2, [r3, #8]
 80036be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036c0:	f004 fe4c 	bl	800835c <USB_ReadPMA>
 80036c4:	e020      	b.n	8003708 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	3306      	adds	r3, #6
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6959      	ldr	r1, [r3, #20]
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	895a      	ldrh	r2, [r3, #10]
 8003702:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003704:	f004 fe2a 	bl	800835c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800370e:	441a      	add	r2, r3
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371a:	441a      	add	r2, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <PCD_EP_ISR_Handler+0x4c2>
 8003728:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	429a      	cmp	r2, r3
 8003730:	d206      	bcs.n	8003740 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f006 fa73 	bl	8009c24 <HAL_PCD_DataOutStageCallback>
 800373e:	e005      	b.n	800374c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fe62 	bl	8006410 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800374c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d07e      	beq.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	843b      	strh	r3, [r7, #32]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	8c3b      	ldrh	r3, [r7, #32]
 8003796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	78db      	ldrb	r3, [r3, #3]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d00c      	beq.n	80037c4 <PCD_EP_ISR_Handler+0x554>
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	78db      	ldrb	r3, [r3, #3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d146      	bne.n	8003848 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d141      	bne.n	8003848 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	3302      	adds	r3, #2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	8bfb      	ldrh	r3, [r7, #30]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d906      	bls.n	8003806 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	8bfb      	ldrh	r3, [r7, #30]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	619a      	str	r2, [r3, #24]
 8003804:	e002      	b.n	800380c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f006 fa1d 	bl	8009c5a <HAL_PCD_DataInStageCallback>
 8003820:	e018      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	8bfb      	ldrh	r3, [r7, #30]
 8003828:	441a      	add	r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	8bfb      	ldrh	r3, [r7, #30]
 8003834:	441a      	add	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003840:	4618      	mov	r0, r3
 8003842:	f002 fde5 	bl	8006410 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003846:	e005      	b.n	8003854 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003848:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800384a:	461a      	mov	r2, r3
 800384c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f91b 	bl	8003a8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800385c:	b29b      	uxth	r3, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f6ff ad0a 	blt.w	800327a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	; 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d07e      	beq.n	8003986 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	3302      	adds	r3, #2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	8b7b      	ldrh	r3, [r7, #26]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d306      	bcc.n	80038ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	8b7b      	ldrh	r3, [r7, #26]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	619a      	str	r2, [r3, #24]
 80038c8:	e002      	b.n	80038d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d123      	bne.n	8003920 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	833b      	strh	r3, [r7, #24]
 80038f4:	8b3b      	ldrh	r3, [r7, #24]
 80038f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038fa:	833b      	strh	r3, [r7, #24]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	8b3b      	ldrh	r3, [r7, #24]
 800390c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391c:	b29b      	uxth	r3, r3
 800391e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01f      	beq.n	800396a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	82fb      	strh	r3, [r7, #22]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	441a      	add	r2, r3
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800395a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800396a:	8b7b      	ldrh	r3, [r7, #26]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8087 	beq.w	8003a80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6959      	ldr	r1, [r3, #20]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	891a      	ldrh	r2, [r3, #8]
 800397e:	8b7b      	ldrh	r3, [r7, #26]
 8003980:	f004 fcec 	bl	800835c <USB_ReadPMA>
 8003984:	e07c      	b.n	8003a80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	3306      	adds	r3, #6
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d306      	bcc.n	80039c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	8b7b      	ldrh	r3, [r7, #26]
 80039c0:	1ad2      	subs	r2, r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	e002      	b.n	80039ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d123      	bne.n	8003a1e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	83fb      	strh	r3, [r7, #30]
 80039f2:	8bfb      	ldrh	r3, [r7, #30]
 80039f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039f8:	83fb      	strh	r3, [r7, #30]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8bfb      	ldrh	r3, [r7, #30]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11f      	bne.n	8003a68 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	83bb      	strh	r3, [r7, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	8bbb      	ldrh	r3, [r7, #28]
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a68:	8b7b      	ldrh	r3, [r7, #26]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6959      	ldr	r1, [r3, #20]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	895a      	ldrh	r2, [r3, #10]
 8003a7a:	8b7b      	ldrh	r3, [r7, #26]
 8003a7c:	f004 fc6e 	bl	800835c <USB_ReadPMA>
    }
  }

  return count;
 8003a80:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b0a2      	sub	sp, #136	; 0x88
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 81c7 	beq.w	8003e32 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003acc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d907      	bls.n	8003aec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	e002      	b.n	8003af2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 80b9 	bne.w	8003c6e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d126      	bne.n	8003b52 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	4413      	add	r3, r2
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	011a      	lsls	r2, r3, #4
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	4413      	add	r3, r2
 8003b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	e01a      	b.n	8003b88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d116      	bne.n	8003b88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	4413      	add	r3, r2
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	011a      	lsls	r2, r3, #4
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2200      	movs	r2, #0
 8003b86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d126      	bne.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4413      	add	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	011a      	lsls	r2, r3, #4
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e017      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d113      	bne.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	011a      	lsls	r2, r3, #4
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2200      	movs	r2, #0
 8003c12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f006 f81d 	bl	8009c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 82d4 	beq.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	827b      	strh	r3, [r7, #18]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	8a7b      	ldrh	r3, [r7, #18]
 8003c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	8013      	strh	r3, [r2, #0]
 8003c6c:	e2b2      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d021      	beq.n	8003cbc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	441a      	add	r2, r3
 8003ca4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 8286 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cde:	441a      	add	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d309      	bcc.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e015      	b.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d1a:	e009      	b.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d155      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	4413      	add	r3, r2
 8003d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	011a      	lsls	r2, r3, #4
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	4413      	add	r3, r2
 8003d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d112      	bne.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x302>
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	e047      	b.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x392>
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d90:	d811      	bhi.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da4:	3301      	adds	r3, #1
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	029b      	lsls	r3, r3, #10
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e032      	b.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x392>
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x342>
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e01b      	b.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x392>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d117      	bne.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x392>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	643b      	str	r3, [r7, #64]	; 0x40
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e00:	4413      	add	r3, r2
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	011a      	lsls	r2, r3, #4
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6959      	ldr	r1, [r3, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	891a      	ldrh	r2, [r3, #8]
 8003e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f004 fa51 	bl	80082d2 <USB_WritePMA>
 8003e30:	e1d0      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	3306      	adds	r3, #6
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d307      	bcc.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	e002      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 80c4 	bne.w	8004012 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d126      	bne.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x456>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	011a      	lsls	r2, r3, #4
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e01a      	b.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d116      	bne.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	677b      	str	r3, [r7, #116]	; 0x74
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	4413      	add	r3, r2
 8003efe:	677b      	str	r3, [r7, #116]	; 0x74
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f08:	4413      	add	r3, r2
 8003f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f12:	2200      	movs	r2, #0
 8003f14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d12f      	bne.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	011a      	lsls	r2, r3, #4
 8003f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e017      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d113      	bne.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9a:	4413      	add	r3, r2
 8003f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011a      	lsls	r2, r3, #4
 8003fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f005 fe4d 	bl	8009c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 8104 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400c:	b29b      	uxth	r3, r3
 800400e:	8013      	strh	r3, [r2, #0]
 8004010:	e0e0      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d121      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004066:	2b01      	cmp	r3, #1
 8004068:	f040 80b4 	bne.w	80041d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004074:	441a      	add	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004082:	441a      	add	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d309      	bcc.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	1ad2      	subs	r2, r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	621a      	str	r2, [r3, #32]
 80040a6:	e015      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80040b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040be:	e009      	b.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d155      	bne.n	800418e <HAL_PCD_EP_DB_Transmit+0x704>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f6:	4413      	add	r3, r2
 80040f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011a      	lsls	r2, r3, #4
 8004100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004102:	4413      	add	r3, r2
 8004104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004108:	65bb      	str	r3, [r7, #88]	; 0x58
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d112      	bne.n	8004136 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800411a:	b29a      	uxth	r2, r3
 800411c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411e:	801a      	strh	r2, [r3, #0]
 8004120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800412e:	b29a      	uxth	r2, r3
 8004130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	e044      	b.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8004136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004138:	2b3e      	cmp	r3, #62	; 0x3e
 800413a:	d811      	bhi.n	8004160 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800413c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800414c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414e:	3301      	adds	r3, #1
 8004150:	657b      	str	r3, [r7, #84]	; 0x54
 8004152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004154:	b29b      	uxth	r3, r3
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	b29a      	uxth	r2, r3
 800415a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	e02f      	b.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8004160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	657b      	str	r3, [r7, #84]	; 0x54
 8004166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	3b01      	subs	r3, #1
 8004174:	657b      	str	r3, [r7, #84]	; 0x54
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	b29b      	uxth	r3, r3
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	b29b      	uxth	r3, r3
 800417e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004186:	b29a      	uxth	r2, r3
 8004188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e018      	b.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x736>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d114      	bne.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a4:	4413      	add	r3, r2
 80041a6:	667b      	str	r3, [r7, #100]	; 0x64
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011a      	lsls	r2, r3, #4
 80041ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b6:	663b      	str	r3, [r7, #96]	; 0x60
 80041b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6959      	ldr	r1, [r3, #20]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	895a      	ldrh	r2, [r3, #10]
 80041cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f004 f87f 	bl	80082d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ee:	823b      	strh	r3, [r7, #16]
 80041f0:	8a3b      	ldrh	r3, [r7, #16]
 80041f2:	f083 0310 	eor.w	r3, r3, #16
 80041f6:	823b      	strh	r3, [r7, #16]
 80041f8:	8a3b      	ldrh	r3, [r7, #16]
 80041fa:	f083 0320 	eor.w	r3, r3, #32
 80041fe:	823b      	strh	r3, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	8a3b      	ldrh	r3, [r7, #16]
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3788      	adds	r7, #136	; 0x88
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	817b      	strh	r3, [r7, #10]
 800423c:	4613      	mov	r3, r2
 800423e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004264:	897a      	ldrh	r2, [r7, #10]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	b29a      	uxth	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	80da      	strh	r2, [r3, #6]
 800428c:	e00b      	b.n	80042a6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2201      	movs	r2, #1
 8004292:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	b29a      	uxth	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e31d      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b94      	ldr	r3, [pc, #592]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d0:	4b91      	ldr	r3, [pc, #580]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d07b      	beq.n	80043de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d006      	beq.n	80042fa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d10f      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b87      	ldr	r3, [pc, #540]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06a      	beq.n	80043dc <HAL_RCC_OscConfig+0x128>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d166      	bne.n	80043dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e2f7      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x74>
 800431a:	4b7f      	ldr	r3, [pc, #508]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7e      	ldr	r2, [pc, #504]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e02d      	b.n	8004384 <HAL_RCC_OscConfig+0xd0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <HAL_RCC_OscConfig+0x96>
 8004330:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a78      	ldr	r2, [pc, #480]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a75      	ldr	r2, [pc, #468]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e01c      	b.n	8004384 <HAL_RCC_OscConfig+0xd0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b05      	cmp	r3, #5
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0xb8>
 8004352:	4b71      	ldr	r3, [pc, #452]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a70      	ldr	r2, [pc, #448]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b6e      	ldr	r3, [pc, #440]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6d      	ldr	r2, [pc, #436]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e00b      	b.n	8004384 <HAL_RCC_OscConfig+0xd0>
 800436c:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a69      	ldr	r2, [pc, #420]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a66      	ldr	r2, [pc, #408]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800437e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd fa2c 	bl	80017e8 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004394:	f7fd fa28 	bl	80017e8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e2ad      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043a6:	4b5c      	ldr	r3, [pc, #368]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0xe0>
 80043b2:	e014      	b.n	80043de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fd fa18 	bl	80017e8 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fd fa14 	bl	80017e8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e299      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ce:	4b52      	ldr	r3, [pc, #328]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x108>
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d05a      	beq.n	80044a0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d119      	bne.n	800442a <HAL_RCC_OscConfig+0x176>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fc:	4b46      	ldr	r3, [pc, #280]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x160>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e276      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b40      	ldr	r3, [pc, #256]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	493d      	ldr	r1, [pc, #244]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004428:	e03a      	b.n	80044a0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x268>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd f9d6 	bl	80017e8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004440:	f7fd f9d2 	bl	80017e8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e257      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	492a      	ldr	r1, [pc, #168]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
 8004472:	e015      	b.n	80044a0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x268>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fd f9b5 	bl	80017e8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004482:	f7fd f9b1 	bl	80017e8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e236      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80b8 	beq.w	800461e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d170      	bne.n	8004596 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x218>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e21a      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	4b11      	ldr	r3, [pc, #68]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80044d8:	429a      	cmp	r2, r3
 80044da:	d921      	bls.n	8004520 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc4b 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e208      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4906      	ldr	r1, [pc, #24]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	4901      	ldr	r1, [pc, #4]	; (8004518 <HAL_RCC_OscConfig+0x264>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
 8004516:	e020      	b.n	800455a <HAL_RCC_OscConfig+0x2a6>
 8004518:	40023800 	.word	0x40023800
 800451c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004520:	4b99      	ldr	r3, [pc, #612]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4996      	ldr	r1, [pc, #600]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004532:	4b95      	ldr	r3, [pc, #596]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	4991      	ldr	r1, [pc, #580]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fc16 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1d3      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	3301      	adds	r3, #1
 8004562:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800456a:	4a87      	ldr	r2, [pc, #540]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 800456c:	6892      	ldr	r2, [r2, #8]
 800456e:	0912      	lsrs	r2, r2, #4
 8004570:	f002 020f 	and.w	r2, r2, #15
 8004574:	4985      	ldr	r1, [pc, #532]	; (800478c <HAL_RCC_OscConfig+0x4d8>)
 8004576:	5c8a      	ldrb	r2, [r1, r2]
 8004578:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800457a:	4a85      	ldr	r2, [pc, #532]	; (8004790 <HAL_RCC_OscConfig+0x4dc>)
 800457c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <HAL_RCC_OscConfig+0x4e0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd f8e4 	bl	8001750 <HAL_InitTick>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d045      	beq.n	800461e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	e1b5      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d029      	beq.n	80045f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800459e:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x4e4>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd f920 	bl	80017e8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ac:	f7fd f91c 	bl	80017e8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1a1      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045be:	4b72      	ldr	r3, [pc, #456]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ca:	4b6f      	ldr	r3, [pc, #444]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	496c      	ldr	r1, [pc, #432]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	4967      	ldr	r1, [pc, #412]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e015      	b.n	800461e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045f2:	4b69      	ldr	r3, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x4e4>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd f8f6 	bl	80017e8 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004600:	f7fd f8f2 	bl	80017e8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e177      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004612:	4b5d      	ldr	r3, [pc, #372]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d030      	beq.n	800468c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004632:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fd f8d6 	bl	80017e8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004640:	f7fd f8d2 	bl	80017e8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e157      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004652:	4b4d      	ldr	r3, [pc, #308]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x38c>
 800465e:	e015      	b.n	800468c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004660:	4b4e      	ldr	r3, [pc, #312]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004666:	f7fd f8bf 	bl	80017e8 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466e:	f7fd f8bb 	bl	80017e8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e140      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b5 	beq.w	8004804 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	4a36      	ldr	r2, [pc, #216]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6253      	str	r3, [r2, #36]	; 0x24
 80046b6:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7fd f883 	bl	80017e8 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7fd f87f 	bl	80017e8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e104      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x466>
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 800470e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6353      	str	r3, [r2, #52]	; 0x34
 8004718:	e02d      	b.n	8004776 <HAL_RCC_OscConfig+0x4c2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x488>
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800472c:	6353      	str	r3, [r2, #52]	; 0x34
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004738:	6353      	str	r3, [r2, #52]	; 0x34
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x4c2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x4aa>
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	4a0f      	ldr	r2, [pc, #60]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 800474a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800474e:	6353      	str	r3, [r2, #52]	; 0x34
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6353      	str	r3, [r2, #52]	; 0x34
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x4c2>
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004768:	6353      	str	r3, [r2, #52]	; 0x34
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	4a06      	ldr	r2, [pc, #24]	; (8004788 <HAL_RCC_OscConfig+0x4d4>)
 8004770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004774:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d024      	beq.n	80047c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd f833 	bl	80017e8 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004784:	e019      	b.n	80047ba <HAL_RCC_OscConfig+0x506>
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	0800a1b4 	.word	0x0800a1b4
 8004790:	20000000 	.word	0x20000000
 8004794:	20000004 	.word	0x20000004
 8004798:	42470020 	.word	0x42470020
 800479c:	42470680 	.word	0x42470680
 80047a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd f820 	bl	80017e8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0a3      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ba:	4b54      	ldr	r3, [pc, #336]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4f0>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fd f80e 	bl	80017e8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd f80a 	bl	80017e8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e08d      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047e6:	4b49      	ldr	r3, [pc, #292]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1ee      	bne.n	80047d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f8:	4b44      	ldr	r3, [pc, #272]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	4a43      	ldr	r2, [pc, #268]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80047fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004802:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d079      	beq.n	8004900 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d056      	beq.n	80048c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b02      	cmp	r3, #2
 8004818:	d13b      	bne.n	8004892 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCC_OscConfig+0x65c>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fc ffe2 	bl	80017e8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004828:	f7fc ffde 	bl	80017e8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e063      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800483a:	4b34      	ldr	r3, [pc, #208]	; (800490c <HAL_RCC_OscConfig+0x658>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004846:	4b31      	ldr	r3, [pc, #196]	; (800490c <HAL_RCC_OscConfig+0x658>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4319      	orrs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	430b      	orrs	r3, r1
 800485e:	492b      	ldr	r1, [pc, #172]	; (800490c <HAL_RCC_OscConfig+0x658>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_RCC_OscConfig+0x65c>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fc ffbd 	bl	80017e8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004872:	f7fc ffb9 	bl	80017e8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03e      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004884:	4b21      	ldr	r3, [pc, #132]	; (800490c <HAL_RCC_OscConfig+0x658>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x5be>
 8004890:	e036      	b.n	8004900 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <HAL_RCC_OscConfig+0x65c>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fc ffa6 	bl	80017e8 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fc ffa2 	bl	80017e8 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e027      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x5ec>
 80048be:	e01f      	b.n	8004900 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e01a      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <HAL_RCC_OscConfig+0x658>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	429a      	cmp	r2, r3
 80048de:	d10d      	bne.n	80048fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d106      	bne.n	80048fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	42470060 	.word	0x42470060

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e11a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b8f      	ldr	r3, [pc, #572]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d919      	bls.n	800496a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <HAL_RCC_ClockConfig+0x34>
 800493c:	4b8a      	ldr	r3, [pc, #552]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a89      	ldr	r2, [pc, #548]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b87      	ldr	r3, [pc, #540]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 0201 	bic.w	r2, r3, #1
 8004950:	4985      	ldr	r1, [pc, #532]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004958:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d001      	beq.n	800496a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0f9      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004976:	4b7d      	ldr	r3, [pc, #500]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	497a      	ldr	r1, [pc, #488]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 808e 	beq.w	8004ab2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d121      	bne.n	80049ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0d7      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049b6:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d115      	bne.n	80049ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0cb      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0bf      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0b7      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	495c      	ldr	r1, [pc, #368]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a00:	f7fc fef2 	bl	80017e8 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d112      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a10:	f7fc feea 	bl	80017e8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e09b      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a26:	4b51      	ldr	r3, [pc, #324]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d1ee      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xfc>
 8004a32:	e03e      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d112      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3e:	f7fc fed3 	bl	80017e8 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e084      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d1ee      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x12a>
 8004a60:	e027      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d11d      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fc febc 	bl	80017e8 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e06d      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a82:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x158>
 8004a8e:	e010      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fc feaa 	bl	80017e8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e05b      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aa6:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ee      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d219      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1be>
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	4923      	ldr	r1, [pc, #140]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_ClockConfig+0x254>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e034      	b.n	8004b5e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4917      	ldr	r1, [pc, #92]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	490f      	ldr	r1, [pc, #60]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b32:	f000 f823 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_ClockConfig+0x258>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	490b      	ldr	r1, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fc fdfc 	bl	8001750 <HAL_InitTick>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800a1b4 	.word	0x0800a1b4
 8004b74:	20000000 	.word	0x20000000
 8004b78:	20000004 	.word	0x20000004

08004b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b092      	sub	sp, #72	; 0x48
 8004b82:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	f200 80d5 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x28>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x2e>
 8004ba2:	e0cf      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b72      	ldr	r3, [pc, #456]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004ba6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004ba8:	e0da      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004baa:	4b72      	ldr	r3, [pc, #456]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004bac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bae:	e0d7      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	0c9b      	lsrs	r3, r3, #18
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	4b6f      	ldr	r3, [pc, #444]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004bba:	5c9b      	ldrb	r3, [r3, r2]
 8004bbc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc0:	0d9b      	lsrs	r3, r3, #22
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bca:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d05d      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4604      	mov	r4, r0
 8004be0:	460d      	mov	r5, r1
 8004be2:	4622      	mov	r2, r4
 8004be4:	462b      	mov	r3, r5
 8004be6:	f04f 0000 	mov.w	r0, #0
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	0159      	lsls	r1, r3, #5
 8004bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf4:	0150      	lsls	r0, r2, #5
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	1a51      	subs	r1, r2, r1
 8004bfe:	6139      	str	r1, [r7, #16]
 8004c00:	4629      	mov	r1, r5
 8004c02:	eb63 0301 	sbc.w	r3, r3, r1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c14:	4659      	mov	r1, fp
 8004c16:	018b      	lsls	r3, r1, #6
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1e:	4651      	mov	r1, sl
 8004c20:	018a      	lsls	r2, r1, #6
 8004c22:	46d4      	mov	ip, sl
 8004c24:	ebb2 080c 	subs.w	r8, r2, ip
 8004c28:	4659      	mov	r1, fp
 8004c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	4690      	mov	r8, r2
 8004c44:	4699      	mov	r9, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	eb18 0303 	adds.w	r3, r8, r3
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	462b      	mov	r3, r5
 8004c50:	eb49 0303 	adc.w	r3, r9, r3
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c62:	4629      	mov	r1, r5
 8004c64:	024b      	lsls	r3, r1, #9
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004c70:	4601      	mov	r1, r0
 8004c72:	024a      	lsls	r2, r1, #9
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c84:	f7fb fd94 	bl	80007b0 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c90:	e055      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2200      	movs	r2, #0
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	627a      	str	r2, [r7, #36]	; 0x24
 8004c9a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	0159      	lsls	r1, r3, #5
 8004cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb0:	0150      	lsls	r0, r2, #5
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	46c4      	mov	ip, r8
 8004cb8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	468c      	mov	ip, r1
 8004cc2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cda:	ebb2 040a 	subs.w	r4, r2, sl
 8004cde:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	00eb      	lsls	r3, r5, #3
 8004cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf0:	00e2      	lsls	r2, r4, #3
 8004cf2:	4614      	mov	r4, r2
 8004cf4:	461d      	mov	r5, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	18e3      	adds	r3, r4, r3
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	eb45 0303 	adc.w	r3, r5, r3
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d10:	4629      	mov	r1, r5
 8004d12:	028b      	lsls	r3, r1, #10
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	4604      	mov	r4, r0
 8004d1a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d1e:	4601      	mov	r1, r0
 8004d20:	028a      	lsls	r2, r1, #10
 8004d22:	4610      	mov	r0, r2
 8004d24:	4619      	mov	r1, r3
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	2200      	movs	r2, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d32:	f7fb fd3d 	bl	80007b0 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d42:	e00d      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	0b5b      	lsrs	r3, r3, #13
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	3301      	adds	r3, #1
 8004d54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3748      	adds	r7, #72	; 0x48
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200
 8004d78:	0800a1a8 	.word	0x0800a1a8

08004d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d12c      	bne.n	8004dee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e016      	b.n	8004dda <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6253      	str	r3, [r2, #36]	; 0x24
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004dcc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004de0:	d105      	bne.n	8004dee <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004de8:	d101      	bne.n	8004dee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004dea:	2301      	movs	r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dfa:	f043 0304 	orr.w	r3, r3, #4
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 0201 	bic.w	r2, r3, #1
 8004e08:	490b      	ldr	r1, [pc, #44]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d001      	beq.n	8004e22 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	40023c00 	.word	0x40023c00

08004e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e031      	b.n	8004eb2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fa0e 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f000 fad6 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIM_Base_Start+0x48>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_TIM_Base_Start+0x88>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_Base_Start+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <HAL_TIM_Base_Start+0x8c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_Base_Start+0x48>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <HAL_TIM_Base_Start+0x90>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d111      	bne.n	8004f28 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d010      	beq.n	8004f38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e007      	b.n	8004f38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40010800 	.word	0x40010800

08004f50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e031      	b.n	8004fc6 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f829 	bl	8004fce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 fa4c 	bl	800542c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d122      	bne.n	800503c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d11b      	bne.n	800503c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0202 	mvn.w	r2, #2
 800500c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9e6 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9d9 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f9e8 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0204 	mvn.w	r2, #4
 8005060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9bc 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9af 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f9be 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0208 	mvn.w	r2, #8
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2204      	movs	r2, #4
 80050ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f992 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f985 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f994 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0210 	mvn.w	r2, #16
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2208      	movs	r2, #8
 800510e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f968 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f95b 	bl	80053e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f96a 	bl	8005406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0201 	mvn.w	r2, #1
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f936 	bl	80053d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f944 	bl	8005418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e046      	b.n	8005240 <HAL_TIM_OC_ConfigChannel+0xa8>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d839      	bhi.n	8005234 <HAL_TIM_OC_ConfigChannel+0x9c>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	08005235 	.word	0x08005235
 80051d0:	08005235 	.word	0x08005235
 80051d4:	08005235 	.word	0x08005235
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005235 	.word	0x08005235
 80051f0:	08005235 	.word	0x08005235
 80051f4:	08005235 	.word	0x08005235
 80051f8:	08005227 	.word	0x08005227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f974 	bl	80054f0 <TIM_OC1_SetConfig>
      break;
 8005208:	e015      	b.n	8005236 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f9a9 	bl	8005568 <TIM_OC2_SetConfig>
      break;
 8005216:	e00e      	b.n	8005236 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f9e0 	bl	80055e4 <TIM_OC3_SetConfig>
      break;
 8005224:	e007      	b.n	8005236 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fa16 	bl	800565e <TIM_OC4_SetConfig>
      break;
 8005232:	e000      	b.n	8005236 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005234:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e0b3      	b.n	80053c8 <HAL_TIM_ConfigClockSource+0x180>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800527e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005298:	d03e      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0xd0>
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	f200 8087 	bhi.w	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	f000 8085 	beq.w	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d87f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052b0:	2b70      	cmp	r3, #112	; 0x70
 80052b2:	d01a      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xa2>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d87b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d050      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x116>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d877      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d03c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0xf6>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d873      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d058      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x136>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d86f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d064      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x156>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d86b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d060      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x156>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d867      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x156>
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d05a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052e8:	e062      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f000 fa65 	bl	80057c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800530c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
      break;
 8005316:	e04e      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6899      	ldr	r1, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f000 fa4e 	bl	80057c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533a:	609a      	str	r2, [r3, #8]
      break;
 800533c:	e03b      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 f9c5 	bl	80056da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2150      	movs	r1, #80	; 0x50
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fa1c 	bl	8005794 <TIM_ITRx_SetConfig>
      break;
 800535c:	e02b      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 f9e3 	bl	8005736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2160      	movs	r1, #96	; 0x60
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fa0c 	bl	8005794 <TIM_ITRx_SetConfig>
      break;
 800537c:	e01b      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 f9a5 	bl	80056da <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f9fc 	bl	8005794 <TIM_ITRx_SetConfig>
      break;
 800539c:	e00b      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 f9f3 	bl	8005794 <TIM_ITRx_SetConfig>
        break;
 80053ae:	e002      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
	...

0800542c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0x28>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a25      	ldr	r2, [pc, #148]	; (80054dc <TIM_Base_SetConfig+0xb0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0x28>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <TIM_Base_SetConfig+0xb4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d108      	bne.n	8005466 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d013      	beq.n	8005496 <TIM_Base_SetConfig+0x6a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1a      	ldr	r2, [pc, #104]	; (80054dc <TIM_Base_SetConfig+0xb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0x6a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <TIM_Base_SetConfig+0xb4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0x6a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <TIM_Base_SetConfig+0xb8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0x6a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <TIM_Base_SetConfig+0xbc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0x6a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a16      	ldr	r2, [pc, #88]	; (80054ec <TIM_Base_SetConfig+0xc0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40010800 	.word	0x40010800
 80054e8:	40010c00 	.word	0x40010c00
 80054ec:	40011000 	.word	0x40011000

080054f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0302 	bic.w	r3, r3, #2
 8005538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0210 	bic.w	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0320 	bic.w	r3, r3, #32
 80055b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800562c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	621a      	str	r2, [r3, #32]
}
 8005654:	bf00      	nop
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	031b      	lsls	r3, r3, #12
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0201 	bic.w	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 030a 	bic.w	r3, r3, #10
 8005716:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005736:	b480      	push	{r7}
 8005738:	b087      	sub	sp, #28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0210 	bic.w	r2, r3, #16
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	031b      	lsls	r3, r3, #12
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f043 0307 	orr.w	r3, r3, #7
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	609a      	str	r2, [r3, #8]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
	...

08005808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800581c:	2302      	movs	r3, #2
 800581e:	e046      	b.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d00e      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10c      	bne.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40010800 	.word	0x40010800

080058c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	b29b      	uxth	r3, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	b29b      	uxth	r3, r3
 800590e:	4013      	ands	r3, r2
 8005910:	b29a      	uxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005924:	b084      	sub	sp, #16
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	f107 0014 	add.w	r0, r7, #20
 8005932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	b004      	add	sp, #16
 8005962:	4770      	bx	lr

08005964 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005964:	b480      	push	{r7}
 8005966:	b09b      	sub	sp, #108	; 0x6c
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	78db      	ldrb	r3, [r3, #3]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d81f      	bhi.n	80059d6 <USB_ActivateEndpoint+0x72>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <USB_ActivateEndpoint+0x38>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059c9 	.word	0x080059c9
 80059a4:	080059df 	.word	0x080059df
 80059a8:	080059bb 	.word	0x080059bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059b8:	e012      	b.n	80059e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059c6:	e00b      	b.n	80059e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059d4:	e004      	b.n	80059e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80059dc:	e000      	b.n	80059e0 <USB_ActivateEndpoint+0x7c>
      break;
 80059de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	7b1b      	ldrb	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8149 	bne.w	8005ce4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8084 	beq.w	8005b64 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	88db      	ldrh	r3, [r3, #6]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	81fb      	strh	r3, [r7, #14]
 8005a9e:	89fb      	ldrh	r3, [r7, #14]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <USB_ActivateEndpoint+0x17c>
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	81bb      	strh	r3, [r7, #12]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	89bb      	ldrh	r3, [r7, #12]
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d020      	beq.n	8005b2a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afe:	813b      	strh	r3, [r7, #8]
 8005b00:	893b      	ldrh	r3, [r7, #8]
 8005b02:	f083 0320 	eor.w	r3, r3, #32
 8005b06:	813b      	strh	r3, [r7, #8]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	441a      	add	r2, r3
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	8013      	strh	r3, [r2, #0]
 8005b28:	e27f      	b.n	800602a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	897b      	ldrh	r3, [r7, #10]
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]
 8005b62:	e262      	b.n	800602a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	4413      	add	r3, r2
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	011a      	lsls	r2, r3, #4
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	88db      	ldrh	r3, [r3, #6]
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	4413      	add	r3, r2
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	011a      	lsls	r2, r3, #4
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d112      	bne.n	8005bea <USB_ActivateEndpoint+0x286>
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e02f      	b.n	8005c4a <USB_ActivateEndpoint+0x2e6>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf0:	d813      	bhi.n	8005c1a <USB_ActivateEndpoint+0x2b6>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <USB_ActivateEndpoint+0x2a8>
 8005c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c08:	3301      	adds	r3, #1
 8005c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e017      	b.n	8005c4a <USB_ActivateEndpoint+0x2e6>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	663b      	str	r3, [r7, #96]	; 0x60
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <USB_ActivateEndpoint+0x2d0>
 8005c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c30:	3b01      	subs	r3, #1
 8005c32:	663b      	str	r3, [r7, #96]	; 0x60
 8005c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	83fb      	strh	r3, [r7, #30]
 8005c58:	8bfb      	ldrh	r3, [r7, #30]
 8005c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01b      	beq.n	8005c9a <USB_ActivateEndpoint+0x336>
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	83bb      	strh	r3, [r7, #28]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	8bbb      	ldrh	r3, [r7, #28]
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb0:	837b      	strh	r3, [r7, #26]
 8005cb2:	8b7b      	ldrh	r3, [r7, #26]
 8005cb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb8:	837b      	strh	r3, [r7, #26]
 8005cba:	8b7b      	ldrh	r3, [r7, #26]
 8005cbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cc0:	837b      	strh	r3, [r7, #26]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	8b7b      	ldrh	r3, [r7, #26]
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]
 8005ce2:	e1a2      	b.n	800602a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d30:	4413      	add	r3, r2
 8005d32:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	011a      	lsls	r2, r3, #4
 8005d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d42:	657b      	str	r3, [r7, #84]	; 0x54
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	891b      	ldrh	r3, [r3, #8]
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	653b      	str	r3, [r7, #80]	; 0x50
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	4413      	add	r3, r2
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	895b      	ldrh	r3, [r3, #10]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8091 	bne.w	8005eb4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005da0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01b      	beq.n	8005de2 <USB_ActivateEndpoint+0x47e>
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	873b      	strh	r3, [r7, #56]	; 0x38
 8005df0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01b      	beq.n	8005e32 <USB_ActivateEndpoint+0x4ce>
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	867b      	strh	r3, [r7, #50]	; 0x32
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
 8005eb2:	e0ba      	b.n	800602a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ec4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01d      	beq.n	8005f0c <USB_ActivateEndpoint+0x5a8>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01d      	beq.n	8005f64 <USB_ActivateEndpoint+0x600>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	78db      	ldrb	r3, [r3, #3]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d024      	beq.n	8005fb6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f8a:	f083 0320 	eor.w	r3, r3, #32
 8005f8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
 8005fb4:	e01d      	b.n	8005ff2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800602a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800602e:	4618      	mov	r0, r3
 8006030:	376c      	adds	r7, #108	; 0x6c
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006038:	b480      	push	{r7}
 800603a:	b08d      	sub	sp, #52	; 0x34
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	7b1b      	ldrb	r3, [r3, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 808e 	bne.w	8006168 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d044      	beq.n	80060de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	81bb      	strh	r3, [r7, #12]
 8006062:	89bb      	ldrh	r3, [r7, #12]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <USB_DeactivateEndpoint+0x6c>
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	817b      	strh	r3, [r7, #10]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	897b      	ldrh	r3, [r7, #10]
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	813b      	strh	r3, [r7, #8]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	893b      	ldrh	r3, [r7, #8]
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	8013      	strh	r3, [r2, #0]
 80060dc:	e192      	b.n	8006404 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	827b      	strh	r3, [r7, #18]
 80060ec:	8a7b      	ldrh	r3, [r7, #18]
 80060ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01b      	beq.n	800612e <USB_DeactivateEndpoint+0xf6>
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	823b      	strh	r3, [r7, #16]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8a3b      	ldrh	r3, [r7, #16]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	81fb      	strh	r3, [r7, #14]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	89fb      	ldrh	r3, [r7, #14]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
 8006166:	e14d      	b.n	8006404 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 80a5 	bne.w	80062bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	843b      	strh	r3, [r7, #32]
 8006180:	8c3b      	ldrh	r3, [r7, #32]
 8006182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <USB_DeactivateEndpoint+0x18a>
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	83fb      	strh	r3, [r7, #30]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	8bfb      	ldrh	r3, [r7, #30]
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	83bb      	strh	r3, [r7, #28]
 80061d0:	8bbb      	ldrh	r3, [r7, #28]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01b      	beq.n	8006212 <USB_DeactivateEndpoint+0x1da>
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f0:	837b      	strh	r3, [r7, #26]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	8b7b      	ldrh	r3, [r7, #26]
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006228:	833b      	strh	r3, [r7, #24]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8b3b      	ldrh	r3, [r7, #24]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	82fb      	strh	r3, [r7, #22]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8afb      	ldrh	r3, [r7, #22]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006298:	82bb      	strh	r3, [r7, #20]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	8abb      	ldrh	r3, [r7, #20]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
 80062ba:	e0a3      	b.n	8006404 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <USB_DeactivateEndpoint+0x2d4>
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	857b      	strh	r3, [r7, #42]	; 0x2a
 800631a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <USB_DeactivateEndpoint+0x324>
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	853b      	strh	r3, [r7, #40]	; 0x28
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	b29b      	uxth	r3, r3
 8006392:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	b29b      	uxth	r3, r3
 8006402:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3734      	adds	r7, #52	; 0x34
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b0cc      	sub	sp, #304	; 0x130
 8006414:	af00      	add	r7, sp, #0
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641e:	6018      	str	r0, [r3, #0]
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006428:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800642a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b01      	cmp	r3, #1
 8006438:	f041 817d 	bne.w	8007736 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d908      	bls.n	800646a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006468:	e007      	b.n	800647a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	7b1b      	ldrb	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d152      	bne.n	8006530 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6959      	ldr	r1, [r3, #20]
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	88da      	ldrh	r2, [r3, #6]
 80064a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064b0:	6800      	ldr	r0, [r0, #0]
 80064b2:	f001 ff0e 	bl	80082d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064e8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	440a      	add	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	011a      	lsls	r2, r3, #4
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4413      	add	r3, r2
 800650c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651e:	b29a      	uxth	r2, r3
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	f001 b8b5 	b.w	800769a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	2b02      	cmp	r3, #2
 800653e:	f040 84c6 	bne.w	8006ece <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	f240 8443 	bls.w	8006de6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800658a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065cc:	1ad2      	subs	r2, r2, r3
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 823e 	beq.w	8006a7e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006606:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800660a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800660e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 809a 	bne.w	800675c <USB_EPStartXfer+0x34c>
 8006628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006634:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	4619      	mov	r1, r3
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800665a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	440a      	add	r2, r1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4413      	add	r3, r2
 800667e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d122      	bne.n	80066da <USB_EPStartXfer+0x2ca>
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e079      	b.n	80067ce <USB_EPStartXfer+0x3be>
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d81b      	bhi.n	800671a <USB_EPStartXfer+0x30a>
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <USB_EPStartXfer+0x2f2>
 80066f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066fc:	3301      	adds	r3, #1
 80066fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29a      	uxth	r2, r3
 800670c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006710:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e059      	b.n	80067ce <USB_EPStartXfer+0x3be>
 800671a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <USB_EPStartXfer+0x32a>
 8006730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006734:	3b01      	subs	r3, #1
 8006736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800673a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800673e:	b29b      	uxth	r3, r3
 8006740:	029b      	lsls	r3, r3, #10
 8006742:	b29b      	uxth	r3, r3
 8006744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674c:	b29a      	uxth	r2, r3
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	e038      	b.n	80067ce <USB_EPStartXfer+0x3be>
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d130      	bne.n	80067ce <USB_EPStartXfer+0x3be>
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006786:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800678a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	440a      	add	r2, r1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	895b      	ldrh	r3, [r3, #10]
 80067da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6959      	ldr	r1, [r3, #20]
 80067ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f001 fd68 	bl	80082d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006812:	441a      	add	r2, r3
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	429a      	cmp	r2, r3
 800683a:	d90f      	bls.n	800685c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a1a      	ldr	r2, [r3, #32]
 8006848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684c:	1ad2      	subs	r2, r2, r3
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	621a      	str	r2, [r3, #32]
 800685a:	e00e      	b.n	800687a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800686c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 809a 	bne.w	80069c0 <USB_EPStartXfer+0x5b0>
 800688c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006890:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006894:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006898:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4619      	mov	r1, r3
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068be:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	440a      	add	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d122      	bne.n	800693e <USB_EPStartXfer+0x52e>
 80068f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800690a:	b29a      	uxth	r2, r3
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692e:	b29a      	uxth	r2, r3
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e083      	b.n	8006a46 <USB_EPStartXfer+0x636>
 800693e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006942:	2b3e      	cmp	r3, #62	; 0x3e
 8006944:	d81b      	bhi.n	800697e <USB_EPStartXfer+0x56e>
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <USB_EPStartXfer+0x556>
 800695c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006966:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29a      	uxth	r2, r3
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e063      	b.n	8006a46 <USB_EPStartXfer+0x636>
 800697e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698c:	f003 031f 	and.w	r3, r3, #31
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <USB_EPStartXfer+0x58e>
 8006994:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006998:	3b01      	subs	r3, #1
 800699a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800699e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	029b      	lsls	r3, r3, #10
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e042      	b.n	8006a46 <USB_EPStartXfer+0x636>
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d13a      	bne.n	8006a46 <USB_EPStartXfer+0x636>
 80069d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80069d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80069fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a02:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	440a      	add	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	011a      	lsls	r2, r3, #4
 8006a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	891b      	ldrh	r3, [r3, #8]
 8006a52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6959      	ldr	r1, [r3, #20]
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a74:	6800      	ldr	r0, [r0, #0]
 8006a76:	f001 fc2c 	bl	80082d2 <USB_WritePMA>
 8006a7a:	f000 be0e 	b.w	800769a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d16d      	bne.n	8006b6a <USB_EPStartXfer+0x75a>
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aae:	4413      	add	r3, r2
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d112      	bne.n	8006af8 <USB_EPStartXfer+0x6e8>
 8006ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	e063      	b.n	8006bc0 <USB_EPStartXfer+0x7b0>
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	2b3e      	cmp	r3, #62	; 0x3e
 8006afe:	d817      	bhi.n	8006b30 <USB_EPStartXfer+0x720>
 8006b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <USB_EPStartXfer+0x710>
 8006b16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	e047      	b.n	8006bc0 <USB_EPStartXfer+0x7b0>
 8006b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <USB_EPStartXfer+0x740>
 8006b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	029b      	lsls	r3, r3, #10
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	e02a      	b.n	8006bc0 <USB_EPStartXfer+0x7b0>
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d122      	bne.n	8006bc0 <USB_EPStartXfer+0x7b0>
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	653b      	str	r3, [r7, #80]	; 0x50
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9a:	4413      	add	r3, r2
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	011a      	lsls	r2, r3, #4
 8006bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bae:	4413      	add	r3, r2
 8006bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	891b      	ldrh	r3, [r3, #8]
 8006bcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6959      	ldr	r1, [r3, #20]
 8006bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006be6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	f001 fb6f 	bl	80082d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c04:	441a      	add	r2, r3
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6a1a      	ldr	r2, [r3, #32]
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d90f      	bls.n	8006c4e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a1a      	ldr	r2, [r3, #32]
 8006c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3e:	1ad2      	subs	r2, r2, r3
 8006c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	621a      	str	r2, [r3, #32]
 8006c4c:	e00e      	b.n	8006c6c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d16d      	bne.n	8006d64 <USB_EPStartXfer+0x954>
 8006c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	4413      	add	r3, r2
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	011a      	lsls	r2, r3, #4
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d112      	bne.n	8006cf2 <USB_EPStartXfer+0x8e2>
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e05d      	b.n	8006dae <USB_EPStartXfer+0x99e>
 8006cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf8:	d817      	bhi.n	8006d2a <USB_EPStartXfer+0x91a>
 8006cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <USB_EPStartXfer+0x90a>
 8006d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d14:	3301      	adds	r3, #1
 8006d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	029b      	lsls	r3, r3, #10
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	e041      	b.n	8006dae <USB_EPStartXfer+0x99e>
 8006d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <USB_EPStartXfer+0x93a>
 8006d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d44:	3b01      	subs	r3, #1
 8006d46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	029b      	lsls	r3, r3, #10
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	e024      	b.n	8006dae <USB_EPStartXfer+0x99e>
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d11c      	bne.n	8006dae <USB_EPStartXfer+0x99e>
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d88:	4413      	add	r3, r2
 8006d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	895b      	ldrh	r3, [r3, #10]
 8006dba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6959      	ldr	r1, [r3, #20]
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dd4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dd8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ddc:	6800      	ldr	r0, [r0, #0]
 8006dde:	f001 fa78 	bl	80082d2 <USB_WritePMA>
 8006de2:	f000 bc5a 	b.w	800769a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e72:	4413      	add	r3, r2
 8006e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	011a      	lsls	r2, r3, #4
 8006e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	891b      	ldrh	r3, [r3, #8]
 8006ea4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6959      	ldr	r1, [r3, #20]
 8006eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ebe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ec2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ec6:	6800      	ldr	r0, [r0, #0]
 8006ec8:	f001 fa03 	bl	80082d2 <USB_WritePMA>
 8006ecc:	e3e5      	b.n	800769a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	441a      	add	r2, r3
 8006f12:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 81bc 	beq.w	80072e8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d16d      	bne.n	800706a <USB_EPStartXfer+0xc5a>
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fae:	4413      	add	r3, r2
 8006fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	011a      	lsls	r2, r3, #4
 8006fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fc8:	677b      	str	r3, [r7, #116]	; 0x74
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d112      	bne.n	8006ff8 <USB_EPStartXfer+0xbe8>
 8006fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e060      	b.n	80070ba <USB_EPStartXfer+0xcaa>
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffe:	d817      	bhi.n	8007030 <USB_EPStartXfer+0xc20>
 8007000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800700a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_EPStartXfer+0xc10>
 8007016:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007020:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29a      	uxth	r2, r3
 800702a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e044      	b.n	80070ba <USB_EPStartXfer+0xcaa>
 8007030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USB_EPStartXfer+0xc40>
 8007046:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800704a:	3b01      	subs	r3, #1
 800704c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007050:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29a      	uxth	r2, r3
 8007064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e027      	b.n	80070ba <USB_EPStartXfer+0xcaa>
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d11f      	bne.n	80070ba <USB_EPStartXfer+0xcaa>
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007090:	4413      	add	r3, r2
 8007092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	011a      	lsls	r2, r3, #4
 80070a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070a8:	4413      	add	r3, r2
 80070aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	895b      	ldrh	r3, [r3, #10]
 80070c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6959      	ldr	r1, [r3, #20]
 80070d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070e8:	6800      	ldr	r0, [r0, #0]
 80070ea:	f001 f8f2 	bl	80082d2 <USB_WritePMA>
          ep->xfer_buff += len;
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695a      	ldr	r2, [r3, #20]
 80070fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fe:	441a      	add	r2, r3
 8007100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800710c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d90f      	bls.n	8007148 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007138:	1ad2      	subs	r2, r2, r3
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	621a      	str	r2, [r3, #32]
 8007146:	e00e      	b.n	8007166 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8295 	beq.w	800769a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d16d      	bne.n	800725c <USB_EPStartXfer+0xe4c>
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	66bb      	str	r3, [r7, #104]	; 0x68
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071a0:	4413      	add	r3, r2
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ba:	667b      	str	r3, [r7, #100]	; 0x64
 80071bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d112      	bne.n	80071ea <USB_EPStartXfer+0xdda>
 80071c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e6:	801a      	strh	r2, [r3, #0]
 80071e8:	e063      	b.n	80072b2 <USB_EPStartXfer+0xea2>
 80071ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ee:	2b3e      	cmp	r3, #62	; 0x3e
 80071f0:	d817      	bhi.n	8007222 <USB_EPStartXfer+0xe12>
 80071f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80071fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <USB_EPStartXfer+0xe02>
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720c:	3301      	adds	r3, #1
 800720e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	b29b      	uxth	r3, r3
 8007218:	029b      	lsls	r3, r3, #10
 800721a:	b29a      	uxth	r2, r3
 800721c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	e047      	b.n	80072b2 <USB_EPStartXfer+0xea2>
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <USB_EPStartXfer+0xe32>
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723c:	3b01      	subs	r3, #1
 800723e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29b      	uxth	r3, r3
 800724c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007254:	b29a      	uxth	r2, r3
 8007256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e02a      	b.n	80072b2 <USB_EPStartXfer+0xea2>
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d122      	bne.n	80072b2 <USB_EPStartXfer+0xea2>
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	673b      	str	r3, [r7, #112]	; 0x70
 8007278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007286:	b29b      	uxth	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800728c:	4413      	add	r3, r2
 800728e:	673b      	str	r3, [r7, #112]	; 0x70
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	011a      	lsls	r2, r3, #4
 800729e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a0:	4413      	add	r3, r2
 80072a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	891b      	ldrh	r3, [r3, #8]
 80072be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6959      	ldr	r1, [r3, #20]
 80072ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072e0:	6800      	ldr	r0, [r0, #0]
 80072e2:	f000 fff6 	bl	80082d2 <USB_WritePMA>
 80072e6:	e1d8      	b.n	800769a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d178      	bne.n	80073ea <USB_EPStartXfer+0xfda>
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007314:	b29b      	uxth	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800731c:	4413      	add	r3, r2
 800731e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	011a      	lsls	r2, r3, #4
 8007330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007334:	4413      	add	r3, r2
 8007336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800733a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800733e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d116      	bne.n	8007374 <USB_EPStartXfer+0xf64>
 8007346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007352:	b29a      	uxth	r2, r3
 8007354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	e06b      	b.n	800744c <USB_EPStartXfer+0x103c>
 8007374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007378:	2b3e      	cmp	r3, #62	; 0x3e
 800737a:	d818      	bhi.n	80073ae <USB_EPStartXfer+0xf9e>
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	085b      	lsrs	r3, r3, #1
 8007382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <USB_EPStartXfer+0xf8c>
 8007392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007396:	3301      	adds	r3, #1
 8007398:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800739c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	029b      	lsls	r3, r3, #10
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073aa:	801a      	strh	r2, [r3, #0]
 80073ac:	e04e      	b.n	800744c <USB_EPStartXfer+0x103c>
 80073ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <USB_EPStartXfer+0xfbe>
 80073c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073c8:	3b01      	subs	r3, #1
 80073ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e030      	b.n	800744c <USB_EPStartXfer+0x103c>
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d128      	bne.n	800744c <USB_EPStartXfer+0x103c>
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800741e:	4413      	add	r3, r2
 8007420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	011a      	lsls	r2, r3, #4
 8007432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007436:	4413      	add	r3, r2
 8007438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800743c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007444:	b29a      	uxth	r2, r3
 8007446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800744a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	891b      	ldrh	r3, [r3, #8]
 8007458:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800745c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6959      	ldr	r1, [r3, #20]
 8007468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746c:	b29b      	uxth	r3, r3
 800746e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007472:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007476:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	f000 ff29 	bl	80082d2 <USB_WritePMA>
          ep->xfer_buff += len;
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007490:	441a      	add	r2, r3
 8007492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d90f      	bls.n	80074da <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6a1a      	ldr	r2, [r3, #32]
 80074c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	621a      	str	r2, [r3, #32]
 80074d8:	e00e      	b.n	80074f8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80074f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80cc 	beq.w	800769a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d178      	bne.n	8007612 <USB_EPStartXfer+0x1202>
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753c:	b29b      	uxth	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007544:	4413      	add	r3, r2
 8007546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800755c:	4413      	add	r3, r2
 800755e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d116      	bne.n	800759c <USB_EPStartXfer+0x118c>
 800756e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e064      	b.n	8007666 <USB_EPStartXfer+0x1256>
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a0:	2b3e      	cmp	r3, #62	; 0x3e
 80075a2:	d818      	bhi.n	80075d6 <USB_EPStartXfer+0x11c6>
 80075a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a8:	085b      	lsrs	r3, r3, #1
 80075aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <USB_EPStartXfer+0x11b4>
 80075ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075be:	3301      	adds	r3, #1
 80075c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e047      	b.n	8007666 <USB_EPStartXfer+0x1256>
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <USB_EPStartXfer+0x11e6>
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f0:	3b01      	subs	r3, #1
 80075f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	b29b      	uxth	r3, r3
 8007600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007608:	b29a      	uxth	r2, r3
 800760a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e029      	b.n	8007666 <USB_EPStartXfer+0x1256>
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d121      	bne.n	8007666 <USB_EPStartXfer+0x1256>
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007638:	4413      	add	r3, r2
 800763a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	011a      	lsls	r2, r3, #4
 800764c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007650:	4413      	add	r3, r2
 8007652:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800765a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	895b      	ldrh	r3, [r3, #10]
 8007672:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6959      	ldr	r1, [r3, #20]
 8007682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007686:	b29b      	uxth	r3, r3
 8007688:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800768c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007690:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007694:	6800      	ldr	r0, [r0, #0]
 8007696:	f000 fe1c 	bl	80082d2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076bc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c8:	8013      	strh	r3, [r2, #0]
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80076d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076d6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076da:	8812      	ldrh	r2, [r2, #0]
 80076dc:	f082 0210 	eor.w	r2, r2, #16
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80076ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076ee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	f082 0220 	eor.w	r2, r2, #32
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007718:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772e:	b29b      	uxth	r3, r3
 8007730:	8013      	strh	r3, [r2, #0]
 8007732:	f000 bc9f 	b.w	8008074 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	7b1b      	ldrb	r3, [r3, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 80ae 	bne.w	80078a4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	429a      	cmp	r2, r3
 8007762:	d917      	bls.n	8007794 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	1ad2      	subs	r2, r2, r3
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	619a      	str	r2, [r3, #24]
 8007792:	e00e      	b.n	80077b2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80077a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d6:	4413      	add	r3, r2
 80077d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	011a      	lsls	r2, r3, #4
 80077ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ee:	4413      	add	r3, r2
 80077f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <USB_EPStartXfer+0x141e>
 8007800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780c:	b29a      	uxth	r2, r3
 800780e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e3e8      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	2b3e      	cmp	r3, #62	; 0x3e
 8007834:	d818      	bhi.n	8007868 <USB_EPStartXfer+0x1458>
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	085b      	lsrs	r3, r3, #1
 800783c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <USB_EPStartXfer+0x1446>
 800784c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007850:	3301      	adds	r3, #1
 8007852:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007856:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800785a:	b29b      	uxth	r3, r3
 800785c:	029b      	lsls	r3, r3, #10
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e3cb      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <USB_EPStartXfer+0x1478>
 800787e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007882:	3b01      	subs	r3, #1
 8007884:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007888:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800788c:	b29b      	uxth	r3, r3
 800788e:	029b      	lsls	r3, r3, #10
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	e3ad      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	78db      	ldrb	r3, [r3, #3]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	f040 8200 	bne.w	8007cb6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 8091 	bne.w	80079ea <USB_EPStartXfer+0x15da>
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078ec:	4413      	add	r3, r2
 80078ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	011a      	lsls	r2, r3, #4
 8007900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007904:	4413      	add	r3, r2
 8007906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800790a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d116      	bne.n	800794c <USB_EPStartXfer+0x153c>
 800791e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e083      	b.n	8007a54 <USB_EPStartXfer+0x1644>
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b3e      	cmp	r3, #62	; 0x3e
 800795a:	d820      	bhi.n	800799e <USB_EPStartXfer+0x158e>
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <USB_EPStartXfer+0x157c>
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007986:	3301      	adds	r3, #1
 8007988:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	b29b      	uxth	r3, r3
 8007992:	029b      	lsls	r3, r3, #10
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800799a:	801a      	strh	r2, [r3, #0]
 800799c:	e05a      	b.n	8007a54 <USB_EPStartXfer+0x1644>
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <USB_EPStartXfer+0x15be>
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c8:	3b01      	subs	r3, #1
 80079ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	029b      	lsls	r3, r3, #10
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	e034      	b.n	8007a54 <USB_EPStartXfer+0x1644>
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d12c      	bne.n	8007a54 <USB_EPStartXfer+0x1644>
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a1e:	4413      	add	r3, r2
 8007a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	011a      	lsls	r2, r3, #4
 8007a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a36:	4413      	add	r3, r2
 8007a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 8091 	bne.w	8007b96 <USB_EPStartXfer+0x1786>
 8007a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a98:	4413      	add	r3, r2
 8007a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	011a      	lsls	r2, r3, #4
 8007aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d116      	bne.n	8007af8 <USB_EPStartXfer+0x16e8>
 8007aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e07c      	b.n	8007bf2 <USB_EPStartXfer+0x17e2>
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b3e      	cmp	r3, #62	; 0x3e
 8007b06:	d820      	bhi.n	8007b4a <USB_EPStartXfer+0x173a>
 8007b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <USB_EPStartXfer+0x1728>
 8007b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b32:	3301      	adds	r3, #1
 8007b34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	029b      	lsls	r3, r3, #10
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	e053      	b.n	8007bf2 <USB_EPStartXfer+0x17e2>
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <USB_EPStartXfer+0x176a>
 8007b70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b74:	3b01      	subs	r3, #1
 8007b76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	029b      	lsls	r3, r3, #10
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	e02d      	b.n	8007bf2 <USB_EPStartXfer+0x17e2>
 8007b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d125      	bne.n	8007bf2 <USB_EPStartXfer+0x17e2>
 8007ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	011a      	lsls	r2, r3, #4
 8007bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bf0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 81fe 	beq.w	8008000 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c24:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <USB_EPStartXfer+0x182c>
 8007c30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10d      	bne.n	8007c58 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 81db 	bne.w	8008000 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c4a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 81d4 	bne.w	8008000 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	441a      	add	r2, r3
 8007c9c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]
 8007cb4:	e1a4      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	78db      	ldrb	r3, [r3, #3]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	f040 819a 	bne.w	8007ffc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d917      	bls.n	8007d14 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	1ad2      	subs	r2, r2, r3
 8007d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	619a      	str	r2, [r3, #24]
 8007d12:	e00e      	b.n	8007d32 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d178      	bne.n	8007e34 <USB_EPStartXfer+0x1a24>
 8007d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d66:	4413      	add	r3, r2
 8007d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	011a      	lsls	r2, r3, #4
 8007d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d7e:	4413      	add	r3, r2
 8007d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d116      	bne.n	8007dbe <USB_EPStartXfer+0x19ae>
 8007d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da2:	801a      	strh	r2, [r3, #0]
 8007da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	e06b      	b.n	8007e96 <USB_EPStartXfer+0x1a86>
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8007dc4:	d818      	bhi.n	8007df8 <USB_EPStartXfer+0x19e8>
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <USB_EPStartXfer+0x19d6>
 8007ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de0:	3301      	adds	r3, #1
 8007de2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	029b      	lsls	r3, r3, #10
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	e04e      	b.n	8007e96 <USB_EPStartXfer+0x1a86>
 8007df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d104      	bne.n	8007e18 <USB_EPStartXfer+0x1a08>
 8007e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e12:	3b01      	subs	r3, #1
 8007e14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	029b      	lsls	r3, r3, #10
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e030      	b.n	8007e96 <USB_EPStartXfer+0x1a86>
 8007e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d128      	bne.n	8007e96 <USB_EPStartXfer+0x1a86>
 8007e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	4413      	add	r3, r2
 8007e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	011a      	lsls	r2, r3, #4
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	4413      	add	r3, r2
 8007e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d178      	bne.n	8007fa6 <USB_EPStartXfer+0x1b96>
 8007eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	4413      	add	r3, r2
 8007eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	011a      	lsls	r2, r3, #4
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d116      	bne.n	8007f30 <USB_EPStartXfer+0x1b20>
 8007f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f14:	801a      	strh	r2, [r3, #0]
 8007f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	e067      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
 8007f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f34:	2b3e      	cmp	r3, #62	; 0x3e
 8007f36:	d818      	bhi.n	8007f6a <USB_EPStartXfer+0x1b5a>
 8007f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <USB_EPStartXfer+0x1b48>
 8007f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f52:	3301      	adds	r3, #1
 8007f54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	029b      	lsls	r3, r3, #10
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f66:	801a      	strh	r2, [r3, #0]
 8007f68:	e04a      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
 8007f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <USB_EPStartXfer+0x1b7a>
 8007f80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f84:	3b01      	subs	r3, #1
 8007f86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	029b      	lsls	r3, r3, #10
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	e02c      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d124      	bne.n	8008000 <USB_EPStartXfer+0x1bf0>
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fcc:	4413      	add	r3, r2
 8007fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	011a      	lsls	r2, r3, #4
 8007fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	e001      	b.n	8008000 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e03a      	b.n	8008076 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008026:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800802a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800802e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008032:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008036:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800803a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800803e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	441a      	add	r2, r3
 800805c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800806c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008070:	b29b      	uxth	r3, r3
 8008072:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a8:	81bb      	strh	r3, [r7, #12]
 80080aa:	89bb      	ldrh	r3, [r7, #12]
 80080ac:	f083 0310 	eor.w	r3, r3, #16
 80080b0:	81bb      	strh	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	441a      	add	r2, r3
 80080bc:	89bb      	ldrh	r3, [r7, #12]
 80080be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	8013      	strh	r3, [r2, #0]
 80080d2:	e01f      	b.n	8008114 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	81fb      	strh	r3, [r7, #14]
 80080ec:	89fb      	ldrh	r3, [r7, #14]
 80080ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080f2:	81fb      	strh	r3, [r7, #14]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	89fb      	ldrh	r3, [r7, #14]
 8008100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008110:	b29b      	uxth	r3, r3
 8008112:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	7b1b      	ldrb	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 809d 	bne.w	800826e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d04c      	beq.n	80081d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	823b      	strh	r3, [r7, #16]
 800814a:	8a3b      	ldrh	r3, [r7, #16]
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <USB_EPClearStall+0x6c>
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	81fb      	strh	r3, [r7, #14]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	89fb      	ldrh	r3, [r7, #14]
 8008178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008188:	b29b      	uxth	r3, r3
 800818a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	78db      	ldrb	r3, [r3, #3]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d06c      	beq.n	800826e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081aa:	81bb      	strh	r3, [r7, #12]
 80081ac:	89bb      	ldrh	r3, [r7, #12]
 80081ae:	f083 0320 	eor.w	r3, r3, #32
 80081b2:	81bb      	strh	r3, [r7, #12]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	441a      	add	r2, r3
 80081be:	89bb      	ldrh	r3, [r7, #12]
 80081c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	8013      	strh	r3, [r2, #0]
 80081d4:	e04b      	b.n	800826e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	82fb      	strh	r3, [r7, #22]
 80081e4:	8afb      	ldrh	r3, [r7, #22]
 80081e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01b      	beq.n	8008226 <USB_EPClearStall+0x106>
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008204:	82bb      	strh	r3, [r7, #20]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	8abb      	ldrh	r3, [r7, #20]
 8008212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800821e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008222:	b29b      	uxth	r3, r3
 8008224:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823c:	827b      	strh	r3, [r7, #18]
 800823e:	8a7b      	ldrh	r3, [r7, #18]
 8008240:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008244:	827b      	strh	r3, [r7, #18]
 8008246:	8a7b      	ldrh	r3, [r7, #18]
 8008248:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800824c:	827b      	strh	r3, [r7, #18]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	8a7b      	ldrh	r3, [r7, #18]
 800825a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d103      	bne.n	8008294 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2280      	movs	r2, #128	; 0x80
 8008290:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b08d      	sub	sp, #52	; 0x34
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	4611      	mov	r1, r2
 80082de:	461a      	mov	r2, r3
 80082e0:	460b      	mov	r3, r1
 80082e2:	80fb      	strh	r3, [r7, #6]
 80082e4:	4613      	mov	r3, r2
 80082e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082e8:	88bb      	ldrh	r3, [r7, #4]
 80082ea:	3301      	adds	r3, #1
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	005a      	lsls	r2, r3, #1
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830a:	e01e      	b.n	800834a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	3301      	adds	r3, #1
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	b29b      	uxth	r3, r3
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	b29a      	uxth	r2, r3
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	3302      	adds	r3, #2
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	3302      	adds	r3, #2
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	3301      	adds	r3, #1
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	3b01      	subs	r3, #1
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1dd      	bne.n	800830c <USB_WritePMA+0x3a>
  }
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	3734      	adds	r7, #52	; 0x34
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800835c:	b480      	push	{r7}
 800835e:	b08b      	sub	sp, #44	; 0x2c
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	460b      	mov	r3, r1
 800836c:	80fb      	strh	r3, [r7, #6]
 800836e:	4613      	mov	r3, r2
 8008370:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008372:	88bb      	ldrh	r3, [r7, #4]
 8008374:	085b      	lsrs	r3, r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	005a      	lsls	r2, r3, #1
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800838e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	627b      	str	r3, [r7, #36]	; 0x24
 8008394:	e01b      	b.n	80083ce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	3302      	adds	r3, #2
 80083a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	3301      	adds	r3, #1
 80083b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	0a1b      	lsrs	r3, r3, #8
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	3302      	adds	r3, #2
 80083c6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	3b01      	subs	r3, #1
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e0      	bne.n	8008396 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083d4:	88bb      	ldrh	r3, [r7, #4]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	701a      	strb	r2, [r3, #0]
  }
}
 80083f0:	bf00      	nop
 80083f2:	372c      	adds	r7, #44	; 0x2c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800840a:	2302      	movs	r3, #2
 800840c:	2203      	movs	r2, #3
 800840e:	2181      	movs	r1, #129	; 0x81
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fcfc 	bl	8009e0e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800841c:	2302      	movs	r3, #2
 800841e:	2203      	movs	r2, #3
 8008420:	2101      	movs	r1, #1
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fcf3 	bl	8009e0e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8008430:	2024      	movs	r0, #36	; 0x24
 8008432:	f001 fe01 	bl	800a038 <USBD_static_malloc>
 8008436:	4602      	mov	r2, r0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008444:	2b00      	cmp	r3, #0
 8008446:	d102      	bne.n	800844e <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e012      	b.n	8008474 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008454:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	230d      	movs	r3, #13
 800846c:	2101      	movs	r1, #1
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fdbe 	bl	8009ff0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008474:	7bfb      	ldrb	r3, [r7, #15]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800848a:	2181      	movs	r1, #129	; 0x81
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fce4 	bl	8009e5a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008498:	2101      	movs	r1, #1
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fcdd 	bl	8009e5a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 fdc4 	bl	800a050 <USBD_static_free>
    pdev->pClassData = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084ec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008506:	2b00      	cmp	r3, #0
 8008508:	d051      	beq.n	80085ae <USBD_CUSTOM_HID_Setup+0xd2>
 800850a:	2b20      	cmp	r3, #32
 800850c:	f040 80d8 	bne.w	80086c0 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	3b02      	subs	r3, #2
 8008516:	2b09      	cmp	r3, #9
 8008518:	d841      	bhi.n	800859e <USBD_CUSTOM_HID_Setup+0xc2>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <USBD_CUSTOM_HID_Setup+0x44>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008579 	.word	0x08008579
 8008524:	08008557 	.word	0x08008557
 8008528:	0800859f 	.word	0x0800859f
 800852c:	0800859f 	.word	0x0800859f
 8008530:	0800859f 	.word	0x0800859f
 8008534:	0800859f 	.word	0x0800859f
 8008538:	0800859f 	.word	0x0800859f
 800853c:	08008589 	.word	0x08008589
 8008540:	08008567 	.word	0x08008567
 8008544:	08008549 	.word	0x08008549
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	611a      	str	r2, [r3, #16]
      break;
 8008554:	e02a      	b.n	80085ac <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3310      	adds	r3, #16
 800855a:	2201      	movs	r2, #1
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 f92b 	bl	80097ba <USBD_CtlSendData>
      break;
 8008564:	e022      	b.n	80085ac <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	0a1b      	lsrs	r3, r3, #8
 800856c:	b29b      	uxth	r3, r3
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	615a      	str	r2, [r3, #20]
      break;
 8008576:	e019      	b.n	80085ac <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3314      	adds	r3, #20
 800857c:	2201      	movs	r2, #1
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f91a 	bl	80097ba <USBD_CtlSendData>
      break;
 8008586:	e011      	b.n	80085ac <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2201      	movs	r2, #1
 800858c:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 800858e:	6939      	ldr	r1, [r7, #16]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	461a      	mov	r2, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f93d 	bl	8009816 <USBD_CtlPrepareRx>
      break;
 800859c:	e006      	b.n	80085ac <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f8a0 	bl	80096e6 <USBD_CtlError>
      ret = USBD_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	75fb      	strb	r3, [r7, #23]
      break;
 80085aa:	bf00      	nop
    }
    break;
 80085ac:	e08f      	b.n	80086ce <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b0b      	cmp	r3, #11
 80085b4:	d87c      	bhi.n	80086b0 <USBD_CUSTOM_HID_Setup+0x1d4>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <USBD_CUSTOM_HID_Setup+0xe0>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	080086b1 	.word	0x080086b1
 80085c4:	080086b1 	.word	0x080086b1
 80085c8:	080086b1 	.word	0x080086b1
 80085cc:	080086b1 	.word	0x080086b1
 80085d0:	080086b1 	.word	0x080086b1
 80085d4:	08008615 	.word	0x08008615
 80085d8:	080086b1 	.word	0x080086b1
 80085dc:	080086b1 	.word	0x080086b1
 80085e0:	080086b1 	.word	0x080086b1
 80085e4:	08008663 	.word	0x08008663
 80085e8:	0800868b 	.word	0x0800868b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d107      	bne.n	8008606 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80085f6:	f107 030e 	add.w	r3, r7, #14
 80085fa:	2202      	movs	r2, #2
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 f8db 	bl	80097ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008604:	e05b      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f86c 	bl	80096e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800860e:	2302      	movs	r3, #2
 8008610:	75fb      	strb	r3, [r7, #23]
      break;
 8008612:	e054      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	885b      	ldrh	r3, [r3, #2]
 8008618:	0a1b      	lsrs	r3, r3, #8
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b22      	cmp	r3, #34	; 0x22
 800861e:	d10b      	bne.n	8008638 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	2b41      	cmp	r3, #65	; 0x41
 8008626:	bf28      	it	cs
 8008628:	2341      	movcs	r3, #65	; 0x41
 800862a:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	e00d      	b.n	8008654 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	885b      	ldrh	r3, [r3, #2]
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b21      	cmp	r3, #33	; 0x21
 8008642:	d107      	bne.n	8008654 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8008644:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008646:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	88db      	ldrh	r3, [r3, #6]
 800864c:	2b09      	cmp	r3, #9
 800864e:	bf28      	it	cs
 8008650:	2309      	movcs	r3, #9
 8008652:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8008654:	8bfb      	ldrh	r3, [r7, #30]
 8008656:	461a      	mov	r2, r3
 8008658:	69b9      	ldr	r1, [r7, #24]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 f8ad 	bl	80097ba <USBD_CtlSendData>
      break;
 8008660:	e02d      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008668:	2b03      	cmp	r3, #3
 800866a:	d107      	bne.n	800867c <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3318      	adds	r3, #24
 8008670:	2201      	movs	r2, #1
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f8a0 	bl	80097ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800867a:	e020      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f831 	bl	80096e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008684:	2302      	movs	r3, #2
 8008686:	75fb      	strb	r3, [r7, #23]
      break;
 8008688:	e019      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008690:	2b03      	cmp	r3, #3
 8008692:	d106      	bne.n	80086a2 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	885b      	ldrh	r3, [r3, #2]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80086a0:	e00d      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f81e 	bl	80096e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80086aa:	2302      	movs	r3, #2
 80086ac:	75fb      	strb	r3, [r7, #23]
      break;
 80086ae:	e006      	b.n	80086be <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 f817 	bl	80096e6 <USBD_CtlError>
      ret = USBD_FAIL;
 80086b8:	2302      	movs	r3, #2
 80086ba:	75fb      	strb	r3, [r7, #23]
      break;
 80086bc:	bf00      	nop
    }
    break;
 80086be:	e006      	b.n	80086ce <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f80f 	bl	80096e6 <USBD_CtlError>
    ret = USBD_FAIL;
 80086c8:	2302      	movs	r3, #2
 80086ca:	75fb      	strb	r3, [r7, #23]
    break;
 80086cc:	bf00      	nop
  }
  return ret;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3720      	adds	r7, #32
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	200000c8 	.word	0x200000c8

080086dc <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086f0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d111      	bne.n	8008720 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	2181      	movs	r1, #129	; 0x81
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f001 fc48 	bl	8009faa <USBD_LL_Transmit>
 800871a:	e001      	b.n	8008720 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2229      	movs	r2, #41	; 0x29
 8008738:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800873a:	4b03      	ldr	r3, [pc, #12]	; (8008748 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	20000044 	.word	0x20000044

0800874c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2229      	movs	r2, #41	; 0x29
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000070 	.word	0x20000070

0800876c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2229      	movs	r2, #41	; 0x29
 8008778:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	2000009c 	.word	0x2000009c

0800878c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087c2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	7810      	ldrb	r0, [r2, #0]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	7852      	ldrb	r2, [r2, #1]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	230d      	movs	r3, #13
 80087dc:	2101      	movs	r1, #1
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fc06 	bl	8009ff0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087fc:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10c      	bne.n	8008820 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	7810      	ldrb	r0, [r2, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	7852      	ldrb	r2, [r2, #1]
 8008816:	4611      	mov	r1, r2
 8008818:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220a      	movs	r2, #10
 8008838:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800883a:	4b03      	ldr	r3, [pc, #12]	; (8008848 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	200000d4 	.word	0x200000d4

0800884c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	e01a      	b.n	80088c6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	79fa      	ldrb	r2, [r7, #7]
 80088bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f001 fa3a 	bl	8009d38 <USBD_LL_Init>

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b085      	sub	sp, #20
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
 80088ee:	e001      	b.n	80088f4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088f0:	2302      	movs	r3, #2
 80088f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fa65 	bl	8009dd8 <USBD_LL_Start>

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr

0800892c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008938:	2302      	movs	r3, #2
 800893a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	4611      	mov	r1, r2
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	4611      	mov	r1, r2
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fe63 	bl	800966e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d016      	beq.n	80089fa <USBD_LL_SetupStage+0x6a>
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d81c      	bhi.n	8008a0a <USBD_LL_SetupStage+0x7a>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <USBD_LL_SetupStage+0x4a>
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d008      	beq.n	80089ea <USBD_LL_SetupStage+0x5a>
 80089d8:	e017      	b.n	8008a0a <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9c6 	bl	8008d74 <USBD_StdDevReq>
    break;
 80089e8:	e01a      	b.n	8008a20 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa28 	bl	8008e48 <USBD_StdItfReq>
    break;
 80089f8:	e012      	b.n	8008a20 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa68 	bl	8008ed8 <USBD_StdEPReq>
    break;
 8008a08:	e00a      	b.n	8008a20 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008a10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 fa3d 	bl	8009e98 <USBD_LL_StallEP>
    break;
 8008a1e:	bf00      	nop
  }

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	460b      	mov	r3, r1
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d14b      	bne.n	8008ad6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008a44:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d134      	bne.n	8008aba <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d919      	bls.n	8008a90 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d203      	bcs.n	8008a7e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	e002      	b.n	8008a84 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fee2 	bl	8009852 <USBD_CtlContinueRx>
 8008a8e:	e038      	b.n	8008b02 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d105      	bne.n	8008ab2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fedf 	bl	8009876 <USBD_CtlSendStatus>
 8008ab8:	e023      	b.n	8008b02 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	d11e      	bne.n	8008b02 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008acc:	2100      	movs	r1, #0
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f001 f9e2 	bl	8009e98 <USBD_LL_StallEP>
 8008ad4:	e015      	b.n	8008b02 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00d      	beq.n	8008afe <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d108      	bne.n	8008afe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	7afa      	ldrb	r2, [r7, #11]
 8008af6:	4611      	mov	r1, r2
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	4798      	blx	r3
 8008afc:	e001      	b.n	8008b02 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008afe:	2302      	movs	r3, #2
 8008b00:	e000      	b.n	8008b04 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	460b      	mov	r3, r1
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d17f      	bne.n	8008c20 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3314      	adds	r3, #20
 8008b24:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d15c      	bne.n	8008bea <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d915      	bls.n	8008b68 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fe4c 	bl	80097f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f001 fa45 	bl	8009ff0 <USBD_LL_PrepareReceive>
 8008b66:	e04e      	b.n	8008c06 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	6912      	ldr	r2, [r2, #16]
 8008b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b74:	fb01 f202 	mul.w	r2, r1, r2
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d11c      	bne.n	8008bb8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d316      	bcc.n	8008bb8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d20f      	bcs.n	8008bb8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fe28 	bl	80097f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008baa:	2300      	movs	r3, #0
 8008bac:	2200      	movs	r2, #0
 8008bae:	2100      	movs	r1, #0
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f001 fa1d 	bl	8009ff0 <USBD_LL_PrepareReceive>
 8008bb6:	e026      	b.n	8008c06 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d105      	bne.n	8008bda <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bda:	2180      	movs	r1, #128	; 0x80
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 f95b 	bl	8009e98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fe5a 	bl	800989c <USBD_CtlReceiveStatus>
 8008be8:	e00d      	b.n	8008c06 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d004      	beq.n	8008bfe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bfe:	2180      	movs	r1, #128	; 0x80
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f001 f949 	bl	8009e98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d11d      	bne.n	8008c4c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f7ff fe81 	bl	8008918 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008c1e:	e015      	b.n	8008c4c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00d      	beq.n	8008c48 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d108      	bne.n	8008c48 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	7afa      	ldrb	r2, [r7, #11]
 8008c40:	4611      	mov	r1, r2
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	4798      	blx	r3
 8008c46:	e001      	b.n	8008c4c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e000      	b.n	8008c4e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	2200      	movs	r2, #0
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f8d2 	bl	8009e0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2240      	movs	r2, #64	; 0x40
 8008c76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c7a:	2340      	movs	r3, #64	; 0x40
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f8c4 	bl	8009e0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6852      	ldr	r2, [r2, #4]
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	4611      	mov	r1, r2
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
  }

  return USBD_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bc80      	pop	{r7}
 8008d1c:	4770      	bx	lr

08008d1e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b083      	sub	sp, #12
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr

08008d3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d10b      	bne.n	8008d68 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d005      	beq.n	8008d9a <USBD_StdDevReq+0x26>
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d84f      	bhi.n	8008e32 <USBD_StdDevReq+0xbe>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <USBD_StdDevReq+0x36>
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d14b      	bne.n	8008e32 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	4798      	blx	r3
    break;
 8008da8:	e048      	b.n	8008e3c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	785b      	ldrb	r3, [r3, #1]
 8008dae:	2b09      	cmp	r3, #9
 8008db0:	d839      	bhi.n	8008e26 <USBD_StdDevReq+0xb2>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBD_StdDevReq+0x44>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008e09 	.word	0x08008e09
 8008dbc:	08008e1d 	.word	0x08008e1d
 8008dc0:	08008e27 	.word	0x08008e27
 8008dc4:	08008e13 	.word	0x08008e13
 8008dc8:	08008e27 	.word	0x08008e27
 8008dcc:	08008deb 	.word	0x08008deb
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008e27 	.word	0x08008e27
 8008dd8:	08008dff 	.word	0x08008dff
 8008ddc:	08008df5 	.word	0x08008df5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9da 	bl	800919c <USBD_GetDescriptor>
      break;
 8008de8:	e022      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 facf 	bl	8009390 <USBD_SetAddress>
      break;
 8008df2:	e01d      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fb0e 	bl	8009418 <USBD_SetConfig>
      break;
 8008dfc:	e018      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb97 	bl	8009534 <USBD_GetConfig>
      break;
 8008e06:	e013      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fbc7 	bl	800959e <USBD_GetStatus>
      break;
 8008e10:	e00e      	b.n	8008e30 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fbf5 	bl	8009604 <USBD_SetFeature>
      break;
 8008e1a:	e009      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc04 	bl	800962c <USBD_ClrFeature>
      break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc5c 	bl	80096e6 <USBD_CtlError>
      break;
 8008e2e:	bf00      	nop
    }
    break;
 8008e30:	e004      	b.n	8008e3c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc56 	bl	80096e6 <USBD_CtlError>
    break;
 8008e3a:	bf00      	nop
  }

  return ret;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop

08008e48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	d005      	beq.n	8008e6e <USBD_StdItfReq+0x26>
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d82e      	bhi.n	8008ec4 <USBD_StdItfReq+0x7c>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <USBD_StdItfReq+0x26>
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d12a      	bne.n	8008ec4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e74:	3b01      	subs	r3, #1
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d81d      	bhi.n	8008eb6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	889b      	ldrh	r3, [r3, #4]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d813      	bhi.n	8008eac <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	88db      	ldrh	r3, [r3, #6]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d110      	bne.n	8008ec0 <USBD_StdItfReq+0x78>
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10d      	bne.n	8008ec0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fce6 	bl	8009876 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008eaa:	e009      	b.n	8008ec0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc19 	bl	80096e6 <USBD_CtlError>
      break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc14 	bl	80096e6 <USBD_CtlError>
      break;
 8008ebe:	e000      	b.n	8008ec2 <USBD_StdItfReq+0x7a>
      break;
 8008ec0:	bf00      	nop
    }
    break;
 8008ec2:	e004      	b.n	8008ece <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc0d 	bl	80096e6 <USBD_CtlError>
    break;
 8008ecc:	bf00      	nop
  }

  return USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	889b      	ldrh	r3, [r3, #4]
 8008eea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ef4:	2b40      	cmp	r3, #64	; 0x40
 8008ef6:	d007      	beq.n	8008f08 <USBD_StdEPReq+0x30>
 8008ef8:	2b40      	cmp	r3, #64	; 0x40
 8008efa:	f200 8144 	bhi.w	8009186 <USBD_StdEPReq+0x2ae>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <USBD_StdEPReq+0x40>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	f040 813f 	bne.w	8009186 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
    break;
 8008f16:	e13b      	b.n	8009190 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	d10a      	bne.n	8008f3a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	e12b      	b.n	8009192 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	785b      	ldrb	r3, [r3, #1]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d007      	beq.n	8008f52 <USBD_StdEPReq+0x7a>
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	f300 8119 	bgt.w	800917a <USBD_StdEPReq+0x2a2>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d072      	beq.n	8009032 <USBD_StdEPReq+0x15a>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d03a      	beq.n	8008fc6 <USBD_StdEPReq+0xee>
 8008f50:	e113      	b.n	800917a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d002      	beq.n	8008f62 <USBD_StdEPReq+0x8a>
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d015      	beq.n	8008f8c <USBD_StdEPReq+0xb4>
 8008f60:	e02b      	b.n	8008fba <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00c      	beq.n	8008f82 <USBD_StdEPReq+0xaa>
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	d009      	beq.n	8008f82 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 ff90 	bl	8009e98 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f78:	2180      	movs	r1, #128	; 0x80
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 ff8c 	bl	8009e98 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f80:	e020      	b.n	8008fc4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fbae 	bl	80096e6 <USBD_CtlError>
        break;
 8008f8a:	e01b      	b.n	8008fc4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10e      	bne.n	8008fb2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <USBD_StdEPReq+0xda>
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b80      	cmp	r3, #128	; 0x80
 8008f9e:	d008      	beq.n	8008fb2 <USBD_StdEPReq+0xda>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	88db      	ldrh	r3, [r3, #6]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 ff73 	bl	8009e98 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fc5f 	bl	8009876 <USBD_CtlSendStatus>

        break;
 8008fb8:	e004      	b.n	8008fc4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fb92 	bl	80096e6 <USBD_CtlError>
        break;
 8008fc2:	bf00      	nop
      }
      break;
 8008fc4:	e0de      	b.n	8009184 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d002      	beq.n	8008fd6 <USBD_StdEPReq+0xfe>
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d015      	beq.n	8009000 <USBD_StdEPReq+0x128>
 8008fd4:	e026      	b.n	8009024 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00c      	beq.n	8008ff6 <USBD_StdEPReq+0x11e>
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b80      	cmp	r3, #128	; 0x80
 8008fe0:	d009      	beq.n	8008ff6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 ff56 	bl	8009e98 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008fec:	2180      	movs	r1, #128	; 0x80
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 ff52 	bl	8009e98 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ff4:	e01c      	b.n	8009030 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fb74 	bl	80096e6 <USBD_CtlError>
        break;
 8008ffe:	e017      	b.n	8009030 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	885b      	ldrh	r3, [r3, #2]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d112      	bne.n	800902e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 ff5d 	bl	8009ed6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc2a 	bl	8009876 <USBD_CtlSendStatus>
        }
        break;
 8009022:	e004      	b.n	800902e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fb5d 	bl	80096e6 <USBD_CtlError>
        break;
 800902c:	e000      	b.n	8009030 <USBD_StdEPReq+0x158>
        break;
 800902e:	bf00      	nop
      }
      break;
 8009030:	e0a8      	b.n	8009184 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009038:	2b02      	cmp	r3, #2
 800903a:	d002      	beq.n	8009042 <USBD_StdEPReq+0x16a>
 800903c:	2b03      	cmp	r3, #3
 800903e:	d031      	beq.n	80090a4 <USBD_StdEPReq+0x1cc>
 8009040:	e095      	b.n	800916e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <USBD_StdEPReq+0x180>
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b80      	cmp	r3, #128	; 0x80
 800904c:	d004      	beq.n	8009058 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fb48 	bl	80096e6 <USBD_CtlError>
          break;
 8009056:	e08f      	b.n	8009178 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	da0b      	bge.n	8009078 <USBD_StdEPReq+0x1a0>
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	3310      	adds	r3, #16
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4413      	add	r3, r2
 8009074:	3304      	adds	r3, #4
 8009076:	e00a      	b.n	800908e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2202      	movs	r2, #2
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fb8c 	bl	80097ba <USBD_CtlSendData>
          break;
 80090a2:	e069      	b.n	8009178 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80090a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	da11      	bge.n	80090d0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	f003 020f 	and.w	r2, r3, #15
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	3318      	adds	r3, #24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d117      	bne.n	80090f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fb0c 	bl	80096e6 <USBD_CtlError>
            break;
 80090ce:	e053      	b.n	8009178 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	f003 020f 	and.w	r2, r3, #15
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d104      	bne.n	80090f6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 faf9 	bl	80096e6 <USBD_CtlError>
            break;
 80090f4:	e040      	b.n	8009178 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80090f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	da0b      	bge.n	8009116 <USBD_StdEPReq+0x23e>
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	3310      	adds	r3, #16
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	3304      	adds	r3, #4
 8009114:	e00a      	b.n	800912c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	4413      	add	r3, r2
 800912c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <USBD_StdEPReq+0x262>
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b80      	cmp	r3, #128	; 0x80
 8009138:	d103      	bne.n	8009142 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e00e      	b.n	8009160 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fee4 	bl	8009f14 <USBD_LL_IsStallEP>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2201      	movs	r2, #1
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e002      	b.n	8009160 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2202      	movs	r2, #2
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fb27 	bl	80097ba <USBD_CtlSendData>
          break;
 800916c:	e004      	b.n	8009178 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fab8 	bl	80096e6 <USBD_CtlError>
        break;
 8009176:	bf00      	nop
      }
      break;
 8009178:	e004      	b.n	8009184 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fab2 	bl	80096e6 <USBD_CtlError>
      break;
 8009182:	bf00      	nop
    }
    break;
 8009184:	e004      	b.n	8009190 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 faac 	bl	80096e6 <USBD_CtlError>
    break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	0a1b      	lsrs	r3, r3, #8
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	2b06      	cmp	r3, #6
 80091b2:	f200 80c9 	bhi.w	8009348 <USBD_GetDescriptor+0x1ac>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <USBD_GetDescriptor+0x20>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091d9 	.word	0x080091d9
 80091c0:	080091f1 	.word	0x080091f1
 80091c4:	08009231 	.word	0x08009231
 80091c8:	08009349 	.word	0x08009349
 80091cc:	08009349 	.word	0x08009349
 80091d0:	080092f5 	.word	0x080092f5
 80091d4:	0800931b 	.word	0x0800931b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 010a 	add.w	r1, r7, #10
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
    break;
 80091ee:	e0b0      	b.n	8009352 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7c1b      	ldrb	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10d      	bne.n	8009214 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f107 020a 	add.w	r2, r7, #10
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	2202      	movs	r2, #2
 8009210:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009212:	e09e      	b.n	8009352 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	f107 020a 	add.w	r2, r7, #10
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
 8009224:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3301      	adds	r3, #1
 800922a:	2202      	movs	r2, #2
 800922c:	701a      	strb	r2, [r3, #0]
    break;
 800922e:	e090      	b.n	8009352 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	885b      	ldrh	r3, [r3, #2]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b05      	cmp	r3, #5
 8009238:	d856      	bhi.n	80092e8 <USBD_GetDescriptor+0x14c>
 800923a:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBD_GetDescriptor+0xa4>)
 800923c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009240:	08009259 	.word	0x08009259
 8009244:	08009271 	.word	0x08009271
 8009248:	08009289 	.word	0x08009289
 800924c:	080092a1 	.word	0x080092a1
 8009250:	080092b9 	.word	0x080092b9
 8009254:	080092d1 	.word	0x080092d1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	7c12      	ldrb	r2, [r2, #16]
 8009264:	f107 010a 	add.w	r1, r7, #10
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
      break;
 800926e:	e040      	b.n	80092f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	7c12      	ldrb	r2, [r2, #16]
 800927c:	f107 010a 	add.w	r1, r7, #10
 8009280:	4610      	mov	r0, r2
 8009282:	4798      	blx	r3
 8009284:	60f8      	str	r0, [r7, #12]
      break;
 8009286:	e034      	b.n	80092f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 010a 	add.w	r1, r7, #10
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
      break;
 800929e:	e028      	b.n	80092f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	7c12      	ldrb	r2, [r2, #16]
 80092ac:	f107 010a 	add.w	r1, r7, #10
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	60f8      	str	r0, [r7, #12]
      break;
 80092b6:	e01c      	b.n	80092f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	7c12      	ldrb	r2, [r2, #16]
 80092c4:	f107 010a 	add.w	r1, r7, #10
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
 80092cc:	60f8      	str	r0, [r7, #12]
      break;
 80092ce:	e010      	b.n	80092f2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	7c12      	ldrb	r2, [r2, #16]
 80092dc:	f107 010a 	add.w	r1, r7, #10
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
      break;
 80092e6:	e004      	b.n	80092f2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f9fb 	bl	80096e6 <USBD_CtlError>
      return;
 80092f0:	e04b      	b.n	800938a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80092f2:	e02e      	b.n	8009352 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7c1b      	ldrb	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d109      	bne.n	8009310 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009304:	f107 020a 	add.w	r2, r7, #10
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
      break;
 800930e:	e020      	b.n	8009352 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9e7 	bl	80096e6 <USBD_CtlError>
      return;
 8009318:	e037      	b.n	800938a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7c1b      	ldrb	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10d      	bne.n	800933e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	f107 020a 	add.w	r2, r7, #10
 800932e:	4610      	mov	r0, r2
 8009330:	4798      	blx	r3
 8009332:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	2207      	movs	r2, #7
 800933a:	701a      	strb	r2, [r3, #0]
      break;
 800933c:	e009      	b.n	8009352 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9d0 	bl	80096e6 <USBD_CtlError>
      return;
 8009346:	e020      	b.n	800938a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f9cb 	bl	80096e6 <USBD_CtlError>
    return;
 8009350:	e01b      	b.n	800938a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009352:	897b      	ldrh	r3, [r7, #10]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d011      	beq.n	800937c <USBD_GetDescriptor+0x1e0>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	88db      	ldrh	r3, [r3, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00d      	beq.n	800937c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	88da      	ldrh	r2, [r3, #6]
 8009364:	897b      	ldrh	r3, [r7, #10]
 8009366:	4293      	cmp	r3, r2
 8009368:	bf28      	it	cs
 800936a:	4613      	movcs	r3, r2
 800936c:	b29b      	uxth	r3, r3
 800936e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009370:	897b      	ldrh	r3, [r7, #10]
 8009372:	461a      	mov	r2, r3
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa1f 	bl	80097ba <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	88db      	ldrh	r3, [r3, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa76 	bl	8009876 <USBD_CtlSendStatus>
  }
}
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d130      	bne.n	8009404 <USBD_SetAddress+0x74>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	88db      	ldrh	r3, [r3, #6]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d12c      	bne.n	8009404 <USBD_SetAddress+0x74>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	885b      	ldrh	r3, [r3, #2]
 80093ae:	2b7f      	cmp	r3, #127	; 0x7f
 80093b0:	d828      	bhi.n	8009404 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d104      	bne.n	80093d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f98b 	bl	80096e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d0:	e01d      	b.n	800940e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fdc4 	bl	8009f6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa46 	bl	8009876 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f8:	e009      	b.n	800940e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009402:	e004      	b.n	800940e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f96d 	bl	80096e6 <USBD_CtlError>
  }
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b41      	ldr	r3, [pc, #260]	; (8009530 <USBD_SetConfig+0x118>)
 800942a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800942c:	4b40      	ldr	r3, [pc, #256]	; (8009530 <USBD_SetConfig+0x118>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d904      	bls.n	800943e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f955 	bl	80096e6 <USBD_CtlError>
 800943c:	e075      	b.n	800952a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009444:	2b02      	cmp	r3, #2
 8009446:	d002      	beq.n	800944e <USBD_SetConfig+0x36>
 8009448:	2b03      	cmp	r3, #3
 800944a:	d023      	beq.n	8009494 <USBD_SetConfig+0x7c>
 800944c:	e062      	b.n	8009514 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800944e:	4b38      	ldr	r3, [pc, #224]	; (8009530 <USBD_SetConfig+0x118>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01a      	beq.n	800948c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009456:	4b36      	ldr	r3, [pc, #216]	; (8009530 <USBD_SetConfig+0x118>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2203      	movs	r2, #3
 8009464:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009468:	4b31      	ldr	r3, [pc, #196]	; (8009530 <USBD_SetConfig+0x118>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff fa5c 	bl	800892c <USBD_SetClassConfig>
 8009474:	4603      	mov	r3, r0
 8009476:	2b02      	cmp	r3, #2
 8009478:	d104      	bne.n	8009484 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f932 	bl	80096e6 <USBD_CtlError>
          return;
 8009482:	e052      	b.n	800952a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9f6 	bl	8009876 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800948a:	e04e      	b.n	800952a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9f2 	bl	8009876 <USBD_CtlSendStatus>
      break;
 8009492:	e04a      	b.n	800952a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009494:	4b26      	ldr	r3, [pc, #152]	; (8009530 <USBD_SetConfig+0x118>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d112      	bne.n	80094c2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80094a4:	4b22      	ldr	r3, [pc, #136]	; (8009530 <USBD_SetConfig+0x118>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80094ae:	4b20      	ldr	r3, [pc, #128]	; (8009530 <USBD_SetConfig+0x118>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff fa58 	bl	800896a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9db 	bl	8009876 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80094c0:	e033      	b.n	800952a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80094c2:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <USBD_SetConfig+0x118>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d01d      	beq.n	800950c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fa46 	bl	800896a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094de:	4b14      	ldr	r3, [pc, #80]	; (8009530 <USBD_SetConfig+0x118>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094e8:	4b11      	ldr	r3, [pc, #68]	; (8009530 <USBD_SetConfig+0x118>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fa1c 	bl	800892c <USBD_SetClassConfig>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d104      	bne.n	8009504 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f8f2 	bl	80096e6 <USBD_CtlError>
          return;
 8009502:	e012      	b.n	800952a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9b6 	bl	8009876 <USBD_CtlSendStatus>
      break;
 800950a:	e00e      	b.n	800952a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f9b2 	bl	8009876 <USBD_CtlSendStatus>
      break;
 8009512:	e00a      	b.n	800952a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8e5 	bl	80096e6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <USBD_SetConfig+0x118>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fa21 	bl	800896a <USBD_ClrClassConfig>
      break;
 8009528:	bf00      	nop
    }
  }
}
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	2000035c 	.word	0x2000035c

08009534 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	88db      	ldrh	r3, [r3, #6]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d004      	beq.n	8009550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8cc 	bl	80096e6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800954e:	e022      	b.n	8009596 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009556:	2b02      	cmp	r3, #2
 8009558:	dc02      	bgt.n	8009560 <USBD_GetConfig+0x2c>
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc03      	bgt.n	8009566 <USBD_GetConfig+0x32>
 800955e:	e015      	b.n	800958c <USBD_GetConfig+0x58>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d00b      	beq.n	800957c <USBD_GetConfig+0x48>
 8009564:	e012      	b.n	800958c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3308      	adds	r3, #8
 8009570:	2201      	movs	r2, #1
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f920 	bl	80097ba <USBD_CtlSendData>
      break;
 800957a:	e00c      	b.n	8009596 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	2201      	movs	r2, #1
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f918 	bl	80097ba <USBD_CtlSendData>
      break;
 800958a:	e004      	b.n	8009596 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f8a9 	bl	80096e6 <USBD_CtlError>
      break;
 8009594:	bf00      	nop
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d81e      	bhi.n	80095f2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d004      	beq.n	80095c6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f891 	bl	80096e6 <USBD_CtlError>
      break;
 80095c4:	e01a      	b.n	80095fc <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f043 0202 	orr.w	r2, r3, #2
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	330c      	adds	r3, #12
 80095e6:	2202      	movs	r2, #2
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f8e5 	bl	80097ba <USBD_CtlSendData>
    break;
 80095f0:	e004      	b.n	80095fc <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f876 	bl	80096e6 <USBD_CtlError>
    break;
 80095fa:	bf00      	nop
  }
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	885b      	ldrh	r3, [r3, #2]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d106      	bne.n	8009624 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f929 	bl	8009876 <USBD_CtlSendStatus>
  }

}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800963c:	3b01      	subs	r3, #1
 800963e:	2b02      	cmp	r3, #2
 8009640:	d80b      	bhi.n	800965a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d10c      	bne.n	8009664 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f90f 	bl	8009876 <USBD_CtlSendStatus>
    }
    break;
 8009658:	e004      	b.n	8009664 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f842 	bl	80096e6 <USBD_CtlError>
    break;
 8009662:	e000      	b.n	8009666 <USBD_ClrFeature+0x3a>
    break;
 8009664:	bf00      	nop
  }
}
 8009666:	bf00      	nop
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785a      	ldrb	r2, [r3, #1]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	3302      	adds	r3, #2
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b29a      	uxth	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	3303      	adds	r3, #3
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	b29b      	uxth	r3, r3
 800969c:	4413      	add	r3, r2
 800969e:	b29a      	uxth	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	3304      	adds	r3, #4
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	3305      	adds	r3, #5
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	4413      	add	r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	3306      	adds	r3, #6
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	3307      	adds	r3, #7
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	4413      	add	r3, r2
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	80da      	strh	r2, [r3, #6]

}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80096f0:	2180      	movs	r1, #128	; 0x80
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fbd0 	bl	8009e98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80096f8:	2100      	movs	r1, #0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fbcc 	bl	8009e98 <USBD_LL_StallEP>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d032      	beq.n	8009784 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 f834 	bl	800978c <USBD_GetLen>
 8009724:	4603      	mov	r3, r0
 8009726:	3301      	adds	r3, #1
 8009728:	b29b      	uxth	r3, r3
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	75fa      	strb	r2, [r7, #23]
 8009738:	461a      	mov	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	4413      	add	r3, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	75fa      	strb	r2, [r7, #23]
 800974a:	461a      	mov	r2, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4413      	add	r3, r2
 8009750:	2203      	movs	r2, #3
 8009752:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009754:	e012      	b.n	800977c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	60fa      	str	r2, [r7, #12]
 800975c:	7dfa      	ldrb	r2, [r7, #23]
 800975e:	1c51      	adds	r1, r2, #1
 8009760:	75f9      	strb	r1, [r7, #23]
 8009762:	4611      	mov	r1, r2
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	440a      	add	r2, r1
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	75fa      	strb	r2, [r7, #23]
 8009772:	461a      	mov	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4413      	add	r3, r2
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e8      	bne.n	8009756 <USBD_GetString+0x4e>
    }
  }
}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009798:	e005      	b.n	80097a6 <USBD_GetLen+0x1a>
    {
        len++;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	3301      	adds	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]
        buf++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3301      	adds	r3, #1
 80097a4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1f5      	bne.n	800979a <USBD_GetLen+0xe>
    }

    return len;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr

080097ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	4613      	mov	r3, r2
 80097c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80097d6:	88fa      	ldrh	r2, [r7, #6]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80097dc:	88fb      	ldrh	r3, [r7, #6]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	2100      	movs	r1, #0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fbe1 	bl	8009faa <USBD_LL_Transmit>

  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4613      	mov	r3, r2
 80097fe:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	2100      	movs	r1, #0
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fbcf 	bl	8009faa <USBD_LL_Transmit>

  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	4613      	mov	r3, r2
 8009822:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2203      	movs	r2, #3
 8009828:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800982c:	88fa      	ldrh	r2, [r7, #6]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800983c:	88fb      	ldrh	r3, [r7, #6]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	2100      	movs	r1, #0
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 fbd4 	bl	8009ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	4613      	mov	r3, r2
 800985e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	2100      	movs	r1, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 fbc2 	bl	8009ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2204      	movs	r2, #4
 8009882:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009886:	2300      	movs	r3, #0
 8009888:	2200      	movs	r2, #0
 800988a:	2100      	movs	r1, #0
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fb8c 	bl	8009faa <USBD_LL_Transmit>

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2205      	movs	r2, #5
 80098a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb9c 	bl	8009ff0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098c8:	2200      	movs	r2, #0
 80098ca:	4912      	ldr	r1, [pc, #72]	; (8009914 <MX_USB_DEVICE_Init+0x50>)
 80098cc:	4812      	ldr	r0, [pc, #72]	; (8009918 <MX_USB_DEVICE_Init+0x54>)
 80098ce:	f7fe ffd3 	bl	8008878 <USBD_Init>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098d8:	f7f7 fc2c 	bl	8001134 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80098dc:	490f      	ldr	r1, [pc, #60]	; (800991c <MX_USB_DEVICE_Init+0x58>)
 80098de:	480e      	ldr	r0, [pc, #56]	; (8009918 <MX_USB_DEVICE_Init+0x54>)
 80098e0:	f7fe fff5 	bl	80088ce <USBD_RegisterClass>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098ea:	f7f7 fc23 	bl	8001134 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80098ee:	490c      	ldr	r1, [pc, #48]	; (8009920 <MX_USB_DEVICE_Init+0x5c>)
 80098f0:	4809      	ldr	r0, [pc, #36]	; (8009918 <MX_USB_DEVICE_Init+0x54>)
 80098f2:	f7fe ffab 	bl	800884c <USBD_CUSTOM_HID_RegisterInterface>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098fc:	f7f7 fc1a 	bl	8001134 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009900:	4805      	ldr	r0, [pc, #20]	; (8009918 <MX_USB_DEVICE_Init+0x54>)
 8009902:	f7fe fffd 	bl	8008900 <USBD_Start>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800990c:	f7f7 fc12 	bl	8001134 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009910:	bf00      	nop
 8009912:	bd80      	pop	{r7, pc}
 8009914:	20000134 	.word	0x20000134
 8009918:	20000360 	.word	0x20000360
 800991c:	2000000c 	.word	0x2000000c
 8009920:	20000124 	.word	0x20000124

08009924 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800992a:	4618      	mov	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009932:	b480      	push	{r7}
 8009934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009938:	4618      	mov	r0, r3
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	460a      	mov	r2, r1
 800994a:	71fb      	strb	r3, [r7, #7]
 800994c:	4613      	mov	r3, r2
 800994e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009950:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr

0800995c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2212      	movs	r2, #18
 800996c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	bc80      	pop	{r7}
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	20000150 	.word	0x20000150

08009980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2204      	movs	r2, #4
 8009990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009992:	4b03      	ldr	r3, [pc, #12]	; (80099a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009994:	4618      	mov	r0, r3
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20000164 	.word	0x20000164

080099a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4907      	ldr	r1, [pc, #28]	; (80099d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099ba:	4808      	ldr	r0, [pc, #32]	; (80099dc <USBD_FS_ProductStrDescriptor+0x38>)
 80099bc:	f7ff fea4 	bl	8009708 <USBD_GetString>
 80099c0:	e004      	b.n	80099cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4904      	ldr	r1, [pc, #16]	; (80099d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80099c6:	4805      	ldr	r0, [pc, #20]	; (80099dc <USBD_FS_ProductStrDescriptor+0x38>)
 80099c8:	f7ff fe9e 	bl	8009708 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	200005fc 	.word	0x200005fc
 80099dc:	0800a148 	.word	0x0800a148

080099e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	4904      	ldr	r1, [pc, #16]	; (8009a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099f0:	4804      	ldr	r0, [pc, #16]	; (8009a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099f2:	f7ff fe89 	bl	8009708 <USBD_GetString>
  return USBD_StrDesc;
 80099f6:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200005fc 	.word	0x200005fc
 8009a04:	0800a168 	.word	0x0800a168

08009a08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	221a      	movs	r2, #26
 8009a18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a1a:	f000 f843 	bl	8009aa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a1e:	4b02      	ldr	r3, [pc, #8]	; (8009a28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000168 	.word	0x20000168

08009a2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	; (8009a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	; (8009a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a44:	f7ff fe60 	bl	8009708 <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	; (8009a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	; (8009a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a50:	f7ff fe5a 	bl	8009708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200005fc 	.word	0x200005fc
 8009a64:	0800a17c 	.word	0x0800a17c

08009a68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d105      	bne.n	8009a86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	4907      	ldr	r1, [pc, #28]	; (8009a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a7e:	4808      	ldr	r0, [pc, #32]	; (8009aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a80:	f7ff fe42 	bl	8009708 <USBD_GetString>
 8009a84:	e004      	b.n	8009a90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4904      	ldr	r1, [pc, #16]	; (8009a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a8a:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a8c:	f7ff fe3c 	bl	8009708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	200005fc 	.word	0x200005fc
 8009aa0:	0800a190 	.word	0x0800a190

08009aa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009aaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <Get_SerialNum+0x44>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <Get_SerialNum+0x48>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ab6:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <Get_SerialNum+0x4c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009aca:	2208      	movs	r2, #8
 8009acc:	4909      	ldr	r1, [pc, #36]	; (8009af4 <Get_SerialNum+0x50>)
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f814 	bl	8009afc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	4908      	ldr	r1, [pc, #32]	; (8009af8 <Get_SerialNum+0x54>)
 8009ad8:	68b8      	ldr	r0, [r7, #8]
 8009ada:	f000 f80f 	bl	8009afc <IntToUnicode>
  }
}
 8009ade:	bf00      	nop
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	1ff80050 	.word	0x1ff80050
 8009aec:	1ff80054 	.word	0x1ff80054
 8009af0:	1ff80058 	.word	0x1ff80058
 8009af4:	2000016a 	.word	0x2000016a
 8009af8:	2000017a 	.word	0x2000017a

08009afc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]
 8009b12:	e027      	b.n	8009b64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	0f1b      	lsrs	r3, r3, #28
 8009b18:	2b09      	cmp	r3, #9
 8009b1a:	d80b      	bhi.n	8009b34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	0f1b      	lsrs	r3, r3, #28
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4619      	mov	r1, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	440b      	add	r3, r1
 8009b2c:	3230      	adds	r2, #48	; 0x30
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	e00a      	b.n	8009b4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	0f1b      	lsrs	r3, r3, #28
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	440b      	add	r3, r1
 8009b44:	3237      	adds	r2, #55	; 0x37
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	3301      	adds	r3, #1
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	4413      	add	r3, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	3301      	adds	r3, #1
 8009b62:	75fb      	strb	r3, [r7, #23]
 8009b64:	7dfa      	ldrb	r2, [r7, #23]
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d3d3      	bcc.n	8009b14 <IntToUnicode+0x18>
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bc80      	pop	{r7}
 8009b76:	4770      	bx	lr

08009b78 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d106      	bne.n	8009b98 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009b8a:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009b96:	e005      	b.n	8009ba4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	4a04      	ldr	r2, [pc, #16]	; (8009bb0 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	6053      	str	r3, [r2, #4]
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bc80      	pop	{r7}
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	40010000 	.word	0x40010000

08009bb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a0d      	ldr	r2, [pc, #52]	; (8009bf8 <HAL_PCD_MspInit+0x44>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d113      	bne.n	8009bee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009bc6:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <HAL_PCD_MspInit+0x48>)
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	4a0c      	ldr	r2, [pc, #48]	; (8009bfc <HAL_PCD_MspInit+0x48>)
 8009bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <HAL_PCD_MspInit+0x48>)
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	2014      	movs	r0, #20
 8009be4:	f7f8 fc03 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009be8:	2014      	movs	r0, #20
 8009bea:	f7f8 fc1c 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	40005c00 	.word	0x40005c00
 8009bfc:	40023800 	.word	0x40023800

08009c00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c14:	4619      	mov	r1, r3
 8009c16:	4610      	mov	r0, r2
 8009c18:	f7fe feba 	bl	8008990 <USBD_LL_SetupStage>
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	440b      	add	r3, r1
 8009c44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f7fe feec 	bl	8008a2a <USBD_LL_DataOutStage>
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	440b      	add	r3, r1
 8009c7a:	333c      	adds	r3, #60	; 0x3c
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	4619      	mov	r1, r3
 8009c82:	f7fe ff43 	bl	8008b0c <USBD_LL_DataInStage>
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff f84e 	bl	8008d3e <USBD_LL_SOF>
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d001      	beq.n	8009cc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cbe:	f7f7 fa39 	bl	8001134 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cc8:	7bfa      	ldrb	r2, [r7, #15]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff f803 	bl	8008cd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe ffbc 	bl	8008c56 <USBD_LL_Reset>
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fffd 	bl	8008cf6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d04:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <HAL_PCD_SuspendCallback+0x30>)
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	4a03      	ldr	r2, [pc, #12]	; (8009d18 <HAL_PCD_SuspendCallback+0x30>)
 8009d0a:	f043 0306 	orr.w	r3, r3, #6
 8009d0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed00 	.word	0xe000ed00

08009d1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fff7 	bl	8008d1e <USBD_LL_Resume>
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d40:	4a23      	ldr	r2, [pc, #140]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a21      	ldr	r2, [pc, #132]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009d50:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d52:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <USBD_LL_Init+0x9c>)
 8009d54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d56:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d58:	2208      	movs	r2, #8
 8009d5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d5c:	4b1c      	ldr	r3, [pc, #112]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d5e:	2202      	movs	r2, #2
 8009d60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d62:	4b1b      	ldr	r3, [pc, #108]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d64:	2202      	movs	r2, #2
 8009d66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d68:	4b19      	ldr	r3, [pc, #100]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d6e:	4b18      	ldr	r3, [pc, #96]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d74:	4816      	ldr	r0, [pc, #88]	; (8009dd0 <USBD_LL_Init+0x98>)
 8009d76:	f7f8 fe87 	bl	8002a88 <HAL_PCD_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d80:	f7f7 f9d8 	bl	8001134 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d8a:	2318      	movs	r3, #24
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2100      	movs	r1, #0
 8009d90:	f7fa fa4d 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d9a:	2358      	movs	r3, #88	; 0x58
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2180      	movs	r1, #128	; 0x80
 8009da0:	f7fa fa45 	bl	800422e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009daa:	2398      	movs	r3, #152	; 0x98
 8009dac:	2200      	movs	r2, #0
 8009dae:	2181      	movs	r1, #129	; 0x81
 8009db0:	f7fa fa3d 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009dba:	23d8      	movs	r3, #216	; 0xd8
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	f7fa fa35 	bl	800422e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200007fc 	.word	0x200007fc
 8009dd4:	40005c00 	.word	0x40005c00

08009dd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f8 ff28 	bl	8002c44 <HAL_PCD_Start>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 f932 	bl	800a064 <USBD_Get_USB_Status>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	70fb      	strb	r3, [r7, #3]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70bb      	strb	r3, [r7, #2]
 8009e24:	4613      	mov	r3, r2
 8009e26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009e36:	78bb      	ldrb	r3, [r7, #2]
 8009e38:	883a      	ldrh	r2, [r7, #0]
 8009e3a:	78f9      	ldrb	r1, [r7, #3]
 8009e3c:	f7f9 f844 	bl	8002ec8 <HAL_PCD_EP_Open>
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 f90c 	bl	800a064 <USBD_Get_USB_Status>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f9 f88b 	bl	8002f94 <HAL_PCD_EP_Close>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 f8ed 	bl	800a064 <USBD_Get_USB_Status>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7f9 f934 	bl	8003124 <HAL_PCD_EP_SetStall>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f8ce 	bl	800a064 <USBD_Get_USB_Status>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ef0:	78fa      	ldrb	r2, [r7, #3]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f9 f967 	bl	80031c8 <HAL_PCD_EP_ClrStall>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 f8af 	bl	800a064 <USBD_Get_USB_Status>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	da0c      	bge.n	8009f4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	440b      	add	r3, r1
 8009f44:	3302      	adds	r3, #2
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	e00b      	b.n	8009f62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	440b      	add	r3, r1
 8009f5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f60:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f8 ff77 	bl	8002e7e <HAL_PCD_SetAddress>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 f864 	bl	800a064 <USBD_Get_USB_Status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b086      	sub	sp, #24
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	72fb      	strb	r3, [r7, #11]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fcc:	893b      	ldrh	r3, [r7, #8]
 8009fce:	7af9      	ldrb	r1, [r7, #11]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f7f9 f864 	bl	800309e <HAL_PCD_EP_Transmit>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f841 	bl	800a064 <USBD_Get_USB_Status>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fe6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	72fb      	strb	r3, [r7, #11]
 800a000:	4613      	mov	r3, r2
 800a002:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a012:	893b      	ldrh	r3, [r7, #8]
 800a014:	7af9      	ldrb	r1, [r7, #11]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f7f9 f804 	bl	8003024 <HAL_PCD_EP_Receive>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f81e 	bl	800a064 <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a040:	4b02      	ldr	r3, [pc, #8]	; (800a04c <USBD_static_malloc+0x14>)
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	bc80      	pop	{r7}
 800a04a:	4770      	bx	lr
 800a04c:	20000ae8 	.word	0x20000ae8

0800a050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]

}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr
	...

0800a064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d817      	bhi.n	800a0a8 <USBD_Get_USB_Status+0x44>
 800a078:	a201      	add	r2, pc, #4	; (adr r2, 800a080 <USBD_Get_USB_Status+0x1c>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a097 	.word	0x0800a097
 800a088:	0800a09d 	.word	0x0800a09d
 800a08c:	0800a0a3 	.word	0x0800a0a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
    break;
 800a094:	e00b      	b.n	800a0ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a096:	2302      	movs	r3, #2
 800a098:	73fb      	strb	r3, [r7, #15]
    break;
 800a09a:	e008      	b.n	800a0ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a0:	e005      	b.n	800a0ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a6:	e002      	b.n	800a0ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ac:	bf00      	nop
  }
  return usb_status;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	2600      	movs	r6, #0
 800a0c0:	4d0c      	ldr	r5, [pc, #48]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c2:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c4:	1b64      	subs	r4, r4, r5
 800a0c6:	10a4      	asrs	r4, r4, #2
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	f000 f830 	bl	800a130 <_init>
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	4d0a      	ldr	r5, [pc, #40]	; (800a0fc <__libc_init_array+0x40>)
 800a0d4:	4c0a      	ldr	r4, [pc, #40]	; (800a100 <__libc_init_array+0x44>)
 800a0d6:	1b64      	subs	r4, r4, r5
 800a0d8:	10a4      	asrs	r4, r4, #2
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800a1cc 	.word	0x0800a1cc
 800a0f8:	0800a1cc 	.word	0x0800a1cc
 800a0fc:	0800a1cc 	.word	0x0800a1cc
 800a100:	0800a1d0 	.word	0x0800a1d0

0800a104 <memcpy>:
 800a104:	440a      	add	r2, r1
 800a106:	4291      	cmp	r1, r2
 800a108:	f100 33ff 	add.w	r3, r0, #4294967295
 800a10c:	d100      	bne.n	800a110 <memcpy+0xc>
 800a10e:	4770      	bx	lr
 800a110:	b510      	push	{r4, lr}
 800a112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a116:	4291      	cmp	r1, r2
 800a118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a11c:	d1f9      	bne.n	800a112 <memcpy+0xe>
 800a11e:	bd10      	pop	{r4, pc}

0800a120 <memset>:
 800a120:	4603      	mov	r3, r0
 800a122:	4402      	add	r2, r0
 800a124:	4293      	cmp	r3, r2
 800a126:	d100      	bne.n	800a12a <memset+0xa>
 800a128:	4770      	bx	lr
 800a12a:	f803 1b01 	strb.w	r1, [r3], #1
 800a12e:	e7f9      	b.n	800a124 <memset+0x4>

0800a130 <_init>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr

0800a13c <_fini>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	bf00      	nop
 800a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a142:	bc08      	pop	{r3}
 800a144:	469e      	mov	lr, r3
 800a146:	4770      	bx	lr
