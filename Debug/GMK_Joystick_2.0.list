
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a238  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f0  0800a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f8  0800a3f8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a584  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a584  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013325  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  000334d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca6  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ae  00000000  00000000  000504c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee3  00000000  00000000  00065774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000ec6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a35c 	.word	0x0800a35c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a35c 	.word	0x0800a35c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe4e 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f91f 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa81 	bl	8000fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa61 	bl	8000f90 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 f80f 	bl	8009af0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9cf 	bl	8000e74 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f965 	bl	8000da4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	487d      	ldr	r0, [pc, #500]	; (8000cd0 <main+0x218>)
 8000adc:	f004 fa0e 	bl	8004efc <HAL_TIM_Base_Start>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	487b      	ldr	r0, [pc, #492]	; (8000cd0 <main+0x218>)
 8000ae4:	f004 fa9c 	bl	8005020 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4879      	ldr	r0, [pc, #484]	; (8000cd0 <main+0x218>)
 8000aec:	f004 fa98 	bl	8005020 <HAL_TIM_OC_Start_IT>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c78      	ldr	r4, [pc, #480]	; (8000cd4 <main+0x21c>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a78      	ldr	r2, [pc, #480]	; (8000cd8 <main+0x220>)
 8000af6:	4979      	ldr	r1, [pc, #484]	; (8000cdc <main+0x224>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc83 	bl	8001404 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
  	  event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a6f      	ldr	r2, [pc, #444]	; (8000ce0 <main+0x228>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <main+0x22c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <main+0x228>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 8094 	bhi.w	8000c72 <main+0x1ba>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000b7d 	.word	0x08000b7d
 8000b60:	08000c6b 	.word	0x08000c6b
		case EVENT_WAIT:
			asm("NOP");
 8000b64:	bf00      	nop
			break;
 8000b66:	e084      	b.n	8000c72 <main+0x1ba>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b68:	2202      	movs	r2, #2
 8000b6a:	495c      	ldr	r1, [pc, #368]	; (8000cdc <main+0x224>)
 8000b6c:	485e      	ldr	r0, [pc, #376]	; (8000ce8 <main+0x230>)
 8000b6e:	f000 ffab 	bl	8001ac8 <HAL_ADC_Start_DMA>
			break;
 8000b72:	e07e      	b.n	8000c72 <main+0x1ba>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f000 fa4b 	bl	8001010 <write_next_event_state>
			break;
 8000b7a:	e07a      	b.n	8000c72 <main+0x1ba>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b7c:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <main+0x21c>)
 8000b7e:	f000 fc8d 	bl	800149c <Joystick_Update>
			uint8_t invert_x = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b8e:	4b57      	ldr	r3, [pc, #348]	; (8000cec <main+0x234>)
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <main+0x234>)
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b96:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <main+0xf0>
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <main+0x21c>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	e001      	b.n	8000bac <main+0xf4>
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <main+0x21c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <main+0x21c>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <main+0x21c>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <main+0x238>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bcc:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <main+0x238>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bd6:	f7ff fd9b 	bl	8000710 <__aeabi_fcmpgt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <main+0x13c>
 8000be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	4619      	mov	r1, r3
 8000be8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bea:	f7ff fd73 	bl	80006d4 <__aeabi_fcmplt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d013      	beq.n	8000c1c <main+0x164>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <main+0x238>)
 8000bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bfa:	b29c      	uxth	r4, r3
 8000bfc:	493d      	ldr	r1, [pc, #244]	; (8000cf4 <main+0x23c>)
 8000bfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c00:	f7ff fbca 	bl	8000398 <__aeabi_fmul>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd8c 	bl	8000724 <__aeabi_f2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4423      	add	r3, r4
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <main+0x238>)
 8000c1a:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c20:	f7ff fd76 	bl	8000710 <__aeabi_fcmpgt>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10a      	bne.n	8000c40 <main+0x188>
 8000c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c30:	4619      	mov	r1, r3
 8000c32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c34:	f7ff fd4e 	bl	80006d4 <__aeabi_fcmplt>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <main+0x188>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c3e:	e018      	b.n	8000c72 <main+0x1ba>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <main+0x238>)
 8000c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c46:	b29c      	uxth	r4, r3
 8000c48:	492b      	ldr	r1, [pc, #172]	; (8000cf8 <main+0x240>)
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fba4 	bl	8000398 <__aeabi_fmul>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd66 	bl	8000724 <__aeabi_f2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4423      	add	r3, r4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <main+0x238>)
 8000c66:	809a      	strh	r2, [r3, #4]
			break;
 8000c68:	e003      	b.n	8000c72 <main+0x1ba>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <main+0x238>)
 8000c6c:	f000 fa14 	bl	8001098 <Send_HID_Data>
			break;
 8000c70:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <main+0x22c>)
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <main+0x244>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d00d      	beq.n	8000c9a <main+0x1e2>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <main+0x22c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	425a      	negs	r2, r3
 8000c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c8e:	bf58      	it	pl
 8000c90:	4253      	negpl	r3, r2
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <main+0x22c>)
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e002      	b.n	8000ca0 <main+0x1e8>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f9b8 	bl	8001010 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <main+0x244>)
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <main+0x22c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d306      	bcc.n	8000cba <main+0x202>
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <main+0x244>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <main+0x22c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	e007      	b.n	8000cca <main+0x212>
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <main+0x244>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <main+0x22c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <main+0x248>)
 8000ccc:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cce:	e734      	b.n	8000b3a <main+0x82>
 8000cd0:	20000238 	.word	0x20000238
 8000cd4:	20000300 	.word	0x20000300
 8000cd8:	200002fe 	.word	0x200002fe
 8000cdc:	200002fc 	.word	0x200002fc
 8000ce0:	20000278 	.word	0x20000278
 8000ce4:	200002f8 	.word	0x200002f8
 8000ce8:	200001a0 	.word	0x200001a0
 8000cec:	3d4ccccd 	.word	0x3d4ccccd
 8000cf0:	2000033c 	.word	0x2000033c
 8000cf4:	c6fffe00 	.word	0xc6fffe00
 8000cf8:	46fffe00 	.word	0x46fffe00
 8000cfc:	200002f9 	.word	0x200002f9
 8000d00:	200002fa 	.word	0x200002fa

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	; 0x48
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2234      	movs	r2, #52	; 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f009 fb1a 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemClock_Config+0x9c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <SystemClock_Config+0x9c>)
 8000d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d34:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d36:	2303      	movs	r3, #3
 8000d38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d42:	2310      	movs	r3, #16
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fac7 	bl	80042f4 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d6c:	f000 fa02 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2303      	movs	r3, #3
 8000d76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fde3 	bl	8004954 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d94:	f000 f9ee 	bl	8001174 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3748      	adds	r7, #72	; 0x48
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000db6:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <MX_ADC_Init+0xcc>)
 8000db8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e06:	2210      	movs	r2, #16
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e18:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e1a:	f000 fd0f 	bl	800183c <HAL_ADC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e24:	f000 f9a6 	bl	8001174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e3a:	f000 ffef 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e44:	f000 f996 	bl	8001174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC_Init+0xc8>)
 8000e56:	f000 ffe1 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000e60:	f000 f988 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001a0 	.word	0x200001a0
 8000e70:	40012400 	.word	0x40012400

08000e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000eb4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ec8:	f003 ffd8 	bl	8004e7c <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ed2:	f000 f94f 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	482a      	ldr	r0, [pc, #168]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ee4:	f004 faac 	bl	8005440 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eee:	f000 f941 	bl	8001174 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ef2:	4826      	ldr	r0, [pc, #152]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000ef4:	f004 f84c 	bl	8004f90 <HAL_TIM_OC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000efe:	f000 f939 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f12:	f004 fd8f 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f1c:	f000 f92a 	bl	8001174 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f20:	2310      	movs	r3, #16
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f24:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f3a:	f004 fa29 	bl	8005390 <HAL_TIM_OC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f44:	f000 f916 	bl	8001174 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0208 	orr.w	r2, r2, #8
 8000f56:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f58:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2204      	movs	r2, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f66:	f004 fa13 	bl	8005390 <HAL_TIM_OC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f70:	f000 f900 	bl	8001174 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	699a      	ldr	r2, [r3, #24]
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <MX_TIM2_Init+0x118>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f82:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000238 	.word	0x20000238

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_DMA_Init+0x38>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200b      	movs	r0, #11
 8000fb4:	f001 fa3b 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fb8:	200b      	movs	r0, #11
 8000fba:	f001 fa54 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_GPIO_Init+0x40>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <MX_GPIO_Init+0x40>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_GPIO_Init+0x40>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_GPIO_Init+0x40>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <MX_GPIO_Init+0x40>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <MX_GPIO_Init+0x40>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40023800 	.word	0x40023800

08001010 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <write_next_event_state+0x3c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	425a      	negs	r2, r3
 8001022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800102a:	bf58      	it	pl
 800102c:	4253      	negpl	r3, r2
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <write_next_event_state+0x3c>)
 8001032:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <write_next_event_state+0x3c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <write_next_event_state+0x40>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	5453      	strb	r3, [r2, r1]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002f9 	.word	0x200002f9
 8001050:	20000278 	.word	0x20000278

08001054 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <HAL_TIM_OC_DelayElapsedCallback+0x16>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d004      	beq.n	8001072 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 8001068:	e007      	b.n	800107a <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ffd0 	bl	8001010 <write_next_event_state>
			break;
 8001070:	e003      	b.n	800107a <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 8001072:	2002      	movs	r0, #2
 8001074:	f7ff ffcc 	bl	8001010 <write_next_event_state>
			break;
 8001078:	bf00      	nop
	}
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff ffc0 	bl	8001010 <write_next_event_state>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <Send_HID_Data>:

void Send_HID_Data(Controller_HandleTypeDef* controller){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 800109e:	afa6      	add	r7, sp, #664	; 0x298
 80010a0:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <Send_HID_Data+0xd4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <Send_HID_Data+0xd4>)
 80010b0:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <Send_HID_Data+0xd4>)
 80010be:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <Send_HID_Data+0xd4>)
 80010ca:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d2:	121b      	asrs	r3, r3, #8
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <Send_HID_Data+0xd4>)
 80010da:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <Send_HID_Data+0xd4>)
 80010e6:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ee:	121b      	asrs	r3, r3, #8
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <Send_HID_Data+0xd4>)
 80010f6:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <Send_HID_Data+0xd4>)
 8001102:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800110a:	121b      	asrs	r3, r3, #8
 800110c:	b21b      	sxth	r3, r3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <Send_HID_Data+0xd4>)
 8001112:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <Send_HID_Data+0xd4>)
 800111e:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001126:	121b      	asrs	r3, r3, #8
 8001128:	b21b      	sxth	r3, r3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <Send_HID_Data+0xd4>)
 800112e:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7a9a      	ldrb	r2, [r3, #10]
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <Send_HID_Data+0xd4>)
 8001136:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7ada      	ldrb	r2, [r3, #11]
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Send_HID_Data+0xd4>)
 800113e:	731a      	strb	r2, [r3, #12]
	USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <Send_HID_Data+0xd8>)
 8001142:	230d      	movs	r3, #13
 8001144:	93a4      	str	r3, [sp, #656]	; 0x290
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <Send_HID_Data+0xd4>)
 8001148:	93a3      	str	r3, [sp, #652]	; 0x28c
 800114a:	4668      	mov	r0, sp
 800114c:	f104 0310 	add.w	r3, r4, #16
 8001150:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8001154:	4619      	mov	r1, r3
 8001156:	f009 f8eb 	bl	800a330 <memcpy>
 800115a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800115e:	f007 fbd3 	bl	8008908 <USBD_CUSTOM_HID_SendReport>
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	20000348 	.word	0x20000348
 8001170:	20000360 	.word	0x20000360

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_MspInit+0x58>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_MspInit+0x58>)
 800118c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001190:	6253      	str	r3, [r2, #36]	; 0x24
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_MspInit+0x58>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_MspInit+0x58>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_MspInit+0x58>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_MspInit+0x58>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_MspInit+0x58>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_MspInit+0x58>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6253      	str	r3, [r2, #36]	; 0x24
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_MspInit+0x58>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_ADC_MspInit+0xd4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d154      	bne.n	80012a8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fe:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 8001204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_ADC_MspInit+0xd8>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122e:	2303      	movs	r3, #3
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	481d      	ldr	r0, [pc, #116]	; (80012b8 <HAL_ADC_MspInit+0xdc>)
 8001242:	f001 fac1 	bl	80027c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_ADC_MspInit+0xe4>)
 800124a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001264:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 800127e:	f001 f90d 	bl	800249c <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001288:	f7ff ff74 	bl	8001174 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_ADC_MspInit+0xe0>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2012      	movs	r0, #18
 800129e:	f001 f8c6 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012a2:	2012      	movs	r0, #18
 80012a4:	f001 f8df 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012400 	.word	0x40012400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	40026008 	.word	0x40026008

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d4:	d113      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6253      	str	r3, [r2, #36]	; 0x24
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2101      	movs	r1, #1
 80012f2:	201c      	movs	r0, #28
 80012f4:	f001 f89b 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f8:	201c      	movs	r0, #28
 80012fa:	f001 f8b4 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 fa57 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <DMA1_Channel1_IRQHandler+0x10>)
 8001362:	f001 f953 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001f4 	.word	0x200001f4

08001370 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <ADC1_IRQHandler+0x10>)
 8001376:	f000 fc35 	bl	8001be4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001a0 	.word	0x200001a0

08001384 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USB_LP_IRQHandler+0x10>)
 800138a:	f001 fca1 	bl	8002cd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200007fc 	.word	0x200007fc

08001398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM2_IRQHandler+0x10>)
 800139e:	f003 ff1b 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000238 	.word	0x20000238

080013ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013de:	f7ff ffe5 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f008 ff81 	bl	800a2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7ff fb67 	bl	8000ab8 <main>
  bx lr
 80013ea:	4770      	bx	lr
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013f4:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 80013f8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013fc:	20000b10 	.word	0x20000b10

08001400 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <COMP_IRQHandler>
	...

08001404 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001404:	b4b0      	push	{r4, r5, r7}
 8001406:	b095      	sub	sp, #84	; 0x54
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 800141a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141e:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <Joystick_Init+0x90>)
 8001426:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <Joystick_Init+0x94>)
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 800143c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001440:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <Joystick_Init+0x90>)
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <Joystick_Init+0x94>)
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001466:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	461d      	mov	r5, r3
 8001470:	f107 0414 	add.w	r4, r7, #20
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	3754      	adds	r7, #84	; 0x54
 800148c:	46bd      	mov	sp, r7
 800148e:	bcb0      	pop	{r4, r5, r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	3ccccccd 	.word	0x3ccccccd
 8001498:	3f8ccccd 	.word	0x3f8ccccd

0800149c <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d062      	beq.n	8001584 <Joystick_Update+0xe8>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d05e      	beq.n	8001584 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	891b      	ldrh	r3, [r3, #8]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff0c 	bl	80002e8 <__aeabi_ui2f>
 80014d0:	4604      	mov	r4, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014dc:	f7fe fe52 	bl	8000184 <__aeabi_fsub>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7fe ff57 	bl	8000398 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461c      	mov	r4, r3
 80014ee:	8bfb      	ldrh	r3, [r7, #30]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fef9 	bl	80002e8 <__aeabi_ui2f>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7fe ff4a 	bl	8000398 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4620      	mov	r0, r4
 800150a:	f7fe fe3d 	bl	8000188 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f92d 	bl	8000770 <__aeabi_f2uiz>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	8c1b      	ldrh	r3, [r3, #32]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fee0 	bl	80002e8 <__aeabi_ui2f>
 8001528:	4604      	mov	r4, r0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001534:	f7fe fe26 	bl	8000184 <__aeabi_fsub>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4620      	mov	r0, r4
 800153e:	f7fe ff2b 	bl	8000398 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	461c      	mov	r4, r3
 8001546:	8bbb      	ldrh	r3, [r7, #28]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fecd 	bl	80002e8 <__aeabi_ui2f>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f7fe ff1e 	bl	8000398 <__aeabi_fmul>
 800155c:	4603      	mov	r3, r0
 800155e:	4619      	mov	r1, r3
 8001560:	4620      	mov	r0, r4
 8001562:	f7fe fe11 	bl	8000188 <__addsf3>
 8001566:	4603      	mov	r3, r0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f901 	bl	8000770 <__aeabi_f2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	865a      	strh	r2, [r3, #50]	; 0x32
 8001582:	e008      	b.n	8001596 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	8bfa      	ldrh	r2, [r7, #30]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	8c1b      	ldrh	r3, [r3, #32]
 80015a6:	8bba      	ldrh	r2, [r7, #28]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	889b      	ldrh	r3, [r3, #4]
 80015b2:	8bfa      	ldrh	r2, [r7, #30]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bf28      	it	cs
 80015b8:	4613      	movcs	r3, r2
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	88db      	ldrh	r3, [r3, #6]
 80015c4:	8bfa      	ldrh	r2, [r7, #30]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	bf38      	it	cc
 80015ca:	4613      	movcc	r3, r2
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8b9b      	ldrh	r3, [r3, #28]
 80015d6:	8bba      	ldrh	r2, [r7, #28]
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf28      	it	cs
 80015dc:	4613      	movcs	r3, r2
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	8bdb      	ldrh	r3, [r3, #30]
 80015e8:	8bba      	ldrh	r2, [r7, #28]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	bf38      	it	cc
 80015ee:	4613      	movcc	r3, r2
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 80015f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	dd15      	ble.n	800162a <Joystick_Update+0x18e>
 80015fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe74 	bl	80002f0 <__aeabi_i2f>
 8001608:	4604      	mov	r4, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	88db      	ldrh	r3, [r3, #6]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	891b      	ldrh	r3, [r3, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe6a 	bl	80002f0 <__aeabi_i2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7fe ff6d 	bl	8000500 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	e016      	b.n	8001658 <Joystick_Update+0x1bc>
 800162a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fe5e 	bl	80002f0 <__aeabi_i2f>
 8001634:	4603      	mov	r3, r0
 8001636:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	891b      	ldrh	r3, [r3, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fe52 	bl	80002f0 <__aeabi_i2f>
 800164c:	4603      	mov	r3, r0
 800164e:	4619      	mov	r1, r3
 8001650:	4620      	mov	r0, r4
 8001652:	f7fe ff55 	bl	8000500 <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 800165a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	dd15      	ble.n	800168e <Joystick_Update+0x1f2>
 8001662:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fe42 	bl	80002f0 <__aeabi_i2f>
 800166c:	4604      	mov	r4, r0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	8bdb      	ldrh	r3, [r3, #30]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8c1b      	ldrh	r3, [r3, #32]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fe38 	bl	80002f0 <__aeabi_i2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f7fe ff3b 	bl	8000500 <__aeabi_fdiv>
 800168a:	4603      	mov	r3, r0
 800168c:	e016      	b.n	80016bc <Joystick_Update+0x220>
 800168e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe2c 	bl	80002f0 <__aeabi_i2f>
 8001698:	4603      	mov	r3, r0
 800169a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	8b9b      	ldrh	r3, [r3, #28]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8c1b      	ldrh	r3, [r3, #32]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fe20 	bl	80002f0 <__aeabi_i2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7fe ff23 	bl	8000500 <__aeabi_fdiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff f824 	bl	8000710 <__aeabi_fcmpgt>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <Joystick_Update+0x236>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	e002      	b.n	80016d8 <Joystick_Update+0x23c>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	6938      	ldr	r0, [r7, #16]
 80016e0:	f7ff f816 	bl	8000710 <__aeabi_fcmpgt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <Joystick_Update+0x252>
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	e002      	b.n	80016f4 <Joystick_Update+0x258>
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016f4:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	4619      	mov	r1, r3
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff f807 	bl	8000710 <__aeabi_fcmpgt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00a      	beq.n	800171e <Joystick_Update+0x282>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7fe ffe0 	bl	80006d4 <__aeabi_fcmplt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <Joystick_Update+0x282>
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	e001      	b.n	8001722 <Joystick_Update+0x286>
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	f7fe ffef 	bl	8000710 <__aeabi_fcmpgt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <Joystick_Update+0x2b2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	4619      	mov	r1, r3
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f7fe ffc8 	bl	80006d4 <__aeabi_fcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <Joystick_Update+0x2b2>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	e001      	b.n	8001752 <Joystick_Update+0x2b6>
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}

0800175e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 fe55 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f80e 	bl	8001790 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fcfe 	bl	8001180 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_InitTick+0x68>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d022      	beq.n	80017ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_InitTick+0x6c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_InitTick+0x68>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fe62 	bl	8002482 <HAL_SYSTICK_Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d809      	bhi.n	80017de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ca:	2200      	movs	r2, #0
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295
 80017d2:	f000 fe2c 	bl	800242e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_InitTick+0x70>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e007      	b.n	80017ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e004      	b.n	80017ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_IncTick+0x1c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x20>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_IncTick+0x1c>)
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000358 	.word	0x20000358
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <HAL_GetTick+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000358 	.word	0x20000358

0800183c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e127      	b.n	8001aac <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d115      	bne.n	8001896 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001878:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_ADC_Init+0x278>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a8d      	ldr	r2, [pc, #564]	; (8001ab4 <HAL_ADC_Init+0x278>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_ADC_Init+0x278>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fca3 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80ff 	bne.w	8001aa2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ac:	f023 0302 	bic.w	r3, r3, #2
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018b8:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_ADC_Init+0x27c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	497c      	ldr	r1, [pc, #496]	; (8001ab8 <HAL_ADC_Init+0x27c>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018d2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018da:	4619      	mov	r1, r3
 80018dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80018f6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800191e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	4313      	orrs	r3, r2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	2b10      	cmp	r3, #16
 800192c:	d007      	beq.n	800193e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001936:	4313      	orrs	r3, r2
 8001938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193a:	4313      	orrs	r3, r2
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001948:	2b40      	cmp	r3, #64	; 0x40
 800194a:	d04f      	beq.n	80019ec <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	4313      	orrs	r3, r2
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800195e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6912      	ldr	r2, [r2, #16]
 8001964:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001968:	d003      	beq.n	8001972 <HAL_ADC_Init+0x136>
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6912      	ldr	r2, [r2, #16]
 800196e:	2a01      	cmp	r2, #1
 8001970:	d102      	bne.n	8001978 <HAL_ADC_Init+0x13c>
 8001972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001976:	e000      	b.n	800197a <HAL_ADC_Init+0x13e>
 8001978:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800197a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800197c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800197e:	4313      	orrs	r3, r2
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d125      	bne.n	80019d8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d114      	bne.n	80019c0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	3b01      	subs	r3, #1
 800199c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	fa92 f2a2 	rbit	r2, r2
 80019a8:	617a      	str	r2, [r7, #20]
  return result;
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	fab2 f282 	clz	r2, r2
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ba:	4313      	orrs	r3, r2
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	e00b      	b.n	80019d8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <HAL_ADC_Init+0x280>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_ADC_Init+0x284>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_Init+0x1d6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d119      	bne.n	8001a46 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	3b01      	subs	r3, #1
 8001a22:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	fa03 f202 	lsl.w	r2, r3, r2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
 8001a44:	e007      	b.n	8001a56 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_ADC_Init+0x288>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d10b      	bne.n	8001a7e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a7c:	e014      	b.n	8001aa8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	f023 0312 	bic.w	r3, r3, #18
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3738      	adds	r7, #56	; 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40012700 	.word	0x40012700
 8001abc:	fcfc16ff 	.word	0xfcfc16ff
 8001ac0:	c0fff18d 	.word	0xc0fff18d
 8001ac4:	bf80fffe 	.word	0xbf80fffe

08001ac8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start_DMA+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e074      	b.n	8001bd0 <HAL_ADC_Start_DMA+0x108>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fae4 	bl	80020bc <ADC_Enable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d167      	bne.n	8001bce <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3c:	d106      	bne.n	8001b4c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	f023 0206 	bic.w	r2, r3, #6
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	651a      	str	r2, [r3, #80]	; 0x50
 8001b4a:	e002      	b.n	8001b52 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_ADC_Start_DMA+0x110>)
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_ADC_Start_DMA+0x114>)
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_ADC_Start_DMA+0x118>)
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3358      	adds	r3, #88	; 0x58
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f000 fcce 	bl	800254c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bcc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	08002175 	.word	0x08002175
 8001bdc:	0800221d 	.word	0x0800221d
 8001be0:	08002239 	.word	0x08002239

08001be4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d14e      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d147      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12c      	bne.n	8001c88 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d127      	bne.n	8001c88 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d119      	bne.n	8001c88 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0220 	bic.w	r2, r2, #32
 8001c62:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff f9fa 	bl	8001082 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0212 	mvn.w	r2, #18
 8001c96:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d15c      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d155      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d13a      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12c      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d125      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11e      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d119      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa8b 	bl	800226c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 020c 	mvn.w	r2, #12
 8001d5e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d114      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10d      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f834 	bl	8001df6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f06f 0201 	mvn.w	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001da6:	d119      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d112      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	f043 0202 	orr.w	r2, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0220 	mvn.w	r2, #32
 8001dca:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f81b 	bl	8001e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0220 	mvn.w	r2, #32
 8001dda:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e134      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x28a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d81c      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b05      	subs	r3, #5
 8001e5e:	221f      	movs	r2, #31
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4019      	ands	r1, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b05      	subs	r3, #5
 8001e78:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
 8001e84:	e07e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d81c      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b23      	subs	r3, #35	; 0x23
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b23      	subs	r3, #35	; 0x23
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ec6:	e05d      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d81c      	bhi.n	8001f0a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b41      	subs	r3, #65	; 0x41
 8001ee2:	221f      	movs	r2, #31
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b41      	subs	r3, #65	; 0x41
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
 8001f08:	e03c      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b18      	cmp	r3, #24
 8001f10:	d81c      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b5f      	subs	r3, #95	; 0x5f
 8001f24:	221f      	movs	r2, #31
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b5f      	subs	r3, #95	; 0x5f
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4a:	e01b      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b7d      	subs	r3, #125	; 0x7d
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4019      	ands	r1, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b7d      	subs	r3, #125	; 0x7d
 8001f78:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b09      	cmp	r3, #9
 8001f8a:	d81a      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6959      	ldr	r1, [r3, #20]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4019      	ands	r1, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6898      	ldr	r0, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	e042      	b.n	8002048 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b13      	cmp	r3, #19
 8001fc8:	d81c      	bhi.n	8002004 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6919      	ldr	r1, [r3, #16]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	2207      	movs	r2, #7
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4019      	ands	r1, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6898      	ldr	r0, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1e      	subs	r3, #30
 8001ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	e021      	b.n	8002048 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b1a      	cmp	r3, #26
 800200a:	d81c      	bhi.n	8002046 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	3b3c      	subs	r3, #60	; 0x3c
 800201e:	2207      	movs	r2, #7
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	4019      	ands	r1, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6898      	ldr	r0, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	3b3c      	subs	r3, #60	; 0x3c
 8002038:	fa00 f203 	lsl.w	r2, r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	e000      	b.n	8002048 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002046:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b10      	cmp	r3, #16
 800204e:	d003      	beq.n	8002058 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002054:	2b11      	cmp	r3, #17
 8002056:	d121      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_ADC_ConfigChannel+0x294>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d11b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_ADC_ConfigChannel+0x294>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_ADC_ConfigChannel+0x294>)
 800206a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800206e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b10      	cmp	r3, #16
 8002076:	d111      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_ADC_ConfigChannel+0x298>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_ADC_ConfigChannel+0x29c>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9a      	lsrs	r2, r3, #18
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800208e:	e002      	b.n	8002096 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40012700 	.word	0x40012700
 80020b4:	20000000 	.word	0x20000000
 80020b8:	431bde83 	.word	0x431bde83

080020bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d043      	beq.n	8002162 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <ADC_Enable+0xb0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a20      	ldr	r2, [pc, #128]	; (8002170 <ADC_Enable+0xb4>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	0c9a      	lsrs	r2, r3, #18
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020fe:	e002      	b.n	8002106 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	3b01      	subs	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800210c:	f7ff fb8c 	bl	8001828 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002112:	e01f      	b.n	8002154 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002114:	f7ff fb88 	bl	8001828 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d918      	bls.n	8002154 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d011      	beq.n	8002154 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e007      	b.n	8002164 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d1d8      	bne.n	8002114 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d13d      	bne.n	800220a <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12c      	bne.n	8002202 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d127      	bne.n	8002202 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d119      	bne.n	8002202 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0220 	bic.w	r2, r2, #32
 80021dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7fe ff3d 	bl	8001082 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002208:	e004      	b.n	8002214 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff fdda 	bl	8001de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fdd2 	bl	8001e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <__NVIC_EnableIRQ+0x34>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff90 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff2d 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff42 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff35 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e043      	b.n	8002536 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_DMA_Init+0xa4>)
 80024b6:	4413      	add	r3, r2
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_DMA_Init+0xa8>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_DMA_Init+0xac>)
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	bffd9ff8 	.word	0xbffd9ff8
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40026000 	.word	0x40026000

0800254c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_DMA_Start_IT+0x20>
 8002568:	2302      	movs	r3, #2
 800256a:	e04b      	b.n	8002604 <HAL_DMA_Start_IT+0xb8>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d13a      	bne.n	80025f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f8e0 	bl	800276a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 020e 	orr.w	r2, r2, #14
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00f      	b.n	80025e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 020a 	orr.w	r2, r2, #10
 80025e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e005      	b.n	8002602 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f003 031c 	and.w	r3, r3, #28
 800262c:	2204      	movs	r2, #4
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d026      	beq.n	8002686 <HAL_DMA_IRQHandler+0x7a>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d021      	beq.n	8002686 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 021c 	and.w	r2, r3, #28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	2104      	movs	r1, #4
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d071      	beq.n	8002760 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002684:	e06c      	b.n	8002760 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 031c 	and.w	r3, r3, #28
 800268e:	2202      	movs	r2, #2
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02e      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xec>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d029      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 020a 	bic.w	r2, r2, #10
 80026c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 021c 	and.w	r2, r3, #28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2102      	movs	r1, #2
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d038      	beq.n	8002760 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026f6:	e033      	b.n	8002760 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 031c 	and.w	r3, r3, #28
 8002700:	2208      	movs	r2, #8
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02a      	beq.n	8002762 <HAL_DMA_IRQHandler+0x156>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020e 	bic.w	r2, r2, #14
 8002724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 021c 	and.w	r2, r3, #28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002760:	bf00      	nop
 8002762:	bf00      	nop
}
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 021c 	and.w	r2, r3, #28
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d108      	bne.n	80027ae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ac:	e007      	b.n	80027be <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	60da      	str	r2, [r3, #12]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027de:	e154      	b.n	8002a8a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8146 	beq.w	8002a84 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d005      	beq.n	8002810 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800280c:	2b02      	cmp	r3, #2
 800280e:	d130      	bne.n	8002872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002846:	2201      	movs	r2, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0201 	and.w	r2, r3, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b03      	cmp	r3, #3
 800287c:	d017      	beq.n	80028ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d123      	bne.n	8002902 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	08da      	lsrs	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	6939      	ldr	r1, [r7, #16]
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80a0 	beq.w	8002a84 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002944:	4b58      	ldr	r3, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x2e0>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <HAL_GPIO_Init+0x2e0>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_GPIO_Init+0x2e0>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800295c:	4a53      	ldr	r2, [pc, #332]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a4b      	ldr	r2, [pc, #300]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d019      	beq.n	80029bc <HAL_GPIO_Init+0x1f4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a4a      	ldr	r2, [pc, #296]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_GPIO_Init+0x1f0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_Init+0x1ec>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_GPIO_Init+0x2f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_Init+0x1e8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a47      	ldr	r2, [pc, #284]	; (8002ac0 <HAL_GPIO_Init+0x2f8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_Init+0x1e4>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e008      	b.n	80029be <HAL_GPIO_Init+0x1f6>
 80029ac:	2305      	movs	r3, #5
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1f6>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1f6>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1f6>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1f6>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a00:	4a30      	ldr	r2, [pc, #192]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a2a:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aea3 	bne.w	80027e0 <HAL_GPIO_Init+0x18>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0d0      	b.n	8002c7c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f007 f976 	bl	8009de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 f80b 	bl	8005b1c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e04c      	b.n	8002ba6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	b298      	uxth	r0, r3
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	3336      	adds	r3, #54	; 0x36
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3303      	adds	r3, #3
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3338      	adds	r3, #56	; 0x38
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	333c      	adds	r3, #60	; 0x3c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3ad      	bcc.n	8002b0c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e044      	b.n	8002c40 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b5      	bcc.n	8002bb6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	687e      	ldr	r6, [r7, #4]
 8002c52:	466d      	mov	r5, sp
 8002c54:	f106 0410 	add.w	r4, r6, #16
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	602b      	str	r3, [r5, #0]
 8002c60:	1d33      	adds	r3, r6, #4
 8002c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	f002 ff73 	bl	8005b50 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_PCD_Start+0x16>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e016      	b.n	8002cc8 <HAL_PCD_Start+0x44>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 ff22 	bl	8005af0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cac:	2101      	movs	r1, #1
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f007 f878 	bl	8009da4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fc07 	bl	80084cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f005 fbff 	bl	80084e0 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	d102      	bne.n	8002cf4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fade 	bl	80032b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f005 fbf1 	bl	80084e0 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d112      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f007 f8d7 	bl	8009ed6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d28:	2100      	movs	r1, #0
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8c7 	bl	8002ebe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fbd3 	bl	80084e0 <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d44:	d10b      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 fbbc 	bl	80084e0 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d72:	d10b      	bne.n	8002d8c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	b292      	uxth	r2, r2
 8002d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 fba5 	bl	80084e0 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d126      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f007 f8b8 	bl	8009f48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dea:	b292      	uxth	r2, r2
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 fb73 	bl	80084e0 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	d126      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0208 	orr.w	r2, r2, #8
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0204 	orr.w	r2, r2, #4
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f007 f860 	bl	8009f14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 fb41 	bl	80084e0 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e68:	d10e      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f007 f819 	bl	8009eba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 fb27 	bl	80084e0 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_PCD_SetAddress+0x1a>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e013      	b.n	8002f00 <HAL_PCD_SetAddress+0x42>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f005 fad8 	bl	80084a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	70fb      	strb	r3, [r7, #3]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	803b      	strh	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da0e      	bge.n	8002f4c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	705a      	strb	r2, [r3, #1]
 8002f4a:	e00e      	b.n	8002f6a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f76:	883a      	ldrh	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	78ba      	ldrb	r2, [r7, #2]
 8002f80:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f94:	78bb      	ldrb	r3, [r7, #2]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d102      	bne.n	8002fa0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_PCD_EP_Open+0xa6>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e00e      	b.n	8002fcc <HAL_PCD_EP_Open+0xc4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 fde7 	bl	8005b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da0e      	bge.n	8003006 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	705a      	strb	r2, [r3, #1]
 8003004:	e00e      	b.n	8003024 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 0207 	and.w	r2, r3, #7
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_PCD_EP_Close+0x6a>
 800303a:	2302      	movs	r3, #2
 800303c:	e00e      	b.n	800305c <HAL_PCD_EP_Close+0x88>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f909 	bl	8006264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	460b      	mov	r3, r1
 8003072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 0207 	and.w	r2, r3, #7
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fabb 	bl	800663c <USB_EPStartXfer>
 80030c6:	e005      	b.n	80030d4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fab4 	bl	800663c <USB_EPStartXfer>
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	460b      	mov	r3, r1
 80030ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	b2da      	uxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fa78 	bl	800663c <USB_EPStartXfer>
 800314c:	e005      	b.n	800315a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 fa71 	bl	800663c <USB_EPStartXfer>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d901      	bls.n	8003182 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e03e      	b.n	8003200 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0e      	bge.n	80031a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00c      	b.n	80031c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_PCD_EP_SetStall+0x7e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e00e      	b.n	8003200 <HAL_PCD_EP_SetStall+0x9c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 f85b 	bl	80082ac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d901      	bls.n	8003226 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e040      	b.n	80032a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322a:	2b00      	cmp	r3, #0
 800322c:	da0e      	bge.n	800324c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	705a      	strb	r2, [r3, #1]
 800324a:	e00e      	b.n	800326a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_PCD_EP_ClrStall+0x82>
 8003286:	2302      	movs	r3, #2
 8003288:	e00e      	b.n	80032a8 <HAL_PCD_EP_ClrStall+0xa0>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f005 f857 	bl	800834c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032b8:	e2ec      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8161 	bne.w	800359c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d152      	bne.n	800338a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	81fb      	strh	r3, [r7, #14]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	3302      	adds	r3, #2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	441a      	add	r2, r3
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003348:	2100      	movs	r1, #0
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f006 fd9b 	bl	8009e86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 829b 	beq.w	8003894 <PCD_EP_ISR_Handler+0x5e4>
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8296 	bne.w	8003894 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003374:	b2da      	uxtb	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b292      	uxth	r2, r2
 800337c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003388:	e284      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800339a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d034      	beq.n	800340e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	3306      	adds	r3, #6
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f005 f8d0 	bl	8008588 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033f4:	4013      	ands	r3, r2
 80033f6:	823b      	strh	r3, [r7, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	8a3a      	ldrh	r2, [r7, #16]
 80033fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003402:	b292      	uxth	r2, r2
 8003404:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f006 fd10 	bl	8009e2c <HAL_PCD_SetupStageCallback>
 800340c:	e242      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800340e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003412:	2b00      	cmp	r3, #0
 8003414:	f280 823e 	bge.w	8003894 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29a      	uxth	r2, r3
 8003420:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003424:	4013      	ands	r3, r2
 8003426:	83bb      	strh	r3, [r7, #28]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	8bba      	ldrh	r2, [r7, #28]
 800342e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003432:	b292      	uxth	r2, r2
 8003434:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	3306      	adds	r3, #6
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d019      	beq.n	800349e <PCD_EP_ISR_Handler+0x1ee>
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	6959      	ldr	r1, [r3, #20]
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003482:	b29b      	uxth	r3, r3
 8003484:	f005 f880 	bl	8008588 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	441a      	add	r2, r3
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003496:	2100      	movs	r1, #0
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f006 fcd9 	bl	8009e50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 81f2 	bne.w	8003894 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d112      	bne.n	80034fe <PCD_EP_ISR_Handler+0x24e>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	e02f      	b.n	800355e <PCD_EP_ISR_Handler+0x2ae>
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b3e      	cmp	r3, #62	; 0x3e
 8003504:	d813      	bhi.n	800352e <PCD_EP_ISR_Handler+0x27e>
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <PCD_EP_ISR_Handler+0x270>
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	3301      	adds	r3, #1
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	b29b      	uxth	r3, r3
 8003524:	029b      	lsls	r3, r3, #10
 8003526:	b29a      	uxth	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	e017      	b.n	800355e <PCD_EP_ISR_Handler+0x2ae>
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <PCD_EP_ISR_Handler+0x298>
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	3b01      	subs	r3, #1
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	b29b      	uxth	r3, r3
 800354c:	029b      	lsls	r3, r3, #10
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29a      	uxth	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	827b      	strh	r3, [r7, #18]
 8003570:	8a7b      	ldrh	r3, [r7, #18]
 8003572:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003576:	827b      	strh	r3, [r7, #18]
 8003578:	8a7b      	ldrh	r3, [r7, #18]
 800357a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800357e:	827b      	strh	r3, [r7, #18]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	8a7b      	ldrh	r3, [r7, #18]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
 800359a:	e17b      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f280 80ea 	bge.w	800378c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035ce:	4013      	ands	r3, r2
 80035d0:	853b      	strh	r3, [r7, #40]	; 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e6:	b292      	uxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	7b1b      	ldrb	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d122      	bne.n	800364e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003610:	b29b      	uxth	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	3306      	adds	r3, #6
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003630:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8087 	beq.w	8003748 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	6959      	ldr	r1, [r3, #20]
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	88da      	ldrh	r2, [r3, #6]
 8003646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003648:	f004 ff9e 	bl	8008588 <USB_ReadPMA>
 800364c:	e07c      	b.n	8003748 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d108      	bne.n	8003668 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003658:	461a      	mov	r2, r3
 800365a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f927 	bl	80038b0 <HAL_PCD_EP_DB_Receive>
 8003662:	4603      	mov	r3, r0
 8003664:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003666:	e06f      	b.n	8003748 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	847b      	strh	r3, [r7, #34]	; 0x22
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800369c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d021      	beq.n	8003706 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	3302      	adds	r3, #2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02a      	beq.n	8003748 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	891a      	ldrh	r2, [r3, #8]
 80036fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003700:	f004 ff42 	bl	8008588 <USB_ReadPMA>
 8003704:	e020      	b.n	8003748 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	3306      	adds	r3, #6
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003730:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	6959      	ldr	r1, [r3, #20]
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	895a      	ldrh	r2, [r3, #10]
 8003742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003744:	f004 ff20 	bl	8008588 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800374e:	441a      	add	r2, r3
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800375a:	441a      	add	r2, r3
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <PCD_EP_ISR_Handler+0x4c2>
 8003768:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d206      	bcs.n	8003780 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f006 fb69 	bl	8009e50 <HAL_PCD_DataOutStageCallback>
 800377e:	e005      	b.n	800378c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f002 ff58 	bl	800663c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800378c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d07e      	beq.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c4:	843b      	strh	r3, [r7, #32]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	441a      	add	r2, r3
 80037d4:	8c3b      	ldrh	r3, [r7, #32]
 80037d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	78db      	ldrb	r3, [r3, #3]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d00c      	beq.n	8003804 <PCD_EP_ISR_Handler+0x554>
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	78db      	ldrb	r3, [r3, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d146      	bne.n	8003888 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d141      	bne.n	8003888 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	3302      	adds	r3, #2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	8bfb      	ldrh	r3, [r7, #30]
 8003834:	429a      	cmp	r2, r3
 8003836:	d906      	bls.n	8003846 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	8bfb      	ldrh	r3, [r7, #30]
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	619a      	str	r2, [r3, #24]
 8003844:	e002      	b.n	800384c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f006 fb13 	bl	8009e86 <HAL_PCD_DataInStageCallback>
 8003860:	e018      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	8bfb      	ldrh	r3, [r7, #30]
 8003868:	441a      	add	r2, r3
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	8bfb      	ldrh	r3, [r7, #30]
 8003874:	441a      	add	r2, r3
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003880:	4618      	mov	r0, r3
 8003882:	f002 fedb 	bl	800663c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003886:	e005      	b.n	8003894 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800388a:	461a      	mov	r2, r3
 800388c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f91b 	bl	8003aca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800389c:	b29b      	uxth	r3, r3
 800389e:	b21b      	sxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f6ff ad0a 	blt.w	80032ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3738      	adds	r7, #56	; 0x38
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d07e      	beq.n	80039c6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	3302      	adds	r3, #2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d306      	bcc.n	800390a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	619a      	str	r2, [r3, #24]
 8003908:	e002      	b.n	8003910 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d123      	bne.n	8003960 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	833b      	strh	r3, [r7, #24]
 8003934:	8b3b      	ldrh	r3, [r7, #24]
 8003936:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800393a:	833b      	strh	r3, [r7, #24]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	8b3b      	ldrh	r3, [r7, #24]
 800394c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395c:	b29b      	uxth	r3, r3
 800395e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01f      	beq.n	80039aa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003984:	82fb      	strh	r3, [r7, #22]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	8afb      	ldrh	r3, [r7, #22]
 8003996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8087 	beq.w	8003ac0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6959      	ldr	r1, [r3, #20]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	891a      	ldrh	r2, [r3, #8]
 80039be:	8b7b      	ldrh	r3, [r7, #26]
 80039c0:	f004 fde2 	bl	8008588 <USB_ReadPMA>
 80039c4:	e07c      	b.n	8003ac0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	3306      	adds	r3, #6
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	8b7b      	ldrh	r3, [r7, #26]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d306      	bcc.n	8003a08 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	8b7b      	ldrh	r3, [r7, #26]
 8003a00:	1ad2      	subs	r2, r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	619a      	str	r2, [r3, #24]
 8003a06:	e002      	b.n	8003a0e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d123      	bne.n	8003a5e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a30:	83fb      	strh	r3, [r7, #30]
 8003a32:	8bfb      	ldrh	r3, [r7, #30]
 8003a34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a38:	83fb      	strh	r3, [r7, #30]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8bfb      	ldrh	r3, [r7, #30]
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11f      	bne.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	83bb      	strh	r3, [r7, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	8bbb      	ldrh	r3, [r7, #28]
 8003a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003aa8:	8b7b      	ldrh	r3, [r7, #26]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	895a      	ldrh	r2, [r3, #10]
 8003aba:	8b7b      	ldrh	r3, [r7, #26]
 8003abc:	f004 fd64 	bl	8008588 <USB_ReadPMA>
    }
  }

  return count;
 8003ac0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b0a2      	sub	sp, #136	; 0x88
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 81c7 	beq.w	8003e72 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	3302      	adds	r3, #2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d907      	bls.n	8003b2c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	e002      	b.n	8003b32 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 80b9 	bne.w	8003cae <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d126      	bne.n	8003b92 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	4413      	add	r3, r2
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	e01a      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d116      	bne.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	4413      	add	r3, r2
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	011a      	lsls	r2, r3, #4
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d126      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4413      	add	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	011a      	lsls	r2, r3, #4
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e017      	b.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d113      	bne.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f006 f913 	bl	8009e86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 82d4 	beq.w	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	827b      	strh	r3, [r7, #18]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	8a7b      	ldrh	r3, [r7, #18]
 8003c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8013      	strh	r3, [r2, #0]
 8003cac:	e2b2      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	f040 8286 	bne.w	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d10:	441a      	add	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d1e:	441a      	add	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d309      	bcc.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	e015      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d5a:	e009      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d155      	bne.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	4413      	add	r3, r2
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	011a      	lsls	r2, r3, #4
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	4413      	add	r3, r2
 8003d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d112      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x302>
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e047      	b.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x392>
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	2b3e      	cmp	r3, #62	; 0x3e
 8003dd0:	d811      	bhi.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de4:	3301      	adds	r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	029b      	lsls	r3, r3, #10
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e032      	b.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x392>
 8003df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x342>
 8003e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	029b      	lsls	r3, r3, #10
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	e01b      	b.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x392>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d117      	bne.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x392>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	643b      	str	r3, [r7, #64]	; 0x40
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	4413      	add	r3, r2
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	011a      	lsls	r2, r3, #4
 8003e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6959      	ldr	r1, [r3, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	891a      	ldrh	r2, [r3, #8]
 8003e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f004 fb47 	bl	80084fe <USB_WritePMA>
 8003e70:	e1d0      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	3306      	adds	r3, #6
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d307      	bcc.n	8003eba <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	e002      	b.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 80c4 	bne.w	8004052 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d126      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x456>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	4413      	add	r3, r2
 8003ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	011a      	lsls	r2, r3, #4
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ef8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003efa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e01a      	b.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d116      	bne.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3c:	4413      	add	r3, r2
 8003f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	011a      	lsls	r2, r3, #4
 8003f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f48:	4413      	add	r3, r2
 8003f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f52:	2200      	movs	r2, #0
 8003f54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d12f      	bne.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	011a      	lsls	r2, r3, #4
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e017      	b.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d113      	bne.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fda:	4413      	add	r3, r2
 8003fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	011a      	lsls	r2, r3, #4
 8003fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f005 ff43 	bl	8009e86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 8104 	bne.w	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800403c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	b29b      	uxth	r3, r3
 800404e:	8013      	strh	r3, [r2, #0]
 8004050:	e0e0      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d121      	bne.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800408c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	b29b      	uxth	r3, r3
 800409e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f040 80b4 	bne.w	8004214 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040b4:	441a      	add	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040c2:	441a      	add	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d309      	bcc.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	1ad2      	subs	r2, r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	621a      	str	r2, [r3, #32]
 80040e6:	e015      	b.n	8004114 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80040f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040fe:	e009      	b.n	8004114 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	667b      	str	r3, [r7, #100]	; 0x64
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d155      	bne.n	80041ce <HAL_PCD_EP_DB_Transmit+0x704>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004136:	4413      	add	r3, r2
 8004138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004142:	4413      	add	r3, r2
 8004144:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004148:	65bb      	str	r3, [r7, #88]	; 0x58
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d112      	bne.n	8004176 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800415a:	b29a      	uxth	r2, r3
 800415c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e044      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x736>
 8004176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004178:	2b3e      	cmp	r3, #62	; 0x3e
 800417a:	d811      	bhi.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800417c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	657b      	str	r3, [r7, #84]	; 0x54
 8004182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	3301      	adds	r3, #1
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
 8004192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004194:	b29b      	uxth	r3, r3
 8004196:	029b      	lsls	r3, r3, #10
 8004198:	b29a      	uxth	r2, r3
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	e02f      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x736>
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	657b      	str	r3, [r7, #84]	; 0x54
 80041a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	3b01      	subs	r3, #1
 80041b4:	657b      	str	r3, [r7, #84]	; 0x54
 80041b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	e018      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x736>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d114      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x736>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041de:	b29b      	uxth	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e4:	4413      	add	r3, r2
 80041e6:	667b      	str	r3, [r7, #100]	; 0x64
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	011a      	lsls	r2, r3, #4
 80041ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f0:	4413      	add	r3, r2
 80041f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
 80041f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6959      	ldr	r1, [r3, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	895a      	ldrh	r2, [r3, #10]
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	b29b      	uxth	r3, r3
 8004210:	f004 f975 	bl	80084fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	823b      	strh	r3, [r7, #16]
 8004230:	8a3b      	ldrh	r3, [r7, #16]
 8004232:	f083 0310 	eor.w	r3, r3, #16
 8004236:	823b      	strh	r3, [r7, #16]
 8004238:	8a3b      	ldrh	r3, [r7, #16]
 800423a:	f083 0320 	eor.w	r3, r3, #32
 800423e:	823b      	strh	r3, [r7, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	8a3b      	ldrh	r3, [r7, #16]
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3788      	adds	r7, #136	; 0x88
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	817b      	strh	r3, [r7, #10]
 800427c:	4613      	mov	r3, r2
 800427e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004280:	897b      	ldrh	r3, [r7, #10]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428c:	897b      	ldrh	r3, [r7, #10]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e009      	b.n	80042b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042a4:	897a      	ldrh	r2, [r7, #10]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	80da      	strh	r2, [r3, #6]
 80042cc:	e00b      	b.n	80042e6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2201      	movs	r2, #1
 80042d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e31d      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004306:	4b94      	ldr	r3, [pc, #592]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004310:	4b91      	ldr	r3, [pc, #580]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d07b      	beq.n	800441e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d006      	beq.n	800433a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d10f      	bne.n	8004352 <HAL_RCC_OscConfig+0x5e>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d10b      	bne.n	8004352 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433a:	4b87      	ldr	r3, [pc, #540]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06a      	beq.n	800441c <HAL_RCC_OscConfig+0x128>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d166      	bne.n	800441c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e2f7      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x74>
 800435a:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7e      	ldr	r2, [pc, #504]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e02d      	b.n	80043c4 <HAL_RCC_OscConfig+0xd0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10c      	bne.n	800438a <HAL_RCC_OscConfig+0x96>
 8004370:	4b79      	ldr	r3, [pc, #484]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a78      	ldr	r2, [pc, #480]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b76      	ldr	r3, [pc, #472]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a75      	ldr	r2, [pc, #468]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0xd0>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0xb8>
 8004392:	4b71      	ldr	r3, [pc, #452]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a70      	ldr	r2, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6d      	ldr	r2, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd0>
 80043ac:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a69      	ldr	r2, [pc, #420]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a66      	ldr	r2, [pc, #408]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fa2c 	bl	8001828 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd fa28 	bl	8001828 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e2ad      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe0>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fa18 	bl	8001828 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd fa14 	bl	8001828 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e299      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800440e:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x108>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d05a      	beq.n	80044e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d119      	bne.n	800446a <HAL_RCC_OscConfig+0x176>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443c:	4b46      	ldr	r3, [pc, #280]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x160>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e276      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	493d      	ldr	r1, [pc, #244]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004468:	e03a      	b.n	80044e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004472:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCC_OscConfig+0x268>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fd f9d6 	bl	8001828 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd f9d2 	bl	8001828 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e257      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	492a      	ldr	r1, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
 80044b2:	e015      	b.n	80044e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b4:	4b29      	ldr	r3, [pc, #164]	; (800455c <HAL_RCC_OscConfig+0x268>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd f9b5 	bl	8001828 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd f9b1 	bl	8001828 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e236      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044d4:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80b8 	beq.w	800465e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d170      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_OscConfig+0x218>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e21a      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004518:	429a      	cmp	r2, r3
 800451a:	d921      	bls.n	8004560 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fc4b 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e208      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4906      	ldr	r1, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	4901      	ldr	r1, [pc, #4]	; (8004558 <HAL_RCC_OscConfig+0x264>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	e020      	b.n	800459a <HAL_RCC_OscConfig+0x2a6>
 8004558:	40023800 	.word	0x40023800
 800455c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004560:	4b99      	ldr	r3, [pc, #612]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4996      	ldr	r1, [pc, #600]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004572:	4b95      	ldr	r3, [pc, #596]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	4991      	ldr	r1, [pc, #580]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fc16 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e1d3      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	0b5b      	lsrs	r3, r3, #13
 80045a0:	3301      	adds	r3, #1
 80045a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80045aa:	4a87      	ldr	r2, [pc, #540]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	0912      	lsrs	r2, r2, #4
 80045b0:	f002 020f 	and.w	r2, r2, #15
 80045b4:	4985      	ldr	r1, [pc, #532]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045b6:	5c8a      	ldrb	r2, [r1, r2]
 80045b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045ba:	4a85      	ldr	r2, [pc, #532]	; (80047d0 <HAL_RCC_OscConfig+0x4dc>)
 80045bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045be:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCC_OscConfig+0x4e0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd f8e4 	bl	8001790 <HAL_InitTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d045      	beq.n	800465e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	e1b5      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d029      	beq.n	8004632 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045de:	4b7e      	ldr	r3, [pc, #504]	; (80047d8 <HAL_RCC_OscConfig+0x4e4>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd f920 	bl	8001828 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ec:	f7fd f91c 	bl	8001828 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1a1      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045fe:	4b72      	ldr	r3, [pc, #456]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460a:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	496c      	ldr	r1, [pc, #432]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800461c:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	4967      	ldr	r1, [pc, #412]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004632:	4b69      	ldr	r3, [pc, #420]	; (80047d8 <HAL_RCC_OscConfig+0x4e4>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd f8f6 	bl	8001828 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004640:	f7fd f8f2 	bl	8001828 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e177      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004652:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d030      	beq.n	80046cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <HAL_RCC_OscConfig+0x4e8>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fd f8d6 	bl	8001828 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004680:	f7fd f8d2 	bl	8001828 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e157      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x38c>
 800469e:	e015      	b.n	80046cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a0:	4b4e      	ldr	r3, [pc, #312]	; (80047dc <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fd f8bf 	bl	8001828 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fd f8bb 	bl	8001828 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e140      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046c0:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80b5 	beq.w	8004844 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	4a36      	ldr	r2, [pc, #216]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6253      	str	r3, [r2, #36]	; 0x24
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a32      	ldr	r2, [pc, #200]	; (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fd f883 	bl	8001828 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fd f87f 	bl	8001828 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	; 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e104      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x466>
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6353      	str	r3, [r2, #52]	; 0x34
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_OscConfig+0x4c2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x488>
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476c:	6353      	str	r3, [r2, #52]	; 0x34
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004778:	6353      	str	r3, [r2, #52]	; 0x34
 800477a:	e01c      	b.n	80047b6 <HAL_RCC_OscConfig+0x4c2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10c      	bne.n	800479e <HAL_RCC_OscConfig+0x4aa>
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6353      	str	r3, [r2, #52]	; 0x34
 8004790:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6353      	str	r3, [r2, #52]	; 0x34
 800479c:	e00b      	b.n	80047b6 <HAL_RCC_OscConfig+0x4c2>
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	6353      	str	r3, [r2, #52]	; 0x34
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	4a06      	ldr	r2, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80047b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d024      	beq.n	8004808 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fd f833 	bl	8001828 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c4:	e019      	b.n	80047fa <HAL_RCC_OscConfig+0x506>
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800a3e0 	.word	0x0800a3e0
 80047d0:	20000000 	.word	0x20000000
 80047d4:	20000004 	.word	0x20000004
 80047d8:	42470020 	.word	0x42470020
 80047dc:	42470680 	.word	0x42470680
 80047e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fd f820 	bl	8001828 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0a3      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047fa:	4b54      	ldr	r3, [pc, #336]	; (800494c <HAL_RCC_OscConfig+0x658>)
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ee      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4f0>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fd f80e 	bl	8001828 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fd f80a 	bl	8001828 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e08d      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004826:	4b49      	ldr	r3, [pc, #292]	; (800494c <HAL_RCC_OscConfig+0x658>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b44      	ldr	r3, [pc, #272]	; (800494c <HAL_RCC_OscConfig+0x658>)
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	4a43      	ldr	r2, [pc, #268]	; (800494c <HAL_RCC_OscConfig+0x658>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004842:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d079      	beq.n	8004940 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d056      	beq.n	8004900 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b02      	cmp	r3, #2
 8004858:	d13b      	bne.n	80048d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCC_OscConfig+0x65c>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fc ffe2 	bl	8001828 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fc ffde 	bl	8001828 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e063      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487a:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_RCC_OscConfig+0x658>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004886:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_OscConfig+0x658>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4319      	orrs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	430b      	orrs	r3, r1
 800489e:	492b      	ldr	r1, [pc, #172]	; (800494c <HAL_RCC_OscConfig+0x658>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <HAL_RCC_OscConfig+0x65c>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fc ffbd 	bl	8001828 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fc ffb9 	bl	8001828 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e03e      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_RCC_OscConfig+0x658>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x5be>
 80048d0:	e036      	b.n	8004940 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCC_OscConfig+0x65c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fc ffa6 	bl	8001828 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fc ffa2 	bl	8001828 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e027      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <HAL_RCC_OscConfig+0x658>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x5ec>
 80048fe:	e01f      	b.n	8004940 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e01a      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_RCC_OscConfig+0x658>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	429a      	cmp	r2, r3
 800491e:	d10d      	bne.n	800493c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	42470060 	.word	0x42470060

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e11a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d919      	bls.n	80049aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCC_ClockConfig+0x34>
 800497c:	4b8a      	ldr	r3, [pc, #552]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a89      	ldr	r2, [pc, #548]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b87      	ldr	r3, [pc, #540]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 0201 	bic.w	r2, r3, #1
 8004990:	4985      	ldr	r1, [pc, #532]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004998:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d001      	beq.n	80049aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0f9      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b6:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	497a      	ldr	r1, [pc, #488]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 808e 	beq.w	8004af2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d121      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0d7      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f6:	4b6d      	ldr	r3, [pc, #436]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0cb      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a0e:	4b67      	ldr	r3, [pc, #412]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0bf      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0b7      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b5f      	ldr	r3, [pc, #380]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	495c      	ldr	r1, [pc, #368]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fc fef2 	bl	8001828 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d112      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fc feea 	bl	8001828 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e09b      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a66:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d1ee      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xfc>
 8004a72:	e03e      	b.n	8004af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d112      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7e:	f7fc fed3 	bl	8001828 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e084      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a94:	4b45      	ldr	r3, [pc, #276]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x12a>
 8004aa0:	e027      	b.n	8004af2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d11d      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7fc febc 	bl	8001828 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e06d      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ac2:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d1ee      	bne.n	8004aac <HAL_RCC_ClockConfig+0x158>
 8004ace:	e010      	b.n	8004af2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fc feaa 	bl	8001828 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e05b      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ee      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d219      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x1be>
 8004b06:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a27      	ldr	r2, [pc, #156]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004b0c:	f043 0304 	orr.w	r3, r3, #4
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	4923      	ldr	r1, [pc, #140]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <HAL_RCC_ClockConfig+0x254>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e034      	b.n	8004b9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4917      	ldr	r1, [pc, #92]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	490f      	ldr	r1, [pc, #60]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b72:	f000 f823 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_RCC_ClockConfig+0x258>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	490b      	ldr	r1, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x25c>)
 8004b84:	5ccb      	ldrb	r3, [r1, r3]
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x264>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fdfc 	bl	8001790 <HAL_InitTick>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023c00 	.word	0x40023c00
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	0800a3e0 	.word	0x0800a3e0
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000004 	.word	0x20000004

08004bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc0:	b092      	sub	sp, #72	; 0x48
 8004bc2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bc4:	4b79      	ldr	r3, [pc, #484]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	f200 80d5 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x28>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x2e>
 8004be2:	e0cf      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004be8:	e0da      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bea:	4b72      	ldr	r3, [pc, #456]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bee:	e0d7      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	4b6f      	ldr	r3, [pc, #444]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c00:	0d9b      	lsrs	r3, r3, #22
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b68      	ldr	r3, [pc, #416]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d05d      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	f04f 0000 	mov.w	r0, #0
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	0159      	lsls	r1, r3, #5
 8004c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c34:	0150      	lsls	r0, r2, #5
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	1a51      	subs	r1, r2, r1
 8004c3e:	6139      	str	r1, [r7, #16]
 8004c40:	4629      	mov	r1, r5
 8004c42:	eb63 0301 	sbc.w	r3, r3, r1
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c54:	4659      	mov	r1, fp
 8004c56:	018b      	lsls	r3, r1, #6
 8004c58:	4651      	mov	r1, sl
 8004c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c5e:	4651      	mov	r1, sl
 8004c60:	018a      	lsls	r2, r1, #6
 8004c62:	46d4      	mov	ip, sl
 8004c64:	ebb2 080c 	subs.w	r8, r2, ip
 8004c68:	4659      	mov	r1, fp
 8004c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c82:	4690      	mov	r8, r2
 8004c84:	4699      	mov	r9, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	eb18 0303 	adds.w	r3, r8, r3
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	462b      	mov	r3, r5
 8004c90:	eb49 0303 	adc.w	r3, r9, r3
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	024b      	lsls	r3, r1, #9
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4604      	mov	r4, r0
 8004cac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	024a      	lsls	r2, r1, #9
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	2200      	movs	r2, #0
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cc4:	f7fb fd74 	bl	80007b0 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd0:	e055      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8004cda:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cde:	4642      	mov	r2, r8
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	46c4      	mov	ip, r8
 8004cf8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	468c      	mov	ip, r1
 8004d02:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d12:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d16:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d1a:	ebb2 040a 	subs.w	r4, r2, sl
 8004d1e:	eb63 050b 	sbc.w	r5, r3, fp
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	00eb      	lsls	r3, r5, #3
 8004d2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d30:	00e2      	lsls	r2, r4, #3
 8004d32:	4614      	mov	r4, r2
 8004d34:	461d      	mov	r5, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	18e3      	adds	r3, r4, r3
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	eb45 0303 	adc.w	r3, r5, r3
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d50:	4629      	mov	r1, r5
 8004d52:	028b      	lsls	r3, r1, #10
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	4604      	mov	r4, r0
 8004d5a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d5e:	4601      	mov	r1, r0
 8004d60:	028a      	lsls	r2, r1, #10
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	61fa      	str	r2, [r7, #28]
 8004d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d72:	f7fb fd1d 	bl	80007b0 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d82:	e00d      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0b5b      	lsrs	r3, r3, #13
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	3301      	adds	r3, #1
 8004d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3748      	adds	r7, #72	; 0x48
 8004da6:	46bd      	mov	sp, r7
 8004da8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200
 8004db8:	0800a3d4 	.word	0x0800a3d4

08004dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dc8:	4b29      	ldr	r3, [pc, #164]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d12c      	bne.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dd4:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e016      	b.n	8004e1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dec:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	6253      	str	r3, [r2, #36]	; 0x24
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e0c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0e:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e20:	d105      	bne.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e28:	d101      	bne.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d105      	bne.n	8004e40 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 0201 	bic.w	r2, r3, #1
 8004e48:	490b      	ldr	r1, [pc, #44]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d001      	beq.n	8004e62 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40007000 	.word	0x40007000
 8004e78:	40023c00 	.word	0x40023c00

08004e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e031      	b.n	8004ef2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fc fa0e 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fba8 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e032      	b.n	8004f7a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d00e      	beq.n	8004f44 <HAL_TIM_Base_Start+0x48>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_Base_Start+0x88>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_TIM_Base_Start+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <HAL_TIM_Base_Start+0x8c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIM_Base_Start+0x48>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <HAL_TIM_Base_Start+0x90>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d111      	bne.n	8004f68 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d010      	beq.n	8004f78 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	e007      	b.n	8004f78 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40010800 	.word	0x40010800

08004f90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e031      	b.n	8005006 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f829 	bl	800500e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 fb1e 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_TIM_OC_Start_IT+0x24>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e022      	b.n	800508a <HAL_TIM_OC_Start_IT+0x6a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d109      	bne.n	800505e <HAL_TIM_OC_Start_IT+0x3e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	bf14      	ite	ne
 8005056:	2301      	movne	r3, #1
 8005058:	2300      	moveq	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	e015      	b.n	800508a <HAL_TIM_OC_Start_IT+0x6a>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d109      	bne.n	8005078 <HAL_TIM_OC_Start_IT+0x58>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e008      	b.n	800508a <HAL_TIM_OC_Start_IT+0x6a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e097      	b.n	80051c2 <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_OC_Start_IT+0x82>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80050a0:	e013      	b.n	80050ca <HAL_TIM_OC_Start_IT+0xaa>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_OC_Start_IT+0x92>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80050b0:	e00b      	b.n	80050ca <HAL_TIM_OC_Start_IT+0xaa>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_OC_Start_IT+0xa2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050c0:	e003      	b.n	80050ca <HAL_TIM_OC_Start_IT+0xaa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d841      	bhi.n	8005154 <HAL_TIM_OC_Start_IT+0x134>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <HAL_TIM_OC_Start_IT+0xb8>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	08005155 	.word	0x08005155
 80050e0:	08005155 	.word	0x08005155
 80050e4:	08005155 	.word	0x08005155
 80050e8:	0800511f 	.word	0x0800511f
 80050ec:	08005155 	.word	0x08005155
 80050f0:	08005155 	.word	0x08005155
 80050f4:	08005155 	.word	0x08005155
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005155 	.word	0x08005155
 8005100:	08005155 	.word	0x08005155
 8005104:	08005155 	.word	0x08005155
 8005108:	08005143 	.word	0x08005143
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0202 	orr.w	r2, r2, #2
 800511a:	60da      	str	r2, [r3, #12]
      break;
 800511c:	e01b      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0204 	orr.w	r2, r2, #4
 800512c:	60da      	str	r2, [r3, #12]
      break;
 800512e:	e012      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0208 	orr.w	r2, r2, #8
 800513e:	60da      	str	r2, [r3, #12]
      break;
 8005140:	e009      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0210 	orr.w	r2, r2, #16
 8005150:	60da      	str	r2, [r3, #12]
      break;
 8005152:	e000      	b.n	8005156 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8005154:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2201      	movs	r2, #1
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fc43 	bl	80059ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d00e      	beq.n	800518c <HAL_TIM_OC_Start_IT+0x16c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_TIM_OC_Start_IT+0x1ac>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_OC_Start_IT+0x16c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <HAL_TIM_OC_Start_IT+0x1b0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_OC_Start_IT+0x16c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <HAL_TIM_OC_Start_IT+0x1b4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d111      	bne.n	80051b0 <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d010      	beq.n	80051c0 <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e007      	b.n	80051c0 <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40010800 	.word	0x40010800

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9dd 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fb ff16 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9df 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9b3 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fb feec 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9b5 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f989 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fec2 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f98b 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f95f 	bl	80055da <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fb fe98 	bl	8001054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f961 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f936 	bl	80055c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f93b 	bl	80055fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e046      	b.n	8005438 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d839      	bhi.n	800542c <HAL_TIM_OC_ConfigChannel+0x9c>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	0800542d 	.word	0x0800542d
 80053cc:	0800542d 	.word	0x0800542d
 80053d0:	08005403 	.word	0x08005403
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	0800542d 	.word	0x0800542d
 80053e0:	08005411 	.word	0x08005411
 80053e4:	0800542d 	.word	0x0800542d
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800541f 	.word	0x0800541f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f96a 	bl	80056d4 <TIM_OC1_SetConfig>
      break;
 8005400:	e015      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f99f 	bl	800574c <TIM_OC2_SetConfig>
      break;
 800540e:	e00e      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f9d6 	bl	80057c8 <TIM_OC3_SetConfig>
      break;
 800541c:	e007      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fa0c 	bl	8005842 <TIM_OC4_SetConfig>
      break;
 800542a:	e000      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800542c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIM_ConfigClockSource+0x18>
 8005454:	2302      	movs	r3, #2
 8005456:	e0b3      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x180>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005490:	d03e      	beq.n	8005510 <HAL_TIM_ConfigClockSource+0xd0>
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	f200 8087 	bhi.w	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	f000 8085 	beq.w	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d87f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d01a      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0xa2>
 80054ac:	2b70      	cmp	r3, #112	; 0x70
 80054ae:	d87b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d050      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x116>
 80054b4:	2b60      	cmp	r3, #96	; 0x60
 80054b6:	d877      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d03c      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0xf6>
 80054bc:	2b50      	cmp	r3, #80	; 0x50
 80054be:	d873      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d058      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x136>
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d86f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d064      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x156>
 80054cc:	2b30      	cmp	r3, #48	; 0x30
 80054ce:	d86b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d060      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x156>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d867      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x156>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d05a      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054e0:	e062      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6899      	ldr	r1, [r3, #8]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f000 fa5b 	bl	80059ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005504:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
      break;
 800550e:	e04e      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6899      	ldr	r1, [r3, #8]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f000 fa44 	bl	80059ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005532:	609a      	str	r2, [r3, #8]
      break;
 8005534:	e03b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	f000 f9bb 	bl	80058be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2150      	movs	r1, #80	; 0x50
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa12 	bl	8005978 <TIM_ITRx_SetConfig>
      break;
 8005554:	e02b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	461a      	mov	r2, r3
 8005564:	f000 f9d9 	bl	800591a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2160      	movs	r1, #96	; 0x60
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fa02 	bl	8005978 <TIM_ITRx_SetConfig>
      break;
 8005574:	e01b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	461a      	mov	r2, r3
 8005584:	f000 f99b 	bl	80058be <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2140      	movs	r1, #64	; 0x40
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f9f2 	bl	8005978 <TIM_ITRx_SetConfig>
      break;
 8005594:	e00b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f000 f9e9 	bl	8005978 <TIM_ITRx_SetConfig>
        break;
 80055a6:	e002      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x28>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a25      	ldr	r2, [pc, #148]	; (80056c0 <TIM_Base_SetConfig+0xb0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x28>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <TIM_Base_SetConfig+0xb4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0x6a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <TIM_Base_SetConfig+0xb0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0x6a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <TIM_Base_SetConfig+0xb4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0x6a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <TIM_Base_SetConfig+0xb8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0x6a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <TIM_Base_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0x6a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <TIM_Base_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	615a      	str	r2, [r3, #20]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40010800 	.word	0x40010800
 80056cc:	40010c00 	.word	0x40010c00
 80056d0:	40011000 	.word	0x40011000

080056d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0210 	bic.w	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0320 	bic.w	r3, r3, #32
 8005796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005870:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005878:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	031b      	lsls	r3, r3, #12
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058be:	b480      	push	{r7}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 0201 	bic.w	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 030a 	bic.w	r3, r3, #10
 80058fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	f043 0307 	orr.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	609a      	str	r2, [r3, #8]
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	021a      	lsls	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2201      	movs	r2, #1
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	431a      	orrs	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
	...

08005a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e046      	b.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a12      	ldr	r2, [pc, #72]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a10      	ldr	r2, [pc, #64]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d10c      	bne.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40010800 	.word	0x40010800

08005af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005b28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b50:	b084      	sub	sp, #16
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	f107 0014 	add.w	r0, r7, #20
 8005b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	b004      	add	sp, #16
 8005b8e:	4770      	bx	lr

08005b90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b09b      	sub	sp, #108	; 0x6c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d81f      	bhi.n	8005c02 <USB_ActivateEndpoint+0x72>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <USB_ActivateEndpoint+0x38>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bd9 	.word	0x08005bd9
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005c0b 	.word	0x08005c0b
 8005bd4:	08005be7 	.word	0x08005be7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005bd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005be4:	e012      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005be6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005bee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005bf2:	e00b      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c00:	e004      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c08:	e000      	b.n	8005c0c <USB_ActivateEndpoint+0x7c>
      break;
 8005c0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	441a      	add	r2, r3
 8005c5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	7b1b      	ldrb	r3, [r3, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 8149 	bne.w	8005f10 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8084 	beq.w	8005d90 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	88db      	ldrh	r3, [r3, #6]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	81fb      	strh	r3, [r7, #14]
 8005cca:	89fb      	ldrh	r3, [r7, #14]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01b      	beq.n	8005d0c <USB_ActivateEndpoint+0x17c>
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	81bb      	strh	r3, [r7, #12]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	89bb      	ldrh	r3, [r7, #12]
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d020      	beq.n	8005d56 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2a:	813b      	strh	r3, [r7, #8]
 8005d2c:	893b      	ldrh	r3, [r7, #8]
 8005d2e:	f083 0320 	eor.w	r3, r3, #32
 8005d32:	813b      	strh	r3, [r7, #8]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	893b      	ldrh	r3, [r7, #8]
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]
 8005d54:	e27f      	b.n	8006256 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	897b      	ldrh	r3, [r7, #10]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
 8005d8e:	e262      	b.n	8006256 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	4413      	add	r3, r2
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	011a      	lsls	r2, r3, #4
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	88db      	ldrh	r3, [r3, #6]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	4413      	add	r3, r2
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d112      	bne.n	8005e16 <USB_ActivateEndpoint+0x286>
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e02f      	b.n	8005e76 <USB_ActivateEndpoint+0x2e6>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1c:	d813      	bhi.n	8005e46 <USB_ActivateEndpoint+0x2b6>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <USB_ActivateEndpoint+0x2a8>
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	3301      	adds	r3, #1
 8005e36:	663b      	str	r3, [r7, #96]	; 0x60
 8005e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e017      	b.n	8005e76 <USB_ActivateEndpoint+0x2e6>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <USB_ActivateEndpoint+0x2d0>
 8005e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	83fb      	strh	r3, [r7, #30]
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01b      	beq.n	8005ec6 <USB_ActivateEndpoint+0x336>
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea4:	83bb      	strh	r3, [r7, #28]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	8bbb      	ldrh	r3, [r7, #28]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	837b      	strh	r3, [r7, #26]
 8005ede:	8b7b      	ldrh	r3, [r7, #26]
 8005ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ee4:	837b      	strh	r3, [r7, #26]
 8005ee6:	8b7b      	ldrh	r3, [r7, #26]
 8005ee8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eec:	837b      	strh	r3, [r7, #26]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8b7b      	ldrh	r3, [r7, #26]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
 8005f0e:	e1a2      	b.n	8006256 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f5c:	4413      	add	r3, r2
 8005f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	891b      	ldrh	r3, [r3, #8]
 8005f74:	085b      	lsrs	r3, r3, #1
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f90:	4413      	add	r3, r2
 8005f92:	653b      	str	r3, [r7, #80]	; 0x50
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	895b      	ldrh	r3, [r3, #10]
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 8091 	bne.w	80060e0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005fcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01b      	beq.n	800600e <USB_ActivateEndpoint+0x47e>
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	873b      	strh	r3, [r7, #56]	; 0x38
 800601c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01b      	beq.n	800605e <USB_ActivateEndpoint+0x4ce>
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006076:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800607c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800607e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]
 80060de:	e0ba      	b.n	8006256 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01d      	beq.n	8006138 <USB_ActivateEndpoint+0x5a8>
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01d      	beq.n	8006190 <USB_ActivateEndpoint+0x600>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	78db      	ldrb	r3, [r3, #3]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d024      	beq.n	80061e2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061b6:	f083 0320 	eor.w	r3, r3, #32
 80061ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061dc:	b29b      	uxth	r3, r3
 80061de:	8013      	strh	r3, [r2, #0]
 80061e0:	e01d      	b.n	800621e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800625a:	4618      	mov	r0, r3
 800625c:	376c      	adds	r7, #108	; 0x6c
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006264:	b480      	push	{r7}
 8006266:	b08d      	sub	sp, #52	; 0x34
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	7b1b      	ldrb	r3, [r3, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 808e 	bne.w	8006394 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d044      	beq.n	800630a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	81bb      	strh	r3, [r7, #12]
 800628e:	89bb      	ldrh	r3, [r7, #12]
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <USB_DeactivateEndpoint+0x6c>
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	817b      	strh	r3, [r7, #10]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	441a      	add	r2, r3
 80062ba:	897b      	ldrh	r3, [r7, #10]
 80062bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e6:	813b      	strh	r3, [r7, #8]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	893b      	ldrh	r3, [r7, #8]
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]
 8006308:	e192      	b.n	8006630 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	827b      	strh	r3, [r7, #18]
 8006318:	8a7b      	ldrh	r3, [r7, #18]
 800631a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <USB_DeactivateEndpoint+0xf6>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	823b      	strh	r3, [r7, #16]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	8a3b      	ldrh	r3, [r7, #16]
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	81fb      	strh	r3, [r7, #14]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	89fb      	ldrh	r3, [r7, #14]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
 8006392:	e14d      	b.n	8006630 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f040 80a5 	bne.w	80064e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	843b      	strh	r3, [r7, #32]
 80063ac:	8c3b      	ldrh	r3, [r7, #32]
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01b      	beq.n	80063ee <USB_DeactivateEndpoint+0x18a>
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	83fb      	strh	r3, [r7, #30]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	8bfb      	ldrh	r3, [r7, #30]
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	83bb      	strh	r3, [r7, #28]
 80063fc:	8bbb      	ldrh	r3, [r7, #28]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01b      	beq.n	800643e <USB_DeactivateEndpoint+0x1da>
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641c:	837b      	strh	r3, [r7, #26]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	441a      	add	r2, r3
 8006428:	8b7b      	ldrh	r3, [r7, #26]
 800642a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800643a:	b29b      	uxth	r3, r3
 800643c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006454:	833b      	strh	r3, [r7, #24]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	8b3b      	ldrh	r3, [r7, #24]
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	82fb      	strh	r3, [r7, #22]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	8afb      	ldrh	r3, [r7, #22]
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c4:	82bb      	strh	r3, [r7, #20]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	8abb      	ldrh	r3, [r7, #20]
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
 80064e6:	e0a3      	b.n	8006630 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01b      	beq.n	8006538 <USB_DeactivateEndpoint+0x2d4>
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	b29b      	uxth	r3, r3
 8006536:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01b      	beq.n	8006588 <USB_DeactivateEndpoint+0x324>
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	853b      	strh	r3, [r7, #40]	; 0x28
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006584:	b29b      	uxth	r3, r3
 8006586:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800661c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662c:	b29b      	uxth	r3, r3
 800662e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3734      	adds	r7, #52	; 0x34
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b0cc      	sub	sp, #304	; 0x130
 8006640:	af00      	add	r7, sp, #0
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	6018      	str	r0, [r3, #0]
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006654:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b01      	cmp	r3, #1
 8006664:	f041 817d 	bne.w	8007962 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	d908      	bls.n	8006696 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006694:	e007      	b.n	80066a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	7b1b      	ldrb	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d152      	bne.n	800675c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6959      	ldr	r1, [r3, #20]
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	88da      	ldrh	r2, [r3, #6]
 80066ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f001 ff0e 	bl	80084fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80066ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006704:	b29b      	uxth	r3, r3
 8006706:	4619      	mov	r1, r3
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006710:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006714:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	440a      	add	r2, r1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	011a      	lsls	r2, r3, #4
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4413      	add	r3, r2
 8006738:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674a:	b29a      	uxth	r2, r3
 800674c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006750:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	f001 b8b5 	b.w	80078c6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	78db      	ldrb	r3, [r3, #3]
 8006768:	2b02      	cmp	r3, #2
 800676a:	f040 84c6 	bne.w	80070fa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	429a      	cmp	r2, r3
 8006788:	f240 8443 	bls.w	8007012 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800678c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 823e 	beq.w	8006caa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006836:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800683a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 809a 	bne.w	8006988 <USB_EPStartXfer+0x34c>
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006860:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	4619      	mov	r1, r3
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006886:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	440a      	add	r2, r1
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d122      	bne.n	8006906 <USB_EPStartXfer+0x2ca>
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	e079      	b.n	80069fa <USB_EPStartXfer+0x3be>
 8006906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690a:	2b3e      	cmp	r3, #62	; 0x3e
 800690c:	d81b      	bhi.n	8006946 <USB_EPStartXfer+0x30a>
 800690e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USB_EPStartXfer+0x2f2>
 8006924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29a      	uxth	r2, r3
 8006938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e059      	b.n	80069fa <USB_EPStartXfer+0x3be>
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <USB_EPStartXfer+0x32a>
 800695c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006960:	3b01      	subs	r3, #1
 8006962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006966:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	801a      	strh	r2, [r3, #0]
 8006986:	e038      	b.n	80069fa <USB_EPStartXfer+0x3be>
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d130      	bne.n	80069fa <USB_EPStartXfer+0x3be>
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	440a      	add	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	011a      	lsls	r2, r3, #4
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4413      	add	r3, r2
 80069da:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	895b      	ldrh	r3, [r3, #10]
 8006a06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6959      	ldr	r1, [r3, #20]
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a28:	6800      	ldr	r0, [r0, #0]
 8006a2a:	f001 fd68 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	441a      	add	r2, r3
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d90f      	bls.n	8006a88 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	1ad2      	subs	r2, r2, r3
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	621a      	str	r2, [r3, #32]
 8006a86:	e00e      	b.n	8006aa6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 809a 	bne.w	8006bec <USB_EPStartXfer+0x5b0>
 8006ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ac0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ac4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4619      	mov	r1, r3
 8006ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ae6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aea:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	440a      	add	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	011a      	lsls	r2, r3, #4
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d122      	bne.n	8006b6a <USB_EPStartXfer+0x52e>
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	e083      	b.n	8006c72 <USB_EPStartXfer+0x636>
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b70:	d81b      	bhi.n	8006baa <USB_EPStartXfer+0x56e>
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <USB_EPStartXfer+0x556>
 8006b88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	029b      	lsls	r3, r3, #10
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e063      	b.n	8006c72 <USB_EPStartXfer+0x636>
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USB_EPStartXfer+0x58e>
 8006bc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e042      	b.n	8006c72 <USB_EPStartXfer+0x636>
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d13a      	bne.n	8006c72 <USB_EPStartXfer+0x636>
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4619      	mov	r1, r3
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c2e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006c32:	6812      	ldr	r2, [r2, #0]
 8006c34:	440a      	add	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	011a      	lsls	r2, r3, #4
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	891b      	ldrh	r3, [r3, #8]
 8006c7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6959      	ldr	r1, [r3, #20]
 8006c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ca0:	6800      	ldr	r0, [r0, #0]
 8006ca2:	f001 fc2c 	bl	80084fe <USB_WritePMA>
 8006ca6:	f000 be0e 	b.w	80078c6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d16d      	bne.n	8006d96 <USB_EPStartXfer+0x75a>
 8006cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cda:	4413      	add	r3, r2
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	011a      	lsls	r2, r3, #4
 8006cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cee:	4413      	add	r3, r2
 8006cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d112      	bne.n	8006d24 <USB_EPStartXfer+0x6e8>
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e063      	b.n	8006dec <USB_EPStartXfer+0x7b0>
 8006d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d28:	2b3e      	cmp	r3, #62	; 0x3e
 8006d2a:	d817      	bhi.n	8006d5c <USB_EPStartXfer+0x720>
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <USB_EPStartXfer+0x710>
 8006d42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d46:	3301      	adds	r3, #1
 8006d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	e047      	b.n	8006dec <USB_EPStartXfer+0x7b0>
 8006d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <USB_EPStartXfer+0x740>
 8006d72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d76:	3b01      	subs	r3, #1
 8006d78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	029b      	lsls	r3, r3, #10
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e02a      	b.n	8006dec <USB_EPStartXfer+0x7b0>
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d122      	bne.n	8006dec <USB_EPStartXfer+0x7b0>
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	653b      	str	r3, [r7, #80]	; 0x50
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc6:	4413      	add	r3, r2
 8006dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	011a      	lsls	r2, r3, #4
 8006dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dda:	4413      	add	r3, r2
 8006ddc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	891b      	ldrh	r3, [r3, #8]
 8006df8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6959      	ldr	r1, [r3, #20]
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e12:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e16:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	f001 fb6f 	bl	80084fe <USB_WritePMA>
            ep->xfer_buff += len;
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e30:	441a      	add	r2, r3
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d90f      	bls.n	8006e7a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	621a      	str	r2, [r3, #32]
 8006e78:	e00e      	b.n	8006e98 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2200      	movs	r2, #0
 8006e96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d16d      	bne.n	8006f90 <USB_EPStartXfer+0x954>
 8006eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	4413      	add	r3, r2
 8006ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	011a      	lsls	r2, r3, #4
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	4413      	add	r3, r2
 8006eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d112      	bne.n	8006f1e <USB_EPStartXfer+0x8e2>
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e05d      	b.n	8006fda <USB_EPStartXfer+0x99e>
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	2b3e      	cmp	r3, #62	; 0x3e
 8006f24:	d817      	bhi.n	8006f56 <USB_EPStartXfer+0x91a>
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <USB_EPStartXfer+0x90a>
 8006f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f40:	3301      	adds	r3, #1
 8006f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e041      	b.n	8006fda <USB_EPStartXfer+0x99e>
 8006f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <USB_EPStartXfer+0x93a>
 8006f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e024      	b.n	8006fda <USB_EPStartXfer+0x99e>
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d11c      	bne.n	8006fda <USB_EPStartXfer+0x99e>
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb4:	4413      	add	r3, r2
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	011a      	lsls	r2, r3, #4
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	895b      	ldrh	r3, [r3, #10]
 8006fe6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6959      	ldr	r1, [r3, #20]
 8006ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007000:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007004:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007008:	6800      	ldr	r0, [r0, #0]
 800700a:	f001 fa78 	bl	80084fe <USB_WritePMA>
 800700e:	f000 bc5a 	b.w	80078c6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709e:	4413      	add	r3, r2
 80070a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80070ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	891b      	ldrh	r3, [r3, #8]
 80070d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6959      	ldr	r1, [r3, #20]
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070f2:	6800      	ldr	r0, [r0, #0]
 80070f4:	f001 fa03 	bl	80084fe <USB_WritePMA>
 80070f8:	e3e5      	b.n	80078c6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	441a      	add	r2, r3
 800713e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800714e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 81bc 	beq.w	8007514 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800719c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d16d      	bne.n	8007296 <USB_EPStartXfer+0xc5a>
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071da:	4413      	add	r3, r2
 80071dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	011a      	lsls	r2, r3, #4
 80071ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ee:	4413      	add	r3, r2
 80071f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071f4:	677b      	str	r3, [r7, #116]	; 0x74
 80071f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d112      	bne.n	8007224 <USB_EPStartXfer+0xbe8>
 80071fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007208:	b29a      	uxth	r2, r3
 800720a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721c:	b29a      	uxth	r2, r3
 800721e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	e060      	b.n	80072e6 <USB_EPStartXfer+0xcaa>
 8007224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007228:	2b3e      	cmp	r3, #62	; 0x3e
 800722a:	d817      	bhi.n	800725c <USB_EPStartXfer+0xc20>
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <USB_EPStartXfer+0xc10>
 8007242:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007246:	3301      	adds	r3, #1
 8007248:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800724c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007250:	b29b      	uxth	r3, r3
 8007252:	029b      	lsls	r3, r3, #10
 8007254:	b29a      	uxth	r2, r3
 8007256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e044      	b.n	80072e6 <USB_EPStartXfer+0xcaa>
 800725c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	2b00      	cmp	r3, #0
 8007270:	d104      	bne.n	800727c <USB_EPStartXfer+0xc40>
 8007272:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007276:	3b01      	subs	r3, #1
 8007278:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800727c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007280:	b29b      	uxth	r3, r3
 8007282:	029b      	lsls	r3, r3, #10
 8007284:	b29b      	uxth	r3, r3
 8007286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728e:	b29a      	uxth	r2, r3
 8007290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	e027      	b.n	80072e6 <USB_EPStartXfer+0xcaa>
 8007296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d11f      	bne.n	80072e6 <USB_EPStartXfer+0xcaa>
 80072a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	011a      	lsls	r2, r3, #4
 80072d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	895b      	ldrh	r3, [r3, #10]
 80072f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6959      	ldr	r1, [r3, #20]
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007306:	b29b      	uxth	r3, r3
 8007308:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800730c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007310:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007314:	6800      	ldr	r0, [r0, #0]
 8007316:	f001 f8f2 	bl	80084fe <USB_WritePMA>
          ep->xfer_buff += len;
 800731a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732a:	441a      	add	r2, r3
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	429a      	cmp	r2, r3
 8007352:	d90f      	bls.n	8007374 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	1ad2      	subs	r2, r2, r3
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	621a      	str	r2, [r3, #32]
 8007372:	e00e      	b.n	8007392 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8295 	beq.w	80078c6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800739c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d16d      	bne.n	8007488 <USB_EPStartXfer+0xe4c>
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073cc:	4413      	add	r3, r2
 80073ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	011a      	lsls	r2, r3, #4
 80073de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073e6:	667b      	str	r3, [r7, #100]	; 0x64
 80073e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d112      	bne.n	8007416 <USB_EPStartXfer+0xdda>
 80073f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740e:	b29a      	uxth	r2, r3
 8007410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	e063      	b.n	80074de <USB_EPStartXfer+0xea2>
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	2b3e      	cmp	r3, #62	; 0x3e
 800741c:	d817      	bhi.n	800744e <USB_EPStartXfer+0xe12>
 800741e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <USB_EPStartXfer+0xe02>
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007438:	3301      	adds	r3, #1
 800743a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29a      	uxth	r2, r3
 8007448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e047      	b.n	80074de <USB_EPStartXfer+0xea2>
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <USB_EPStartXfer+0xe32>
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007468:	3b01      	subs	r3, #1
 800746a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007480:	b29a      	uxth	r2, r3
 8007482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e02a      	b.n	80074de <USB_EPStartXfer+0xea2>
 8007488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d122      	bne.n	80074de <USB_EPStartXfer+0xea2>
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	673b      	str	r3, [r7, #112]	; 0x70
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b8:	4413      	add	r3, r2
 80074ba:	673b      	str	r3, [r7, #112]	; 0x70
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	011a      	lsls	r2, r3, #4
 80074ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	891b      	ldrh	r3, [r3, #8]
 80074ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6959      	ldr	r1, [r3, #20]
 80074fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007504:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007508:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f000 fff6 	bl	80084fe <USB_WritePMA>
 8007512:	e1d8      	b.n	80078c6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d178      	bne.n	8007616 <USB_EPStartXfer+0xfda>
 8007524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007548:	4413      	add	r3, r2
 800754a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	011a      	lsls	r2, r3, #4
 800755c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007560:	4413      	add	r3, r2
 8007562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007566:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800756a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d116      	bne.n	80075a0 <USB_EPStartXfer+0xf64>
 8007572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800757e:	b29a      	uxth	r2, r3
 8007580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007596:	b29a      	uxth	r2, r3
 8007598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800759c:	801a      	strh	r2, [r3, #0]
 800759e:	e06b      	b.n	8007678 <USB_EPStartXfer+0x103c>
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	2b3e      	cmp	r3, #62	; 0x3e
 80075a6:	d818      	bhi.n	80075da <USB_EPStartXfer+0xf9e>
 80075a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <USB_EPStartXfer+0xf8c>
 80075be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075c2:	3301      	adds	r3, #1
 80075c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	e04e      	b.n	8007678 <USB_EPStartXfer+0x103c>
 80075da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <USB_EPStartXfer+0xfbe>
 80075f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075f4:	3b01      	subs	r3, #1
 80075f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80075fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075fe:	b29b      	uxth	r3, r3
 8007600:	029b      	lsls	r3, r3, #10
 8007602:	b29b      	uxth	r3, r3
 8007604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	e030      	b.n	8007678 <USB_EPStartXfer+0x103c>
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d128      	bne.n	8007678 <USB_EPStartXfer+0x103c>
 8007626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800764a:	4413      	add	r3, r2
 800764c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	011a      	lsls	r2, r3, #4
 800765e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007662:	4413      	add	r3, r2
 8007664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	b29a      	uxth	r2, r3
 8007672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	891b      	ldrh	r3, [r3, #8]
 8007684:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6959      	ldr	r1, [r3, #20]
 8007694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007698:	b29b      	uxth	r3, r3
 800769a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800769e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076a2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076a6:	6800      	ldr	r0, [r0, #0]
 80076a8:	f000 ff29 	bl	80084fe <USB_WritePMA>
          ep->xfer_buff += len;
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695a      	ldr	r2, [r3, #20]
 80076b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076bc:	441a      	add	r2, r3
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d90f      	bls.n	8007706 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	621a      	str	r2, [r3, #32]
 8007704:	e00e      	b.n	8007724 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80cc 	beq.w	80078c6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800773c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d178      	bne.n	800783e <USB_EPStartXfer+0x1202>
 800774c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007770:	4413      	add	r3, r2
 8007772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	011a      	lsls	r2, r3, #4
 8007784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007788:	4413      	add	r3, r2
 800778a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800778e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d116      	bne.n	80077c8 <USB_EPStartXfer+0x118c>
 800779a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077be:	b29a      	uxth	r2, r3
 80077c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	e064      	b.n	8007892 <USB_EPStartXfer+0x1256>
 80077c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077cc:	2b3e      	cmp	r3, #62	; 0x3e
 80077ce:	d818      	bhi.n	8007802 <USB_EPStartXfer+0x11c6>
 80077d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <USB_EPStartXfer+0x11b4>
 80077e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ea:	3301      	adds	r3, #1
 80077ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80077f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	e047      	b.n	8007892 <USB_EPStartXfer+0x1256>
 8007802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <USB_EPStartXfer+0x11e6>
 8007818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781c:	3b01      	subs	r3, #1
 800781e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007826:	b29b      	uxth	r3, r3
 8007828:	029b      	lsls	r3, r3, #10
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e029      	b.n	8007892 <USB_EPStartXfer+0x1256>
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d121      	bne.n	8007892 <USB_EPStartXfer+0x1256>
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785c:	b29b      	uxth	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007864:	4413      	add	r3, r2
 8007866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	011a      	lsls	r2, r3, #4
 8007878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800787c:	4413      	add	r3, r2
 800787e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007890:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	895b      	ldrh	r3, [r3, #10]
 800789e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6959      	ldr	r1, [r3, #20]
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078c0:	6800      	ldr	r0, [r0, #0]
 80078c2:	f000 fe1c 	bl	80084fe <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078e8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80078ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	8013      	strh	r3, [r2, #0]
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80078fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007902:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007906:	8812      	ldrh	r2, [r2, #0]
 8007908:	f082 0210 	eor.w	r2, r2, #16
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007916:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800791a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800791e:	8812      	ldrh	r2, [r2, #0]
 8007920:	f082 0220 	eor.w	r2, r2, #32
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007944:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]
 800795e:	f000 bc9f 	b.w	80082a0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	7b1b      	ldrb	r3, [r3, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 80ae 	bne.w	8007ad0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	429a      	cmp	r2, r3
 800798e:	d917      	bls.n	80079c0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	619a      	str	r2, [r3, #24]
 80079be:	e00e      	b.n	80079de <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a02:	4413      	add	r3, r2
 8007a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	011a      	lsls	r2, r3, #4
 8007a16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d116      	bne.n	8007a5a <USB_EPStartXfer+0x141e>
 8007a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e3e8      	b.n	800822c <USB_EPStartXfer+0x1bf0>
 8007a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a60:	d818      	bhi.n	8007a94 <USB_EPStartXfer+0x1458>
 8007a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <USB_EPStartXfer+0x1446>
 8007a78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	e3cb      	b.n	800822c <USB_EPStartXfer+0x1bf0>
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <USB_EPStartXfer+0x1478>
 8007aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ab4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	029b      	lsls	r3, r3, #10
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	e3ad      	b.n	800822c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	78db      	ldrb	r3, [r3, #3]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	f040 8200 	bne.w	8007ee2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 8091 	bne.w	8007c16 <USB_EPStartXfer+0x15da>
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b18:	4413      	add	r3, r2
 8007b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	011a      	lsls	r2, r3, #4
 8007b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b30:	4413      	add	r3, r2
 8007b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d116      	bne.n	8007b78 <USB_EPStartXfer+0x153c>
 8007b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e083      	b.n	8007c80 <USB_EPStartXfer+0x1644>
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b3e      	cmp	r3, #62	; 0x3e
 8007b86:	d820      	bhi.n	8007bca <USB_EPStartXfer+0x158e>
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <USB_EPStartXfer+0x157c>
 8007bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bc6:	801a      	strh	r2, [r3, #0]
 8007bc8:	e05a      	b.n	8007c80 <USB_EPStartXfer+0x1644>
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d104      	bne.n	8007bfa <USB_EPStartXfer+0x15be>
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	e034      	b.n	8007c80 <USB_EPStartXfer+0x1644>
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d12c      	bne.n	8007c80 <USB_EPStartXfer+0x1644>
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	011a      	lsls	r2, r3, #4
 8007c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c62:	4413      	add	r3, r2
 8007c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f040 8091 	bne.w	8007dc2 <USB_EPStartXfer+0x1786>
 8007ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	011a      	lsls	r2, r3, #4
 8007cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d116      	bne.n	8007d24 <USB_EPStartXfer+0x16e8>
 8007cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d20:	801a      	strh	r2, [r3, #0]
 8007d22:	e07c      	b.n	8007e1e <USB_EPStartXfer+0x17e2>
 8007d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b3e      	cmp	r3, #62	; 0x3e
 8007d32:	d820      	bhi.n	8007d76 <USB_EPStartXfer+0x173a>
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <USB_EPStartXfer+0x1728>
 8007d5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	029b      	lsls	r3, r3, #10
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e053      	b.n	8007e1e <USB_EPStartXfer+0x17e2>
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 031f 	and.w	r3, r3, #31
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <USB_EPStartXfer+0x176a>
 8007d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da0:	3b01      	subs	r3, #1
 8007da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	e02d      	b.n	8007e1e <USB_EPStartXfer+0x17e2>
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d125      	bne.n	8007e1e <USB_EPStartXfer+0x17e2>
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007de8:	4413      	add	r3, r2
 8007dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	011a      	lsls	r2, r3, #4
 8007dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e1c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 81fe 	beq.w	800822c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e50:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <USB_EPStartXfer+0x182c>
 8007e5c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10d      	bne.n	8007e84 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 81db 	bne.w	800822c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f040 81d4 	bne.w	800822c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eaa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	441a      	add	r2, r3
 8007ec8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	8013      	strh	r3, [r2, #0]
 8007ee0:	e1a4      	b.n	800822c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	78db      	ldrb	r3, [r3, #3]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	f040 819a 	bne.w	8008228 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699a      	ldr	r2, [r3, #24]
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d917      	bls.n	8007f40 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	619a      	str	r2, [r3, #24]
 8007f3e:	e00e      	b.n	8007f5e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d178      	bne.n	8008060 <USB_EPStartXfer+0x1a24>
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f92:	4413      	add	r3, r2
 8007f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	011a      	lsls	r2, r3, #4
 8007fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007faa:	4413      	add	r3, r2
 8007fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d116      	bne.n	8007fea <USB_EPStartXfer+0x19ae>
 8007fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fe6:	801a      	strh	r2, [r3, #0]
 8007fe8:	e06b      	b.n	80080c2 <USB_EPStartXfer+0x1a86>
 8007fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fee:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff0:	d818      	bhi.n	8008024 <USB_EPStartXfer+0x19e8>
 8007ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff6:	085b      	lsrs	r3, r3, #1
 8007ff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d004      	beq.n	8008012 <USB_EPStartXfer+0x19d6>
 8008008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800800c:	3301      	adds	r3, #1
 800800e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e04e      	b.n	80080c2 <USB_EPStartXfer+0x1a86>
 8008024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800802e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USB_EPStartXfer+0x1a08>
 800803a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800803e:	3b01      	subs	r3, #1
 8008040:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008048:	b29b      	uxth	r3, r3
 800804a:	029b      	lsls	r3, r3, #10
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e030      	b.n	80080c2 <USB_EPStartXfer+0x1a86>
 8008060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d128      	bne.n	80080c2 <USB_EPStartXfer+0x1a86>
 8008070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800807e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008082:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808c:	b29b      	uxth	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008094:	4413      	add	r3, r2
 8008096:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800809a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	011a      	lsls	r2, r3, #4
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	4413      	add	r3, r2
 80080ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d178      	bne.n	80081d2 <USB_EPStartXfer+0x1b96>
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	461a      	mov	r2, r3
 8008100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008104:	4413      	add	r3, r2
 8008106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	011a      	lsls	r2, r3, #4
 8008118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811c:	4413      	add	r3, r2
 800811e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d116      	bne.n	800815c <USB_EPStartXfer+0x1b20>
 800812e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008152:	b29a      	uxth	r2, r3
 8008154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008158:	801a      	strh	r2, [r3, #0]
 800815a:	e067      	b.n	800822c <USB_EPStartXfer+0x1bf0>
 800815c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008160:	2b3e      	cmp	r3, #62	; 0x3e
 8008162:	d818      	bhi.n	8008196 <USB_EPStartXfer+0x1b5a>
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	085b      	lsrs	r3, r3, #1
 800816a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800816e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <USB_EPStartXfer+0x1b48>
 800817a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800817e:	3301      	adds	r3, #1
 8008180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008188:	b29b      	uxth	r3, r3
 800818a:	029b      	lsls	r3, r3, #10
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e04a      	b.n	800822c <USB_EPStartXfer+0x1bf0>
 8008196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <USB_EPStartXfer+0x1b7a>
 80081ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ce:	801a      	strh	r2, [r3, #0]
 80081d0:	e02c      	b.n	800822c <USB_EPStartXfer+0x1bf0>
 80081d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d124      	bne.n	800822c <USB_EPStartXfer+0x1bf0>
 80081e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f8:	4413      	add	r3, r2
 80081fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	011a      	lsls	r2, r3, #4
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008210:	4413      	add	r3, r2
 8008212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008216:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800821a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	e001      	b.n	800822c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e03a      	b.n	80082a2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008256:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800825a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800825e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008262:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008266:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800826a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	441a      	add	r2, r3
 8008288:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800828c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	b29b      	uxth	r3, r3
 800829e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d020      	beq.n	8008300 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d4:	81bb      	strh	r3, [r7, #12]
 80082d6:	89bb      	ldrh	r3, [r7, #12]
 80082d8:	f083 0310 	eor.w	r3, r3, #16
 80082dc:	81bb      	strh	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	441a      	add	r2, r3
 80082e8:	89bb      	ldrh	r3, [r7, #12]
 80082ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8013      	strh	r3, [r2, #0]
 80082fe:	e01f      	b.n	8008340 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008316:	81fb      	strh	r3, [r7, #14]
 8008318:	89fb      	ldrh	r3, [r7, #14]
 800831a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800831e:	81fb      	strh	r3, [r7, #14]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	89fb      	ldrh	r3, [r7, #14]
 800832c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833c:	b29b      	uxth	r3, r3
 800833e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr

0800834c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	7b1b      	ldrb	r3, [r3, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 809d 	bne.w	800849a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d04c      	beq.n	8008402 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	823b      	strh	r3, [r7, #16]
 8008376:	8a3b      	ldrh	r3, [r7, #16]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <USB_EPClearStall+0x6c>
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	81fb      	strh	r3, [r7, #14]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	441a      	add	r2, r3
 80083a2:	89fb      	ldrh	r3, [r7, #14]
 80083a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	78db      	ldrb	r3, [r3, #3]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d06c      	beq.n	800849a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d6:	81bb      	strh	r3, [r7, #12]
 80083d8:	89bb      	ldrh	r3, [r7, #12]
 80083da:	f083 0320 	eor.w	r3, r3, #32
 80083de:	81bb      	strh	r3, [r7, #12]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	441a      	add	r2, r3
 80083ea:	89bb      	ldrh	r3, [r7, #12]
 80083ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	8013      	strh	r3, [r2, #0]
 8008400:	e04b      	b.n	800849a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	82fb      	strh	r3, [r7, #22]
 8008410:	8afb      	ldrh	r3, [r7, #22]
 8008412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01b      	beq.n	8008452 <USB_EPClearStall+0x106>
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008430:	82bb      	strh	r3, [r7, #20]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	441a      	add	r2, r3
 800843c:	8abb      	ldrh	r3, [r7, #20]
 800843e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800844a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	827b      	strh	r3, [r7, #18]
 800846a:	8a7b      	ldrh	r3, [r7, #18]
 800846c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008470:	827b      	strh	r3, [r7, #18]
 8008472:	8a7b      	ldrh	r3, [r7, #18]
 8008474:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008478:	827b      	strh	r3, [r7, #18]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	441a      	add	r2, r3
 8008484:	8a7b      	ldrh	r3, [r7, #18]
 8008486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008496:	b29b      	uxth	r3, r3
 8008498:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2280      	movs	r2, #128	; 0x80
 80084bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80084f2:	68fb      	ldr	r3, [r7, #12]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084fe:	b480      	push	{r7}
 8008500:	b08d      	sub	sp, #52	; 0x34
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	4611      	mov	r1, r2
 800850a:	461a      	mov	r2, r3
 800850c:	460b      	mov	r3, r1
 800850e:	80fb      	strh	r3, [r7, #6]
 8008510:	4613      	mov	r3, r2
 8008512:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008514:	88bb      	ldrh	r3, [r7, #4]
 8008516:	3301      	adds	r3, #1
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008524:	88fb      	ldrh	r3, [r7, #6]
 8008526:	005a      	lsls	r2, r3, #1
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008536:	e01e      	b.n	8008576 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	3301      	adds	r3, #1
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	b29b      	uxth	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	b29a      	uxth	r2, r3
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	3302      	adds	r3, #2
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	3302      	adds	r3, #2
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	3301      	adds	r3, #1
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	3b01      	subs	r3, #1
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1dd      	bne.n	8008538 <USB_WritePMA+0x3a>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	3734      	adds	r7, #52	; 0x34
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008588:	b480      	push	{r7}
 800858a:	b08b      	sub	sp, #44	; 0x2c
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	460b      	mov	r3, r1
 8008598:	80fb      	strh	r3, [r7, #6]
 800859a:	4613      	mov	r3, r2
 800859c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800859e:	88bb      	ldrh	r3, [r7, #4]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	005a      	lsls	r2, r3, #1
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
 80085c0:	e01b      	b.n	80085fa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	3302      	adds	r3, #2
 80085ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	3302      	adds	r3, #2
 80085f2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	3b01      	subs	r3, #1
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e0      	bne.n	80085c2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008600:	88bb      	ldrh	r3, [r7, #4]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	701a      	strb	r2, [r3, #0]
  }
}
 800861c:	bf00      	nop
 800861e:	372c      	adds	r7, #44	; 0x2c
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008636:	2302      	movs	r3, #2
 8008638:	2203      	movs	r2, #3
 800863a:	2181      	movs	r1, #129	; 0x81
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fcfc 	bl	800a03a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008648:	2302      	movs	r3, #2
 800864a:	2203      	movs	r2, #3
 800864c:	2101      	movs	r1, #1
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 fcf3 	bl	800a03a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800865c:	2024      	movs	r0, #36	; 0x24
 800865e:	f001 fe01 	bl	800a264 <USBD_static_malloc>
 8008662:	4602      	mov	r2, r0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
 8008678:	e012      	b.n	80086a0 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008680:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	230d      	movs	r3, #13
 8008698:	2101      	movs	r1, #1
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fdbe 	bl	800a21c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80086b6:	2181      	movs	r1, #129	; 0x81
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fce4 	bl	800a086 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80086c4:	2101      	movs	r1, #1
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fcdd 	bl	800a086 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00e      	beq.n	80086fc <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fdc4 	bl	800a27c <USBD_static_free>
    pdev->pClassData = NULL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008718:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008732:	2b00      	cmp	r3, #0
 8008734:	d051      	beq.n	80087da <USBD_CUSTOM_HID_Setup+0xd2>
 8008736:	2b20      	cmp	r3, #32
 8008738:	f040 80d8 	bne.w	80088ec <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	3b02      	subs	r3, #2
 8008742:	2b09      	cmp	r3, #9
 8008744:	d841      	bhi.n	80087ca <USBD_CUSTOM_HID_Setup+0xc2>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <USBD_CUSTOM_HID_Setup+0x44>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	080087a5 	.word	0x080087a5
 8008750:	08008783 	.word	0x08008783
 8008754:	080087cb 	.word	0x080087cb
 8008758:	080087cb 	.word	0x080087cb
 800875c:	080087cb 	.word	0x080087cb
 8008760:	080087cb 	.word	0x080087cb
 8008764:	080087cb 	.word	0x080087cb
 8008768:	080087b5 	.word	0x080087b5
 800876c:	08008793 	.word	0x08008793
 8008770:	08008775 	.word	0x08008775
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	885b      	ldrh	r3, [r3, #2]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	611a      	str	r2, [r3, #16]
      break;
 8008780:	e02a      	b.n	80087d8 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3310      	adds	r3, #16
 8008786:	2201      	movs	r2, #1
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 f92b 	bl	80099e6 <USBD_CtlSendData>
      break;
 8008790:	e022      	b.n	80087d8 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	b29b      	uxth	r3, r3
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	615a      	str	r2, [r3, #20]
      break;
 80087a2:	e019      	b.n	80087d8 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	3314      	adds	r3, #20
 80087a8:	2201      	movs	r2, #1
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 f91a 	bl	80099e6 <USBD_CtlSendData>
      break;
 80087b2:	e011      	b.n	80087d8 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2201      	movs	r2, #1
 80087b8:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80087ba:	6939      	ldr	r1, [r7, #16]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	88db      	ldrh	r3, [r3, #6]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f93d 	bl	8009a42 <USBD_CtlPrepareRx>
      break;
 80087c8:	e006      	b.n	80087d8 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f8a0 	bl	8009912 <USBD_CtlError>
      ret = USBD_FAIL;
 80087d2:	2302      	movs	r3, #2
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	bf00      	nop
    }
    break;
 80087d8:	e08f      	b.n	80088fa <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b0b      	cmp	r3, #11
 80087e0:	d87c      	bhi.n	80088dc <USBD_CUSTOM_HID_Setup+0x1d4>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008819 	.word	0x08008819
 80087ec:	080088dd 	.word	0x080088dd
 80087f0:	080088dd 	.word	0x080088dd
 80087f4:	080088dd 	.word	0x080088dd
 80087f8:	080088dd 	.word	0x080088dd
 80087fc:	080088dd 	.word	0x080088dd
 8008800:	08008841 	.word	0x08008841
 8008804:	080088dd 	.word	0x080088dd
 8008808:	080088dd 	.word	0x080088dd
 800880c:	080088dd 	.word	0x080088dd
 8008810:	0800888f 	.word	0x0800888f
 8008814:	080088b7 	.word	0x080088b7
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800881e:	2b03      	cmp	r3, #3
 8008820:	d107      	bne.n	8008832 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008822:	f107 030e 	add.w	r3, r7, #14
 8008826:	2202      	movs	r2, #2
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f8db 	bl	80099e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008830:	e05b      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 f86c 	bl	8009912 <USBD_CtlError>
			  ret = USBD_FAIL;
 800883a:	2302      	movs	r3, #2
 800883c:	75fb      	strb	r3, [r7, #23]
      break;
 800883e:	e054      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	0a1b      	lsrs	r3, r3, #8
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b22      	cmp	r3, #34	; 0x22
 800884a:	d10b      	bne.n	8008864 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	88db      	ldrh	r3, [r3, #6]
 8008850:	2b41      	cmp	r3, #65	; 0x41
 8008852:	bf28      	it	cs
 8008854:	2341      	movcs	r3, #65	; 0x41
 8008856:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e00d      	b.n	8008880 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	0a1b      	lsrs	r3, r3, #8
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b21      	cmp	r3, #33	; 0x21
 800886e:	d107      	bne.n	8008880 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8008870:	4b24      	ldr	r3, [pc, #144]	; (8008904 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008872:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	2b09      	cmp	r3, #9
 800887a:	bf28      	it	cs
 800887c:	2309      	movcs	r3, #9
 800887e:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 8008880:	8bfb      	ldrh	r3, [r7, #30]
 8008882:	461a      	mov	r2, r3
 8008884:	69b9      	ldr	r1, [r7, #24]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f8ad 	bl	80099e6 <USBD_CtlSendData>
      break;
 800888c:	e02d      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008894:	2b03      	cmp	r3, #3
 8008896:	d107      	bne.n	80088a8 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3318      	adds	r3, #24
 800889c:	2201      	movs	r2, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f8a0 	bl	80099e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088a6:	e020      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 f831 	bl	8009912 <USBD_CtlError>
			  ret = USBD_FAIL;
 80088b0:	2302      	movs	r3, #2
 80088b2:	75fb      	strb	r3, [r7, #23]
      break;
 80088b4:	e019      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d106      	bne.n	80088ce <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	885b      	ldrh	r3, [r3, #2]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80088cc:	e00d      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 f81e 	bl	8009912 <USBD_CtlError>
			  ret = USBD_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	75fb      	strb	r3, [r7, #23]
      break;
 80088da:	e006      	b.n	80088ea <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f817 	bl	8009912 <USBD_CtlError>
      ret = USBD_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	75fb      	strb	r3, [r7, #23]
      break;
 80088e8:	bf00      	nop
    }
    break;
 80088ea:	e006      	b.n	80088fa <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f80f 	bl	8009912 <USBD_CtlError>
    ret = USBD_FAIL;
 80088f4:	2302      	movs	r3, #2
 80088f6:	75fb      	strb	r3, [r7, #23]
    break;
 80088f8:	bf00      	nop
  }
  return ret;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200000c8 	.word	0x200000c8

08008908 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800891c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008924:	2b03      	cmp	r3, #3
 8008926:	d111      	bne.n	800894c <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	2181      	movs	r1, #129	; 0x81
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f001 fc48 	bl	800a1d6 <USBD_LL_Transmit>
 8008946:	e001      	b.n	800894c <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2229      	movs	r2, #41	; 0x29
 8008964:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008966:	4b03      	ldr	r3, [pc, #12]	; (8008974 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000044 	.word	0x20000044

08008978 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2229      	movs	r2, #41	; 0x29
 8008984:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000070 	.word	0x20000070

08008998 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2229      	movs	r2, #41	; 0x29
 80089a4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80089a6:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	2000009c 	.word	0x2000009c

080089b8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr

080089dc <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089ee:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	7810      	ldrb	r0, [r2, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	7852      	ldrb	r2, [r2, #1]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	230d      	movs	r3, #13
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fc06 	bl	800a21c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a28:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d10c      	bne.n	8008a4c <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	7810      	ldrb	r0, [r2, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	7852      	ldrb	r2, [r2, #1]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	220a      	movs	r2, #10
 8008a64:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008a66:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	200000d4 	.word	0x200000d4

08008a78 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a82:	2302      	movs	r3, #2
 8008a84:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e01a      	b.n	8008af2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	79fa      	ldrb	r2, [r7, #7]
 8008ae8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f001 fa3a 	bl	8009f64 <USBD_LL_Init>

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]
 8008b1a:	e001      	b.n	8008b20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr

08008b2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fa65 	bl	800a004 <USBD_LL_Start>

  return USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008b64:	2302      	movs	r3, #2
 8008b66:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	4611      	mov	r1, r2
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	4798      	blx	r3
  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fe63 	bl	800989a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d016      	beq.n	8008c26 <USBD_LL_SetupStage+0x6a>
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d81c      	bhi.n	8008c36 <USBD_LL_SetupStage+0x7a>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <USBD_LL_SetupStage+0x4a>
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d008      	beq.n	8008c16 <USBD_LL_SetupStage+0x5a>
 8008c04:	e017      	b.n	8008c36 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9c6 	bl	8008fa0 <USBD_StdDevReq>
    break;
 8008c14:	e01a      	b.n	8008c4c <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa28 	bl	8009074 <USBD_StdItfReq>
    break;
 8008c24:	e012      	b.n	8008c4c <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa68 	bl	8009104 <USBD_StdEPReq>
    break;
 8008c34:	e00a      	b.n	8008c4c <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008c3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 fa3d 	bl	800a0c4 <USBD_LL_StallEP>
    break;
 8008c4a:	bf00      	nop
  }

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d14b      	bne.n	8008d02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008c70:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d134      	bne.n	8008ce6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d919      	bls.n	8008cbc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d203      	bcs.n	8008caa <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	e002      	b.n	8008cb0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fee2 	bl	8009a7e <USBD_CtlContinueRx>
 8008cba:	e038      	b.n	8008d2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d105      	bne.n	8008cde <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fedf 	bl	8009aa2 <USBD_CtlSendStatus>
 8008ce4:	e023      	b.n	8008d2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d11e      	bne.n	8008d2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f001 f9e2 	bl	800a0c4 <USBD_LL_StallEP>
 8008d00:	e015      	b.n	8008d2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00d      	beq.n	8008d2a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d108      	bne.n	8008d2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	7afa      	ldrb	r2, [r7, #11]
 8008d22:	4611      	mov	r1, r2
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	4798      	blx	r3
 8008d28:	e001      	b.n	8008d2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e000      	b.n	8008d30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d17f      	bne.n	8008e4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d15c      	bne.n	8008e16 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d915      	bls.n	8008d94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	1ad2      	subs	r2, r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 fe4c 	bl	8009a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008d86:	2300      	movs	r3, #0
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f001 fa45 	bl	800a21c <USBD_LL_PrepareReceive>
 8008d92:	e04e      	b.n	8008e32 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	6912      	ldr	r2, [r2, #16]
 8008d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008da0:	fb01 f202 	mul.w	r2, r1, r2
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d11c      	bne.n	8008de4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d316      	bcc.n	8008de4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d20f      	bcs.n	8008de4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fe28 	bl	8009a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2100      	movs	r1, #0
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f001 fa1d 	bl	800a21c <USBD_LL_PrepareReceive>
 8008de2:	e026      	b.n	8008e32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d105      	bne.n	8008e06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e06:	2180      	movs	r1, #128	; 0x80
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f001 f95b 	bl	800a0c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fe5a 	bl	8009ac8 <USBD_CtlReceiveStatus>
 8008e14:	e00d      	b.n	8008e32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d004      	beq.n	8008e2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008e2a:	2180      	movs	r1, #128	; 0x80
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f001 f949 	bl	800a0c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d11d      	bne.n	8008e78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fe81 	bl	8008b44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008e4a:	e015      	b.n	8008e78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00d      	beq.n	8008e74 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d108      	bne.n	8008e74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	7afa      	ldrb	r2, [r7, #11]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	4798      	blx	r3
 8008e72:	e001      	b.n	8008e78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e74:	2302      	movs	r3, #2
 8008e76:	e000      	b.n	8008e7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f8d2 	bl	800a03a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2240      	movs	r2, #64	; 0x40
 8008ea2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2180      	movs	r1, #128	; 0x80
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f8c4 	bl	800a03a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2240      	movs	r2, #64	; 0x40
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6852      	ldr	r2, [r2, #4]
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
  }

  return USBD_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr

08008f4a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr

08008f6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d10b      	bne.n	8008f94 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fb6:	2b40      	cmp	r3, #64	; 0x40
 8008fb8:	d005      	beq.n	8008fc6 <USBD_StdDevReq+0x26>
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d84f      	bhi.n	800905e <USBD_StdDevReq+0xbe>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d009      	beq.n	8008fd6 <USBD_StdDevReq+0x36>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d14b      	bne.n	800905e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
    break;
 8008fd4:	e048      	b.n	8009068 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d839      	bhi.n	8009052 <USBD_StdDevReq+0xb2>
 8008fde:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <USBD_StdDevReq+0x44>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08009035 	.word	0x08009035
 8008fe8:	08009049 	.word	0x08009049
 8008fec:	08009053 	.word	0x08009053
 8008ff0:	0800903f 	.word	0x0800903f
 8008ff4:	08009053 	.word	0x08009053
 8008ff8:	08009017 	.word	0x08009017
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	08009053 	.word	0x08009053
 8009004:	0800902b 	.word	0x0800902b
 8009008:	08009021 	.word	0x08009021
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9da 	bl	80093c8 <USBD_GetDescriptor>
      break;
 8009014:	e022      	b.n	800905c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 facf 	bl	80095bc <USBD_SetAddress>
      break;
 800901e:	e01d      	b.n	800905c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fb0e 	bl	8009644 <USBD_SetConfig>
      break;
 8009028:	e018      	b.n	800905c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fb97 	bl	8009760 <USBD_GetConfig>
      break;
 8009032:	e013      	b.n	800905c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fbc7 	bl	80097ca <USBD_GetStatus>
      break;
 800903c:	e00e      	b.n	800905c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fbf5 	bl	8009830 <USBD_SetFeature>
      break;
 8009046:	e009      	b.n	800905c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fc04 	bl	8009858 <USBD_ClrFeature>
      break;
 8009050:	e004      	b.n	800905c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fc5c 	bl	8009912 <USBD_CtlError>
      break;
 800905a:	bf00      	nop
    }
    break;
 800905c:	e004      	b.n	8009068 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fc56 	bl	8009912 <USBD_CtlError>
    break;
 8009066:	bf00      	nop
  }

  return ret;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop

08009074 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d005      	beq.n	800909a <USBD_StdItfReq+0x26>
 800908e:	2b40      	cmp	r3, #64	; 0x40
 8009090:	d82e      	bhi.n	80090f0 <USBD_StdItfReq+0x7c>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <USBD_StdItfReq+0x26>
 8009096:	2b20      	cmp	r3, #32
 8009098:	d12a      	bne.n	80090f0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090a0:	3b01      	subs	r3, #1
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d81d      	bhi.n	80090e2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	889b      	ldrh	r3, [r3, #4]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d813      	bhi.n	80090d8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d110      	bne.n	80090ec <USBD_StdItfReq+0x78>
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10d      	bne.n	80090ec <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fce6 	bl	8009aa2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80090d6:	e009      	b.n	80090ec <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc19 	bl	8009912 <USBD_CtlError>
      break;
 80090e0:	e004      	b.n	80090ec <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc14 	bl	8009912 <USBD_CtlError>
      break;
 80090ea:	e000      	b.n	80090ee <USBD_StdItfReq+0x7a>
      break;
 80090ec:	bf00      	nop
    }
    break;
 80090ee:	e004      	b.n	80090fa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc0d 	bl	8009912 <USBD_CtlError>
    break;
 80090f8:	bf00      	nop
  }

  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	889b      	ldrh	r3, [r3, #4]
 8009116:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d007      	beq.n	8009134 <USBD_StdEPReq+0x30>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	f200 8144 	bhi.w	80093b2 <USBD_StdEPReq+0x2ae>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <USBD_StdEPReq+0x40>
 800912e:	2b20      	cmp	r3, #32
 8009130:	f040 813f 	bne.w	80093b2 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
    break;
 8009142:	e13b      	b.n	80093bc <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800914c:	2b20      	cmp	r3, #32
 800914e:	d10a      	bne.n	8009166 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	e12b      	b.n	80093be <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	2b03      	cmp	r3, #3
 800916c:	d007      	beq.n	800917e <USBD_StdEPReq+0x7a>
 800916e:	2b03      	cmp	r3, #3
 8009170:	f300 8119 	bgt.w	80093a6 <USBD_StdEPReq+0x2a2>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d072      	beq.n	800925e <USBD_StdEPReq+0x15a>
 8009178:	2b01      	cmp	r3, #1
 800917a:	d03a      	beq.n	80091f2 <USBD_StdEPReq+0xee>
 800917c:	e113      	b.n	80093a6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009184:	2b02      	cmp	r3, #2
 8009186:	d002      	beq.n	800918e <USBD_StdEPReq+0x8a>
 8009188:	2b03      	cmp	r3, #3
 800918a:	d015      	beq.n	80091b8 <USBD_StdEPReq+0xb4>
 800918c:	e02b      	b.n	80091e6 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00c      	beq.n	80091ae <USBD_StdEPReq+0xaa>
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b80      	cmp	r3, #128	; 0x80
 8009198:	d009      	beq.n	80091ae <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 ff90 	bl	800a0c4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80091a4:	2180      	movs	r1, #128	; 0x80
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 ff8c 	bl	800a0c4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80091ac:	e020      	b.n	80091f0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fbae 	bl	8009912 <USBD_CtlError>
        break;
 80091b6:	e01b      	b.n	80091f0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	885b      	ldrh	r3, [r3, #2]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10e      	bne.n	80091de <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <USBD_StdEPReq+0xda>
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b80      	cmp	r3, #128	; 0x80
 80091ca:	d008      	beq.n	80091de <USBD_StdEPReq+0xda>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 ff73 	bl	800a0c4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fc5f 	bl	8009aa2 <USBD_CtlSendStatus>

        break;
 80091e4:	e004      	b.n	80091f0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fb92 	bl	8009912 <USBD_CtlError>
        break;
 80091ee:	bf00      	nop
      }
      break;
 80091f0:	e0de      	b.n	80093b0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d002      	beq.n	8009202 <USBD_StdEPReq+0xfe>
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d015      	beq.n	800922c <USBD_StdEPReq+0x128>
 8009200:	e026      	b.n	8009250 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00c      	beq.n	8009222 <USBD_StdEPReq+0x11e>
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	2b80      	cmp	r3, #128	; 0x80
 800920c:	d009      	beq.n	8009222 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 ff56 	bl	800a0c4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009218:	2180      	movs	r1, #128	; 0x80
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 ff52 	bl	800a0c4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009220:	e01c      	b.n	800925c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb74 	bl	8009912 <USBD_CtlError>
        break;
 800922a:	e017      	b.n	800925c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d112      	bne.n	800925a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 ff5d 	bl	800a102 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc2a 	bl	8009aa2 <USBD_CtlSendStatus>
        }
        break;
 800924e:	e004      	b.n	800925a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb5d 	bl	8009912 <USBD_CtlError>
        break;
 8009258:	e000      	b.n	800925c <USBD_StdEPReq+0x158>
        break;
 800925a:	bf00      	nop
      }
      break;
 800925c:	e0a8      	b.n	80093b0 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009264:	2b02      	cmp	r3, #2
 8009266:	d002      	beq.n	800926e <USBD_StdEPReq+0x16a>
 8009268:	2b03      	cmp	r3, #3
 800926a:	d031      	beq.n	80092d0 <USBD_StdEPReq+0x1cc>
 800926c:	e095      	b.n	800939a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d007      	beq.n	8009284 <USBD_StdEPReq+0x180>
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	2b80      	cmp	r3, #128	; 0x80
 8009278:	d004      	beq.n	8009284 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fb48 	bl	8009912 <USBD_CtlError>
          break;
 8009282:	e08f      	b.n	80093a4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009288:	2b00      	cmp	r3, #0
 800928a:	da0b      	bge.n	80092a4 <USBD_StdEPReq+0x1a0>
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	3310      	adds	r3, #16
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4413      	add	r3, r2
 80092a0:	3304      	adds	r3, #4
 80092a2:	e00a      	b.n	80092ba <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2202      	movs	r2, #2
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fb8c 	bl	80099e6 <USBD_CtlSendData>
          break;
 80092ce:	e069      	b.n	80093a4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80092d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da11      	bge.n	80092fc <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 020f 	and.w	r2, r3, #15
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	3318      	adds	r3, #24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d117      	bne.n	8009322 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fb0c 	bl	8009912 <USBD_CtlError>
            break;
 80092fa:	e053      	b.n	80093a4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 faf9 	bl	8009912 <USBD_CtlError>
            break;
 8009320:	e040      	b.n	80093a4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009326:	2b00      	cmp	r3, #0
 8009328:	da0b      	bge.n	8009342 <USBD_StdEPReq+0x23e>
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	3310      	adds	r3, #16
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	4413      	add	r3, r2
 800933e:	3304      	adds	r3, #4
 8009340:	e00a      	b.n	8009358 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <USBD_StdEPReq+0x262>
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d103      	bne.n	800936e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	e00e      	b.n	800938c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fee4 	bl	800a140 <USBD_LL_IsStallEP>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	e002      	b.n	800938c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2202      	movs	r2, #2
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fb27 	bl	80099e6 <USBD_CtlSendData>
          break;
 8009398:	e004      	b.n	80093a4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fab8 	bl	8009912 <USBD_CtlError>
        break;
 80093a2:	bf00      	nop
      }
      break;
 80093a4:	e004      	b.n	80093b0 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fab2 	bl	8009912 <USBD_CtlError>
      break;
 80093ae:	bf00      	nop
    }
    break;
 80093b0:	e004      	b.n	80093bc <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 faac 	bl	8009912 <USBD_CtlError>
    break;
 80093ba:	bf00      	nop
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	885b      	ldrh	r3, [r3, #2]
 80093d6:	0a1b      	lsrs	r3, r3, #8
 80093d8:	b29b      	uxth	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	2b06      	cmp	r3, #6
 80093de:	f200 80c9 	bhi.w	8009574 <USBD_GetDescriptor+0x1ac>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <USBD_GetDescriptor+0x20>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	08009405 	.word	0x08009405
 80093ec:	0800941d 	.word	0x0800941d
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	08009575 	.word	0x08009575
 80093f8:	08009575 	.word	0x08009575
 80093fc:	08009521 	.word	0x08009521
 8009400:	08009547 	.word	0x08009547
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 010a 	add.w	r1, r7, #10
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
    break;
 800941a:	e0b0      	b.n	800957e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7c1b      	ldrb	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	f107 020a 	add.w	r2, r7, #10
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	2202      	movs	r2, #2
 800943c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800943e:	e09e      	b.n	800957e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	f107 020a 	add.w	r2, r7, #10
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3301      	adds	r3, #1
 8009456:	2202      	movs	r2, #2
 8009458:	701a      	strb	r2, [r3, #0]
    break;
 800945a:	e090      	b.n	800957e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	885b      	ldrh	r3, [r3, #2]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b05      	cmp	r3, #5
 8009464:	d856      	bhi.n	8009514 <USBD_GetDescriptor+0x14c>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_GetDescriptor+0xa4>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	08009485 	.word	0x08009485
 8009470:	0800949d 	.word	0x0800949d
 8009474:	080094b5 	.word	0x080094b5
 8009478:	080094cd 	.word	0x080094cd
 800947c:	080094e5 	.word	0x080094e5
 8009480:	080094fd 	.word	0x080094fd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f107 010a 	add.w	r1, r7, #10
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	60f8      	str	r0, [r7, #12]
      break;
 800949a:	e040      	b.n	800951e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 010a 	add.w	r1, r7, #10
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      break;
 80094b2:	e034      	b.n	800951e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 010a 	add.w	r1, r7, #10
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
      break;
 80094ca:	e028      	b.n	800951e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7c12      	ldrb	r2, [r2, #16]
 80094d8:	f107 010a 	add.w	r1, r7, #10
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
 80094e0:	60f8      	str	r0, [r7, #12]
      break;
 80094e2:	e01c      	b.n	800951e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	7c12      	ldrb	r2, [r2, #16]
 80094f0:	f107 010a 	add.w	r1, r7, #10
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      break;
 80094fa:	e010      	b.n	800951e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	7c12      	ldrb	r2, [r2, #16]
 8009508:	f107 010a 	add.w	r1, r7, #10
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
 8009510:	60f8      	str	r0, [r7, #12]
      break;
 8009512:	e004      	b.n	800951e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f9fb 	bl	8009912 <USBD_CtlError>
      return;
 800951c:	e04b      	b.n	80095b6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800951e:	e02e      	b.n	800957e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7c1b      	ldrb	r3, [r3, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009530:	f107 020a 	add.w	r2, r7, #10
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
      break;
 800953a:	e020      	b.n	800957e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f9e7 	bl	8009912 <USBD_CtlError>
      return;
 8009544:	e037      	b.n	80095b6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7c1b      	ldrb	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10d      	bne.n	800956a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009556:	f107 020a 	add.w	r2, r7, #10
 800955a:	4610      	mov	r0, r2
 800955c:	4798      	blx	r3
 800955e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	2207      	movs	r2, #7
 8009566:	701a      	strb	r2, [r3, #0]
      break;
 8009568:	e009      	b.n	800957e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9d0 	bl	8009912 <USBD_CtlError>
      return;
 8009572:	e020      	b.n	80095b6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9cb 	bl	8009912 <USBD_CtlError>
    return;
 800957c:	e01b      	b.n	80095b6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800957e:	897b      	ldrh	r3, [r7, #10]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d011      	beq.n	80095a8 <USBD_GetDescriptor+0x1e0>
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	88db      	ldrh	r3, [r3, #6]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00d      	beq.n	80095a8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	88da      	ldrh	r2, [r3, #6]
 8009590:	897b      	ldrh	r3, [r7, #10]
 8009592:	4293      	cmp	r3, r2
 8009594:	bf28      	it	cs
 8009596:	4613      	movcs	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800959c:	897b      	ldrh	r3, [r7, #10]
 800959e:	461a      	mov	r2, r3
 80095a0:	68f9      	ldr	r1, [r7, #12]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa1f 	bl	80099e6 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	88db      	ldrh	r3, [r3, #6]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fa76 	bl	8009aa2 <USBD_CtlSendStatus>
  }
}
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	889b      	ldrh	r3, [r3, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d130      	bne.n	8009630 <USBD_SetAddress+0x74>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d12c      	bne.n	8009630 <USBD_SetAddress+0x74>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	2b7f      	cmp	r3, #127	; 0x7f
 80095dc:	d828      	bhi.n	8009630 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d104      	bne.n	80095fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f98b 	bl	8009912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fc:	e01d      	b.n	800963a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7bfa      	ldrb	r2, [r7, #15]
 8009602:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fdc4 	bl	800a198 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fa46 	bl	8009aa2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	e009      	b.n	800963a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962e:	e004      	b.n	800963a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f96d 	bl	8009912 <USBD_CtlError>
  }
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	b2da      	uxtb	r2, r3
 8009654:	4b41      	ldr	r3, [pc, #260]	; (800975c <USBD_SetConfig+0x118>)
 8009656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009658:	4b40      	ldr	r3, [pc, #256]	; (800975c <USBD_SetConfig+0x118>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d904      	bls.n	800966a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f955 	bl	8009912 <USBD_CtlError>
 8009668:	e075      	b.n	8009756 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009670:	2b02      	cmp	r3, #2
 8009672:	d002      	beq.n	800967a <USBD_SetConfig+0x36>
 8009674:	2b03      	cmp	r3, #3
 8009676:	d023      	beq.n	80096c0 <USBD_SetConfig+0x7c>
 8009678:	e062      	b.n	8009740 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800967a:	4b38      	ldr	r3, [pc, #224]	; (800975c <USBD_SetConfig+0x118>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d01a      	beq.n	80096b8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009682:	4b36      	ldr	r3, [pc, #216]	; (800975c <USBD_SetConfig+0x118>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2203      	movs	r2, #3
 8009690:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009694:	4b31      	ldr	r3, [pc, #196]	; (800975c <USBD_SetConfig+0x118>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff fa5c 	bl	8008b58 <USBD_SetClassConfig>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d104      	bne.n	80096b0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f932 	bl	8009912 <USBD_CtlError>
          return;
 80096ae:	e052      	b.n	8009756 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f9f6 	bl	8009aa2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80096b6:	e04e      	b.n	8009756 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f9f2 	bl	8009aa2 <USBD_CtlSendStatus>
      break;
 80096be:	e04a      	b.n	8009756 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096c0:	4b26      	ldr	r3, [pc, #152]	; (800975c <USBD_SetConfig+0x118>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d112      	bne.n	80096ee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80096d0:	4b22      	ldr	r3, [pc, #136]	; (800975c <USBD_SetConfig+0x118>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80096da:	4b20      	ldr	r3, [pc, #128]	; (800975c <USBD_SetConfig+0x118>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff fa58 	bl	8008b96 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f9db 	bl	8009aa2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80096ec:	e033      	b.n	8009756 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80096ee:	4b1b      	ldr	r3, [pc, #108]	; (800975c <USBD_SetConfig+0x118>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d01d      	beq.n	8009738 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff fa46 	bl	8008b96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800970a:	4b14      	ldr	r3, [pc, #80]	; (800975c <USBD_SetConfig+0x118>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009714:	4b11      	ldr	r3, [pc, #68]	; (800975c <USBD_SetConfig+0x118>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fa1c 	bl	8008b58 <USBD_SetClassConfig>
 8009720:	4603      	mov	r3, r0
 8009722:	2b02      	cmp	r3, #2
 8009724:	d104      	bne.n	8009730 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8f2 	bl	8009912 <USBD_CtlError>
          return;
 800972e:	e012      	b.n	8009756 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9b6 	bl	8009aa2 <USBD_CtlSendStatus>
      break;
 8009736:	e00e      	b.n	8009756 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f9b2 	bl	8009aa2 <USBD_CtlSendStatus>
      break;
 800973e:	e00a      	b.n	8009756 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8e5 	bl	8009912 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <USBD_SetConfig+0x118>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fa21 	bl	8008b96 <USBD_ClrClassConfig>
      break;
 8009754:	bf00      	nop
    }
  }
}
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	2000035c 	.word	0x2000035c

08009760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	88db      	ldrh	r3, [r3, #6]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d004      	beq.n	800977c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f8cc 	bl	8009912 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800977a:	e022      	b.n	80097c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009782:	2b02      	cmp	r3, #2
 8009784:	dc02      	bgt.n	800978c <USBD_GetConfig+0x2c>
 8009786:	2b00      	cmp	r3, #0
 8009788:	dc03      	bgt.n	8009792 <USBD_GetConfig+0x32>
 800978a:	e015      	b.n	80097b8 <USBD_GetConfig+0x58>
 800978c:	2b03      	cmp	r3, #3
 800978e:	d00b      	beq.n	80097a8 <USBD_GetConfig+0x48>
 8009790:	e012      	b.n	80097b8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3308      	adds	r3, #8
 800979c:	2201      	movs	r2, #1
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f920 	bl	80099e6 <USBD_CtlSendData>
      break;
 80097a6:	e00c      	b.n	80097c2 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	2201      	movs	r2, #1
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f918 	bl	80099e6 <USBD_CtlSendData>
      break;
 80097b6:	e004      	b.n	80097c2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f8a9 	bl	8009912 <USBD_CtlError>
      break;
 80097c0:	bf00      	nop
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d81e      	bhi.n	800981e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	88db      	ldrh	r3, [r3, #6]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d004      	beq.n	80097f2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f891 	bl	8009912 <USBD_CtlError>
      break;
 80097f0:	e01a      	b.n	8009828 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f043 0202 	orr.w	r2, r3, #2
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	330c      	adds	r3, #12
 8009812:	2202      	movs	r2, #2
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8e5 	bl	80099e6 <USBD_CtlSendData>
    break;
 800981c:	e004      	b.n	8009828 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f876 	bl	8009912 <USBD_CtlError>
    break;
 8009826:	bf00      	nop
  }
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	885b      	ldrh	r3, [r3, #2]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d106      	bne.n	8009850 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f929 	bl	8009aa2 <USBD_CtlSendStatus>
  }

}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009868:	3b01      	subs	r3, #1
 800986a:	2b02      	cmp	r3, #2
 800986c:	d80b      	bhi.n	8009886 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d10c      	bne.n	8009890 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f90f 	bl	8009aa2 <USBD_CtlSendStatus>
    }
    break;
 8009884:	e004      	b.n	8009890 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f842 	bl	8009912 <USBD_CtlError>
    break;
 800988e:	e000      	b.n	8009892 <USBD_ClrFeature+0x3a>
    break;
 8009890:	bf00      	nop
  }
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	785a      	ldrb	r2, [r3, #1]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	3302      	adds	r3, #2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	3303      	adds	r3, #3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	3304      	adds	r3, #4
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	3305      	adds	r3, #5
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4413      	add	r3, r2
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	3306      	adds	r3, #6
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	3307      	adds	r3, #7
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	021b      	lsls	r3, r3, #8
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4413      	add	r3, r2
 8009902:	b29a      	uxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	80da      	strh	r2, [r3, #6]

}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr

08009912 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800991c:	2180      	movs	r1, #128	; 0x80
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fbd0 	bl	800a0c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009924:	2100      	movs	r1, #0
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fbcc 	bl	800a0c4 <USBD_LL_StallEP>
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d032      	beq.n	80099b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f834 	bl	80099b8 <USBD_GetLen>
 8009950:	4603      	mov	r3, r0
 8009952:	3301      	adds	r3, #1
 8009954:	b29b      	uxth	r3, r3
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	75fa      	strb	r2, [r7, #23]
 8009964:	461a      	mov	r2, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4413      	add	r3, r2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	7812      	ldrb	r2, [r2, #0]
 800996e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	75fa      	strb	r2, [r7, #23]
 8009976:	461a      	mov	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4413      	add	r3, r2
 800997c:	2203      	movs	r2, #3
 800997e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009980:	e012      	b.n	80099a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	60fa      	str	r2, [r7, #12]
 8009988:	7dfa      	ldrb	r2, [r7, #23]
 800998a:	1c51      	adds	r1, r2, #1
 800998c:	75f9      	strb	r1, [r7, #23]
 800998e:	4611      	mov	r1, r2
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	440a      	add	r2, r1
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	75fa      	strb	r2, [r7, #23]
 800999e:	461a      	mov	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4413      	add	r3, r2
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e8      	bne.n	8009982 <USBD_GetString+0x4e>
    }
  }
}
 80099b0:	bf00      	nop
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80099c4:	e005      	b.n	80099d2 <USBD_GetLen+0x1a>
    {
        len++;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	3301      	adds	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
        buf++;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3301      	adds	r3, #1
 80099d0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f5      	bne.n	80099c6 <USBD_GetLen+0xe>
    }

    return len;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr

080099e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80099fc:	88fa      	ldrh	r2, [r7, #6]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a02:	88fa      	ldrh	r2, [r7, #6]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fbe1 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	2100      	movs	r1, #0
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fbcf 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2203      	movs	r2, #3
 8009a54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009a58:	88fa      	ldrh	r2, [r7, #6]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fbd4 	bl	800a21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fbc2 	bl	800a21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2204      	movs	r2, #4
 8009aae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fb8c 	bl	800a1d6 <USBD_LL_Transmit>

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2205      	movs	r2, #5
 8009ad4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ad8:	2300      	movs	r3, #0
 8009ada:	2200      	movs	r2, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fb9c 	bl	800a21c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009af4:	2200      	movs	r2, #0
 8009af6:	4912      	ldr	r1, [pc, #72]	; (8009b40 <MX_USB_DEVICE_Init+0x50>)
 8009af8:	4812      	ldr	r0, [pc, #72]	; (8009b44 <MX_USB_DEVICE_Init+0x54>)
 8009afa:	f7fe ffd3 	bl	8008aa4 <USBD_Init>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b04:	f7f7 fb36 	bl	8001174 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009b08:	490f      	ldr	r1, [pc, #60]	; (8009b48 <MX_USB_DEVICE_Init+0x58>)
 8009b0a:	480e      	ldr	r0, [pc, #56]	; (8009b44 <MX_USB_DEVICE_Init+0x54>)
 8009b0c:	f7fe fff5 	bl	8008afa <USBD_RegisterClass>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b16:	f7f7 fb2d 	bl	8001174 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009b1a:	490c      	ldr	r1, [pc, #48]	; (8009b4c <MX_USB_DEVICE_Init+0x5c>)
 8009b1c:	4809      	ldr	r0, [pc, #36]	; (8009b44 <MX_USB_DEVICE_Init+0x54>)
 8009b1e:	f7fe ffab 	bl	8008a78 <USBD_CUSTOM_HID_RegisterInterface>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b28:	f7f7 fb24 	bl	8001174 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b2c:	4805      	ldr	r0, [pc, #20]	; (8009b44 <MX_USB_DEVICE_Init+0x54>)
 8009b2e:	f7fe fffd 	bl	8008b2c <USBD_Start>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b38:	f7f7 fb1c 	bl	8001174 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b3c:	bf00      	nop
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000134 	.word	0x20000134
 8009b44:	20000360 	.word	0x20000360
 8009b48:	2000000c 	.word	0x2000000c
 8009b4c:	20000124 	.word	0x20000124

08009b50 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bc80      	pop	{r7}
 8009b5c:	4770      	bx	lr

08009b5e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009b62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bc80      	pop	{r7}
 8009b6a:	4770      	bx	lr

08009b6c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	460a      	mov	r2, r1
 8009b76:	71fb      	strb	r3, [r7, #7]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009b7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr

08009b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2212      	movs	r2, #18
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000150 	.word	0x20000150

08009bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2204      	movs	r2, #4
 8009bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bc80      	pop	{r7}
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	20000164 	.word	0x20000164

08009bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	6039      	str	r1, [r7, #0]
 8009bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	4907      	ldr	r1, [pc, #28]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009be6:	4808      	ldr	r0, [pc, #32]	; (8009c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009be8:	f7ff fea4 	bl	8009934 <USBD_GetString>
 8009bec:	e004      	b.n	8009bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4904      	ldr	r1, [pc, #16]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bf4:	f7ff fe9e 	bl	8009934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bf8:	4b02      	ldr	r3, [pc, #8]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200005fc 	.word	0x200005fc
 8009c08:	0800a374 	.word	0x0800a374

08009c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	4904      	ldr	r1, [pc, #16]	; (8009c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c1c:	4804      	ldr	r0, [pc, #16]	; (8009c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c1e:	f7ff fe89 	bl	8009934 <USBD_GetString>
  return USBD_StrDesc;
 8009c22:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	200005fc 	.word	0x200005fc
 8009c30:	0800a394 	.word	0x0800a394

08009c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	221a      	movs	r2, #26
 8009c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c46:	f000 f843 	bl	8009cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c4a:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000168 	.word	0x20000168

08009c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4907      	ldr	r1, [pc, #28]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c6e:	4808      	ldr	r0, [pc, #32]	; (8009c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c70:	f7ff fe60 	bl	8009934 <USBD_GetString>
 8009c74:	e004      	b.n	8009c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c7a:	4805      	ldr	r0, [pc, #20]	; (8009c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c7c:	f7ff fe5a 	bl	8009934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	200005fc 	.word	0x200005fc
 8009c90:	0800a3a8 	.word	0x0800a3a8

08009c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4907      	ldr	r1, [pc, #28]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cac:	f7ff fe42 	bl	8009934 <USBD_GetString>
 8009cb0:	e004      	b.n	8009cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4904      	ldr	r1, [pc, #16]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cb8:	f7ff fe3c 	bl	8009934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cbc:	4b02      	ldr	r3, [pc, #8]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	200005fc 	.word	0x200005fc
 8009ccc:	0800a3bc 	.word	0x0800a3bc

08009cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <Get_SerialNum+0x44>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <Get_SerialNum+0x48>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <Get_SerialNum+0x4c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	4909      	ldr	r1, [pc, #36]	; (8009d20 <Get_SerialNum+0x50>)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f814 	bl	8009d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d00:	2204      	movs	r2, #4
 8009d02:	4908      	ldr	r1, [pc, #32]	; (8009d24 <Get_SerialNum+0x54>)
 8009d04:	68b8      	ldr	r0, [r7, #8]
 8009d06:	f000 f80f 	bl	8009d28 <IntToUnicode>
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	1ff80050 	.word	0x1ff80050
 8009d18:	1ff80054 	.word	0x1ff80054
 8009d1c:	1ff80058 	.word	0x1ff80058
 8009d20:	2000016a 	.word	0x2000016a
 8009d24:	2000017a 	.word	0x2000017a

08009d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
 8009d3e:	e027      	b.n	8009d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	0f1b      	lsrs	r3, r3, #28
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d80b      	bhi.n	8009d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	0f1b      	lsrs	r3, r3, #28
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4619      	mov	r1, r3
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	440b      	add	r3, r1
 8009d58:	3230      	adds	r2, #48	; 0x30
 8009d5a:	b2d2      	uxtb	r2, r2
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	e00a      	b.n	8009d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	0f1b      	lsrs	r3, r3, #28
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	440b      	add	r3, r1
 8009d70:	3237      	adds	r2, #55	; 0x37
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	3301      	adds	r3, #1
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4413      	add	r3, r2
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	75fb      	strb	r3, [r7, #23]
 8009d90:	7dfa      	ldrb	r2, [r7, #23]
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d3d3      	bcc.n	8009d40 <IntToUnicode+0x18>
  }
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr

08009da4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d106      	bne.n	8009dc4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009db6:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <HAL_PCDEx_SetConnectionState+0x38>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	4a08      	ldr	r2, [pc, #32]	; (8009ddc <HAL_PCDEx_SetConnectionState+0x38>)
 8009dbc:	f043 0301 	orr.w	r3, r3, #1
 8009dc0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009dc2:	e005      	b.n	8009dd0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <HAL_PCDEx_SetConnectionState+0x38>)
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4a04      	ldr	r2, [pc, #16]	; (8009ddc <HAL_PCDEx_SetConnectionState+0x38>)
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	6053      	str	r3, [r2, #4]
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40010000 	.word	0x40010000

08009de0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a0d      	ldr	r2, [pc, #52]	; (8009e24 <HAL_PCD_MspInit+0x44>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d113      	bne.n	8009e1a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <HAL_PCD_MspInit+0x48>)
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	4a0c      	ldr	r2, [pc, #48]	; (8009e28 <HAL_PCD_MspInit+0x48>)
 8009df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009dfc:	6253      	str	r3, [r2, #36]	; 0x24
 8009dfe:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <HAL_PCD_MspInit+0x48>)
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2014      	movs	r0, #20
 8009e10:	f7f8 fb0d 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009e14:	2014      	movs	r0, #20
 8009e16:	f7f8 fb26 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	40005c00 	.word	0x40005c00
 8009e28:	40023800 	.word	0x40023800

08009e2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f7fe feba 	bl	8008bbc <USBD_LL_SetupStage>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	6879      	ldr	r1, [r7, #4]
 8009e66:	4613      	mov	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	440b      	add	r3, r1
 8009e70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f7fe feec 	bl	8008c56 <USBD_LL_DataOutStage>
}
 8009e7e:	bf00      	nop
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	440b      	add	r3, r1
 8009ea6:	333c      	adds	r3, #60	; 0x3c
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7fe ff43 	bl	8008d38 <USBD_LL_DataInStage>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7ff f84e 	bl	8008f6a <USBD_LL_SOF>
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d001      	beq.n	8009eee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009eea:	f7f7 f943 	bl	8001174 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff f803 	bl	8008f04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe ffbc 	bl	8008e82 <USBD_LL_Reset>
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fffd 	bl	8008f22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <HAL_PCD_SuspendCallback+0x30>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	4a03      	ldr	r2, [pc, #12]	; (8009f44 <HAL_PCD_SuspendCallback+0x30>)
 8009f36:	f043 0306 	orr.w	r3, r3, #6
 8009f3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	e000ed00 	.word	0xe000ed00

08009f48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fff7 	bl	8008f4a <USBD_LL_Resume>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f6c:	4a23      	ldr	r2, [pc, #140]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a21      	ldr	r2, [pc, #132]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f7e:	4a20      	ldr	r2, [pc, #128]	; (800a000 <USBD_LL_Init+0x9c>)
 8009f80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f82:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f84:	2208      	movs	r2, #8
 8009f86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f90:	2202      	movs	r2, #2
 8009f92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f94:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f9a:	4b18      	ldr	r3, [pc, #96]	; (8009ffc <USBD_LL_Init+0x98>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fa0:	4816      	ldr	r0, [pc, #88]	; (8009ffc <USBD_LL_Init+0x98>)
 8009fa2:	f7f8 fd91 	bl	8002ac8 <HAL_PCD_Init>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009fac:	f7f7 f8e2 	bl	8001174 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fb6:	2318      	movs	r3, #24
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2100      	movs	r1, #0
 8009fbc:	f7fa f957 	bl	800426e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fc6:	2358      	movs	r3, #88	; 0x58
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2180      	movs	r1, #128	; 0x80
 8009fcc:	f7fa f94f 	bl	800426e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fd6:	2398      	movs	r3, #152	; 0x98
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2181      	movs	r1, #129	; 0x81
 8009fdc:	f7fa f947 	bl	800426e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fe6:	23d8      	movs	r3, #216	; 0xd8
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2101      	movs	r1, #1
 8009fec:	f7fa f93f 	bl	800426e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200007fc 	.word	0x200007fc
 800a000:	40005c00 	.word	0x40005c00

0800a004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f8 fe32 	bl	8002c84 <HAL_PCD_Start>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f932 	bl	800a290 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	4603      	mov	r3, r0
 800a04a:	70fb      	strb	r3, [r7, #3]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70bb      	strb	r3, [r7, #2]
 800a050:	4613      	mov	r3, r2
 800a052:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a062:	78bb      	ldrb	r3, [r7, #2]
 800a064:	883a      	ldrh	r2, [r7, #0]
 800a066:	78f9      	ldrb	r1, [r7, #3]
 800a068:	f7f8 ff4e 	bl	8002f08 <HAL_PCD_EP_Open>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 f90c 	bl	800a290 <USBD_Get_USB_Status>
 800a078:	4603      	mov	r3, r0
 800a07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f8 ff95 	bl	8002fd4 <HAL_PCD_EP_Close>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f8ed 	bl	800a290 <USBD_Get_USB_Status>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f9 f83e 	bl	8003164 <HAL_PCD_EP_SetStall>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f8ce 	bl	800a290 <USBD_Get_USB_Status>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a112:	2300      	movs	r3, #0
 800a114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4611      	mov	r1, r2
 800a120:	4618      	mov	r0, r3
 800a122:	f7f9 f871 	bl	8003208 <HAL_PCD_EP_ClrStall>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f8af 	bl	800a290 <USBD_Get_USB_Status>
 800a132:	4603      	mov	r3, r0
 800a134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a136:	7bbb      	ldrb	r3, [r7, #14]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a152:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da0c      	bge.n	800a176 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	3302      	adds	r3, #2
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	e00b      	b.n	800a18e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a17c:	68f9      	ldr	r1, [r7, #12]
 800a17e:	4613      	mov	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	440b      	add	r3, r1
 800a188:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a18c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr

0800a198 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f8 fe81 	bl	8002ebe <HAL_PCD_SetAddress>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f864 	bl	800a290 <USBD_Get_USB_Status>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	72fb      	strb	r3, [r7, #11]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a1f8:	893b      	ldrh	r3, [r7, #8]
 800a1fa:	7af9      	ldrb	r1, [r7, #11]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	f7f8 ff6e 	bl	80030de <HAL_PCD_EP_Transmit>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f841 	bl	800a290 <USBD_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a212:	7dbb      	ldrb	r3, [r7, #22]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	607a      	str	r2, [r7, #4]
 800a226:	461a      	mov	r2, r3
 800a228:	460b      	mov	r3, r1
 800a22a:	72fb      	strb	r3, [r7, #11]
 800a22c:	4613      	mov	r3, r2
 800a22e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a23e:	893b      	ldrh	r3, [r7, #8]
 800a240:	7af9      	ldrb	r1, [r7, #11]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	f7f8 ff0e 	bl	8003064 <HAL_PCD_EP_Receive>
 800a248:	4603      	mov	r3, r0
 800a24a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f81e 	bl	800a290 <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a258:	7dbb      	ldrb	r3, [r7, #22]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a26c:	4b02      	ldr	r3, [pc, #8]	; (800a278 <USBD_static_malloc+0x14>)
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr
 800a278:	20000ae8 	.word	0x20000ae8

0800a27c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	bc80      	pop	{r7}
 800a28c:	4770      	bx	lr
	...

0800a290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d817      	bhi.n	800a2d4 <USBD_Get_USB_Status+0x44>
 800a2a4:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <USBD_Get_USB_Status+0x1c>)
 800a2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2aa:	bf00      	nop
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a2c3 	.word	0x0800a2c3
 800a2b4:	0800a2c9 	.word	0x0800a2c9
 800a2b8:	0800a2cf 	.word	0x0800a2cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c0:	e00b      	b.n	800a2da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c6:	e008      	b.n	800a2da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a2cc:	e005      	b.n	800a2da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d2:	e002      	b.n	800a2da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d8:	bf00      	nop
  }
  return usb_status;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop

0800a2e8 <__libc_init_array>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	2600      	movs	r6, #0
 800a2ec:	4d0c      	ldr	r5, [pc, #48]	; (800a320 <__libc_init_array+0x38>)
 800a2ee:	4c0d      	ldr	r4, [pc, #52]	; (800a324 <__libc_init_array+0x3c>)
 800a2f0:	1b64      	subs	r4, r4, r5
 800a2f2:	10a4      	asrs	r4, r4, #2
 800a2f4:	42a6      	cmp	r6, r4
 800a2f6:	d109      	bne.n	800a30c <__libc_init_array+0x24>
 800a2f8:	f000 f830 	bl	800a35c <_init>
 800a2fc:	2600      	movs	r6, #0
 800a2fe:	4d0a      	ldr	r5, [pc, #40]	; (800a328 <__libc_init_array+0x40>)
 800a300:	4c0a      	ldr	r4, [pc, #40]	; (800a32c <__libc_init_array+0x44>)
 800a302:	1b64      	subs	r4, r4, r5
 800a304:	10a4      	asrs	r4, r4, #2
 800a306:	42a6      	cmp	r6, r4
 800a308:	d105      	bne.n	800a316 <__libc_init_array+0x2e>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a310:	4798      	blx	r3
 800a312:	3601      	adds	r6, #1
 800a314:	e7ee      	b.n	800a2f4 <__libc_init_array+0xc>
 800a316:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31a:	4798      	blx	r3
 800a31c:	3601      	adds	r6, #1
 800a31e:	e7f2      	b.n	800a306 <__libc_init_array+0x1e>
 800a320:	0800a3f8 	.word	0x0800a3f8
 800a324:	0800a3f8 	.word	0x0800a3f8
 800a328:	0800a3f8 	.word	0x0800a3f8
 800a32c:	0800a3fc 	.word	0x0800a3fc

0800a330 <memcpy>:
 800a330:	440a      	add	r2, r1
 800a332:	4291      	cmp	r1, r2
 800a334:	f100 33ff 	add.w	r3, r0, #4294967295
 800a338:	d100      	bne.n	800a33c <memcpy+0xc>
 800a33a:	4770      	bx	lr
 800a33c:	b510      	push	{r4, lr}
 800a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a342:	4291      	cmp	r1, r2
 800a344:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a348:	d1f9      	bne.n	800a33e <memcpy+0xe>
 800a34a:	bd10      	pop	{r4, pc}

0800a34c <memset>:
 800a34c:	4603      	mov	r3, r0
 800a34e:	4402      	add	r2, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <_init>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr

0800a368 <_fini>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr
