
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a024  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1dc  0800a1dc  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e4  0800a1e4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a1ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000184  0800a370  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800a370  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013309  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  000334b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00037960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ca6  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152a9  00000000  00000000  000504ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee3  00000000  00000000  00065757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  000ec68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a148 	.word	0x0800a148

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a148 	.word	0x0800a148

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe44 	bl	800174a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f917 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fa77 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa57 	bl	8000f7c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f008 ff05 	bl	80098dc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 f9c5 	bl	8000e60 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f95d 	bl	8000d94 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000ada:	4879      	ldr	r0, [pc, #484]	; (8000cc0 <main+0x208>)
 8000adc:	f004 fa04 	bl	8004ee8 <HAL_TIM_Base_Start>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000ae0:	4c78      	ldr	r4, [pc, #480]	; (8000cc4 <main+0x20c>)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4a78      	ldr	r2, [pc, #480]	; (8000cc8 <main+0x210>)
 8000ae6:	4979      	ldr	r1, [pc, #484]	; (8000ccc <main+0x214>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc81 	bl	80013f0 <Joystick_Init>
 8000aee:	4625      	mov	r5, r4
 8000af0:	463c      	mov	r4, r7
 8000af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b0c:	e009      	b.n	8000b22 <main+0x6a>
  	  event_state[i] = EVENT_WAIT;
 8000b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b12:	4a6f      	ldr	r2, [pc, #444]	; (8000cd0 <main+0x218>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	daf1      	bge.n	8000b0e <main+0x56>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <main+0x21c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <main+0x218>)
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	f200 8094 	bhi.w	8000c62 <main+0x1aa>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <main+0x88>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b65 	.word	0x08000b65
 8000b4c:	08000b6d 	.word	0x08000b6d
 8000b50:	08000c5b 	.word	0x08000c5b
		case EVENT_WAIT:
			asm("NOP");
 8000b54:	bf00      	nop
			break;
 8000b56:	e084      	b.n	8000c62 <main+0x1aa>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b58:	2202      	movs	r2, #2
 8000b5a:	495c      	ldr	r1, [pc, #368]	; (8000ccc <main+0x214>)
 8000b5c:	485e      	ldr	r0, [pc, #376]	; (8000cd8 <main+0x220>)
 8000b5e:	f000 ffa9 	bl	8001ab4 <HAL_ADC_Start_DMA>
			break;
 8000b62:	e07e      	b.n	8000c62 <main+0x1aa>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f000 fa49 	bl	8000ffc <write_next_event_state>
			break;
 8000b6a:	e07a      	b.n	8000c62 <main+0x1aa>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b6c:	4855      	ldr	r0, [pc, #340]	; (8000cc4 <main+0x20c>)
 8000b6e:	f000 fc8b 	bl	8001488 <Joystick_Update>
			uint8_t invert_x = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000b7e:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <main+0x224>)
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000b82:	4b56      	ldr	r3, [pc, #344]	; (8000cdc <main+0x224>)
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000b86:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <main+0xe0>
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <main+0x20c>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	e001      	b.n	8000b9c <main+0xe4>
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <main+0x20c>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000b9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <main+0xf8>
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <main+0x20c>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	e001      	b.n	8000bb4 <main+0xfc>
 8000bb0:	4b44      	ldr	r3, [pc, #272]	; (8000cc4 <main+0x20c>)
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <main+0x228>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000bbc:	4b48      	ldr	r3, [pc, #288]	; (8000ce0 <main+0x228>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	809a      	strh	r2, [r3, #4]
			if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 8000bc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bc4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bc6:	f7ff fda3 	bl	8000710 <__aeabi_fcmpgt>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <main+0x12c>
 8000bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bda:	f7ff fd7b 	bl	80006d4 <__aeabi_fcmplt>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <main+0x154>
				controller.joysticks._bits[0] += (int16_t)(val_x * -(float)INT16_MAX);
 8000be4:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <main+0x228>)
 8000be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bea:	b29c      	uxth	r4, r3
 8000bec:	493d      	ldr	r1, [pc, #244]	; (8000ce4 <main+0x22c>)
 8000bee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bf0:	f7ff fbd2 	bl	8000398 <__aeabi_fmul>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fd94 	bl	8000724 <__aeabi_f2iz>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4423      	add	r3, r4
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <main+0x228>)
 8000c0a:	805a      	strh	r2, [r3, #2]
			}
			if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 8000c0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c10:	f7ff fd7e 	bl	8000710 <__aeabi_fcmpgt>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10a      	bne.n	8000c30 <main+0x178>
 8000c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c20:	4619      	mov	r1, r3
 8000c22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c24:	f7ff fd56 	bl	80006d4 <__aeabi_fcmplt>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <main+0x178>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
			}
			break;
 8000c2e:	e018      	b.n	8000c62 <main+0x1aa>
				controller.joysticks._bits[1] += (int16_t)(val_y * (float)INT16_MAX);
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <main+0x228>)
 8000c32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c36:	b29c      	uxth	r4, r3
 8000c38:	492b      	ldr	r1, [pc, #172]	; (8000ce8 <main+0x230>)
 8000c3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c3c:	f7ff fbac 	bl	8000398 <__aeabi_fmul>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fd6e 	bl	8000724 <__aeabi_f2iz>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4423      	add	r3, r4
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <main+0x228>)
 8000c56:	809a      	strh	r2, [r3, #4]
			break;
 8000c58:	e003      	b.n	8000c62 <main+0x1aa>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000c5a:	4821      	ldr	r0, [pc, #132]	; (8000ce0 <main+0x228>)
 8000c5c:	f000 fa12 	bl	8001084 <Send_HID_Data>
			break;
 8000c60:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <main+0x21c>)
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <main+0x234>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d00d      	beq.n	8000c8a <main+0x1d2>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <main+0x21c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	425a      	negs	r2, r3
 8000c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c7e:	bf58      	it	pl
 8000c80:	4253      	negpl	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <main+0x21c>)
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <main+0x1d8>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f9b6 	bl	8000ffc <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <main+0x234>)
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <main+0x21c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d306      	bcc.n	8000caa <main+0x1f2>
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <main+0x234>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <main+0x21c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	e007      	b.n	8000cba <main+0x202>
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <main+0x234>)
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <main+0x21c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <main+0x238>)
 8000cbc:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000cbe:	e734      	b.n	8000b2a <main+0x72>
 8000cc0:	20000238 	.word	0x20000238
 8000cc4:	20000300 	.word	0x20000300
 8000cc8:	200002fe 	.word	0x200002fe
 8000ccc:	200002fc 	.word	0x200002fc
 8000cd0:	20000278 	.word	0x20000278
 8000cd4:	200002f8 	.word	0x200002f8
 8000cd8:	200001a0 	.word	0x200001a0
 8000cdc:	3d4ccccd 	.word	0x3d4ccccd
 8000ce0:	2000033c 	.word	0x2000033c
 8000ce4:	c6fffe00 	.word	0xc6fffe00
 8000ce8:	46fffe00 	.word	0x46fffe00
 8000cec:	200002f9 	.word	0x200002f9
 8000cf0:	200002fa 	.word	0x200002fa

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f009 fa18 	bl	800a138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d24:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d26:	2303      	movs	r3, #3
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2310      	movs	r3, #16
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fac5 	bl	80042e0 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d5c:	f000 fa00 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2101      	movs	r1, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fde1 	bl	8004940 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d84:	f000 f9ec 	bl	8001160 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3748      	adds	r7, #72	; 0x48
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <MX_ADC_Init+0xc8>)
 8000da8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e0a:	f000 fd0d 	bl	8001828 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e14:	f000 f9a4 	bl	8001160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e2a:	f000 ffed 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e34:	f000 f994 	bl	8001160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC_Init+0xc4>)
 8000e42:	f000 ffe1 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000e4c:	f000 f988 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001a0 	.word	0x200001a0
 8000e5c:	40012400 	.word	0x40012400

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ea0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb2:	4831      	ldr	r0, [pc, #196]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000eb4:	f003 ffd8 	bl	8004e68 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ebe:	f000 f94f 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ed0:	f004 f9d0 	bl	8005274 <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eda:	f000 f941 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ede:	4826      	ldr	r0, [pc, #152]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000ee0:	f004 f84c 	bl	8004f7c <HAL_TIM_OC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 f939 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000efe:	f004 fc8f 	bl	8005820 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000f08:	f000 f92a 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000f10:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f26:	f004 f94d 	bl	80051c4 <HAL_TIM_OC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f30:	f000 f916 	bl	8001160 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0208 	orr.w	r2, r2, #8
 8000f42:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000f44:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f52:	f004 f937 	bl	80051c4 <HAL_TIM_OC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000f5c:	f000 f900 	bl	8001160 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <MX_TIM2_Init+0x118>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f6e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000238 	.word	0x20000238

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f001 fa3b 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f001 fa54 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <MX_GPIO_Init+0x40>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40023800 	.word	0x40023800

08000ffc <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <write_next_event_state+0x3c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	425a      	negs	r2, r3
 800100e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001016:	bf58      	it	pl
 8001018:	4253      	negpl	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <write_next_event_state+0x3c>)
 800101e:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <write_next_event_state+0x3c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <write_next_event_state+0x40>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	5453      	strb	r3, [r2, r1]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200002f9 	.word	0x200002f9
 800103c:	20000278 	.word	0x20000278

08001040 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e1b      	ldrb	r3, [r3, #24]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d002      	beq.n	8001056 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 8001050:	2b02      	cmp	r3, #2
 8001052:	d004      	beq.n	800105e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
			break;
		default:
			break;
 8001054:	e007      	b.n	8001066 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_1);
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ffd0 	bl	8000ffc <write_next_event_state>
			break;
 800105c:	e003      	b.n	8001066 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			write_next_event_state(TIM_EVENT_2);
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff ffcc 	bl	8000ffc <write_next_event_state>
			break;
 8001064:	bf00      	nop
	}
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001076:	2003      	movs	r0, #3
 8001078:	f7ff ffc0 	bl	8000ffc <write_next_event_state>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Send_HID_Data>:

void Send_HID_Data(Controller_HandleTypeDef* controller){
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 800108a:	afa6      	add	r7, sp, #664	; 0x298
 800108c:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <Send_HID_Data+0xd4>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <Send_HID_Data+0xd4>)
 800109c:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <Send_HID_Data+0xd4>)
 80010aa:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <Send_HID_Data+0xd4>)
 80010b6:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010be:	121b      	asrs	r3, r3, #8
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <Send_HID_Data+0xd4>)
 80010c6:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <Send_HID_Data+0xd4>)
 80010d2:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010da:	121b      	asrs	r3, r3, #8
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <Send_HID_Data+0xd4>)
 80010e2:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <Send_HID_Data+0xd4>)
 80010ee:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010f6:	121b      	asrs	r3, r3, #8
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <Send_HID_Data+0xd4>)
 80010fe:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <Send_HID_Data+0xd4>)
 800110a:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001112:	121b      	asrs	r3, r3, #8
 8001114:	b21b      	sxth	r3, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <Send_HID_Data+0xd4>)
 800111a:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7a9a      	ldrb	r2, [r3, #10]
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <Send_HID_Data+0xd4>)
 8001122:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7ada      	ldrb	r2, [r3, #11]
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Send_HID_Data+0xd4>)
 800112a:	731a      	strb	r2, [r3, #12]
	USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <Send_HID_Data+0xd8>)
 800112e:	230d      	movs	r3, #13
 8001130:	93a4      	str	r3, [sp, #656]	; 0x290
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <Send_HID_Data+0xd4>)
 8001134:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001136:	4668      	mov	r0, sp
 8001138:	f104 0310 	add.w	r3, r4, #16
 800113c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8001140:	4619      	mov	r1, r3
 8001142:	f008 ffeb 	bl	800a11c <memcpy>
 8001146:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800114a:	f007 fad3 	bl	80086f4 <USBD_CUSTOM_HID_SendReport>
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	20000348 	.word	0x20000348
 800115c:	20000360 	.word	0x20000360

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_MspInit+0x58>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_MspInit+0x58>)
 8001178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800117c:	6253      	str	r3, [r2, #36]	; 0x24
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_MspInit+0x58>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_MspInit+0x58>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_MspInit+0x58>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_MspInit+0x58>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_MspInit+0x58>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_MspInit+0x58>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6253      	str	r3, [r2, #36]	; 0x24
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_MspInit+0x58>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2d      	ldr	r2, [pc, #180]	; (800129c <HAL_ADC_MspInit+0xd4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d154      	bne.n	8001294 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_ADC_MspInit+0xd8>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800121a:	2303      	movs	r3, #3
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <HAL_ADC_MspInit+0xdc>)
 800122e:	f001 fac1 	bl	80027b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_ADC_MspInit+0xe4>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 800124c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001250:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001266:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 800126a:	f001 f90d 	bl	8002488 <HAL_DMA_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001274:	f7ff ff74 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_ADC_MspInit+0xe0>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2012      	movs	r0, #18
 800128a:	f001 f8c6 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800128e:	2012      	movs	r0, #18
 8001290:	f001 f8df 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40012400 	.word	0x40012400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	200001f4 	.word	0x200001f4
 80012ac:	40026008 	.word	0x40026008

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d113      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6253      	str	r3, [r2, #36]	; 0x24
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201c      	movs	r0, #28
 80012e0:	f001 f89b 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f001 f8b4 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 fa57 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <DMA1_Channel1_IRQHandler+0x10>)
 800134e:	f001 f953 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001f4 	.word	0x200001f4

0800135c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <ADC1_IRQHandler+0x10>)
 8001362:	f000 fc35 	bl	8001bd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001a0 	.word	0x200001a0

08001370 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <USB_LP_IRQHandler+0x10>)
 8001376:	f001 fca1 	bl	8002cbc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200007fc 	.word	0x200007fc

08001384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM2_IRQHandler+0x10>)
 800138a:	f003 fe3f 	bl	800500c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000238 	.word	0x20000238

08001398 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	; (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff ffe5 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f008 fe81 	bl	800a0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7ff fb71 	bl	8000ab8 <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013e0:	0800a1ec 	.word	0x0800a1ec
  ldr r2, =_sbss
 80013e4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013e8:	20000b10 	.word	0x20000b10

080013ec <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <COMP_IRQHandler>
	...

080013f0 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 80013f0:	b4b0      	push	{r4, r5, r7}
 80013f2:	b095      	sub	sp, #84	; 0x54
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001404:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800140a:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <Joystick_Init+0x90>)
 8001412:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <Joystick_Init+0x94>)
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001428:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800142c:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <Joystick_Init+0x90>)
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <Joystick_Init+0x94>)
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8001452:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	461d      	mov	r5, r3
 800145c:	f107 0414 	add.w	r4, r7, #20
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001470:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	3754      	adds	r7, #84	; 0x54
 8001478:	46bd      	mov	sp, r7
 800147a:	bcb0      	pop	{r4, r5, r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	3ccccccd 	.word	0x3ccccccd
 8001484:	3f8ccccd 	.word	0x3f8ccccd

08001488 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d062      	beq.n	8001570 <Joystick_Update+0xe8>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05e      	beq.n	8001570 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	891b      	ldrh	r3, [r3, #8]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ff16 	bl	80002e8 <__aeabi_ui2f>
 80014bc:	4604      	mov	r4, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014c8:	f7fe fe5c 	bl	8000184 <__aeabi_fsub>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7fe ff61 	bl	8000398 <__aeabi_fmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461c      	mov	r4, r3
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff03 	bl	80002e8 <__aeabi_ui2f>
 80014e2:	4602      	mov	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7fe ff54 	bl	8000398 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7fe fe47 	bl	8000188 <__addsf3>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f937 	bl	8000770 <__aeabi_f2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	8c1b      	ldrh	r3, [r3, #32]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe feea 	bl	80002e8 <__aeabi_ui2f>
 8001514:	4604      	mov	r4, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001520:	f7fe fe30 	bl	8000184 <__aeabi_fsub>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	4620      	mov	r0, r4
 800152a:	f7fe ff35 	bl	8000398 <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	461c      	mov	r4, r3
 8001532:	8bbb      	ldrh	r3, [r7, #28]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed7 	bl	80002e8 <__aeabi_ui2f>
 800153a:	4602      	mov	r2, r0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7fe ff28 	bl	8000398 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f7fe fe1b 	bl	8000188 <__addsf3>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f90b 	bl	8000770 <__aeabi_f2uiz>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	865a      	strh	r2, [r3, #50]	; 0x32
 800156e:	e008      	b.n	8001582 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	891b      	ldrh	r3, [r3, #8]
 8001586:	8bfa      	ldrh	r2, [r7, #30]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8c1b      	ldrh	r3, [r3, #32]
 8001592:	8bba      	ldrh	r2, [r7, #28]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	8bfa      	ldrh	r2, [r7, #30]
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf28      	it	cs
 80015a4:	4613      	movcs	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	88db      	ldrh	r3, [r3, #6]
 80015b0:	8bfa      	ldrh	r2, [r7, #30]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	bf38      	it	cc
 80015b6:	4613      	movcc	r3, r2
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8b9b      	ldrh	r3, [r3, #28]
 80015c2:	8bba      	ldrh	r2, [r7, #28]
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf28      	it	cs
 80015c8:	4613      	movcs	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	8bdb      	ldrh	r3, [r3, #30]
 80015d4:	8bba      	ldrh	r2, [r7, #28]
 80015d6:	4293      	cmp	r3, r2
 80015d8:	bf38      	it	cc
 80015da:	4613      	movcc	r3, r2
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 80015e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd15      	ble.n	8001616 <Joystick_Update+0x18e>
 80015ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe7e 	bl	80002f0 <__aeabi_i2f>
 80015f4:	4604      	mov	r4, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	88db      	ldrh	r3, [r3, #6]
 80015fa:	461a      	mov	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	891b      	ldrh	r3, [r3, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe74 	bl	80002f0 <__aeabi_i2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4619      	mov	r1, r3
 800160c:	4620      	mov	r0, r4
 800160e:	f7fe ff77 	bl	8000500 <__aeabi_fdiv>
 8001612:	4603      	mov	r3, r0
 8001614:	e016      	b.n	8001644 <Joystick_Update+0x1bc>
 8001616:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fe68 	bl	80002f0 <__aeabi_i2f>
 8001620:	4603      	mov	r3, r0
 8001622:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	891b      	ldrh	r3, [r3, #8]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fe5c 	bl	80002f0 <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7fe ff5f 	bl	8000500 <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
 8001644:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001646:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	dd15      	ble.n	800167a <Joystick_Update+0x1f2>
 800164e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe4c 	bl	80002f0 <__aeabi_i2f>
 8001658:	4604      	mov	r4, r0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8bdb      	ldrh	r3, [r3, #30]
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	8c1b      	ldrh	r3, [r3, #32]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fe42 	bl	80002f0 <__aeabi_i2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4619      	mov	r1, r3
 8001670:	4620      	mov	r0, r4
 8001672:	f7fe ff45 	bl	8000500 <__aeabi_fdiv>
 8001676:	4603      	mov	r3, r0
 8001678:	e016      	b.n	80016a8 <Joystick_Update+0x220>
 800167a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fe36 	bl	80002f0 <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8b9b      	ldrh	r3, [r3, #28]
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8c1b      	ldrh	r3, [r3, #32]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fe2a 	bl	80002f0 <__aeabi_i2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7fe ff2d 	bl	8000500 <__aeabi_fdiv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff f82e 	bl	8000710 <__aeabi_fcmpgt>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <Joystick_Update+0x236>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	e002      	b.n	80016c4 <Joystick_Update+0x23c>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016c4:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f7ff f820 	bl	8000710 <__aeabi_fcmpgt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <Joystick_Update+0x252>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	e002      	b.n	80016e0 <Joystick_Update+0x258>
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016e0:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	4619      	mov	r1, r3
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff f811 	bl	8000710 <__aeabi_fcmpgt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <Joystick_Update+0x282>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4619      	mov	r1, r3
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f7fe ffea 	bl	80006d4 <__aeabi_fcmplt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <Joystick_Update+0x282>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	e001      	b.n	800170e <Joystick_Update+0x286>
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f7fe fff9 	bl	8000710 <__aeabi_fcmpgt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <Joystick_Update+0x2b2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	4619      	mov	r1, r3
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f7fe ffd2 	bl	80006d4 <__aeabi_fcmplt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <Joystick_Update+0x2b2>
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	e001      	b.n	800173e <Joystick_Update+0x2b6>
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}

0800174a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 fe55 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f80e 	bl	800177c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176c:	f7ff fcfe 	bl	800116c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_InitTick+0x68>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d022      	beq.n	80017d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_InitTick+0x6c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_InitTick+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800179c:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fe62 	bl	800246e <HAL_SYSTICK_Config>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d809      	bhi.n	80017ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b6:	2200      	movs	r2, #0
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295
 80017be:	f000 fe2c 	bl	800241a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0x70>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e007      	b.n	80017da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e004      	b.n	80017da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e001      	b.n	80017da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_IncTick+0x1c>)
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000358 	.word	0x20000358
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000358 	.word	0x20000358

08001828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e127      	b.n	8001a98 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d115      	bne.n	8001882 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <HAL_ADC_Init+0x278>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <HAL_ADC_Init+0x278>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_ADC_Init+0x278>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fca3 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80ff 	bne.w	8001a8e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001898:	f023 0302 	bic.w	r3, r3, #2
 800189c:	f043 0202 	orr.w	r2, r3, #2
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018a4:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_ADC_Init+0x27c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	497c      	ldr	r1, [pc, #496]	; (8001aa4 <HAL_ADC_Init+0x27c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018be:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c6:	4619      	mov	r1, r3
 80018c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018cc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80018e2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	2302      	movs	r3, #2
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800190a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800190c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190e:	4313      	orrs	r3, r2
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2b10      	cmp	r3, #16
 8001918:	d007      	beq.n	800192a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001922:	4313      	orrs	r3, r2
 8001924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001926:	4313      	orrs	r3, r2
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b40      	cmp	r3, #64	; 0x40
 8001936:	d04f      	beq.n	80019d8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193e:	4313      	orrs	r3, r2
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800194a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6912      	ldr	r2, [r2, #16]
 8001950:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001954:	d003      	beq.n	800195e <HAL_ADC_Init+0x136>
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6912      	ldr	r2, [r2, #16]
 800195a:	2a01      	cmp	r2, #1
 800195c:	d102      	bne.n	8001964 <HAL_ADC_Init+0x13c>
 800195e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001962:	e000      	b.n	8001966 <HAL_ADC_Init+0x13e>
 8001964:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001966:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196a:	4313      	orrs	r3, r2
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001974:	2b01      	cmp	r3, #1
 8001976:	d125      	bne.n	80019c4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	3b01      	subs	r3, #1
 8001988:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800198c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	fa92 f2a2 	rbit	r2, r2
 8001994:	617a      	str	r2, [r7, #20]
  return result;
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	fab2 f282 	clz	r2, r2
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	4093      	lsls	r3, r2
 80019a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a6:	4313      	orrs	r3, r2
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	e00b      	b.n	80019c4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_ADC_Init+0x280>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_ADC_Init+0x284>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f4:	d003      	beq.n	80019fe <HAL_ADC_Init+0x1d6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d119      	bne.n	8001a32 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	fa92 f2a2 	rbit	r2, r2
 8001a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	fa03 f202 	lsl.w	r2, r3, r2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a30:	e007      	b.n	8001a42 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_ADC_Init+0x288>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	f023 0303 	bic.w	r3, r3, #3
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a68:	e014      	b.n	8001a94 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f023 0312 	bic.w	r3, r3, #18
 8001a72:	f043 0210 	orr.w	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3738      	adds	r7, #56	; 0x38
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40012700 	.word	0x40012700
 8001aa8:	fcfc16ff 	.word	0xfcfc16ff
 8001aac:	c0fff18d 	.word	0xc0fff18d
 8001ab0:	bf80fffe 	.word	0xbf80fffe

08001ab4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Start_DMA+0x1e>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e074      	b.n	8001bbc <HAL_ADC_Start_DMA+0x108>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fae4 	bl	80020a8 <ADC_Enable>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d167      	bne.n	8001bba <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b28:	d106      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	f023 0206 	bic.w	r2, r3, #6
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_ADC_Start_DMA+0x110>)
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_ADC_Start_DMA+0x114>)
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_ADC_Start_DMA+0x118>)
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	3358      	adds	r3, #88	; 0x58
 8001b92:	4619      	mov	r1, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f000 fcce 	bl	8002538 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d107      	bne.n	8001bba <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08002161 	.word	0x08002161
 8001bc8:	08002209 	.word	0x08002209
 8001bcc:	08002225 	.word	0x08002225

08001bd0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d14e      	bne.n	8001c84 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d147      	bne.n	8001c84 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12c      	bne.n	8001c74 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d127      	bne.n	8001c74 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d119      	bne.n	8001c74 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0220 	bic.w	r2, r2, #32
 8001c4e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff f9fa 	bl	800106e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0212 	mvn.w	r2, #18
 8001c82:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b80      	cmp	r3, #128	; 0x80
 8001c90:	d15c      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d155      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13a      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12c      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d125      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11e      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d119      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d16:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fa8b 	bl	8002258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 020c 	mvn.w	r2, #12
 8001d4a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	d114      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10d      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f834 	bl	8001de2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0201 	mvn.w	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d92:	d119      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d112      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0220 	mvn.w	r2, #32
 8001db6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f81b 	bl	8001df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0220 	mvn.w	r2, #32
 8001dc6:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x20>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e134      	b.n	8002092 <HAL_ADC_ConfigChannel+0x28a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	d81c      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b05      	subs	r3, #5
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4019      	ands	r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b05      	subs	r3, #5
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e70:	e07e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d81c      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b23      	subs	r3, #35	; 0x23
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4019      	ands	r1, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b23      	subs	r3, #35	; 0x23
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001eb2:	e05d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d81c      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	; 0x41
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b41      	subs	r3, #65	; 0x41
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef4:	e03c      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b18      	cmp	r3, #24
 8001efc:	d81c      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b5f      	subs	r3, #95	; 0x5f
 8001f10:	221f      	movs	r2, #31
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4019      	ands	r1, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b5f      	subs	r3, #95	; 0x5f
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	e01b      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	3b7d      	subs	r3, #125	; 0x7d
 8001f4a:	221f      	movs	r2, #31
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4019      	ands	r1, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b7d      	subs	r3, #125	; 0x7d
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d81a      	bhi.n	8001fae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6959      	ldr	r1, [r3, #20]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	2207      	movs	r2, #7
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4019      	ands	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6898      	ldr	r0, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	e042      	b.n	8002034 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b13      	cmp	r3, #19
 8001fb4:	d81c      	bhi.n	8001ff0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6919      	ldr	r1, [r3, #16]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	2207      	movs	r2, #7
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4019      	ands	r1, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6898      	ldr	r0, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	e021      	b.n	8002034 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b1a      	cmp	r3, #26
 8001ff6:	d81c      	bhi.n	8002032 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b3c      	subs	r3, #60	; 0x3c
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	3b3c      	subs	r3, #60	; 0x3c
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	e000      	b.n	8002034 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002032:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b10      	cmp	r3, #16
 800203a:	d003      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002040:	2b11      	cmp	r3, #17
 8002042:	d121      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_ADC_ConfigChannel+0x294>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11b      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_ADC_ConfigChannel+0x294>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_ADC_ConfigChannel+0x294>)
 8002056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d111      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9a      	lsrs	r2, r3, #18
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800207a:	e002      	b.n	8002082 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40012700 	.word	0x40012700
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d043      	beq.n	800214e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <ADC_Enable+0xb0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <ADC_Enable+0xb4>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020ea:	e002      	b.n	80020f2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80020f8:	f7ff fb8c 	bl	8001814 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020fe:	e01f      	b.n	8002140 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002100:	f7ff fb88 	bl	8001814 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d918      	bls.n	8002140 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d011      	beq.n	8002140 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e007      	b.n	8002150 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d1d8      	bne.n	8002100 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000
 800215c:	431bde83 	.word	0x431bde83

08002160 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d13d      	bne.n	80021f6 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d12c      	bne.n	80021ee <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d127      	bne.n	80021ee <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0220 	bic.w	r2, r2, #32
 80021c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7fe ff3d 	bl	800106e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021f4:	e004      	b.n	8002200 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fdda 	bl	8001dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff fdd2 	bl	8001df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4906      	ldr	r1, [pc, #24]	; (8002304 <__NVIC_EnableIRQ+0x34>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff2d 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff42 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff35 	bl	80022d0 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e043      	b.n	8002522 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_DMA_Init+0xa4>)
 80024a2:	4413      	add	r3, r2
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_DMA_Init+0xa8>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_DMA_Init+0xac>)
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	bffd9ff8 	.word	0xbffd9ff8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40026000 	.word	0x40026000

08002538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Start_IT+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e04b      	b.n	80025f0 <HAL_DMA_Start_IT+0xb8>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d13a      	bne.n	80025e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f8e0 	bl	8002756 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 020e 	orr.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 020a 	orr.w	r2, r2, #10
 80025ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f003 031c 	and.w	r3, r3, #28
 8002618:	2204      	movs	r2, #4
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d026      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7a>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d021      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 021c 	and.w	r2, r3, #28
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	2104      	movs	r1, #4
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d071      	beq.n	800274c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002670:	e06c      	b.n	800274c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 031c 	and.w	r3, r3, #28
 800267a:	2202      	movs	r2, #2
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02e      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xec>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d029      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 020a 	bic.w	r2, r2, #10
 80026ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 021c 	and.w	r2, r3, #28
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	2102      	movs	r1, #2
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d038      	beq.n	800274c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026e2:	e033      	b.n	800274c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f003 031c 	and.w	r3, r3, #28
 80026ec:	2208      	movs	r2, #8
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02a      	beq.n	800274e <HAL_DMA_IRQHandler+0x156>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d025      	beq.n	800274e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 020e 	bic.w	r2, r2, #14
 8002710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 021c 	and.w	r2, r3, #28
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800274c:	bf00      	nop
 800274e:	bf00      	nop
}
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f003 021c 	and.w	r2, r3, #28
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b10      	cmp	r3, #16
 8002786:	d108      	bne.n	800279a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002798:	e007      	b.n	80027aa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027ca:	e154      	b.n	8002a76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8146 	beq.w	8002a70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d005      	beq.n	80027fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d130      	bne.n	800285e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002832:	2201      	movs	r2, #1
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0201 	and.w	r2, r3, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b03      	cmp	r3, #3
 8002868:	d017      	beq.n	800289a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d123      	bne.n	80028ee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	08da      	lsrs	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3208      	adds	r2, #8
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80a0 	beq.w	8002a70 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_GPIO_Init+0x2e0>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_GPIO_Init+0x2e0>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_GPIO_Init+0x2e0>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002948:	4a53      	ldr	r2, [pc, #332]	; (8002a98 <HAL_GPIO_Init+0x2e4>)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a4b      	ldr	r2, [pc, #300]	; (8002a9c <HAL_GPIO_Init+0x2e8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d019      	beq.n	80029a8 <HAL_GPIO_Init+0x1f4>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <HAL_GPIO_Init+0x2ec>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_GPIO_Init+0x1f0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <HAL_GPIO_Init+0x2f0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00d      	beq.n	80029a0 <HAL_GPIO_Init+0x1ec>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a48      	ldr	r2, [pc, #288]	; (8002aa8 <HAL_GPIO_Init+0x2f4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0x1e8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a47      	ldr	r2, [pc, #284]	; (8002aac <HAL_GPIO_Init+0x2f8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_GPIO_Init+0x1e4>
 8002994:	2304      	movs	r3, #4
 8002996:	e008      	b.n	80029aa <HAL_GPIO_Init+0x1f6>
 8002998:	2305      	movs	r3, #5
 800299a:	e006      	b.n	80029aa <HAL_GPIO_Init+0x1f6>
 800299c:	2303      	movs	r3, #3
 800299e:	e004      	b.n	80029aa <HAL_GPIO_Init+0x1f6>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e002      	b.n	80029aa <HAL_GPIO_Init+0x1f6>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_GPIO_Init+0x1f6>
 80029a8:	2300      	movs	r3, #0
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	f002 0203 	and.w	r2, r2, #3
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	4093      	lsls	r3, r2
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ba:	4937      	ldr	r1, [pc, #220]	; (8002a98 <HAL_GPIO_Init+0x2e4>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029ec:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a16:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f aea3 	bne.w	80027cc <HAL_GPIO_Init+0x18>
  }
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	b08b      	sub	sp, #44	; 0x2c
 8002ab8:	af06      	add	r7, sp, #24
 8002aba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0d0      	b.n	8002c68 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f007 f876 	bl	8009bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 ff0b 	bl	8005908 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e04c      	b.n	8002b92 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3301      	adds	r3, #1
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	b298      	uxth	r0, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	3336      	adds	r3, #54	; 0x36
 8002b36:	4602      	mov	r2, r0
 8002b38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3338      	adds	r3, #56	; 0x38
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	333c      	adds	r3, #60	; 0x3c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3340      	adds	r3, #64	; 0x40
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3ad      	bcc.n	8002af8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e044      	b.n	8002c2c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3b5      	bcc.n	8002ba2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	687e      	ldr	r6, [r7, #4]
 8002c3e:	466d      	mov	r5, sp
 8002c40:	f106 0410 	add.w	r4, r6, #16
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	1d33      	adds	r3, r6, #4
 8002c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f002 fe73 	bl	800593c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_PCD_Start+0x16>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e016      	b.n	8002cb4 <HAL_PCD_Start+0x44>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fe22 	bl	80058dc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 ff78 	bl	8009b90 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f005 fb07 	bl	80082b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f005 faff 	bl	80082cc <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fade 	bl	800329c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f005 faf1 	bl	80082cc <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d112      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	b292      	uxth	r2, r2
 8002d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f006 ffd7 	bl	8009cc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d14:	2100      	movs	r1, #0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8c7 	bl	8002eaa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 fad3 	bl	80082cc <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d30:	d10b      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f005 fabc 	bl	80082cc <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d72:	b292      	uxth	r2, r2
 8002d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f005 faa5 	bl	80082cc <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d126      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0204 	bic.w	r2, r2, #4
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0208 	bic.w	r2, r2, #8
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f006 ffb8 	bl	8009d34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 fa73 	bl	80082cc <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	d126      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0208 	orr.w	r2, r2, #8
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0204 	orr.w	r2, r2, #4
 8002e34:	b292      	uxth	r2, r2
 8002e36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f006 ff60 	bl	8009d00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f005 fa41 	bl	80082cc <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d10e      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f006 ff19 	bl	8009ca6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 fa27 	bl	80082cc <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d10b      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_PCD_SetAddress+0x1a>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e013      	b.n	8002eec <HAL_PCD_SetAddress+0x42>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 f9d8 	bl	8008292 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	70fb      	strb	r3, [r7, #3]
 8002f06:	460b      	mov	r3, r1
 8002f08:	803b      	strh	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0e      	bge.n	8002f38 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
 8002f36:	e00e      	b.n	8002f56 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 0207 	and.w	r2, r3, #7
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f62:	883a      	ldrh	r2, [r7, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	78ba      	ldrb	r2, [r7, #2]
 8002f6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f80:	78bb      	ldrb	r3, [r7, #2]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d102      	bne.n	8002f8c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_EP_Open+0xa6>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00e      	b.n	8002fb8 <HAL_PCD_EP_Open+0xc4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fce7 	bl	800597c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0e      	bge.n	8002ff2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	e00e      	b.n	8003010 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 0207 	and.w	r2, r3, #7
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_PCD_EP_Close+0x6a>
 8003026:	2302      	movs	r3, #2
 8003028:	e00e      	b.n	8003048 <HAL_PCD_EP_Close+0x88>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f809 	bl	8006050 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	460b      	mov	r3, r1
 800305e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003090:	7afb      	ldrb	r3, [r7, #11]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	b2da      	uxtb	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 f9bb 	bl	8006428 <USB_EPStartXfer>
 80030b2:	e005      	b.n	80030c0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f9b4 	bl	8006428 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	460b      	mov	r3, r1
 80030d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2201      	movs	r2, #1
 8003114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b2da      	uxtb	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 f978 	bl	8006428 <USB_EPStartXfer>
 8003138:	e005      	b.n	8003146 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6979      	ldr	r1, [r7, #20]
 8003140:	4618      	mov	r0, r3
 8003142:	f003 f971 	bl	8006428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 0207 	and.w	r2, r3, #7
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d901      	bls.n	800316e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e03e      	b.n	80031ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da0e      	bge.n	8003194 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
 8003192:	e00c      	b.n	80031ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_PCD_EP_SetStall+0x7e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e00e      	b.n	80031ec <HAL_PCD_EP_SetStall+0x9c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 ff5b 	bl	8008098 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d901      	bls.n	8003212 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e040      	b.n	8003294 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0e      	bge.n	8003238 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	705a      	strb	r2, [r3, #1]
 8003236:	e00e      	b.n	8003256 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_PCD_EP_ClrStall+0x82>
 8003272:	2302      	movs	r3, #2
 8003274:	e00e      	b.n	8003294 <HAL_PCD_EP_ClrStall+0xa0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68f9      	ldr	r1, [r7, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f004 ff57 	bl	8008138 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a4:	e2ec      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 8161 	bne.w	8003588 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d152      	bne.n	8003376 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	81fb      	strh	r3, [r7, #14]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3328      	adds	r3, #40	; 0x28
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	3302      	adds	r3, #2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	441a      	add	r2, r3
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003334:	2100      	movs	r1, #0
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f006 fc9b 	bl	8009c72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 829b 	beq.w	8003880 <PCD_EP_ISR_Handler+0x5e4>
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 8296 	bne.w	8003880 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003360:	b2da      	uxtb	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b292      	uxth	r2, r2
 8003368:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003374:	e284      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338c:	2b00      	cmp	r3, #0
 800338e:	d034      	beq.n	80033fa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	3306      	adds	r3, #6
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f004 ffd0 	bl	8008374 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033e0:	4013      	ands	r3, r2
 80033e2:	823b      	strh	r3, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	8a3a      	ldrh	r2, [r7, #16]
 80033ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033ee:	b292      	uxth	r2, r2
 80033f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f006 fc10 	bl	8009c18 <HAL_PCD_SetupStageCallback>
 80033f8:	e242      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f280 823e 	bge.w	8003880 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29a      	uxth	r2, r3
 800340c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003410:	4013      	ands	r3, r2
 8003412:	83bb      	strh	r3, [r7, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	8bba      	ldrh	r2, [r7, #28]
 800341a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800341e:	b292      	uxth	r2, r2
 8003420:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	3306      	adds	r3, #6
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <PCD_EP_ISR_Handler+0x1ee>
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800346e:	b29b      	uxth	r3, r3
 8003470:	f004 ff80 	bl	8008374 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	441a      	add	r2, r3
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f006 fbd9 	bl	8009c3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 81f2 	bne.w	8003880 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <PCD_EP_ISR_Handler+0x24e>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	e02f      	b.n	800354a <PCD_EP_ISR_Handler+0x2ae>
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b3e      	cmp	r3, #62	; 0x3e
 80034f0:	d813      	bhi.n	800351a <PCD_EP_ISR_Handler+0x27e>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	085b      	lsrs	r3, r3, #1
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <PCD_EP_ISR_Handler+0x270>
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	3301      	adds	r3, #1
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	b29b      	uxth	r3, r3
 8003510:	029b      	lsls	r3, r3, #10
 8003512:	b29a      	uxth	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	801a      	strh	r2, [r3, #0]
 8003518:	e017      	b.n	800354a <PCD_EP_ISR_Handler+0x2ae>
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <PCD_EP_ISR_Handler+0x298>
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	3b01      	subs	r3, #1
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	b29b      	uxth	r3, r3
 8003538:	029b      	lsls	r3, r3, #10
 800353a:	b29b      	uxth	r3, r3
 800353c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	827b      	strh	r3, [r7, #18]
 800355c:	8a7b      	ldrh	r3, [r7, #18]
 800355e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003562:	827b      	strh	r3, [r7, #18]
 8003564:	8a7b      	ldrh	r3, [r7, #18]
 8003566:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800356a:	827b      	strh	r3, [r7, #18]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	8a7b      	ldrh	r3, [r7, #18]
 8003572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]
 8003586:	e17b      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800359a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f280 80ea 	bge.w	8003778 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035ba:	4013      	ands	r3, r2
 80035bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d2:	b292      	uxth	r2, r2
 80035d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	7b1b      	ldrb	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d122      	bne.n	800363a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	3306      	adds	r3, #6
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800361e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8087 	beq.w	8003734 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	6959      	ldr	r1, [r3, #20]
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	88da      	ldrh	r2, [r3, #6]
 8003632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003634:	f004 fe9e 	bl	8008374 <USB_ReadPMA>
 8003638:	e07c      	b.n	8003734 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d108      	bne.n	8003654 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003644:	461a      	mov	r2, r3
 8003646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f927 	bl	800389c <HAL_PCD_EP_DB_Receive>
 800364e:	4603      	mov	r3, r0
 8003650:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003652:	e06f      	b.n	8003734 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d021      	beq.n	80036f2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	3302      	adds	r3, #2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02a      	beq.n	8003734 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	6959      	ldr	r1, [r3, #20]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	891a      	ldrh	r2, [r3, #8]
 80036ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ec:	f004 fe42 	bl	8008374 <USB_ReadPMA>
 80036f0:	e020      	b.n	8003734 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	3306      	adds	r3, #6
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800371c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6959      	ldr	r1, [r3, #20]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	895a      	ldrh	r2, [r3, #10]
 800372e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003730:	f004 fe20 	bl	8008374 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800373a:	441a      	add	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003746:	441a      	add	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <PCD_EP_ISR_Handler+0x4c2>
 8003754:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	d206      	bcs.n	800376c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f006 fa69 	bl	8009c3c <HAL_PCD_DataOutStageCallback>
 800376a:	e005      	b.n	8003778 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fe58 	bl	8006428 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003778:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d07e      	beq.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003782:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	843b      	strh	r3, [r7, #32]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	441a      	add	r2, r3
 80037c0:	8c3b      	ldrh	r3, [r7, #32]
 80037c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	78db      	ldrb	r3, [r3, #3]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d00c      	beq.n	80037f0 <PCD_EP_ISR_Handler+0x554>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d146      	bne.n	8003874 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d141      	bne.n	8003874 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	3302      	adds	r3, #2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003818:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	8bfb      	ldrh	r3, [r7, #30]
 8003820:	429a      	cmp	r2, r3
 8003822:	d906      	bls.n	8003832 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	8bfb      	ldrh	r3, [r7, #30]
 800382a:	1ad2      	subs	r2, r2, r3
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	619a      	str	r2, [r3, #24]
 8003830:	e002      	b.n	8003838 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f006 fa13 	bl	8009c72 <HAL_PCD_DataInStageCallback>
 800384c:	e018      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	8bfb      	ldrh	r3, [r7, #30]
 8003854:	441a      	add	r2, r3
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	8bfb      	ldrh	r3, [r7, #30]
 8003860:	441a      	add	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386c:	4618      	mov	r0, r3
 800386e:	f002 fddb 	bl	8006428 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003872:	e005      	b.n	8003880 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003874:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003876:	461a      	mov	r2, r3
 8003878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f91b 	bl	8003ab6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003888:	b29b      	uxth	r3, r3
 800388a:	b21b      	sxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	f6ff ad0a 	blt.w	80032a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3738      	adds	r7, #56	; 0x38
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d07e      	beq.n	80039b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	3302      	adds	r3, #2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d306      	bcc.n	80038f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	8b7b      	ldrh	r3, [r7, #26]
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	619a      	str	r2, [r3, #24]
 80038f4:	e002      	b.n	80038fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d123      	bne.n	800394c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	833b      	strh	r3, [r7, #24]
 8003920:	8b3b      	ldrh	r3, [r7, #24]
 8003922:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003926:	833b      	strh	r3, [r7, #24]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	8b3b      	ldrh	r3, [r7, #24]
 8003938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	b29b      	uxth	r3, r3
 800394a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01f      	beq.n	8003996 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	82fb      	strh	r3, [r7, #22]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	8afb      	ldrh	r3, [r7, #22]
 8003982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8087 	beq.w	8003aac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6959      	ldr	r1, [r3, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	891a      	ldrh	r2, [r3, #8]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	f004 fce2 	bl	8008374 <USB_ReadPMA>
 80039b0:	e07c      	b.n	8003aac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	3306      	adds	r3, #6
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	8b7b      	ldrh	r3, [r7, #26]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d306      	bcc.n	80039f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	1ad2      	subs	r2, r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	619a      	str	r2, [r3, #24]
 80039f2:	e002      	b.n	80039fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d123      	bne.n	8003a4a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	83fb      	strh	r3, [r7, #30]
 8003a1e:	8bfb      	ldrh	r3, [r7, #30]
 8003a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a24:	83fb      	strh	r3, [r7, #30]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	8bfb      	ldrh	r3, [r7, #30]
 8003a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11f      	bne.n	8003a94 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	83bb      	strh	r3, [r7, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	8bbb      	ldrh	r3, [r7, #28]
 8003a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a94:	8b7b      	ldrh	r3, [r7, #26]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6959      	ldr	r1, [r3, #20]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	895a      	ldrh	r2, [r3, #10]
 8003aa6:	8b7b      	ldrh	r3, [r7, #26]
 8003aa8:	f004 fc64 	bl	8008374 <USB_ReadPMA>
    }
  }

  return count;
 8003aac:	8b7b      	ldrh	r3, [r7, #26]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b0a2      	sub	sp, #136	; 0x88
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 81c7 	beq.w	8003e5e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d907      	bls.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b10:	1ad2      	subs	r2, r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	619a      	str	r2, [r3, #24]
 8003b16:	e002      	b.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 80b9 	bne.w	8003c9a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d126      	bne.n	8003b7e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	4413      	add	r3, r2
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	011a      	lsls	r2, r3, #4
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e01a      	b.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d116      	bne.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	4413      	add	r3, r2
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	011a      	lsls	r2, r3, #4
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d126      	bne.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011a      	lsls	r2, r3, #4
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e017      	b.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d113      	bne.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	4413      	add	r3, r2
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f006 f813 	bl	8009c72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 82d4 	beq.w	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	827b      	strh	r3, [r7, #18]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	8a7b      	ldrh	r3, [r7, #18]
 8003c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8013      	strh	r3, [r2, #0]
 8003c98:	e2b2      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d021      	beq.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	f040 8286 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6a1a      	ldr	r2, [r3, #32]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d309      	bcc.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	1ad2      	subs	r2, r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	621a      	str	r2, [r3, #32]
 8003d2e:	e015      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d46:	e009      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d155      	bne.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	4413      	add	r3, r2
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	011a      	lsls	r2, r3, #4
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	4413      	add	r3, r2
 8003d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d112      	bne.n	8003db8 <HAL_PCD_EP_DB_Transmit+0x302>
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e047      	b.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x392>
 8003db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dba:	2b3e      	cmp	r3, #62	; 0x3e
 8003dbc:	d811      	bhi.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	801a      	strh	r2, [r3, #0]
 8003de0:	e032      	b.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x392>
 8003de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x342>
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	3b01      	subs	r3, #1
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	029b      	lsls	r3, r3, #10
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e01b      	b.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d117      	bne.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	4413      	add	r3, r2
 8003e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	011a      	lsls	r2, r3, #4
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	4413      	add	r3, r2
 8003e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e46:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6959      	ldr	r1, [r3, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	891a      	ldrh	r2, [r3, #8]
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f004 fa47 	bl	80082ea <USB_WritePMA>
 8003e5c:	e1d0      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	3306      	adds	r3, #6
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d307      	bcc.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	619a      	str	r2, [r3, #24]
 8003ea4:	e002      	b.n	8003eac <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f040 80c4 	bne.w	800403e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d126      	bne.n	8003f0c <HAL_PCD_EP_DB_Transmit+0x456>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	4413      	add	r3, r2
 8003ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	4413      	add	r3, r2
 8003ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e01a      	b.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d116      	bne.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	677b      	str	r3, [r7, #116]	; 0x74
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f28:	4413      	add	r3, r2
 8003f2a:	677b      	str	r3, [r7, #116]	; 0x74
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	011a      	lsls	r2, r3, #4
 8003f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d12f      	bne.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f68:	4413      	add	r3, r2
 8003f6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	011a      	lsls	r2, r3, #4
 8003f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f78:	4413      	add	r3, r2
 8003f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e017      	b.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d113      	bne.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc6:	4413      	add	r3, r2
 8003fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f005 fe43 	bl	8009c72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f040 8104 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	b29b      	uxth	r3, r3
 800403a:	8013      	strh	r3, [r2, #0]
 800403c:	e0e0      	b.n	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d121      	bne.n	800408c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 80b4 	bne.w	8004200 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040a0:	441a      	add	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ae:	441a      	add	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d309      	bcc.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	621a      	str	r2, [r3, #32]
 80040d2:	e015      	b.n	8004100 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80040dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040ea:	e009      	b.n	8004100 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2200      	movs	r2, #0
 80040f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	667b      	str	r3, [r7, #100]	; 0x64
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d155      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0x704>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004122:	4413      	add	r3, r2
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412e:	4413      	add	r3, r2
 8004130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004134:	65bb      	str	r3, [r7, #88]	; 0x58
 8004136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004138:	2b00      	cmp	r3, #0
 800413a:	d112      	bne.n	8004162 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800413c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004146:	b29a      	uxth	r2, r3
 8004148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415a:	b29a      	uxth	r2, r3
 800415c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	e044      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x736>
 8004162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004164:	2b3e      	cmp	r3, #62	; 0x3e
 8004166:	d811      	bhi.n	800418c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	657b      	str	r3, [r7, #84]	; 0x54
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417a:	3301      	adds	r3, #1
 800417c:	657b      	str	r3, [r7, #84]	; 0x54
 800417e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004180:	b29b      	uxth	r3, r3
 8004182:	029b      	lsls	r3, r3, #10
 8004184:	b29a      	uxth	r2, r3
 8004186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	e02f      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x736>
 800418c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
 8004192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	3b01      	subs	r3, #1
 80041a0:	657b      	str	r3, [r7, #84]	; 0x54
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	029b      	lsls	r3, r3, #10
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	e018      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x736>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d114      	bne.n	80041ec <HAL_PCD_EP_DB_Transmit+0x736>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d0:	4413      	add	r3, r2
 80041d2:	667b      	str	r3, [r7, #100]	; 0x64
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	011a      	lsls	r2, r3, #4
 80041da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041dc:	4413      	add	r3, r2
 80041de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041e2:	663b      	str	r3, [r7, #96]	; 0x60
 80041e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6959      	ldr	r1, [r3, #20]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	895a      	ldrh	r2, [r3, #10]
 80041f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f004 f875 	bl	80082ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	823b      	strh	r3, [r7, #16]
 800421c:	8a3b      	ldrh	r3, [r7, #16]
 800421e:	f083 0310 	eor.w	r3, r3, #16
 8004222:	823b      	strh	r3, [r7, #16]
 8004224:	8a3b      	ldrh	r3, [r7, #16]
 8004226:	f083 0320 	eor.w	r3, r3, #32
 800422a:	823b      	strh	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	8a3b      	ldrh	r3, [r7, #16]
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3788      	adds	r7, #136	; 0x88
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800426c:	897b      	ldrh	r3, [r7, #10]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e009      	b.n	80042a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004290:	897a      	ldrh	r2, [r7, #10]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	80da      	strh	r2, [r3, #6]
 80042b8:	e00b      	b.n	80042d2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2201      	movs	r2, #1
 80042be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e31d      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f2:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fc:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d07b      	beq.n	800440a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d006      	beq.n	8004326 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d10f      	bne.n	800433e <HAL_RCC_OscConfig+0x5e>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d10b      	bne.n	800433e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d06a      	beq.n	8004408 <HAL_RCC_OscConfig+0x128>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d166      	bne.n	8004408 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e2f7      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x74>
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7e      	ldr	r2, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e02d      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10c      	bne.n	8004376 <HAL_RCC_OscConfig+0x96>
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e01c      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b05      	cmp	r3, #5
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0xb8>
 800437e:	4b71      	ldr	r3, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a70      	ldr	r2, [pc, #448]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xd0>
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a66      	ldr	r2, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd fa2c 	bl	8001814 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fd fa28 	bl	8001814 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e2ad      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe0>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fa18 	bl	8001814 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd fa14 	bl	8001814 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e299      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043fa:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x108>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d05a      	beq.n	80044cc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d119      	bne.n	8004456 <HAL_RCC_OscConfig+0x176>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d116      	bne.n	8004456 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x160>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e276      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b40      	ldr	r3, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	493d      	ldr	r1, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004454:	e03a      	b.n	80044cc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445e:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_RCC_OscConfig+0x268>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fd f9d6 	bl	8001814 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800446c:	f7fd f9d2 	bl	8001814 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e257      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	492a      	ldr	r1, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_RCC_OscConfig+0x268>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd f9b5 	bl	8001814 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fd f9b1 	bl	8001814 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e236      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80b8 	beq.w	800464a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d170      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_OscConfig+0x218>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e21a      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004504:	429a      	cmp	r2, r3
 8004506:	d921      	bls.n	800454c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fc4b 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e208      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	4901      	ldr	r1, [pc, #4]	; (8004544 <HAL_RCC_OscConfig+0x264>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e020      	b.n	8004586 <HAL_RCC_OscConfig+0x2a6>
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454c:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4996      	ldr	r1, [pc, #600]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455e:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	4991      	ldr	r1, [pc, #580]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc16 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1d3      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	3301      	adds	r3, #1
 800458e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004596:	4a87      	ldr	r2, [pc, #540]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004598:	6892      	ldr	r2, [r2, #8]
 800459a:	0912      	lsrs	r2, r2, #4
 800459c:	f002 020f 	and.w	r2, r2, #15
 80045a0:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	5c8a      	ldrb	r2, [r1, r2]
 80045a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045a6:	4a85      	ldr	r2, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4dc>)
 80045a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x4e0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd f8e4 	bl	800177c <HAL_InitTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d045      	beq.n	800464a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	e1b5      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d029      	beq.n	800461e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045ca:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd f920 	bl	8001814 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d8:	f7fd f91c 	bl	8001814 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1a1      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f6:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	496c      	ldr	r1, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4967      	ldr	r1, [pc, #412]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800461e:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x4e4>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fd f8f6 	bl	8001814 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800462c:	f7fd f8f2 	bl	8001814 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e177      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800463e:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d030      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fd f8d6 	bl	8001814 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fd f8d2 	bl	8001814 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e157      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800467e:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x38c>
 800468a:	e015      	b.n	80046b8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fd f8bf 	bl	8001814 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fd f8bb 	bl	8001814 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e140      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ac:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80b5 	beq.w	8004830 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b3a      	ldr	r3, [pc, #232]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	4a36      	ldr	r2, [pc, #216]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6253      	str	r3, [r2, #36]	; 0x24
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fd f883 	bl	8001814 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fd f87f 	bl	8001814 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	; 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e104      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x466>
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6353      	str	r3, [r2, #52]	; 0x34
 8004744:	e02d      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x488>
 800474e:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	6353      	str	r3, [r2, #52]	; 0x34
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004764:	6353      	str	r3, [r2, #52]	; 0x34
 8004766:	e01c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b05      	cmp	r3, #5
 800476e:	d10c      	bne.n	800478a <HAL_RCC_OscConfig+0x4aa>
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800477a:	6353      	str	r3, [r2, #52]	; 0x34
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004786:	6353      	str	r3, [r2, #52]	; 0x34
 8004788:	e00b      	b.n	80047a2 <HAL_RCC_OscConfig+0x4c2>
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004794:	6353      	str	r3, [r2, #52]	; 0x34
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <HAL_RCC_OscConfig+0x4d4>)
 800479c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d024      	beq.n	80047f4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fd f833 	bl	8001814 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047b0:	e019      	b.n	80047e6 <HAL_RCC_OscConfig+0x506>
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	0800a1cc 	.word	0x0800a1cc
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004
 80047c4:	42470020 	.word	0x42470020
 80047c8:	42470680 	.word	0x42470680
 80047cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd f820 	bl	8001814 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0a3      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e6:	4b54      	ldr	r3, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <HAL_RCC_OscConfig+0x4f0>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f4:	f7fd f80e 	bl	8001814 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd f80a 	bl	8001814 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e08d      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481e:	7ffb      	ldrb	r3, [r7, #31]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b44      	ldr	r3, [pc, #272]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4a43      	ldr	r2, [pc, #268]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800482e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d079      	beq.n	800492c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d056      	beq.n	80048ec <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b02      	cmp	r3, #2
 8004844:	d13b      	bne.n	80048be <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fc ffe2 	bl	8001814 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc ffde 	bl	8001814 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e063      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4319      	orrs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	430b      	orrs	r3, r1
 800488a:	492b      	ldr	r1, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fc ffbd 	bl	8001814 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489e:	f7fc ffb9 	bl	8001814 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e03e      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x5be>
 80048bc:	e036      	b.n	800492c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b1f      	ldr	r3, [pc, #124]	; (800493c <HAL_RCC_OscConfig+0x65c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc ffa6 	bl	8001814 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fc ffa2 	bl	8001814 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e027      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x5ec>
 80048ea:	e01f      	b.n	800492c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e01a      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_RCC_OscConfig+0x658>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	429a      	cmp	r2, r3
 800490a:	d10d      	bne.n	8004928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	42470060 	.word	0x42470060

08004940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e11a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b8f      	ldr	r3, [pc, #572]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d919      	bls.n	8004996 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCC_ClockConfig+0x34>
 8004968:	4b8a      	ldr	r3, [pc, #552]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a89      	ldr	r2, [pc, #548]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800496e:	f043 0304 	orr.w	r3, r3, #4
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b87      	ldr	r3, [pc, #540]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 0201 	bic.w	r2, r3, #1
 800497c:	4985      	ldr	r1, [pc, #532]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004984:	4b83      	ldr	r3, [pc, #524]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0f9      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a2:	4b7d      	ldr	r3, [pc, #500]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	497a      	ldr	r1, [pc, #488]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 808e 	beq.w	8004ade <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ca:	4b73      	ldr	r3, [pc, #460]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d121      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0d7      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049e2:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0cb      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0bf      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0b7      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	495c      	ldr	r1, [pc, #368]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fc fef2 	bl	8001814 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d112      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fc feea 	bl	8001814 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e09b      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xfc>
 8004a5e:	e03e      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d112      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fc fed3 	bl	8001814 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e084      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a80:	4b45      	ldr	r3, [pc, #276]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x12a>
 8004a8c:	e027      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d11d      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fc febc 	bl	8001814 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e06d      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d1ee      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x158>
 8004aba:	e010      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fc feaa 	bl	8001814 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e05b      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ad2:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ee      	bne.n	8004abc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d219      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1be>
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0201 	bic.w	r2, r3, #1
 8004b06:	4923      	ldr	r1, [pc, #140]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCC_ClockConfig+0x254>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e034      	b.n	8004b8a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4917      	ldr	r1, [pc, #92]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490f      	ldr	r1, [pc, #60]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f823 	bl	8004ba8 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <HAL_RCC_ClockConfig+0x258>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490b      	ldr	r1, [pc, #44]	; (8004b9c <HAL_RCC_ClockConfig+0x25c>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_ClockConfig+0x264>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fc fdfc 	bl	800177c <HAL_InitTick>
 8004b84:	4603      	mov	r3, r0
 8004b86:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b88:	7afb      	ldrb	r3, [r7, #11]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023c00 	.word	0x40023c00
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	0800a1cc 	.word	0x0800a1cc
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	20000004 	.word	0x20000004

08004ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b092      	sub	sp, #72	; 0x48
 8004bae:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bb0:	4b79      	ldr	r3, [pc, #484]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x34>
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	f200 80d5 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d002      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x28>
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x2e>
 8004bce:	e0cf      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b72      	ldr	r3, [pc, #456]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004bd2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bd4:	e0da      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004bda:	e0d7      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	0c9b      	lsrs	r3, r3, #18
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	4b6f      	ldr	r3, [pc, #444]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bec:	0d9b      	lsrs	r3, r3, #22
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf6:	4b68      	ldr	r3, [pc, #416]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d05d      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	2200      	movs	r2, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	4622      	mov	r2, r4
 8004c10:	462b      	mov	r3, r5
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c20:	0150      	lsls	r0, r2, #5
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4621      	mov	r1, r4
 8004c28:	1a51      	subs	r1, r2, r1
 8004c2a:	6139      	str	r1, [r7, #16]
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c40:	4659      	mov	r1, fp
 8004c42:	018b      	lsls	r3, r1, #6
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	018a      	lsls	r2, r1, #6
 8004c4e:	46d4      	mov	ip, sl
 8004c50:	ebb2 080c 	subs.w	r8, r2, ip
 8004c54:	4659      	mov	r1, fp
 8004c56:	eb63 0901 	sbc.w	r9, r3, r1
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6e:	4690      	mov	r8, r2
 8004c70:	4699      	mov	r9, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	eb18 0303 	adds.w	r3, r8, r3
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	eb49 0303 	adc.w	r3, r9, r3
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	024b      	lsls	r3, r1, #9
 8004c92:	4620      	mov	r0, r4
 8004c94:	4629      	mov	r1, r5
 8004c96:	4604      	mov	r4, r0
 8004c98:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	024a      	lsls	r2, r1, #9
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb0:	f7fb fd7e 	bl	80007b0 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
 8004cbc:	e055      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cca:	4642      	mov	r2, r8
 8004ccc:	464b      	mov	r3, r9
 8004cce:	f04f 0000 	mov.w	r0, #0
 8004cd2:	f04f 0100 	mov.w	r1, #0
 8004cd6:	0159      	lsls	r1, r3, #5
 8004cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cdc:	0150      	lsls	r0, r2, #5
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	46c4      	mov	ip, r8
 8004ce4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	468c      	mov	ip, r1
 8004cee:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cfe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d02:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d06:	ebb2 040a 	subs.w	r4, r2, sl
 8004d0a:	eb63 050b 	sbc.w	r5, r3, fp
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	00eb      	lsls	r3, r5, #3
 8004d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1c:	00e2      	lsls	r2, r4, #3
 8004d1e:	4614      	mov	r4, r2
 8004d20:	461d      	mov	r5, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	18e3      	adds	r3, r4, r3
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	eb45 0303 	adc.w	r3, r5, r3
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	028b      	lsls	r3, r1, #10
 8004d40:	4620      	mov	r0, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	4604      	mov	r4, r0
 8004d46:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	028a      	lsls	r2, r1, #10
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	2200      	movs	r2, #0
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	61fa      	str	r2, [r7, #28]
 8004d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5e:	f7fb fd27 	bl	80007b0 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4613      	mov	r3, r2
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d6e:	e00d      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0b5b      	lsrs	r3, r3, #13
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3748      	adds	r7, #72	; 0x48
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200
 8004da4:	0800a1c0 	.word	0x0800a1c0

08004da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004db4:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d12c      	bne.n	8004e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dc0:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e016      	b.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6253      	str	r3, [r2, #36]	; 0x24
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004df8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004e0c:	d105      	bne.n	8004e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e14:	d101      	bne.n	8004e1a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004e16:	2301      	movs	r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004e20:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0f      	ldr	r2, [pc, #60]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 0201 	bic.w	r2, r3, #1
 8004e34:	490b      	ldr	r1, [pc, #44]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d001      	beq.n	8004e4e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	40023c00 	.word	0x40023c00

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e031      	b.n	8004ede <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fa0e 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 facc 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_Base_Start+0x48>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <HAL_TIM_Base_Start+0x88>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_Base_Start+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <HAL_TIM_Base_Start+0x8c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_Base_Start+0x48>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <HAL_TIM_Base_Start+0x90>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d010      	beq.n	8004f64 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	e007      	b.n	8004f64 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40010800 	.word	0x40010800

08004f7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e031      	b.n	8004ff2 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f829 	bl	8004ffa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 fa42 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0202 	mvn.w	r2, #2
 8005038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9dd 	bl	800540e <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fb fff2 	bl	8001040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9df 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b04      	cmp	r3, #4
 8005074:	d122      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d11b      	bne.n	80050bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0204 	mvn.w	r2, #4
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9b3 	bl	800540e <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fb ffc8 	bl	8001040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9b5 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d122      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d11b      	bne.n	8005110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0208 	mvn.w	r2, #8
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f989 	bl	800540e <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fb ff9e 	bl	8001040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f98b 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b10      	cmp	r3, #16
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f95f 	bl	800540e <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb ff74 	bl	8001040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f961 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f936 	bl	80053fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f93b 	bl	8005432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_TIM_OC_ConfigChannel+0x1a>
 80051da:	2302      	movs	r3, #2
 80051dc:	e046      	b.n	800526c <HAL_TIM_OC_ConfigChannel+0xa8>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d839      	bhi.n	8005260 <HAL_TIM_OC_ConfigChannel+0x9c>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005261 	.word	0x08005261
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	08005237 	.word	0x08005237
 8005208:	08005261 	.word	0x08005261
 800520c:	08005261 	.word	0x08005261
 8005210:	08005261 	.word	0x08005261
 8005214:	08005245 	.word	0x08005245
 8005218:	08005261 	.word	0x08005261
 800521c:	08005261 	.word	0x08005261
 8005220:	08005261 	.word	0x08005261
 8005224:	08005253 	.word	0x08005253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f96a 	bl	8005508 <TIM_OC1_SetConfig>
      break;
 8005234:	e015      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f99f 	bl	8005580 <TIM_OC2_SetConfig>
      break;
 8005242:	e00e      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f9d6 	bl	80055fc <TIM_OC3_SetConfig>
      break;
 8005250:	e007      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fa0c 	bl	8005676 <TIM_OC4_SetConfig>
      break;
 800525e:	e000      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIM_ConfigClockSource+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e0b3      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x180>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c4:	d03e      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0xd0>
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	f200 8087 	bhi.w	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	f000 8085 	beq.w	80053e0 <HAL_TIM_ConfigClockSource+0x16c>
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d87f      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052dc:	2b70      	cmp	r3, #112	; 0x70
 80052de:	d01a      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xa2>
 80052e0:	2b70      	cmp	r3, #112	; 0x70
 80052e2:	d87b      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d050      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x116>
 80052e8:	2b60      	cmp	r3, #96	; 0x60
 80052ea:	d877      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	d03c      	beq.n	800536a <HAL_TIM_ConfigClockSource+0xf6>
 80052f0:	2b50      	cmp	r3, #80	; 0x50
 80052f2:	d873      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d058      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x136>
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d86f      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d064      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	d86b      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d060      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d867      	bhi.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05c      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d05a      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005314:	e062      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f000 fa5b 	bl	80057e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005338:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	609a      	str	r2, [r3, #8]
      break;
 8005342:	e04e      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f000 fa44 	bl	80057e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005366:	609a      	str	r2, [r3, #8]
      break;
 8005368:	e03b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	f000 f9bb 	bl	80056f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2150      	movs	r1, #80	; 0x50
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa12 	bl	80057ac <TIM_ITRx_SetConfig>
      break;
 8005388:	e02b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 f9d9 	bl	800574e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2160      	movs	r1, #96	; 0x60
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa02 	bl	80057ac <TIM_ITRx_SetConfig>
      break;
 80053a8:	e01b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 f99b 	bl	80056f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f9f2 	bl	80057ac <TIM_ITRx_SetConfig>
      break;
 80053c8:	e00b      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f000 f9e9 	bl	80057ac <TIM_ITRx_SetConfig>
        break;
 80053da:	e002      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0x28>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <TIM_Base_SetConfig+0xb0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0x28>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <TIM_Base_SetConfig+0xb4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d108      	bne.n	800547e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d013      	beq.n	80054ae <TIM_Base_SetConfig+0x6a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <TIM_Base_SetConfig+0xb0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00f      	beq.n	80054ae <TIM_Base_SetConfig+0x6a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <TIM_Base_SetConfig+0xb4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_Base_SetConfig+0x6a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a18      	ldr	r2, [pc, #96]	; (80054fc <TIM_Base_SetConfig+0xb8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <TIM_Base_SetConfig+0x6a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a17      	ldr	r2, [pc, #92]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_Base_SetConfig+0x6a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a16      	ldr	r2, [pc, #88]	; (8005504 <TIM_Base_SetConfig+0xc0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d108      	bne.n	80054c0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	615a      	str	r2, [r3, #20]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40010800 	.word	0x40010800
 8005500:	40010c00 	.word	0x40010c00
 8005504:	40011000 	.word	0x40011000

08005508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0320 	bic.w	r3, r3, #32
 80055ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	031b      	lsls	r3, r3, #12
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 030a 	bic.w	r3, r3, #10
 800572e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	031b      	lsls	r3, r3, #12
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f043 0307 	orr.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	609a      	str	r2, [r3, #8]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr
	...

08005820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005834:	2302      	movs	r3, #2
 8005836:	e046      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40010800 	.word	0x40010800

080058dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005910:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	b29b      	uxth	r3, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	4013      	ands	r3, r2
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800593c:	b084      	sub	sp, #16
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f107 0014 	add.w	r0, r7, #20
 800594a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	b004      	add	sp, #16
 800597a:	4770      	bx	lr

0800597c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800597c:	b480      	push	{r7}
 800597e:	b09b      	sub	sp, #108	; 0x6c
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	78db      	ldrb	r3, [r3, #3]
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d81f      	bhi.n	80059ee <USB_ActivateEndpoint+0x72>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <USB_ActivateEndpoint+0x38>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059f7 	.word	0x080059f7
 80059c0:	080059d3 	.word	0x080059d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059d0:	e012      	b.n	80059f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059de:	e00b      	b.n	80059f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059ec:	e004      	b.n	80059f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80059f4:	e000      	b.n	80059f8 <USB_ActivateEndpoint+0x7c>
      break;
 80059f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	7b1b      	ldrb	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 8149 	bne.w	8005cfc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8084 	beq.w	8005b7c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	88db      	ldrh	r3, [r3, #6]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	81fb      	strh	r3, [r7, #14]
 8005ab6:	89fb      	ldrh	r3, [r7, #14]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <USB_ActivateEndpoint+0x17c>
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	81bb      	strh	r3, [r7, #12]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	89bb      	ldrh	r3, [r7, #12]
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d020      	beq.n	8005b42 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b16:	813b      	strh	r3, [r7, #8]
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	f083 0320 	eor.w	r3, r3, #32
 8005b1e:	813b      	strh	r3, [r7, #8]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	893b      	ldrh	r3, [r7, #8]
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]
 8005b40:	e27f      	b.n	8006042 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b58:	817b      	strh	r3, [r7, #10]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	897b      	ldrh	r3, [r7, #10]
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
 8005b7a:	e262      	b.n	8006042 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	4413      	add	r3, r2
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	011a      	lsls	r2, r3, #4
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	4413      	add	r3, r2
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d112      	bne.n	8005c02 <USB_ActivateEndpoint+0x286>
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e02f      	b.n	8005c62 <USB_ActivateEndpoint+0x2e6>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b3e      	cmp	r3, #62	; 0x3e
 8005c08:	d813      	bhi.n	8005c32 <USB_ActivateEndpoint+0x2b6>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	663b      	str	r3, [r7, #96]	; 0x60
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <USB_ActivateEndpoint+0x2a8>
 8005c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c20:	3301      	adds	r3, #1
 8005c22:	663b      	str	r3, [r7, #96]	; 0x60
 8005c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	e017      	b.n	8005c62 <USB_ActivateEndpoint+0x2e6>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <USB_ActivateEndpoint+0x2d0>
 8005c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	83fb      	strh	r3, [r7, #30]
 8005c70:	8bfb      	ldrh	r3, [r7, #30]
 8005c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01b      	beq.n	8005cb2 <USB_ActivateEndpoint+0x336>
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	83bb      	strh	r3, [r7, #28]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8bbb      	ldrh	r3, [r7, #28]
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	837b      	strh	r3, [r7, #26]
 8005cca:	8b7b      	ldrh	r3, [r7, #26]
 8005ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cd0:	837b      	strh	r3, [r7, #26]
 8005cd2:	8b7b      	ldrh	r3, [r7, #26]
 8005cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd8:	837b      	strh	r3, [r7, #26]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	441a      	add	r2, r3
 8005ce4:	8b7b      	ldrh	r3, [r7, #26]
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
 8005cfa:	e1a2      	b.n	8006042 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d48:	4413      	add	r3, r2
 8005d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	891b      	ldrh	r3, [r3, #8]
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	4413      	add	r3, r2
 8005d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	011a      	lsls	r2, r3, #4
 8005d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	895b      	ldrh	r3, [r3, #10]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8091 	bne.w	8005ecc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005db8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01b      	beq.n	8005dfa <USB_ActivateEndpoint+0x47e>
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01b      	beq.n	8005e4a <USB_ActivateEndpoint+0x4ce>
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	441a      	add	r2, r3
 8005e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
 8005eca:	e0ba      	b.n	8006042 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005edc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01d      	beq.n	8005f24 <USB_ActivateEndpoint+0x5a8>
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01d      	beq.n	8005f7c <USB_ActivateEndpoint+0x600>
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d024      	beq.n	8005fce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fa2:	f083 0320 	eor.w	r3, r3, #32
 8005fa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]
 8005fcc:	e01d      	b.n	800600a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006046:	4618      	mov	r0, r3
 8006048:	376c      	adds	r7, #108	; 0x6c
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006050:	b480      	push	{r7}
 8006052:	b08d      	sub	sp, #52	; 0x34
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	7b1b      	ldrb	r3, [r3, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 808e 	bne.w	8006180 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d044      	beq.n	80060f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	81bb      	strh	r3, [r7, #12]
 800607a:	89bb      	ldrh	r3, [r7, #12]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <USB_DeactivateEndpoint+0x6c>
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	817b      	strh	r3, [r7, #10]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	441a      	add	r2, r3
 80060a6:	897b      	ldrh	r3, [r7, #10]
 80060a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d2:	813b      	strh	r3, [r7, #8]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	893b      	ldrh	r3, [r7, #8]
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
 80060f4:	e192      	b.n	800641c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	827b      	strh	r3, [r7, #18]
 8006104:	8a7b      	ldrh	r3, [r7, #18]
 8006106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01b      	beq.n	8006146 <USB_DeactivateEndpoint+0xf6>
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	823b      	strh	r3, [r7, #16]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8a3b      	ldrh	r3, [r7, #16]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	81fb      	strh	r3, [r7, #14]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	89fb      	ldrh	r3, [r7, #14]
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]
 800617e:	e14d      	b.n	800641c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 80a5 	bne.w	80062d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	843b      	strh	r3, [r7, #32]
 8006198:	8c3b      	ldrh	r3, [r7, #32]
 800619a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01b      	beq.n	80061da <USB_DeactivateEndpoint+0x18a>
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	83fb      	strh	r3, [r7, #30]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	441a      	add	r2, r3
 80061c4:	8bfb      	ldrh	r3, [r7, #30]
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	83bb      	strh	r3, [r7, #28]
 80061e8:	8bbb      	ldrh	r3, [r7, #28]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <USB_DeactivateEndpoint+0x1da>
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	837b      	strh	r3, [r7, #26]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8b7b      	ldrh	r3, [r7, #26]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006240:	833b      	strh	r3, [r7, #24]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	8b3b      	ldrh	r3, [r7, #24]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	82fb      	strh	r3, [r7, #22]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	8afb      	ldrh	r3, [r7, #22]
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b0:	82bb      	strh	r3, [r7, #20]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	8abb      	ldrh	r3, [r7, #20]
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]
 80062d2:	e0a3      	b.n	800641c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01b      	beq.n	8006324 <USB_DeactivateEndpoint+0x2d4>
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006320:	b29b      	uxth	r3, r3
 8006322:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006332:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <USB_DeactivateEndpoint+0x324>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	853b      	strh	r3, [r7, #40]	; 0x28
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	441a      	add	r2, r3
 8006396:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3734      	adds	r7, #52	; 0x34
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b0cc      	sub	sp, #304	; 0x130
 800642c:	af00      	add	r7, sp, #0
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006436:	6018      	str	r0, [r3, #0]
 8006438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006440:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b01      	cmp	r3, #1
 8006450:	f041 817d 	bne.w	800774e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d908      	bls.n	8006482 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006480:	e007      	b.n	8006492 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	7b1b      	ldrb	r3, [r3, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d152      	bne.n	8006548 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6959      	ldr	r1, [r3, #20]
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	88da      	ldrh	r2, [r3, #6]
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064c8:	6800      	ldr	r0, [r0, #0]
 80064ca:	f001 ff0e 	bl	80082ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064da:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80064fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006500:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	440a      	add	r2, r1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	011a      	lsls	r2, r3, #4
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4413      	add	r3, r2
 8006524:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	b29a      	uxth	r2, r3
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	f001 b8b5 	b.w	80076b2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	78db      	ldrb	r3, [r3, #3]
 8006554:	2b02      	cmp	r3, #2
 8006556:	f040 84c6 	bne.w	8006ee6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	f240 8443 	bls.w	8006dfe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a1a      	ldr	r2, [r3, #32]
 80065e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e4:	1ad2      	subs	r2, r2, r3
 80065e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 823e 	beq.w	8006a96 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800661a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006622:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006626:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 809a 	bne.w	8006774 <USB_EPStartXfer+0x34c>
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006648:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800664c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	4619      	mov	r1, r3
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006672:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	440a      	add	r2, r1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	011a      	lsls	r2, r3, #4
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4413      	add	r3, r2
 8006696:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d122      	bne.n	80066f2 <USB_EPStartXfer+0x2ca>
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e079      	b.n	80067e6 <USB_EPStartXfer+0x3be>
 80066f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f6:	2b3e      	cmp	r3, #62	; 0x3e
 80066f8:	d81b      	bhi.n	8006732 <USB_EPStartXfer+0x30a>
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <USB_EPStartXfer+0x2f2>
 8006710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006714:	3301      	adds	r3, #1
 8006716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800671a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800671e:	b29b      	uxth	r3, r3
 8006720:	029b      	lsls	r3, r3, #10
 8006722:	b29a      	uxth	r2, r3
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e059      	b.n	80067e6 <USB_EPStartXfer+0x3be>
 8006732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800673c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <USB_EPStartXfer+0x32a>
 8006748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674c:	3b01      	subs	r3, #1
 800674e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e038      	b.n	80067e6 <USB_EPStartXfer+0x3be>
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d130      	bne.n	80067e6 <USB_EPStartXfer+0x3be>
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800679e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067a2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	440a      	add	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6959      	ldr	r1, [r3, #20]
 8006802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006806:	b29b      	uxth	r3, r3
 8006808:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800680c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006810:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006814:	6800      	ldr	r0, [r0, #0]
 8006816:	f001 fd68 	bl	80082ea <USB_WritePMA>
            ep->xfer_buff += len;
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695a      	ldr	r2, [r3, #20]
 8006826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682a:	441a      	add	r2, r3
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d90f      	bls.n	8006874 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	621a      	str	r2, [r3, #32]
 8006872:	e00e      	b.n	8006892 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 809a 	bne.w	80069d8 <USB_EPStartXfer+0x5b0>
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068d6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	440a      	add	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	011a      	lsls	r2, r3, #4
 80068ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d122      	bne.n	8006956 <USB_EPStartXfer+0x52e>
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006922:	b29a      	uxth	r2, r3
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	801a      	strh	r2, [r3, #0]
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e083      	b.n	8006a5e <USB_EPStartXfer+0x636>
 8006956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695a:	2b3e      	cmp	r3, #62	; 0x3e
 800695c:	d81b      	bhi.n	8006996 <USB_EPStartXfer+0x56e>
 800695e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <USB_EPStartXfer+0x556>
 8006974:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006978:	3301      	adds	r3, #1
 800697a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800697e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006982:	b29b      	uxth	r3, r3
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	b29a      	uxth	r2, r3
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	e063      	b.n	8006a5e <USB_EPStartXfer+0x636>
 8006996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <USB_EPStartXfer+0x58e>
 80069ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069b0:	3b01      	subs	r3, #1
 80069b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	b29b      	uxth	r3, r3
 80069c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	e042      	b.n	8006a5e <USB_EPStartXfer+0x636>
 80069d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d13a      	bne.n	8006a5e <USB_EPStartXfer+0x636>
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80069f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a1a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	440a      	add	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	011a      	lsls	r2, r3, #4
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	891b      	ldrh	r3, [r3, #8]
 8006a6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6959      	ldr	r1, [r3, #20]
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a8c:	6800      	ldr	r0, [r0, #0]
 8006a8e:	f001 fc2c 	bl	80082ea <USB_WritePMA>
 8006a92:	f000 be0e 	b.w	80076b2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d16d      	bne.n	8006b82 <USB_EPStartXfer+0x75a>
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	4413      	add	r3, r2
 8006ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d112      	bne.n	8006b10 <USB_EPStartXfer+0x6e8>
 8006aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	e063      	b.n	8006bd8 <USB_EPStartXfer+0x7b0>
 8006b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b14:	2b3e      	cmp	r3, #62	; 0x3e
 8006b16:	d817      	bhi.n	8006b48 <USB_EPStartXfer+0x720>
 8006b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <USB_EPStartXfer+0x710>
 8006b2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b32:	3301      	adds	r3, #1
 8006b34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e047      	b.n	8006bd8 <USB_EPStartXfer+0x7b0>
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <USB_EPStartXfer+0x740>
 8006b5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b62:	3b01      	subs	r3, #1
 8006b64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	029b      	lsls	r3, r3, #10
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e02a      	b.n	8006bd8 <USB_EPStartXfer+0x7b0>
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d122      	bne.n	8006bd8 <USB_EPStartXfer+0x7b0>
 8006b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb2:	4413      	add	r3, r2
 8006bb4:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	011a      	lsls	r2, r3, #4
 8006bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	891b      	ldrh	r3, [r3, #8]
 8006be4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6959      	ldr	r1, [r3, #20]
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bfe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c02:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c06:	6800      	ldr	r0, [r0, #0]
 8006c08:	f001 fb6f 	bl	80082ea <USB_WritePMA>
            ep->xfer_buff += len;
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a1a      	ldr	r2, [r3, #32]
 8006c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d90f      	bls.n	8006c66 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	621a      	str	r2, [r3, #32]
 8006c64:	e00e      	b.n	8006c84 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d16d      	bne.n	8006d7c <USB_EPStartXfer+0x954>
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	4413      	add	r3, r2
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	011a      	lsls	r2, r3, #4
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d112      	bne.n	8006d0a <USB_EPStartXfer+0x8e2>
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	801a      	strh	r2, [r3, #0]
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	e05d      	b.n	8006dc6 <USB_EPStartXfer+0x99e>
 8006d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d10:	d817      	bhi.n	8006d42 <USB_EPStartXfer+0x91a>
 8006d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <USB_EPStartXfer+0x90a>
 8006d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e041      	b.n	8006dc6 <USB_EPStartXfer+0x99e>
 8006d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <USB_EPStartXfer+0x93a>
 8006d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e024      	b.n	8006dc6 <USB_EPStartXfer+0x99e>
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d11c      	bne.n	8006dc6 <USB_EPStartXfer+0x99e>
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da0:	4413      	add	r3, r2
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	011a      	lsls	r2, r3, #4
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	4413      	add	r3, r2
 8006db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	895b      	ldrh	r3, [r3, #10]
 8006dd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6959      	ldr	r1, [r3, #20]
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006df0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006df4:	6800      	ldr	r0, [r0, #0]
 8006df6:	f001 fa78 	bl	80082ea <USB_WritePMA>
 8006dfa:	f000 bc5a 	b.w	80076b2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8a:	4413      	add	r3, r2
 8006e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	011a      	lsls	r2, r3, #4
 8006e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ea4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	891b      	ldrh	r3, [r3, #8]
 8006ebc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6959      	ldr	r1, [r3, #20]
 8006ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ed6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006eda:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	f001 fa03 	bl	80082ea <USB_WritePMA>
 8006ee4:	e3e5      	b.n	80076b2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 81bc 	beq.w	8007300 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d16d      	bne.n	8007082 <USB_EPStartXfer+0xc5a>
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc6:	4413      	add	r3, r2
 8006fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d112      	bne.n	8007010 <USB_EPStartXfer+0xbe8>
 8006fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007008:	b29a      	uxth	r2, r3
 800700a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	e060      	b.n	80070d2 <USB_EPStartXfer+0xcaa>
 8007010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007014:	2b3e      	cmp	r3, #62	; 0x3e
 8007016:	d817      	bhi.n	8007048 <USB_EPStartXfer+0xc20>
 8007018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <USB_EPStartXfer+0xc10>
 800702e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007032:	3301      	adds	r3, #1
 8007034:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800703c:	b29b      	uxth	r3, r3
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	b29a      	uxth	r2, r3
 8007042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e044      	b.n	80070d2 <USB_EPStartXfer+0xcaa>
 8007048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <USB_EPStartXfer+0xc40>
 800705e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007062:	3b01      	subs	r3, #1
 8007064:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007068:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800706c:	b29b      	uxth	r3, r3
 800706e:	029b      	lsls	r3, r3, #10
 8007070:	b29b      	uxth	r3, r3
 8007072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707a:	b29a      	uxth	r2, r3
 800707c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	e027      	b.n	80070d2 <USB_EPStartXfer+0xcaa>
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d11f      	bne.n	80070d2 <USB_EPStartXfer+0xcaa>
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070a8:	4413      	add	r3, r2
 80070aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	011a      	lsls	r2, r3, #4
 80070bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	895b      	ldrh	r3, [r3, #10]
 80070de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6959      	ldr	r1, [r3, #20]
 80070ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007100:	6800      	ldr	r0, [r0, #0]
 8007102:	f001 f8f2 	bl	80082ea <USB_WritePMA>
          ep->xfer_buff += len;
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007116:	441a      	add	r2, r3
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	429a      	cmp	r2, r3
 800713e:	d90f      	bls.n	8007160 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007150:	1ad2      	subs	r2, r2, r3
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	621a      	str	r2, [r3, #32]
 800715e:	e00e      	b.n	800717e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800717e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8295 	beq.w	80076b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16d      	bne.n	8007274 <USB_EPStartXfer+0xe4c>
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071b8:	4413      	add	r3, r2
 80071ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80071bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	011a      	lsls	r2, r3, #4
 80071ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071cc:	4413      	add	r3, r2
 80071ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071d2:	667b      	str	r3, [r7, #100]	; 0x64
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d112      	bne.n	8007202 <USB_EPStartXfer+0xdda>
 80071dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e063      	b.n	80072ca <USB_EPStartXfer+0xea2>
 8007202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007206:	2b3e      	cmp	r3, #62	; 0x3e
 8007208:	d817      	bhi.n	800723a <USB_EPStartXfer+0xe12>
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0xe02>
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29a      	uxth	r2, r3
 8007234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	e047      	b.n	80072ca <USB_EPStartXfer+0xea2>
 800723a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <USB_EPStartXfer+0xe32>
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	3b01      	subs	r3, #1
 8007256:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725e:	b29b      	uxth	r3, r3
 8007260:	029b      	lsls	r3, r3, #10
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e02a      	b.n	80072ca <USB_EPStartXfer+0xea2>
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d122      	bne.n	80072ca <USB_EPStartXfer+0xea2>
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	673b      	str	r3, [r7, #112]	; 0x70
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a4:	4413      	add	r3, r2
 80072a6:	673b      	str	r3, [r7, #112]	; 0x70
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	011a      	lsls	r2, r3, #4
 80072b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072b8:	4413      	add	r3, r2
 80072ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	891b      	ldrh	r3, [r3, #8]
 80072d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6959      	ldr	r1, [r3, #20]
 80072e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072f8:	6800      	ldr	r0, [r0, #0]
 80072fa:	f000 fff6 	bl	80082ea <USB_WritePMA>
 80072fe:	e1d8      	b.n	80076b2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d178      	bne.n	8007402 <USB_EPStartXfer+0xfda>
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007334:	4413      	add	r3, r2
 8007336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	011a      	lsls	r2, r3, #4
 8007348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800734c:	4413      	add	r3, r2
 800734e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d116      	bne.n	800738c <USB_EPStartXfer+0xf64>
 800735e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e06b      	b.n	8007464 <USB_EPStartXfer+0x103c>
 800738c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007390:	2b3e      	cmp	r3, #62	; 0x3e
 8007392:	d818      	bhi.n	80073c6 <USB_EPStartXfer+0xf9e>
 8007394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USB_EPStartXfer+0xf8c>
 80073aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ae:	3301      	adds	r3, #1
 80073b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	029b      	lsls	r3, r3, #10
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e04e      	b.n	8007464 <USB_EPStartXfer+0x103c>
 80073c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <USB_EPStartXfer+0xfbe>
 80073dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80073e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e030      	b.n	8007464 <USB_EPStartXfer+0x103c>
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d128      	bne.n	8007464 <USB_EPStartXfer+0x103c>
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742e:	b29b      	uxth	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007436:	4413      	add	r3, r2
 8007438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	011a      	lsls	r2, r3, #4
 800744a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800744e:	4413      	add	r3, r2
 8007450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007462:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	891b      	ldrh	r3, [r3, #8]
 8007470:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6959      	ldr	r1, [r3, #20]
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	b29b      	uxth	r3, r3
 8007486:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800748a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800748e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007492:	6800      	ldr	r0, [r0, #0]
 8007494:	f000 ff29 	bl	80082ea <USB_WritePMA>
          ep->xfer_buff += len;
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	441a      	add	r2, r3
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d90f      	bls.n	80074f2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	621a      	str	r2, [r3, #32]
 80074f0:	e00e      	b.n	8007510 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2200      	movs	r2, #0
 800750e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80cc 	beq.w	80076b2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d178      	bne.n	800762a <USB_EPStartXfer+0x1202>
 8007538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800755c:	4413      	add	r3, r2
 800755e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	011a      	lsls	r2, r3, #4
 8007570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007574:	4413      	add	r3, r2
 8007576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800757a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800757e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d116      	bne.n	80075b4 <USB_EPStartXfer+0x118c>
 8007586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e064      	b.n	800767e <USB_EPStartXfer+0x1256>
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	2b3e      	cmp	r3, #62	; 0x3e
 80075ba:	d818      	bhi.n	80075ee <USB_EPStartXfer+0x11c6>
 80075bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <USB_EPStartXfer+0x11b4>
 80075d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d6:	3301      	adds	r3, #1
 80075d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	029b      	lsls	r3, r3, #10
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e047      	b.n	800767e <USB_EPStartXfer+0x1256>
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fc:	f003 031f 	and.w	r3, r3, #31
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <USB_EPStartXfer+0x11e6>
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007608:	3b01      	subs	r3, #1
 800760a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800760e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007612:	b29b      	uxth	r3, r3
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e029      	b.n	800767e <USB_EPStartXfer+0x1256>
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d121      	bne.n	800767e <USB_EPStartXfer+0x1256>
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007650:	4413      	add	r3, r2
 8007652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	011a      	lsls	r2, r3, #4
 8007664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007668:	4413      	add	r3, r2
 800766a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800766e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800767c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	895b      	ldrh	r3, [r3, #10]
 800768a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6959      	ldr	r1, [r3, #20]
 800769a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f000 fe1c 	bl	80082ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076d4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e0:	8013      	strh	r3, [r2, #0]
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80076ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076ee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	f082 0210 	eor.w	r2, r2, #16
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007702:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007706:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800770a:	8812      	ldrh	r2, [r2, #0]
 800770c:	f082 0220 	eor.w	r2, r2, #32
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	441a      	add	r2, r3
 800772c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007730:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007746:	b29b      	uxth	r3, r3
 8007748:	8013      	strh	r3, [r2, #0]
 800774a:	f000 bc9f 	b.w	800808c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	7b1b      	ldrb	r3, [r3, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 80ae 	bne.w	80078bc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	429a      	cmp	r2, r3
 800777a:	d917      	bls.n	80077ac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	1ad2      	subs	r2, r2, r3
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	619a      	str	r2, [r3, #24]
 80077aa:	e00e      	b.n	80077ca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ee:	4413      	add	r3, r2
 80077f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	011a      	lsls	r2, r3, #4
 8007802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007806:	4413      	add	r3, r2
 8007808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800780c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d116      	bne.n	8007846 <USB_EPStartXfer+0x141e>
 8007818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e3e8      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	2b3e      	cmp	r3, #62	; 0x3e
 800784c:	d818      	bhi.n	8007880 <USB_EPStartXfer+0x1458>
 800784e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <USB_EPStartXfer+0x1446>
 8007864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007868:	3301      	adds	r3, #1
 800786a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800786e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007872:	b29b      	uxth	r3, r3
 8007874:	029b      	lsls	r3, r3, #10
 8007876:	b29a      	uxth	r2, r3
 8007878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e3cb      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800788a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <USB_EPStartXfer+0x1478>
 8007896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800789a:	3b01      	subs	r3, #1
 800789c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e3ad      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f040 8200 	bne.w	8007cce <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 8091 	bne.w	8007a02 <USB_EPStartXfer+0x15da>
 80078e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007904:	4413      	add	r3, r2
 8007906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	011a      	lsls	r2, r3, #4
 8007918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800791c:	4413      	add	r3, r2
 800791e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d116      	bne.n	8007964 <USB_EPStartXfer+0x153c>
 8007936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e083      	b.n	8007a6c <USB_EPStartXfer+0x1644>
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b3e      	cmp	r3, #62	; 0x3e
 8007972:	d820      	bhi.n	80079b6 <USB_EPStartXfer+0x158e>
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <USB_EPStartXfer+0x157c>
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799e:	3301      	adds	r3, #1
 80079a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	029b      	lsls	r3, r3, #10
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079b2:	801a      	strh	r2, [r3, #0]
 80079b4:	e05a      	b.n	8007a6c <USB_EPStartXfer+0x1644>
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <USB_EPStartXfer+0x15be>
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	3b01      	subs	r3, #1
 80079e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e034      	b.n	8007a6c <USB_EPStartXfer+0x1644>
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d12c      	bne.n	8007a6c <USB_EPStartXfer+0x1644>
 8007a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a36:	4413      	add	r3, r2
 8007a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	011a      	lsls	r2, r3, #4
 8007a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 8091 	bne.w	8007bae <USB_EPStartXfer+0x1786>
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	011a      	lsls	r2, r3, #4
 8007ac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ac8:	4413      	add	r3, r2
 8007aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ace:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d116      	bne.n	8007b10 <USB_EPStartXfer+0x16e8>
 8007ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e07c      	b.n	8007c0a <USB_EPStartXfer+0x17e2>
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b1e:	d820      	bhi.n	8007b62 <USB_EPStartXfer+0x173a>
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <USB_EPStartXfer+0x1728>
 8007b46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	029b      	lsls	r3, r3, #10
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e053      	b.n	8007c0a <USB_EPStartXfer+0x17e2>
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d104      	bne.n	8007b92 <USB_EPStartXfer+0x176a>
 8007b88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	029b      	lsls	r3, r3, #10
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e02d      	b.n	8007c0a <USB_EPStartXfer+0x17e2>
 8007bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d125      	bne.n	8007c0a <USB_EPStartXfer+0x17e2>
 8007bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	011a      	lsls	r2, r3, #4
 8007be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bec:	4413      	add	r3, r2
 8007bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 81fe 	beq.w	8008018 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <USB_EPStartXfer+0x182c>
 8007c48:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10d      	bne.n	8007c70 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 81db 	bne.w	8008018 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f040 81d4 	bne.w	8008018 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c96:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	441a      	add	r2, r3
 8007cb4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
 8007ccc:	e1a4      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	f040 819a 	bne.w	8008014 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d917      	bls.n	8007d2c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	1ad2      	subs	r2, r2, r3
 8007d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	619a      	str	r2, [r3, #24]
 8007d2a:	e00e      	b.n	8007d4a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d178      	bne.n	8007e4c <USB_EPStartXfer+0x1a24>
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d7e:	4413      	add	r3, r2
 8007d80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	011a      	lsls	r2, r3, #4
 8007d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007d96:	4413      	add	r3, r2
 8007d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d116      	bne.n	8007dd6 <USB_EPStartXfer+0x19ae>
 8007da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	e06b      	b.n	8007eae <USB_EPStartXfer+0x1a86>
 8007dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dda:	2b3e      	cmp	r3, #62	; 0x3e
 8007ddc:	d818      	bhi.n	8007e10 <USB_EPStartXfer+0x19e8>
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <USB_EPStartXfer+0x19d6>
 8007df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	029b      	lsls	r3, r3, #10
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	e04e      	b.n	8007eae <USB_EPStartXfer+0x1a86>
 8007e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <USB_EPStartXfer+0x1a08>
 8007e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	029b      	lsls	r3, r3, #10
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e030      	b.n	8007eae <USB_EPStartXfer+0x1a86>
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d128      	bne.n	8007eae <USB_EPStartXfer+0x1a86>
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	4413      	add	r3, r2
 8007e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	011a      	lsls	r2, r3, #4
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d178      	bne.n	8007fbe <USB_EPStartXfer+0x1b96>
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	011a      	lsls	r2, r3, #4
 8007f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f08:	4413      	add	r3, r2
 8007f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d116      	bne.n	8007f48 <USB_EPStartXfer+0x1b20>
 8007f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e067      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4e:	d818      	bhi.n	8007f82 <USB_EPStartXfer+0x1b5a>
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <USB_EPStartXfer+0x1b48>
 8007f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e04a      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <USB_EPStartXfer+0x1b7a>
 8007f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	029b      	lsls	r3, r3, #10
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	e02c      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d124      	bne.n	8008018 <USB_EPStartXfer+0x1bf0>
 8007fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	011a      	lsls	r2, r3, #4
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e001      	b.n	8008018 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e03a      	b.n	800808e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008042:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008046:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800804a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800804e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008052:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008056:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	441a      	add	r2, r3
 8008074:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800807c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d020      	beq.n	80080ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c0:	81bb      	strh	r3, [r7, #12]
 80080c2:	89bb      	ldrh	r3, [r7, #12]
 80080c4:	f083 0310 	eor.w	r3, r3, #16
 80080c8:	81bb      	strh	r3, [r7, #12]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	89bb      	ldrh	r3, [r7, #12]
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8013      	strh	r3, [r2, #0]
 80080ea:	e01f      	b.n	800812c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	81fb      	strh	r3, [r7, #14]
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800810a:	81fb      	strh	r3, [r7, #14]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	441a      	add	r2, r3
 8008116:	89fb      	ldrh	r3, [r7, #14]
 8008118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008128:	b29b      	uxth	r3, r3
 800812a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	7b1b      	ldrb	r3, [r3, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f040 809d 	bne.w	8008286 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d04c      	beq.n	80081ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	823b      	strh	r3, [r7, #16]
 8008162:	8a3b      	ldrh	r3, [r7, #16]
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01b      	beq.n	80081a4 <USB_EPClearStall+0x6c>
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008182:	81fb      	strh	r3, [r7, #14]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	441a      	add	r2, r3
 800818e:	89fb      	ldrh	r3, [r7, #14]
 8008190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	78db      	ldrb	r3, [r3, #3]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d06c      	beq.n	8008286 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c2:	81bb      	strh	r3, [r7, #12]
 80081c4:	89bb      	ldrh	r3, [r7, #12]
 80081c6:	f083 0320 	eor.w	r3, r3, #32
 80081ca:	81bb      	strh	r3, [r7, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	89bb      	ldrh	r3, [r7, #12]
 80081d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	8013      	strh	r3, [r2, #0]
 80081ec:	e04b      	b.n	8008286 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	82fb      	strh	r3, [r7, #22]
 80081fc:	8afb      	ldrh	r3, [r7, #22]
 80081fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01b      	beq.n	800823e <USB_EPClearStall+0x106>
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	82bb      	strh	r3, [r7, #20]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	8abb      	ldrh	r3, [r7, #20]
 800822a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823a:	b29b      	uxth	r3, r3
 800823c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008254:	827b      	strh	r3, [r7, #18]
 8008256:	8a7b      	ldrh	r3, [r7, #18]
 8008258:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800825c:	827b      	strh	r3, [r7, #18]
 800825e:	8a7b      	ldrh	r3, [r7, #18]
 8008260:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008264:	827b      	strh	r3, [r7, #18]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	441a      	add	r2, r3
 8008270:	8a7b      	ldrh	r3, [r7, #18]
 8008272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	b29b      	uxth	r3, r3
 8008284:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr

08008292 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2280      	movs	r2, #128	; 0x80
 80082a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082da:	b29b      	uxth	r3, r3
 80082dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr

080082ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b08d      	sub	sp, #52	; 0x34
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	460b      	mov	r3, r1
 80082fa:	80fb      	strh	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008300:	88bb      	ldrh	r3, [r7, #4]
 8008302:	3301      	adds	r3, #1
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	005a      	lsls	r2, r3, #1
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008322:	e01e      	b.n	8008362 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	3301      	adds	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	b29b      	uxth	r3, r3
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	b29b      	uxth	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	b29a      	uxth	r2, r3
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	3302      	adds	r3, #2
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	3302      	adds	r3, #2
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	3301      	adds	r3, #1
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	3b01      	subs	r3, #1
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1dd      	bne.n	8008324 <USB_WritePMA+0x3a>
  }
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	3734      	adds	r7, #52	; 0x34
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008374:	b480      	push	{r7}
 8008376:	b08b      	sub	sp, #44	; 0x2c
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4611      	mov	r1, r2
 8008380:	461a      	mov	r2, r3
 8008382:	460b      	mov	r3, r1
 8008384:	80fb      	strh	r3, [r7, #6]
 8008386:	4613      	mov	r3, r2
 8008388:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800838a:	88bb      	ldrh	r3, [r7, #4]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	b29b      	uxth	r3, r3
 8008390:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	005a      	lsls	r2, r3, #1
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
 80083ac:	e01b      	b.n	80083e6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	3302      	adds	r3, #2
 80083ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	3301      	adds	r3, #1
 80083c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	0a1b      	lsrs	r3, r3, #8
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	3301      	adds	r3, #1
 80083d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	3302      	adds	r3, #2
 80083de:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	3b01      	subs	r3, #1
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e0      	bne.n	80083ae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083ec:	88bb      	ldrh	r3, [r7, #4]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	b2da      	uxtb	r2, r3
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	701a      	strb	r2, [r3, #0]
  }
}
 8008408:	bf00      	nop
 800840a:	372c      	adds	r7, #44	; 0x2c
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr

08008412 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008422:	2302      	movs	r3, #2
 8008424:	2203      	movs	r2, #3
 8008426:	2181      	movs	r1, #129	; 0x81
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fcfc 	bl	8009e26 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008434:	2302      	movs	r3, #2
 8008436:	2203      	movs	r2, #3
 8008438:	2101      	movs	r1, #1
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fcf3 	bl	8009e26 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8008448:	2024      	movs	r0, #36	; 0x24
 800844a:	f001 fe01 	bl	800a050 <USBD_static_malloc>
 800844e:	4602      	mov	r2, r0
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	e012      	b.n	800848c <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800846c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	230d      	movs	r3, #13
 8008484:	2101      	movs	r1, #1
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fdbe 	bl	800a008 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80084a2:	2181      	movs	r1, #129	; 0x81
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 fce4 	bl	8009e72 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80084b0:	2101      	movs	r1, #1
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fcdd 	bl	8009e72 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00e      	beq.n	80084e8 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fdc4 	bl	800a068 <USBD_static_free>
    pdev->pClassData = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008504:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851e:	2b00      	cmp	r3, #0
 8008520:	d051      	beq.n	80085c6 <USBD_CUSTOM_HID_Setup+0xd2>
 8008522:	2b20      	cmp	r3, #32
 8008524:	f040 80d8 	bne.w	80086d8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	3b02      	subs	r3, #2
 800852e:	2b09      	cmp	r3, #9
 8008530:	d841      	bhi.n	80085b6 <USBD_CUSTOM_HID_Setup+0xc2>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBD_CUSTOM_HID_Setup+0x44>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008591 	.word	0x08008591
 800853c:	0800856f 	.word	0x0800856f
 8008540:	080085b7 	.word	0x080085b7
 8008544:	080085b7 	.word	0x080085b7
 8008548:	080085b7 	.word	0x080085b7
 800854c:	080085b7 	.word	0x080085b7
 8008550:	080085b7 	.word	0x080085b7
 8008554:	080085a1 	.word	0x080085a1
 8008558:	0800857f 	.word	0x0800857f
 800855c:	08008561 	.word	0x08008561
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	885b      	ldrh	r3, [r3, #2]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	611a      	str	r2, [r3, #16]
      break;
 800856c:	e02a      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3310      	adds	r3, #16
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f92b 	bl	80097d2 <USBD_CtlSendData>
      break;
 800857c:	e022      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	885b      	ldrh	r3, [r3, #2]
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	b29b      	uxth	r3, r3
 8008586:	b2db      	uxtb	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	615a      	str	r2, [r3, #20]
      break;
 800858e:	e019      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	3314      	adds	r3, #20
 8008594:	2201      	movs	r2, #1
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f91a 	bl	80097d2 <USBD_CtlSendData>
      break;
 800859e:	e011      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2201      	movs	r2, #1
 80085a4:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80085a6:	6939      	ldr	r1, [r7, #16]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 f93d 	bl	800982e <USBD_CtlPrepareRx>
      break;
 80085b4:	e006      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f8a0 	bl	80096fe <USBD_CtlError>
      ret = USBD_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	75fb      	strb	r3, [r7, #23]
      break;
 80085c2:	bf00      	nop
    }
    break;
 80085c4:	e08f      	b.n	80086e6 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b0b      	cmp	r3, #11
 80085cc:	d87c      	bhi.n	80086c8 <USBD_CUSTOM_HID_Setup+0x1d4>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_CUSTOM_HID_Setup+0xe0>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008605 	.word	0x08008605
 80085d8:	080086c9 	.word	0x080086c9
 80085dc:	080086c9 	.word	0x080086c9
 80085e0:	080086c9 	.word	0x080086c9
 80085e4:	080086c9 	.word	0x080086c9
 80085e8:	080086c9 	.word	0x080086c9
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	080086c9 	.word	0x080086c9
 80085f4:	080086c9 	.word	0x080086c9
 80085f8:	080086c9 	.word	0x080086c9
 80085fc:	0800867b 	.word	0x0800867b
 8008600:	080086a3 	.word	0x080086a3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800860a:	2b03      	cmp	r3, #3
 800860c:	d107      	bne.n	800861e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800860e:	f107 030e 	add.w	r3, r7, #14
 8008612:	2202      	movs	r2, #2
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f8db 	bl	80097d2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800861c:	e05b      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 f86c 	bl	80096fe <USBD_CtlError>
			  ret = USBD_FAIL;
 8008626:	2302      	movs	r3, #2
 8008628:	75fb      	strb	r3, [r7, #23]
      break;
 800862a:	e054      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	885b      	ldrh	r3, [r3, #2]
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b22      	cmp	r3, #34	; 0x22
 8008636:	d10b      	bne.n	8008650 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	88db      	ldrh	r3, [r3, #6]
 800863c:	2b41      	cmp	r3, #65	; 0x41
 800863e:	bf28      	it	cs
 8008640:	2341      	movcs	r3, #65	; 0x41
 8008642:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	e00d      	b.n	800866c <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	885b      	ldrh	r3, [r3, #2]
 8008654:	0a1b      	lsrs	r3, r3, #8
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b21      	cmp	r3, #33	; 0x21
 800865a:	d107      	bne.n	800866c <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800865c:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800865e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	88db      	ldrh	r3, [r3, #6]
 8008664:	2b09      	cmp	r3, #9
 8008666:	bf28      	it	cs
 8008668:	2309      	movcs	r3, #9
 800866a:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 800866c:	8bfb      	ldrh	r3, [r7, #30]
 800866e:	461a      	mov	r2, r3
 8008670:	69b9      	ldr	r1, [r7, #24]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 f8ad 	bl	80097d2 <USBD_CtlSendData>
      break;
 8008678:	e02d      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008680:	2b03      	cmp	r3, #3
 8008682:	d107      	bne.n	8008694 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	3318      	adds	r3, #24
 8008688:	2201      	movs	r2, #1
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 f8a0 	bl	80097d2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008692:	e020      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 f831 	bl	80096fe <USBD_CtlError>
			  ret = USBD_FAIL;
 800869c:	2302      	movs	r3, #2
 800869e:	75fb      	strb	r3, [r7, #23]
      break;
 80086a0:	e019      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d106      	bne.n	80086ba <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80086b8:	e00d      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f81e 	bl	80096fe <USBD_CtlError>
			  ret = USBD_FAIL;
 80086c2:	2302      	movs	r3, #2
 80086c4:	75fb      	strb	r3, [r7, #23]
      break;
 80086c6:	e006      	b.n	80086d6 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 f817 	bl	80096fe <USBD_CtlError>
      ret = USBD_FAIL;
 80086d0:	2302      	movs	r3, #2
 80086d2:	75fb      	strb	r3, [r7, #23]
      break;
 80086d4:	bf00      	nop
    }
    break;
 80086d6:	e006      	b.n	80086e6 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 f80f 	bl	80096fe <USBD_CtlError>
    ret = USBD_FAIL;
 80086e0:	2302      	movs	r3, #2
 80086e2:	75fb      	strb	r3, [r7, #23]
    break;
 80086e4:	bf00      	nop
  }
  return ret;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200000c8 	.word	0x200000c8

080086f4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008708:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008710:	2b03      	cmp	r3, #3
 8008712:	d111      	bne.n	8008738 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f001 fc48 	bl	8009fc2 <USBD_LL_Transmit>
 8008732:	e001      	b.n	8008738 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2229      	movs	r2, #41	; 0x29
 8008750:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008752:	4b03      	ldr	r3, [pc, #12]	; (8008760 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	20000044 	.word	0x20000044

08008764 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2229      	movs	r2, #41	; 0x29
 8008770:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000070 	.word	0x20000070

08008784 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2229      	movs	r2, #41	; 0x29
 8008790:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008792:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	2000009c 	.word	0x2000009c

080087a4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80087da:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	7810      	ldrb	r0, [r2, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	7852      	ldrb	r2, [r2, #1]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	230d      	movs	r3, #13
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fc06 	bl	800a008 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008814:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10c      	bne.n	8008838 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	7810      	ldrb	r0, [r2, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	7852      	ldrb	r2, [r2, #1]
 800882e:	4611      	mov	r1, r2
 8008830:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	220a      	movs	r2, #10
 8008850:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	; (8008860 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	200000d4 	.word	0x200000d4

08008864 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800886e:	2302      	movs	r3, #2
 8008870:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088a4:	2302      	movs	r3, #2
 80088a6:	e01a      	b.n	80088de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	79fa      	ldrb	r2, [r7, #7]
 80088d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 fa3a 	bl	8009d50 <USBD_LL_Init>

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
 8008906:	e001      	b.n	800890c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008908:	2302      	movs	r3, #2
 800890a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr

08008918 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 fa65 	bl	8009df0 <USBD_LL_Start>

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008950:	2302      	movs	r3, #2
 8008952:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00c      	beq.n	8008978 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	4611      	mov	r1, r2
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	4611      	mov	r1, r2
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fe63 	bl	8009686 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80089dc:	f003 031f 	and.w	r3, r3, #31
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d016      	beq.n	8008a12 <USBD_LL_SetupStage+0x6a>
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d81c      	bhi.n	8008a22 <USBD_LL_SetupStage+0x7a>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <USBD_LL_SetupStage+0x4a>
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d008      	beq.n	8008a02 <USBD_LL_SetupStage+0x5a>
 80089f0:	e017      	b.n	8008a22 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9c6 	bl	8008d8c <USBD_StdDevReq>
    break;
 8008a00:	e01a      	b.n	8008a38 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa28 	bl	8008e60 <USBD_StdItfReq>
    break;
 8008a10:	e012      	b.n	8008a38 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa68 	bl	8008ef0 <USBD_StdEPReq>
    break;
 8008a20:	e00a      	b.n	8008a38 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 fa3d 	bl	8009eb0 <USBD_LL_StallEP>
    break;
 8008a36:	bf00      	nop
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008a50:	7afb      	ldrb	r3, [r7, #11]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d14b      	bne.n	8008aee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008a5c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d134      	bne.n	8008ad2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d919      	bls.n	8008aa8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d203      	bcs.n	8008a96 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	e002      	b.n	8008a9c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fee2 	bl	800986a <USBD_CtlContinueRx>
 8008aa6:	e038      	b.n	8008b1a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d105      	bne.n	8008aca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fedf 	bl	800988e <USBD_CtlSendStatus>
 8008ad0:	e023      	b.n	8008b1a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	d11e      	bne.n	8008b1a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f001 f9e2 	bl	8009eb0 <USBD_LL_StallEP>
 8008aec:	e015      	b.n	8008b1a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00d      	beq.n	8008b16 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d108      	bne.n	8008b16 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	7afa      	ldrb	r2, [r7, #11]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	4798      	blx	r3
 8008b14:	e001      	b.n	8008b1a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	e000      	b.n	8008b1c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d17f      	bne.n	8008c38 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d15c      	bne.n	8008c02 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d915      	bls.n	8008b80 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	1ad2      	subs	r2, r2, r3
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fe4c 	bl	800980a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008b72:	2300      	movs	r3, #0
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f001 fa45 	bl	800a008 <USBD_LL_PrepareReceive>
 8008b7e:	e04e      	b.n	8008c1e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	6912      	ldr	r2, [r2, #16]
 8008b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b8c:	fb01 f202 	mul.w	r2, r1, r2
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d11c      	bne.n	8008bd0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d316      	bcc.n	8008bd0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d20f      	bcs.n	8008bd0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fe28 	bl	800980a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fa1d 	bl	800a008 <USBD_LL_PrepareReceive>
 8008bce:	e026      	b.n	8008c1e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d105      	bne.n	8008bf2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bf2:	2180      	movs	r1, #128	; 0x80
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f001 f95b 	bl	8009eb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fe5a 	bl	80098b4 <USBD_CtlReceiveStatus>
 8008c00:	e00d      	b.n	8008c1e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d004      	beq.n	8008c16 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c16:	2180      	movs	r1, #128	; 0x80
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 f949 	bl	8009eb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d11d      	bne.n	8008c64 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fe81 	bl	8008930 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008c36:	e015      	b.n	8008c64 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00d      	beq.n	8008c60 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d108      	bne.n	8008c60 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	7afa      	ldrb	r2, [r7, #11]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	4798      	blx	r3
 8008c5e:	e001      	b.n	8008c64 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c60:	2302      	movs	r3, #2
 8008c62:	e000      	b.n	8008c66 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c76:	2340      	movs	r3, #64	; 0x40
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f8d2 	bl	8009e26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2240      	movs	r2, #64	; 0x40
 8008c8e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	2200      	movs	r2, #0
 8008c96:	2180      	movs	r1, #128	; 0x80
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f8c4 	bl	8009e26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2240      	movs	r2, #64	; 0x40
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6852      	ldr	r2, [r2, #4]
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
  }

  return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2204      	movs	r2, #4
 8008d26:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr

08008d36 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr

08008d56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d10b      	bne.n	8008d80 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d005      	beq.n	8008db2 <USBD_StdDevReq+0x26>
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d84f      	bhi.n	8008e4a <USBD_StdDevReq+0xbe>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <USBD_StdDevReq+0x36>
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d14b      	bne.n	8008e4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
    break;
 8008dc0:	e048      	b.n	8008e54 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b09      	cmp	r3, #9
 8008dc8:	d839      	bhi.n	8008e3e <USBD_StdDevReq+0xb2>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBD_StdDevReq+0x44>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e21 	.word	0x08008e21
 8008dd4:	08008e35 	.word	0x08008e35
 8008dd8:	08008e3f 	.word	0x08008e3f
 8008ddc:	08008e2b 	.word	0x08008e2b
 8008de0:	08008e3f 	.word	0x08008e3f
 8008de4:	08008e03 	.word	0x08008e03
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008e3f 	.word	0x08008e3f
 8008df0:	08008e17 	.word	0x08008e17
 8008df4:	08008e0d 	.word	0x08008e0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f9da 	bl	80091b4 <USBD_GetDescriptor>
      break;
 8008e00:	e022      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 facf 	bl	80093a8 <USBD_SetAddress>
      break;
 8008e0a:	e01d      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fb0e 	bl	8009430 <USBD_SetConfig>
      break;
 8008e14:	e018      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fb97 	bl	800954c <USBD_GetConfig>
      break;
 8008e1e:	e013      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fbc7 	bl	80095b6 <USBD_GetStatus>
      break;
 8008e28:	e00e      	b.n	8008e48 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fbf5 	bl	800961c <USBD_SetFeature>
      break;
 8008e32:	e009      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fc04 	bl	8009644 <USBD_ClrFeature>
      break;
 8008e3c:	e004      	b.n	8008e48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fc5c 	bl	80096fe <USBD_CtlError>
      break;
 8008e46:	bf00      	nop
    }
    break;
 8008e48:	e004      	b.n	8008e54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc56 	bl	80096fe <USBD_CtlError>
    break;
 8008e52:	bf00      	nop
  }

  return ret;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop

08008e60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e76:	2b40      	cmp	r3, #64	; 0x40
 8008e78:	d005      	beq.n	8008e86 <USBD_StdItfReq+0x26>
 8008e7a:	2b40      	cmp	r3, #64	; 0x40
 8008e7c:	d82e      	bhi.n	8008edc <USBD_StdItfReq+0x7c>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USBD_StdItfReq+0x26>
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d12a      	bne.n	8008edc <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d81d      	bhi.n	8008ece <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	889b      	ldrh	r3, [r3, #4]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d813      	bhi.n	8008ec4 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	88db      	ldrh	r3, [r3, #6]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d110      	bne.n	8008ed8 <USBD_StdItfReq+0x78>
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10d      	bne.n	8008ed8 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fce6 	bl	800988e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008ec2:	e009      	b.n	8008ed8 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc19 	bl	80096fe <USBD_CtlError>
      break;
 8008ecc:	e004      	b.n	8008ed8 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc14 	bl	80096fe <USBD_CtlError>
      break;
 8008ed6:	e000      	b.n	8008eda <USBD_StdItfReq+0x7a>
      break;
 8008ed8:	bf00      	nop
    }
    break;
 8008eda:	e004      	b.n	8008ee6 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fc0d 	bl	80096fe <USBD_CtlError>
    break;
 8008ee4:	bf00      	nop
  }

  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	889b      	ldrh	r3, [r3, #4]
 8008f02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d007      	beq.n	8008f20 <USBD_StdEPReq+0x30>
 8008f10:	2b40      	cmp	r3, #64	; 0x40
 8008f12:	f200 8144 	bhi.w	800919e <USBD_StdEPReq+0x2ae>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <USBD_StdEPReq+0x40>
 8008f1a:	2b20      	cmp	r3, #32
 8008f1c:	f040 813f 	bne.w	800919e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
    break;
 8008f2e:	e13b      	b.n	80091a8 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d10a      	bne.n	8008f52 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	e12b      	b.n	80091aa <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d007      	beq.n	8008f6a <USBD_StdEPReq+0x7a>
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	f300 8119 	bgt.w	8009192 <USBD_StdEPReq+0x2a2>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d072      	beq.n	800904a <USBD_StdEPReq+0x15a>
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d03a      	beq.n	8008fde <USBD_StdEPReq+0xee>
 8008f68:	e113      	b.n	8009192 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d002      	beq.n	8008f7a <USBD_StdEPReq+0x8a>
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d015      	beq.n	8008fa4 <USBD_StdEPReq+0xb4>
 8008f78:	e02b      	b.n	8008fd2 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <USBD_StdEPReq+0xaa>
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b80      	cmp	r3, #128	; 0x80
 8008f84:	d009      	beq.n	8008f9a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ff90 	bl	8009eb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f90:	2180      	movs	r1, #128	; 0x80
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ff8c 	bl	8009eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f98:	e020      	b.n	8008fdc <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fbae 	bl	80096fe <USBD_CtlError>
        break;
 8008fa2:	e01b      	b.n	8008fdc <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	885b      	ldrh	r3, [r3, #2]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10e      	bne.n	8008fca <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <USBD_StdEPReq+0xda>
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b80      	cmp	r3, #128	; 0x80
 8008fb6:	d008      	beq.n	8008fca <USBD_StdEPReq+0xda>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	88db      	ldrh	r3, [r3, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 ff73 	bl	8009eb0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fc5f 	bl	800988e <USBD_CtlSendStatus>

        break;
 8008fd0:	e004      	b.n	8008fdc <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fb92 	bl	80096fe <USBD_CtlError>
        break;
 8008fda:	bf00      	nop
      }
      break;
 8008fdc:	e0de      	b.n	800919c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d002      	beq.n	8008fee <USBD_StdEPReq+0xfe>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d015      	beq.n	8009018 <USBD_StdEPReq+0x128>
 8008fec:	e026      	b.n	800903c <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00c      	beq.n	800900e <USBD_StdEPReq+0x11e>
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b80      	cmp	r3, #128	; 0x80
 8008ff8:	d009      	beq.n	800900e <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 ff56 	bl	8009eb0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009004:	2180      	movs	r1, #128	; 0x80
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 ff52 	bl	8009eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800900c:	e01c      	b.n	8009048 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fb74 	bl	80096fe <USBD_CtlError>
        break;
 8009016:	e017      	b.n	8009048 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	885b      	ldrh	r3, [r3, #2]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d112      	bne.n	8009046 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 ff5d 	bl	8009eee <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fc2a 	bl	800988e <USBD_CtlSendStatus>
        }
        break;
 800903a:	e004      	b.n	8009046 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb5d 	bl	80096fe <USBD_CtlError>
        break;
 8009044:	e000      	b.n	8009048 <USBD_StdEPReq+0x158>
        break;
 8009046:	bf00      	nop
      }
      break;
 8009048:	e0a8      	b.n	800919c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009050:	2b02      	cmp	r3, #2
 8009052:	d002      	beq.n	800905a <USBD_StdEPReq+0x16a>
 8009054:	2b03      	cmp	r3, #3
 8009056:	d031      	beq.n	80090bc <USBD_StdEPReq+0x1cc>
 8009058:	e095      	b.n	8009186 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d007      	beq.n	8009070 <USBD_StdEPReq+0x180>
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b80      	cmp	r3, #128	; 0x80
 8009064:	d004      	beq.n	8009070 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fb48 	bl	80096fe <USBD_CtlError>
          break;
 800906e:	e08f      	b.n	8009190 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009074:	2b00      	cmp	r3, #0
 8009076:	da0b      	bge.n	8009090 <USBD_StdEPReq+0x1a0>
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	3310      	adds	r3, #16
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	4413      	add	r3, r2
 800908c:	3304      	adds	r3, #4
 800908e:	e00a      	b.n	80090a6 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2202      	movs	r2, #2
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fb8c 	bl	80097d2 <USBD_CtlSendData>
          break;
 80090ba:	e069      	b.n	8009190 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80090bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	da11      	bge.n	80090e8 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	f003 020f 	and.w	r2, r3, #15
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	3318      	adds	r3, #24
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d117      	bne.n	800910e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fb0c 	bl	80096fe <USBD_CtlError>
            break;
 80090e6:	e053      	b.n	8009190 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	f003 020f 	and.w	r2, r3, #15
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 faf9 	bl	80096fe <USBD_CtlError>
            break;
 800910c:	e040      	b.n	8009190 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800910e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009112:	2b00      	cmp	r3, #0
 8009114:	da0b      	bge.n	800912e <USBD_StdEPReq+0x23e>
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	3310      	adds	r3, #16
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	e00a      	b.n	8009144 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	4413      	add	r3, r2
 8009144:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <USBD_StdEPReq+0x262>
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b80      	cmp	r3, #128	; 0x80
 8009150:	d103      	bne.n	800915a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e00e      	b.n	8009178 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fee4 	bl	8009f2c <USBD_LL_IsStallEP>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2201      	movs	r2, #1
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	e002      	b.n	8009178 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2202      	movs	r2, #2
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fb27 	bl	80097d2 <USBD_CtlSendData>
          break;
 8009184:	e004      	b.n	8009190 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fab8 	bl	80096fe <USBD_CtlError>
        break;
 800918e:	bf00      	nop
      }
      break;
 8009190:	e004      	b.n	800919c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fab2 	bl	80096fe <USBD_CtlError>
      break;
 800919a:	bf00      	nop
    }
    break;
 800919c:	e004      	b.n	80091a8 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 faac 	bl	80096fe <USBD_CtlError>
    break;
 80091a6:	bf00      	nop
  }

  return ret;
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	f200 80c9 	bhi.w	8009360 <USBD_GetDescriptor+0x1ac>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBD_GetDescriptor+0x20>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091f1 	.word	0x080091f1
 80091d8:	08009209 	.word	0x08009209
 80091dc:	08009249 	.word	0x08009249
 80091e0:	08009361 	.word	0x08009361
 80091e4:	08009361 	.word	0x08009361
 80091e8:	0800930d 	.word	0x0800930d
 80091ec:	08009333 	.word	0x08009333
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 010a 	add.w	r1, r7, #10
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
    break;
 8009206:	e0b0      	b.n	800936a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7c1b      	ldrb	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10d      	bne.n	800922c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f107 020a 	add.w	r2, r7, #10
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800922a:	e09e      	b.n	800936a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	f107 020a 	add.w	r2, r7, #10
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	2202      	movs	r2, #2
 8009244:	701a      	strb	r2, [r3, #0]
    break;
 8009246:	e090      	b.n	800936a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	885b      	ldrh	r3, [r3, #2]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b05      	cmp	r3, #5
 8009250:	d856      	bhi.n	8009300 <USBD_GetDescriptor+0x14c>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USBD_GetDescriptor+0xa4>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009289 	.word	0x08009289
 8009260:	080092a1 	.word	0x080092a1
 8009264:	080092b9 	.word	0x080092b9
 8009268:	080092d1 	.word	0x080092d1
 800926c:	080092e9 	.word	0x080092e9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	7c12      	ldrb	r2, [r2, #16]
 800927c:	f107 010a 	add.w	r1, r7, #10
 8009280:	4610      	mov	r0, r2
 8009282:	4798      	blx	r3
 8009284:	60f8      	str	r0, [r7, #12]
      break;
 8009286:	e040      	b.n	800930a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	7c12      	ldrb	r2, [r2, #16]
 8009294:	f107 010a 	add.w	r1, r7, #10
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
      break;
 800929e:	e034      	b.n	800930a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	7c12      	ldrb	r2, [r2, #16]
 80092ac:	f107 010a 	add.w	r1, r7, #10
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	60f8      	str	r0, [r7, #12]
      break;
 80092b6:	e028      	b.n	800930a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	7c12      	ldrb	r2, [r2, #16]
 80092c4:	f107 010a 	add.w	r1, r7, #10
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
 80092cc:	60f8      	str	r0, [r7, #12]
      break;
 80092ce:	e01c      	b.n	800930a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	7c12      	ldrb	r2, [r2, #16]
 80092dc:	f107 010a 	add.w	r1, r7, #10
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
      break;
 80092e6:	e010      	b.n	800930a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 010a 	add.w	r1, r7, #10
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
      break;
 80092fe:	e004      	b.n	800930a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f9fb 	bl	80096fe <USBD_CtlError>
      return;
 8009308:	e04b      	b.n	80093a2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800930a:	e02e      	b.n	800936a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7c1b      	ldrb	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	f107 020a 	add.w	r2, r7, #10
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
      break;
 8009326:	e020      	b.n	800936a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9e7 	bl	80096fe <USBD_CtlError>
      return;
 8009330:	e037      	b.n	80093a2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7c1b      	ldrb	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10d      	bne.n	8009356 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	f107 020a 	add.w	r2, r7, #10
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
 800934a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	2207      	movs	r2, #7
 8009352:	701a      	strb	r2, [r3, #0]
      break;
 8009354:	e009      	b.n	800936a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9d0 	bl	80096fe <USBD_CtlError>
      return;
 800935e:	e020      	b.n	80093a2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9cb 	bl	80096fe <USBD_CtlError>
    return;
 8009368:	e01b      	b.n	80093a2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800936a:	897b      	ldrh	r3, [r7, #10]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d011      	beq.n	8009394 <USBD_GetDescriptor+0x1e0>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	88db      	ldrh	r3, [r3, #6]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00d      	beq.n	8009394 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	88da      	ldrh	r2, [r3, #6]
 800937c:	897b      	ldrh	r3, [r7, #10]
 800937e:	4293      	cmp	r3, r2
 8009380:	bf28      	it	cs
 8009382:	4613      	movcs	r3, r2
 8009384:	b29b      	uxth	r3, r3
 8009386:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009388:	897b      	ldrh	r3, [r7, #10]
 800938a:	461a      	mov	r2, r3
 800938c:	68f9      	ldr	r1, [r7, #12]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa1f 	bl	80097d2 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa76 	bl	800988e <USBD_CtlSendStatus>
  }
}
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	889b      	ldrh	r3, [r3, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d130      	bne.n	800941c <USBD_SetAddress+0x74>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	88db      	ldrh	r3, [r3, #6]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d12c      	bne.n	800941c <USBD_SetAddress+0x74>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	885b      	ldrh	r3, [r3, #2]
 80093c6:	2b7f      	cmp	r3, #127	; 0x7f
 80093c8:	d828      	bhi.n	800941c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d104      	bne.n	80093ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f98b 	bl	80096fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e8:	e01d      	b.n	8009426 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7bfa      	ldrb	r2, [r7, #15]
 80093ee:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fdc4 	bl	8009f84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa46 	bl	800988e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009410:	e009      	b.n	8009426 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941a:	e004      	b.n	8009426 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f96d 	bl	80096fe <USBD_CtlError>
  }
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	b2da      	uxtb	r2, r3
 8009440:	4b41      	ldr	r3, [pc, #260]	; (8009548 <USBD_SetConfig+0x118>)
 8009442:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009444:	4b40      	ldr	r3, [pc, #256]	; (8009548 <USBD_SetConfig+0x118>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d904      	bls.n	8009456 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f955 	bl	80096fe <USBD_CtlError>
 8009454:	e075      	b.n	8009542 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800945c:	2b02      	cmp	r3, #2
 800945e:	d002      	beq.n	8009466 <USBD_SetConfig+0x36>
 8009460:	2b03      	cmp	r3, #3
 8009462:	d023      	beq.n	80094ac <USBD_SetConfig+0x7c>
 8009464:	e062      	b.n	800952c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009466:	4b38      	ldr	r3, [pc, #224]	; (8009548 <USBD_SetConfig+0x118>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01a      	beq.n	80094a4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800946e:	4b36      	ldr	r3, [pc, #216]	; (8009548 <USBD_SetConfig+0x118>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2203      	movs	r2, #3
 800947c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009480:	4b31      	ldr	r3, [pc, #196]	; (8009548 <USBD_SetConfig+0x118>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fa5c 	bl	8008944 <USBD_SetClassConfig>
 800948c:	4603      	mov	r3, r0
 800948e:	2b02      	cmp	r3, #2
 8009490:	d104      	bne.n	800949c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f932 	bl	80096fe <USBD_CtlError>
          return;
 800949a:	e052      	b.n	8009542 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9f6 	bl	800988e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80094a2:	e04e      	b.n	8009542 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9f2 	bl	800988e <USBD_CtlSendStatus>
      break;
 80094aa:	e04a      	b.n	8009542 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094ac:	4b26      	ldr	r3, [pc, #152]	; (8009548 <USBD_SetConfig+0x118>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d112      	bne.n	80094da <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80094bc:	4b22      	ldr	r3, [pc, #136]	; (8009548 <USBD_SetConfig+0x118>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80094c6:	4b20      	ldr	r3, [pc, #128]	; (8009548 <USBD_SetConfig+0x118>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fa58 	bl	8008982 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f9db 	bl	800988e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80094d8:	e033      	b.n	8009542 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80094da:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <USBD_SetConfig+0x118>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d01d      	beq.n	8009524 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fa46 	bl	8008982 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <USBD_SetConfig+0x118>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <USBD_SetConfig+0x118>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff fa1c 	bl	8008944 <USBD_SetClassConfig>
 800950c:	4603      	mov	r3, r0
 800950e:	2b02      	cmp	r3, #2
 8009510:	d104      	bne.n	800951c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8f2 	bl	80096fe <USBD_CtlError>
          return;
 800951a:	e012      	b.n	8009542 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f9b6 	bl	800988e <USBD_CtlSendStatus>
      break;
 8009522:	e00e      	b.n	8009542 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f9b2 	bl	800988e <USBD_CtlSendStatus>
      break;
 800952a:	e00a      	b.n	8009542 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f8e5 	bl	80096fe <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009534:	4b04      	ldr	r3, [pc, #16]	; (8009548 <USBD_SetConfig+0x118>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fa21 	bl	8008982 <USBD_ClrClassConfig>
      break;
 8009540:	bf00      	nop
    }
  }
}
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	2000035c 	.word	0x2000035c

0800954c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d004      	beq.n	8009568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8cc 	bl	80096fe <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009566:	e022      	b.n	80095ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800956e:	2b02      	cmp	r3, #2
 8009570:	dc02      	bgt.n	8009578 <USBD_GetConfig+0x2c>
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc03      	bgt.n	800957e <USBD_GetConfig+0x32>
 8009576:	e015      	b.n	80095a4 <USBD_GetConfig+0x58>
 8009578:	2b03      	cmp	r3, #3
 800957a:	d00b      	beq.n	8009594 <USBD_GetConfig+0x48>
 800957c:	e012      	b.n	80095a4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3308      	adds	r3, #8
 8009588:	2201      	movs	r2, #1
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f920 	bl	80097d2 <USBD_CtlSendData>
      break;
 8009592:	e00c      	b.n	80095ae <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	2201      	movs	r2, #1
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f918 	bl	80097d2 <USBD_CtlSendData>
      break;
 80095a2:	e004      	b.n	80095ae <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8a9 	bl	80096fe <USBD_CtlError>
      break;
 80095ac:	bf00      	nop
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d81e      	bhi.n	800960a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	88db      	ldrh	r3, [r3, #6]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d004      	beq.n	80095de <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f891 	bl	80096fe <USBD_CtlError>
      break;
 80095dc:	e01a      	b.n	8009614 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f043 0202 	orr.w	r2, r3, #2
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	330c      	adds	r3, #12
 80095fe:	2202      	movs	r2, #2
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f8e5 	bl	80097d2 <USBD_CtlSendData>
    break;
 8009608:	e004      	b.n	8009614 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f876 	bl	80096fe <USBD_CtlError>
    break;
 8009612:	bf00      	nop
  }
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d106      	bne.n	800963c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f929 	bl	800988e <USBD_CtlSendStatus>
  }

}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009654:	3b01      	subs	r3, #1
 8009656:	2b02      	cmp	r3, #2
 8009658:	d80b      	bhi.n	8009672 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d10c      	bne.n	800967c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f90f 	bl	800988e <USBD_CtlSendStatus>
    }
    break;
 8009670:	e004      	b.n	800967c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f842 	bl	80096fe <USBD_CtlError>
    break;
 800967a:	e000      	b.n	800967e <USBD_ClrFeature+0x3a>
    break;
 800967c:	bf00      	nop
  }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785a      	ldrb	r2, [r3, #1]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	3302      	adds	r3, #2
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	3303      	adds	r3, #3
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4413      	add	r3, r2
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	3304      	adds	r3, #4
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	3305      	adds	r3, #5
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	3306      	adds	r3, #6
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29a      	uxth	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	3307      	adds	r3, #7
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4413      	add	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	80da      	strh	r2, [r3, #6]

}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009708:	2180      	movs	r1, #128	; 0x80
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fbd0 	bl	8009eb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fbcc 	bl	8009eb0 <USBD_LL_StallEP>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d032      	beq.n	800979c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f834 	bl	80097a4 <USBD_GetLen>
 800973c:	4603      	mov	r3, r0
 800973e:	3301      	adds	r3, #1
 8009740:	b29b      	uxth	r3, r3
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	75fa      	strb	r2, [r7, #23]
 8009750:	461a      	mov	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4413      	add	r3, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	75fa      	strb	r2, [r7, #23]
 8009762:	461a      	mov	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	2203      	movs	r2, #3
 800976a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800976c:	e012      	b.n	8009794 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	60fa      	str	r2, [r7, #12]
 8009774:	7dfa      	ldrb	r2, [r7, #23]
 8009776:	1c51      	adds	r1, r2, #1
 8009778:	75f9      	strb	r1, [r7, #23]
 800977a:	4611      	mov	r1, r2
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	440a      	add	r2, r1
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	75fa      	strb	r2, [r7, #23]
 800978a:	461a      	mov	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4413      	add	r3, r2
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e8      	bne.n	800976e <USBD_GetString+0x4e>
    }
  }
}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80097b0:	e005      	b.n	80097be <USBD_GetLen+0x1a>
    {
        len++;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	3301      	adds	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3301      	adds	r3, #1
 80097bc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f5      	bne.n	80097b2 <USBD_GetLen+0xe>
    }

    return len;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	4613      	mov	r3, r2
 80097de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80097e8:	88fa      	ldrh	r2, [r7, #6]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	2100      	movs	r1, #0
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 fbe1 	bl	8009fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	4613      	mov	r3, r2
 8009816:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	2100      	movs	r1, #0
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fbcf 	bl	8009fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	4613      	mov	r3, r2
 800983a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2203      	movs	r2, #3
 8009840:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009844:	88fa      	ldrh	r2, [r7, #6]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800984c:	88fa      	ldrh	r2, [r7, #6]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	2100      	movs	r1, #0
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 fbd4 	bl	800a008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	4613      	mov	r3, r2
 8009876:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fbc2 	bl	800a008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2204      	movs	r2, #4
 800989a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800989e:	2300      	movs	r3, #0
 80098a0:	2200      	movs	r2, #0
 80098a2:	2100      	movs	r1, #0
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fb8c 	bl	8009fc2 <USBD_LL_Transmit>

  return USBD_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2205      	movs	r2, #5
 80098c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80098c4:	2300      	movs	r3, #0
 80098c6:	2200      	movs	r2, #0
 80098c8:	2100      	movs	r1, #0
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fb9c 	bl	800a008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098e0:	2200      	movs	r2, #0
 80098e2:	4912      	ldr	r1, [pc, #72]	; (800992c <MX_USB_DEVICE_Init+0x50>)
 80098e4:	4812      	ldr	r0, [pc, #72]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 80098e6:	f7fe ffd3 	bl	8008890 <USBD_Init>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098f0:	f7f7 fc36 	bl	8001160 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80098f4:	490f      	ldr	r1, [pc, #60]	; (8009934 <MX_USB_DEVICE_Init+0x58>)
 80098f6:	480e      	ldr	r0, [pc, #56]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 80098f8:	f7fe fff5 	bl	80088e6 <USBD_RegisterClass>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009902:	f7f7 fc2d 	bl	8001160 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009906:	490c      	ldr	r1, [pc, #48]	; (8009938 <MX_USB_DEVICE_Init+0x5c>)
 8009908:	4809      	ldr	r0, [pc, #36]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 800990a:	f7fe ffab 	bl	8008864 <USBD_CUSTOM_HID_RegisterInterface>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009914:	f7f7 fc24 	bl	8001160 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009918:	4805      	ldr	r0, [pc, #20]	; (8009930 <MX_USB_DEVICE_Init+0x54>)
 800991a:	f7fe fffd 	bl	8008918 <USBD_Start>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009924:	f7f7 fc1c 	bl	8001160 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20000134 	.word	0x20000134
 8009930:	20000360 	.word	0x20000360
 8009934:	2000000c 	.word	0x2000000c
 8009938:	20000124 	.word	0x20000124

0800993c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009940:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009942:	4618      	mov	r0, r3
 8009944:	46bd      	mov	sp, r7
 8009946:	bc80      	pop	{r7}
 8009948:	4770      	bx	lr

0800994a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800994a:	b480      	push	{r7}
 800994c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800994e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009950:	4618      	mov	r0, r3
 8009952:	46bd      	mov	sp, r7
 8009954:	bc80      	pop	{r7}
 8009956:	4770      	bx	lr

08009958 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	460a      	mov	r2, r1
 8009962:	71fb      	strb	r3, [r7, #7]
 8009964:	4613      	mov	r3, r2
 8009966:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009968:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2212      	movs	r2, #18
 8009984:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	bc80      	pop	{r7}
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000150 	.word	0x20000150

08009998 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2204      	movs	r2, #4
 80099a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000164 	.word	0x20000164

080099bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4907      	ldr	r1, [pc, #28]	; (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099d2:	4808      	ldr	r0, [pc, #32]	; (80099f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099d4:	f7ff fea4 	bl	8009720 <USBD_GetString>
 80099d8:	e004      	b.n	80099e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4904      	ldr	r1, [pc, #16]	; (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099de:	4805      	ldr	r0, [pc, #20]	; (80099f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099e0:	f7ff fe9e 	bl	8009720 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099e4:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200005fc 	.word	0x200005fc
 80099f4:	0800a160 	.word	0x0800a160

080099f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	4904      	ldr	r1, [pc, #16]	; (8009a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a08:	4804      	ldr	r0, [pc, #16]	; (8009a1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a0a:	f7ff fe89 	bl	8009720 <USBD_GetString>
  return USBD_StrDesc;
 8009a0e:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	200005fc 	.word	0x200005fc
 8009a1c:	0800a180 	.word	0x0800a180

08009a20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	221a      	movs	r2, #26
 8009a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a32:	f000 f843 	bl	8009abc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a36:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000168 	.word	0x20000168

08009a44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4907      	ldr	r1, [pc, #28]	; (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5a:	4808      	ldr	r0, [pc, #32]	; (8009a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a5c:	f7ff fe60 	bl	8009720 <USBD_GetString>
 8009a60:	e004      	b.n	8009a6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4904      	ldr	r1, [pc, #16]	; (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a68:	f7ff fe5a 	bl	8009720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	200005fc 	.word	0x200005fc
 8009a7c:	0800a194 	.word	0x0800a194

08009a80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d105      	bne.n	8009a9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4907      	ldr	r1, [pc, #28]	; (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a96:	4808      	ldr	r0, [pc, #32]	; (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a98:	f7ff fe42 	bl	8009720 <USBD_GetString>
 8009a9c:	e004      	b.n	8009aa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4904      	ldr	r1, [pc, #16]	; (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009aa4:	f7ff fe3c 	bl	8009720 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	200005fc 	.word	0x200005fc
 8009ab8:	0800a1a8 	.word	0x0800a1a8

08009abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <Get_SerialNum+0x44>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <Get_SerialNum+0x48>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <Get_SerialNum+0x4c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	4909      	ldr	r1, [pc, #36]	; (8009b0c <Get_SerialNum+0x50>)
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f814 	bl	8009b14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009aec:	2204      	movs	r2, #4
 8009aee:	4908      	ldr	r1, [pc, #32]	; (8009b10 <Get_SerialNum+0x54>)
 8009af0:	68b8      	ldr	r0, [r7, #8]
 8009af2:	f000 f80f 	bl	8009b14 <IntToUnicode>
  }
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	1ff80050 	.word	0x1ff80050
 8009b04:	1ff80054 	.word	0x1ff80054
 8009b08:	1ff80058 	.word	0x1ff80058
 8009b0c:	2000016a 	.word	0x2000016a
 8009b10:	2000017a 	.word	0x2000017a

08009b14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
 8009b2a:	e027      	b.n	8009b7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	0f1b      	lsrs	r3, r3, #28
 8009b30:	2b09      	cmp	r3, #9
 8009b32:	d80b      	bhi.n	8009b4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	0f1b      	lsrs	r3, r3, #28
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	440b      	add	r3, r1
 8009b44:	3230      	adds	r2, #48	; 0x30
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e00a      	b.n	8009b62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	0f1b      	lsrs	r3, r3, #28
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4619      	mov	r1, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	440b      	add	r3, r1
 8009b5c:	3237      	adds	r2, #55	; 0x37
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b68:	7dfb      	ldrb	r3, [r7, #23]
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
 8009b7c:	7dfa      	ldrb	r2, [r7, #23]
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d3d3      	bcc.n	8009b2c <IntToUnicode+0x18>
  }
}
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d106      	bne.n	8009bb0 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009ba8:	f043 0301 	orr.w	r3, r3, #1
 8009bac:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009bae:	e005      	b.n	8009bbc <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <HAL_PCDEx_SetConnectionState+0x38>)
 8009bb6:	f023 0301 	bic.w	r3, r3, #1
 8009bba:	6053      	str	r3, [r2, #4]
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bc80      	pop	{r7}
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010000 	.word	0x40010000

08009bcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a0d      	ldr	r2, [pc, #52]	; (8009c10 <HAL_PCD_MspInit+0x44>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d113      	bne.n	8009c06 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009bde:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <HAL_PCD_MspInit+0x48>)
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	4a0c      	ldr	r2, [pc, #48]	; (8009c14 <HAL_PCD_MspInit+0x48>)
 8009be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009be8:	6253      	str	r3, [r2, #36]	; 0x24
 8009bea:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <HAL_PCD_MspInit+0x48>)
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	2014      	movs	r0, #20
 8009bfc:	f7f8 fc0d 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009c00:	2014      	movs	r0, #20
 8009c02:	f7f8 fc26 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40005c00 	.word	0x40005c00
 8009c14:	40023800 	.word	0x40023800

08009c18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f7fe feba 	bl	80089a8 <USBD_LL_SetupStage>
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	440b      	add	r3, r1
 8009c5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7fe feec 	bl	8008a42 <USBD_LL_DataOutStage>
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	440b      	add	r3, r1
 8009c92:	333c      	adds	r3, #60	; 0x3c
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	78fb      	ldrb	r3, [r7, #3]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f7fe ff43 	bl	8008b24 <USBD_LL_DataInStage>
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff f84e 	bl	8008d56 <USBD_LL_SOF>
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d001      	beq.n	8009cda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cd6:	f7f7 fa43 	bl	8001160 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ce0:	7bfa      	ldrb	r2, [r7, #15]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff f803 	bl	8008cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe ffbc 	bl	8008c6e <USBD_LL_Reset>
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fffd 	bl	8008d0e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d1c:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <HAL_PCD_SuspendCallback+0x30>)
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	4a03      	ldr	r2, [pc, #12]	; (8009d30 <HAL_PCD_SuspendCallback+0x30>)
 8009d22:	f043 0306 	orr.w	r3, r3, #6
 8009d26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	e000ed00 	.word	0xe000ed00

08009d34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fff7 	bl	8008d36 <USBD_LL_Resume>
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d58:	4a23      	ldr	r2, [pc, #140]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a21      	ldr	r2, [pc, #132]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009d68:	4b1f      	ldr	r3, [pc, #124]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d6a:	4a20      	ldr	r2, [pc, #128]	; (8009dec <USBD_LL_Init+0x9c>)
 8009d6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d70:	2208      	movs	r2, #8
 8009d72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d76:	2202      	movs	r2, #2
 8009d78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d7a:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d8c:	4816      	ldr	r0, [pc, #88]	; (8009de8 <USBD_LL_Init+0x98>)
 8009d8e:	f7f8 fe91 	bl	8002ab4 <HAL_PCD_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d98:	f7f7 f9e2 	bl	8001160 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009da2:	2318      	movs	r3, #24
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	f7fa fa57 	bl	800425a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009db2:	2358      	movs	r3, #88	; 0x58
 8009db4:	2200      	movs	r2, #0
 8009db6:	2180      	movs	r1, #128	; 0x80
 8009db8:	f7fa fa4f 	bl	800425a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009dc2:	2398      	movs	r3, #152	; 0x98
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2181      	movs	r1, #129	; 0x81
 8009dc8:	f7fa fa47 	bl	800425a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009dd2:	23d8      	movs	r3, #216	; 0xd8
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	f7fa fa3f 	bl	800425a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200007fc 	.word	0x200007fc
 8009dec:	40005c00 	.word	0x40005c00

08009df0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f8 ff32 	bl	8002c70 <HAL_PCD_Start>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f932 	bl	800a07c <USBD_Get_USB_Status>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	461a      	mov	r2, r3
 8009e34:	4603      	mov	r3, r0
 8009e36:	70fb      	strb	r3, [r7, #3]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70bb      	strb	r3, [r7, #2]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009e4e:	78bb      	ldrb	r3, [r7, #2]
 8009e50:	883a      	ldrh	r2, [r7, #0]
 8009e52:	78f9      	ldrb	r1, [r7, #3]
 8009e54:	f7f9 f84e 	bl	8002ef4 <HAL_PCD_EP_Open>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f90c 	bl	800a07c <USBD_Get_USB_Status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7f9 f895 	bl	8002fc0 <HAL_PCD_EP_Close>
 8009e96:	4603      	mov	r3, r0
 8009e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f8ed 	bl	800a07c <USBD_Get_USB_Status>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009eca:	78fa      	ldrb	r2, [r7, #3]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7f9 f93e 	bl	8003150 <HAL_PCD_EP_SetStall>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f8ce 	bl	800a07c <USBD_Get_USB_Status>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f08:	78fa      	ldrb	r2, [r7, #3]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7f9 f971 	bl	80031f4 <HAL_PCD_EP_ClrStall>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 f8af 	bl	800a07c <USBD_Get_USB_Status>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	da0c      	bge.n	8009f62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	e00b      	b.n	8009f7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	440b      	add	r3, r1
 8009f74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f78:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bc80      	pop	{r7}
 8009f82:	4770      	bx	lr

08009f84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f9e:	78fa      	ldrb	r2, [r7, #3]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f8 ff81 	bl	8002eaa <HAL_PCD_SetAddress>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f864 	bl	800a07c <USBD_Get_USB_Status>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b086      	sub	sp, #24
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	460b      	mov	r3, r1
 8009fd0:	72fb      	strb	r3, [r7, #11]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009fe4:	893b      	ldrh	r3, [r7, #8]
 8009fe6:	7af9      	ldrb	r1, [r7, #11]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	f7f9 f86e 	bl	80030ca <HAL_PCD_EP_Transmit>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 f841 	bl	800a07c <USBD_Get_USB_Status>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ffe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	461a      	mov	r2, r3
 800a014:	460b      	mov	r3, r1
 800a016:	72fb      	strb	r3, [r7, #11]
 800a018:	4613      	mov	r3, r2
 800a01a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a02a:	893b      	ldrh	r3, [r7, #8]
 800a02c:	7af9      	ldrb	r1, [r7, #11]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	f7f9 f80e 	bl	8003050 <HAL_PCD_EP_Receive>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f81e 	bl	800a07c <USBD_Get_USB_Status>
 800a040:	4603      	mov	r3, r0
 800a042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a044:	7dbb      	ldrb	r3, [r7, #22]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a058:	4b02      	ldr	r3, [pc, #8]	; (800a064 <USBD_static_malloc+0x14>)
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	bc80      	pop	{r7}
 800a062:	4770      	bx	lr
 800a064:	20000ae8 	.word	0x20000ae8

0800a068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
	...

0800a07c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d817      	bhi.n	800a0c0 <USBD_Get_USB_Status+0x44>
 800a090:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <USBD_Get_USB_Status+0x1c>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a0a9 	.word	0x0800a0a9
 800a09c:	0800a0af 	.word	0x0800a0af
 800a0a0:	0800a0b5 	.word	0x0800a0b5
 800a0a4:	0800a0bb 	.word	0x0800a0bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ac:	e00b      	b.n	800a0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b2:	e008      	b.n	800a0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b8:	e005      	b.n	800a0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0be:	e002      	b.n	800a0c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c4:	bf00      	nop
  }
  return usb_status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bc80      	pop	{r7}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop

0800a0d4 <__libc_init_array>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	4d0c      	ldr	r5, [pc, #48]	; (800a10c <__libc_init_array+0x38>)
 800a0da:	4c0d      	ldr	r4, [pc, #52]	; (800a110 <__libc_init_array+0x3c>)
 800a0dc:	1b64      	subs	r4, r4, r5
 800a0de:	10a4      	asrs	r4, r4, #2
 800a0e0:	42a6      	cmp	r6, r4
 800a0e2:	d109      	bne.n	800a0f8 <__libc_init_array+0x24>
 800a0e4:	f000 f830 	bl	800a148 <_init>
 800a0e8:	2600      	movs	r6, #0
 800a0ea:	4d0a      	ldr	r5, [pc, #40]	; (800a114 <__libc_init_array+0x40>)
 800a0ec:	4c0a      	ldr	r4, [pc, #40]	; (800a118 <__libc_init_array+0x44>)
 800a0ee:	1b64      	subs	r4, r4, r5
 800a0f0:	10a4      	asrs	r4, r4, #2
 800a0f2:	42a6      	cmp	r6, r4
 800a0f4:	d105      	bne.n	800a102 <__libc_init_array+0x2e>
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fc:	4798      	blx	r3
 800a0fe:	3601      	adds	r6, #1
 800a100:	e7ee      	b.n	800a0e0 <__libc_init_array+0xc>
 800a102:	f855 3b04 	ldr.w	r3, [r5], #4
 800a106:	4798      	blx	r3
 800a108:	3601      	adds	r6, #1
 800a10a:	e7f2      	b.n	800a0f2 <__libc_init_array+0x1e>
 800a10c:	0800a1e4 	.word	0x0800a1e4
 800a110:	0800a1e4 	.word	0x0800a1e4
 800a114:	0800a1e4 	.word	0x0800a1e4
 800a118:	0800a1e8 	.word	0x0800a1e8

0800a11c <memcpy>:
 800a11c:	440a      	add	r2, r1
 800a11e:	4291      	cmp	r1, r2
 800a120:	f100 33ff 	add.w	r3, r0, #4294967295
 800a124:	d100      	bne.n	800a128 <memcpy+0xc>
 800a126:	4770      	bx	lr
 800a128:	b510      	push	{r4, lr}
 800a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12e:	4291      	cmp	r1, r2
 800a130:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a134:	d1f9      	bne.n	800a12a <memcpy+0xe>
 800a136:	bd10      	pop	{r4, pc}

0800a138 <memset>:
 800a138:	4603      	mov	r3, r0
 800a13a:	4402      	add	r2, r0
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d100      	bne.n	800a142 <memset+0xa>
 800a140:	4770      	bx	lr
 800a142:	f803 1b01 	strb.w	r1, [r3], #1
 800a146:	e7f9      	b.n	800a13c <memset+0x4>

0800a148 <_init>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	bf00      	nop
 800a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14e:	bc08      	pop	{r3}
 800a150:	469e      	mov	lr, r3
 800a152:	4770      	bx	lr

0800a154 <_fini>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr
