
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f70  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a130  0800a130  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000184  0800a2bc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800a2bc  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013544  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343a  00000000  00000000  000336f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00036b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00037b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ceb  00000000  00000000  00038a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153be  00000000  00000000  00050713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f5d  00000000  00000000  00065ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eca2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  000eca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000184 	.word	0x20000184
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a094 	.word	0x0800a094

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000188 	.word	0x20000188
 8000178:	0800a094 	.word	0x0800a094

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2iz>:
 8000724:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30f      	bcc.n	800074e <__aeabi_f2iz+0x2a>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d90d      	bls.n	8000754 <__aeabi_f2iz+0x30>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000744:	fa23 f002 	lsr.w	r0, r3, r2
 8000748:	bf18      	it	ne
 800074a:	4240      	negne	r0, r0
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2iz+0x3a>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d105      	bne.n	800076a <__aeabi_f2iz+0x46>
 800075e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000762:	bf08      	it	eq
 8000764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <__aeabi_f2uiz>:
 8000770:	0042      	lsls	r2, r0, #1
 8000772:	d20e      	bcs.n	8000792 <__aeabi_f2uiz+0x22>
 8000774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000778:	d30b      	bcc.n	8000792 <__aeabi_f2uiz+0x22>
 800077a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800077e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000782:	d409      	bmi.n	8000798 <__aeabi_f2uiz+0x28>
 8000784:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078c:	fa23 f002 	lsr.w	r0, r3, r2
 8000790:	4770      	bx	lr
 8000792:	f04f 0000 	mov.w	r0, #0
 8000796:	4770      	bx	lr
 8000798:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800079c:	d101      	bne.n	80007a2 <__aeabi_f2uiz+0x32>
 800079e:	0242      	lsls	r2, r0, #9
 80007a0:	d102      	bne.n	80007a8 <__aeabi_f2uiz+0x38>
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_uldivmod>:
 80007b0:	b953      	cbnz	r3, 80007c8 <__aeabi_uldivmod+0x18>
 80007b2:	b94a      	cbnz	r2, 80007c8 <__aeabi_uldivmod+0x18>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	bf08      	it	eq
 80007b8:	2800      	cmpeq	r0, #0
 80007ba:	bf1c      	itt	ne
 80007bc:	f04f 31ff 	movne.w	r1, #4294967295
 80007c0:	f04f 30ff 	movne.w	r0, #4294967295
 80007c4:	f000 b976 	b.w	8000ab4 <__aeabi_idiv0>
 80007c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d0:	f000 f806 	bl	80007e0 <__udivmoddi4>
 80007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <__udivmoddi4>:
 80007e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007e4:	9e08      	ldr	r6, [sp, #32]
 80007e6:	460d      	mov	r5, r1
 80007e8:	4604      	mov	r4, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d14d      	bne.n	800088c <__udivmoddi4+0xac>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	4694      	mov	ip, r2
 80007f4:	d968      	bls.n	80008c8 <__udivmoddi4+0xe8>
 80007f6:	fab2 f282 	clz	r2, r2
 80007fa:	b152      	cbz	r2, 8000812 <__udivmoddi4+0x32>
 80007fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000800:	f1c2 0120 	rsb	r1, r2, #32
 8000804:	fa20 f101 	lsr.w	r1, r0, r1
 8000808:	fa0c fc02 	lsl.w	ip, ip, r2
 800080c:	ea41 0803 	orr.w	r8, r1, r3
 8000810:	4094      	lsls	r4, r2
 8000812:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000816:	fbb8 f7f1 	udiv	r7, r8, r1
 800081a:	fa1f fe8c 	uxth.w	lr, ip
 800081e:	fb01 8817 	mls	r8, r1, r7, r8
 8000822:	fb07 f00e 	mul.w	r0, r7, lr
 8000826:	0c23      	lsrs	r3, r4, #16
 8000828:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082c:	4298      	cmp	r0, r3
 800082e:	d90a      	bls.n	8000846 <__udivmoddi4+0x66>
 8000830:	eb1c 0303 	adds.w	r3, ip, r3
 8000834:	f107 35ff 	add.w	r5, r7, #4294967295
 8000838:	f080 811e 	bcs.w	8000a78 <__udivmoddi4+0x298>
 800083c:	4298      	cmp	r0, r3
 800083e:	f240 811b 	bls.w	8000a78 <__udivmoddi4+0x298>
 8000842:	3f02      	subs	r7, #2
 8000844:	4463      	add	r3, ip
 8000846:	1a1b      	subs	r3, r3, r0
 8000848:	fbb3 f0f1 	udiv	r0, r3, r1
 800084c:	fb01 3310 	mls	r3, r1, r0, r3
 8000850:	fb00 fe0e 	mul.w	lr, r0, lr
 8000854:	b2a4      	uxth	r4, r4
 8000856:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800085a:	45a6      	cmp	lr, r4
 800085c:	d90a      	bls.n	8000874 <__udivmoddi4+0x94>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f100 33ff 	add.w	r3, r0, #4294967295
 8000866:	f080 8109 	bcs.w	8000a7c <__udivmoddi4+0x29c>
 800086a:	45a6      	cmp	lr, r4
 800086c:	f240 8106 	bls.w	8000a7c <__udivmoddi4+0x29c>
 8000870:	4464      	add	r4, ip
 8000872:	3802      	subs	r0, #2
 8000874:	2100      	movs	r1, #0
 8000876:	eba4 040e 	sub.w	r4, r4, lr
 800087a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800087e:	b11e      	cbz	r6, 8000888 <__udivmoddi4+0xa8>
 8000880:	2300      	movs	r3, #0
 8000882:	40d4      	lsrs	r4, r2
 8000884:	e9c6 4300 	strd	r4, r3, [r6]
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0xc2>
 8000890:	2e00      	cmp	r6, #0
 8000892:	f000 80ee 	beq.w	8000a72 <__udivmoddi4+0x292>
 8000896:	2100      	movs	r1, #0
 8000898:	e9c6 0500 	strd	r0, r5, [r6]
 800089c:	4608      	mov	r0, r1
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	fab3 f183 	clz	r1, r3
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d14a      	bne.n	8000940 <__udivmoddi4+0x160>
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	d302      	bcc.n	80008b4 <__udivmoddi4+0xd4>
 80008ae:	4282      	cmp	r2, r0
 80008b0:	f200 80fc 	bhi.w	8000aac <__udivmoddi4+0x2cc>
 80008b4:	1a84      	subs	r4, r0, r2
 80008b6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	4698      	mov	r8, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0e2      	beq.n	8000888 <__udivmoddi4+0xa8>
 80008c2:	e9c6 4800 	strd	r4, r8, [r6]
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0xa8>
 80008c8:	b902      	cbnz	r2, 80008cc <__udivmoddi4+0xec>
 80008ca:	deff      	udf	#255	; 0xff
 80008cc:	fab2 f282 	clz	r2, r2
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	f040 8091 	bne.w	80009f8 <__udivmoddi4+0x218>
 80008d6:	eba1 000c 	sub.w	r0, r1, ip
 80008da:	2101      	movs	r1, #1
 80008dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e0:	fa1f fe8c 	uxth.w	lr, ip
 80008e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80008e8:	fb07 0013 	mls	r0, r7, r3, r0
 80008ec:	0c25      	lsrs	r5, r4, #16
 80008ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008f2:	fb0e f003 	mul.w	r0, lr, r3
 80008f6:	42a8      	cmp	r0, r5
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x12c>
 80008fa:	eb1c 0505 	adds.w	r5, ip, r5
 80008fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x12a>
 8000904:	42a8      	cmp	r0, r5
 8000906:	f200 80ce 	bhi.w	8000aa6 <__udivmoddi4+0x2c6>
 800090a:	4643      	mov	r3, r8
 800090c:	1a2d      	subs	r5, r5, r0
 800090e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000912:	fb07 5510 	mls	r5, r7, r0, r5
 8000916:	fb0e fe00 	mul.w	lr, lr, r0
 800091a:	b2a4      	uxth	r4, r4
 800091c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000920:	45a6      	cmp	lr, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x156>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f100 35ff 	add.w	r5, r0, #4294967295
 800092c:	d202      	bcs.n	8000934 <__udivmoddi4+0x154>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f200 80b6 	bhi.w	8000aa0 <__udivmoddi4+0x2c0>
 8000934:	4628      	mov	r0, r5
 8000936:	eba4 040e 	sub.w	r4, r4, lr
 800093a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800093e:	e79e      	b.n	800087e <__udivmoddi4+0x9e>
 8000940:	f1c1 0720 	rsb	r7, r1, #32
 8000944:	408b      	lsls	r3, r1
 8000946:	fa22 fc07 	lsr.w	ip, r2, r7
 800094a:	ea4c 0c03 	orr.w	ip, ip, r3
 800094e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fbba f8f9 	udiv	r8, sl, r9
 800095a:	fa20 f307 	lsr.w	r3, r0, r7
 800095e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000962:	408d      	lsls	r5, r1
 8000964:	fa1f fe8c 	uxth.w	lr, ip
 8000968:	431d      	orrs	r5, r3
 800096a:	fa00 f301 	lsl.w	r3, r0, r1
 800096e:	fb08 f00e 	mul.w	r0, r8, lr
 8000972:	0c2c      	lsrs	r4, r5, #16
 8000974:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000978:	42a0      	cmp	r0, r4
 800097a:	fa02 f201 	lsl.w	r2, r2, r1
 800097e:	d90b      	bls.n	8000998 <__udivmoddi4+0x1b8>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f108 3aff 	add.w	sl, r8, #4294967295
 8000988:	f080 8088 	bcs.w	8000a9c <__udivmoddi4+0x2bc>
 800098c:	42a0      	cmp	r0, r4
 800098e:	f240 8085 	bls.w	8000a9c <__udivmoddi4+0x2bc>
 8000992:	f1a8 0802 	sub.w	r8, r8, #2
 8000996:	4464      	add	r4, ip
 8000998:	1a24      	subs	r4, r4, r0
 800099a:	fbb4 f0f9 	udiv	r0, r4, r9
 800099e:	fb09 4410 	mls	r4, r9, r0, r4
 80009a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a6:	b2ad      	uxth	r5, r5
 80009a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x1e2>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b8:	d26c      	bcs.n	8000a94 <__udivmoddi4+0x2b4>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	d96a      	bls.n	8000a94 <__udivmoddi4+0x2b4>
 80009be:	3802      	subs	r0, #2
 80009c0:	4464      	add	r4, ip
 80009c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009c6:	fba0 9502 	umull	r9, r5, r0, r2
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	46c8      	mov	r8, r9
 80009d2:	46ae      	mov	lr, r5
 80009d4:	d356      	bcc.n	8000a84 <__udivmoddi4+0x2a4>
 80009d6:	d053      	beq.n	8000a80 <__udivmoddi4+0x2a0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d069      	beq.n	8000ab0 <__udivmoddi4+0x2d0>
 80009dc:	ebb3 0208 	subs.w	r2, r3, r8
 80009e0:	eb64 040e 	sbc.w	r4, r4, lr
 80009e4:	fa22 f301 	lsr.w	r3, r2, r1
 80009e8:	fa04 f707 	lsl.w	r7, r4, r7
 80009ec:	431f      	orrs	r7, r3
 80009ee:	40cc      	lsrs	r4, r1
 80009f0:	e9c6 7400 	strd	r7, r4, [r6]
 80009f4:	2100      	movs	r1, #0
 80009f6:	e747      	b.n	8000888 <__udivmoddi4+0xa8>
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	f1c2 0120 	rsb	r1, r2, #32
 8000a00:	fa25 f301 	lsr.w	r3, r5, r1
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0c:	4095      	lsls	r5, r2
 8000a0e:	430d      	orrs	r5, r1
 8000a10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a14:	fb07 3311 	mls	r3, r7, r1, r3
 8000a18:	fa1f fe8c 	uxth.w	lr, ip
 8000a1c:	0c28      	lsrs	r0, r5, #16
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	fb01 f30e 	mul.w	r3, r1, lr
 8000a26:	4283      	cmp	r3, r0
 8000a28:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x260>
 8000a2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000a32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000a36:	d22f      	bcs.n	8000a98 <__udivmoddi4+0x2b8>
 8000a38:	4283      	cmp	r3, r0
 8000a3a:	d92d      	bls.n	8000a98 <__udivmoddi4+0x2b8>
 8000a3c:	3902      	subs	r1, #2
 8000a3e:	4460      	add	r0, ip
 8000a40:	1ac0      	subs	r0, r0, r3
 8000a42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000a46:	fb07 0013 	mls	r0, r7, r3, r0
 8000a4a:	b2ad      	uxth	r5, r5
 8000a4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a50:	fb03 f00e 	mul.w	r0, r3, lr
 8000a54:	42a8      	cmp	r0, r5
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x28a>
 8000a58:	eb1c 0505 	adds.w	r5, ip, r5
 8000a5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a60:	d216      	bcs.n	8000a90 <__udivmoddi4+0x2b0>
 8000a62:	42a8      	cmp	r0, r5
 8000a64:	d914      	bls.n	8000a90 <__udivmoddi4+0x2b0>
 8000a66:	3b02      	subs	r3, #2
 8000a68:	4465      	add	r5, ip
 8000a6a:	1a28      	subs	r0, r5, r0
 8000a6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a70:	e738      	b.n	80008e4 <__udivmoddi4+0x104>
 8000a72:	4631      	mov	r1, r6
 8000a74:	4630      	mov	r0, r6
 8000a76:	e707      	b.n	8000888 <__udivmoddi4+0xa8>
 8000a78:	462f      	mov	r7, r5
 8000a7a:	e6e4      	b.n	8000846 <__udivmoddi4+0x66>
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	e6f9      	b.n	8000874 <__udivmoddi4+0x94>
 8000a80:	454b      	cmp	r3, r9
 8000a82:	d2a9      	bcs.n	80009d8 <__udivmoddi4+0x1f8>
 8000a84:	ebb9 0802 	subs.w	r8, r9, r2
 8000a88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a8c:	3801      	subs	r0, #1
 8000a8e:	e7a3      	b.n	80009d8 <__udivmoddi4+0x1f8>
 8000a90:	4643      	mov	r3, r8
 8000a92:	e7ea      	b.n	8000a6a <__udivmoddi4+0x28a>
 8000a94:	4628      	mov	r0, r5
 8000a96:	e794      	b.n	80009c2 <__udivmoddi4+0x1e2>
 8000a98:	4641      	mov	r1, r8
 8000a9a:	e7d1      	b.n	8000a40 <__udivmoddi4+0x260>
 8000a9c:	46d0      	mov	r8, sl
 8000a9e:	e77b      	b.n	8000998 <__udivmoddi4+0x1b8>
 8000aa0:	4464      	add	r4, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	e747      	b.n	8000936 <__udivmoddi4+0x156>
 8000aa6:	3b02      	subs	r3, #2
 8000aa8:	4465      	add	r5, ip
 8000aaa:	e72f      	b.n	800090c <__udivmoddi4+0x12c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e706      	b.n	80008be <__udivmoddi4+0xde>
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e6e9      	b.n	8000888 <__udivmoddi4+0xa8>

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fe7c 	bl	80017ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f9b9 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fafd 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fadd 	bl	8001088 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f008 feb1 	bl	8009834 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ad2:	f000 fa69 	bl	8000fa8 <MX_TIM2_Init>
  MX_ADC_Init();
 8000ad6:	f000 f9ff 	bl	8000ed8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000ada:	4897      	ldr	r0, [pc, #604]	; (8000d38 <main+0x280>)
 8000adc:	f004 fa12 	bl	8004f04 <HAL_TIM_Base_Start>

	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4895      	ldr	r0, [pc, #596]	; (8000d38 <main+0x280>)
 8000ae4:	f004 fa98 	bl	8005018 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4893      	ldr	r0, [pc, #588]	; (8000d38 <main+0x280>)
 8000aec:	f004 fa94 	bl	8005018 <HAL_TIM_OC_Start_IT>

	joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000af0:	4c92      	ldr	r4, [pc, #584]	; (8000d3c <main+0x284>)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4a92      	ldr	r2, [pc, #584]	; (8000d40 <main+0x288>)
 8000af6:	4993      	ldr	r1, [pc, #588]	; (8000d44 <main+0x28c>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fcb1 	bl	8001460 <Joystick_Init>
 8000afe:	4625      	mov	r5, r4
 8000b00:	463c      	mov	r4, r7
 8000b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	for (uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b1c:	e009      	b.n	8000b32 <main+0x7a>
		event_state[i] = EVENT_WAIT;
 8000b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b22:	4a89      	ldr	r2, [pc, #548]	; (8000d48 <main+0x290>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++) {
 8000b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	daf1      	bge.n	8000b1e <main+0x66>
	}

	while (1)
	{
		switch (event_state[event_index_read]) 
 8000b3a:	4b84      	ldr	r3, [pc, #528]	; (8000d4c <main+0x294>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b81      	ldr	r3, [pc, #516]	; (8000d48 <main+0x290>)
 8000b42:	5c9b      	ldrb	r3, [r3, r2]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	f200 8130 	bhi.w	8000daa <main+0x2f2>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <main+0x98>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b8d 	.word	0x08000b8d
 8000b5c:	08000b95 	.word	0x08000b95
 8000b60:	08000d1f 	.word	0x08000d1f
		{
		case EVENT_WAIT:
			controller.buttons.a = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000b64:	2104      	movs	r1, #4
 8000b66:	487a      	ldr	r0, [pc, #488]	; (8000d50 <main+0x298>)
 8000b68:	f001 ffdc 	bl	8002b24 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a77      	ldr	r2, [pc, #476]	; (8000d54 <main+0x29c>)
 8000b76:	7853      	ldrb	r3, [r2, #1]
 8000b78:	f361 1304 	bfi	r3, r1, #4, #1
 8000b7c:	7053      	strb	r3, [r2, #1]
			break;
 8000b7e:	e114      	b.n	8000daa <main+0x2f2>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, 2); //Trigger Joystick ADC read
 8000b80:	2202      	movs	r2, #2
 8000b82:	4970      	ldr	r1, [pc, #448]	; (8000d44 <main+0x28c>)
 8000b84:	4874      	ldr	r0, [pc, #464]	; (8000d58 <main+0x2a0>)
 8000b86:	f000 ffcd 	bl	8001b24 <HAL_ADC_Start_DMA>
			break;
 8000b8a:	e10e      	b.n	8000daa <main+0x2f2>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fad1 	bl	8001134 <write_next_event_state>
			break;
 8000b92:	e10a      	b.n	8000daa <main+0x2f2>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b94:	4869      	ldr	r0, [pc, #420]	; (8000d3c <main+0x284>)
 8000b96:	f000 fcaf 	bl	80014f8 <Joystick_Update>
			uint8_t invert_x = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			uint8_t invert_y = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			float deadzone_x = 0.05f;
 8000ba6:	4b6d      	ldr	r3, [pc, #436]	; (8000d5c <main+0x2a4>)
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
			float deadzone_y = 0.05f;
 8000baa:	4b6c      	ldr	r3, [pc, #432]	; (8000d5c <main+0x2a4>)
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
			float val_x = invert_x ? -joystick.x.val : joystick.x.val;
 8000bae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x108>
 8000bb6:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <main+0x284>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	e001      	b.n	8000bc4 <main+0x10c>
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <main+0x284>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
			float val_y = invert_y ? -joystick.y.val : joystick.y.val;
 8000bc6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <main+0x120>
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <main+0x284>)
 8000bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	e001      	b.n	8000bdc <main+0x124>
 8000bd8:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <main+0x284>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
			controller.joysticks._bits[0] = 0;
 8000bde:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <main+0x29c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	805a      	strh	r2, [r3, #2]
			controller.joysticks._bits[1] = 0;
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <main+0x29c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	809a      	strh	r2, [r3, #4]
			if ((val_x > deadzone_x) || (val_x < -deadzone_x)) {
 8000bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bee:	f7ff fd8f 	bl	8000710 <__aeabi_fcmpgt>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <main+0x154>
 8000bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c02:	f7ff fd67 	bl	80006d4 <__aeabi_fcmplt>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <main+0x17c>
				controller.joysticks.left.y += (int16_t)(val_x * (float)INT16_MAX);
 8000c0c:	4b51      	ldr	r3, [pc, #324]	; (8000d54 <main+0x29c>)
 8000c0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c12:	b29c      	uxth	r4, r3
 8000c14:	4952      	ldr	r1, [pc, #328]	; (8000d60 <main+0x2a8>)
 8000c16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000c18:	f7ff fbbe 	bl	8000398 <__aeabi_fmul>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd80 	bl	8000724 <__aeabi_f2iz>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4423      	add	r3, r4
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <main+0x29c>)
 8000c32:	809a      	strh	r2, [r3, #4]
			}
			if ((val_y > deadzone_y) || (val_y < -deadzone_y)) {
 8000c34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c38:	f7ff fd6a 	bl	8000710 <__aeabi_fcmpgt>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <main+0x19e>
 8000c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c4c:	f7ff fd42 	bl	80006d4 <__aeabi_fcmplt>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d013      	beq.n	8000c7e <main+0x1c6>
				controller.joysticks.left.x += (int16_t)(val_y * (float)INT16_MAX);
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <main+0x29c>)
 8000c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c5c:	b29c      	uxth	r4, r3
 8000c5e:	4940      	ldr	r1, [pc, #256]	; (8000d60 <main+0x2a8>)
 8000c60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c62:	f7ff fb99 	bl	8000398 <__aeabi_fmul>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd5b 	bl	8000724 <__aeabi_f2iz>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	4423      	add	r3, r4
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <main+0x29c>)
 8000c7c:	805a      	strh	r2, [r3, #2]
			}
			hid_output_data.report_id = 1;
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <main+0x2ac>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
			hid_output_data.buttons[0] = lowByte(controller.buttons._bits);
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <main+0x29c>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <main+0x2ac>)
 8000c8c:	705a      	strb	r2, [r3, #1]
			hid_output_data.buttons[1] = highByte(controller.buttons._bits);
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <main+0x29c>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <main+0x2ac>)
 8000c9a:	709a      	strb	r2, [r3, #2]
			hid_output_data.joysticks[0] = lowByte(controller.joysticks.left.x);
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <main+0x29c>)
 8000c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <main+0x2ac>)
 8000ca6:	70da      	strb	r2, [r3, #3]
			hid_output_data.joysticks[1] = highByte(controller.joysticks.left.x);
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <main+0x29c>)
 8000caa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cae:	121b      	asrs	r3, r3, #8
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <main+0x2ac>)
 8000cb6:	711a      	strb	r2, [r3, #4]
			hid_output_data.joysticks[2] = lowByte(controller.joysticks.left.y);
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <main+0x29c>)
 8000cba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <main+0x2ac>)
 8000cc2:	715a      	strb	r2, [r3, #5]
			hid_output_data.joysticks[3] = highByte(controller.joysticks.left.y);
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <main+0x29c>)
 8000cc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cca:	121b      	asrs	r3, r3, #8
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <main+0x2ac>)
 8000cd2:	719a      	strb	r2, [r3, #6]
			hid_output_data.joysticks[4] = lowByte(controller.joysticks.right.x);
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <main+0x29c>)
 8000cd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <main+0x2ac>)
 8000cde:	71da      	strb	r2, [r3, #7]
			hid_output_data.joysticks[5] = highByte(controller.joysticks.right.x);
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <main+0x29c>)
 8000ce2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ce6:	121b      	asrs	r3, r3, #8
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <main+0x2ac>)
 8000cee:	721a      	strb	r2, [r3, #8]
			hid_output_data.joysticks[6] = lowByte(controller.joysticks.right.y);
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <main+0x29c>)
 8000cf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <main+0x2ac>)
 8000cfa:	725a      	strb	r2, [r3, #9]
			hid_output_data.joysticks[7] = highByte(controller.joysticks.right.y);
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <main+0x29c>)
 8000cfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d02:	121b      	asrs	r3, r3, #8
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <main+0x2ac>)
 8000d0a:	729a      	strb	r2, [r3, #10]
			hid_output_data.triggers[0] = controller.triggers.left;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <main+0x29c>)
 8000d0e:	7a9a      	ldrb	r2, [r3, #10]
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <main+0x2ac>)
 8000d12:	72da      	strb	r2, [r3, #11]
			hid_output_data.triggers[1] = controller.triggers.right;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x29c>)
 8000d16:	7ada      	ldrb	r2, [r3, #11]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <main+0x2ac>)
 8000d1a:	731a      	strb	r2, [r3, #12]
			break;
 8000d1c:	e045      	b.n	8000daa <main+0x2f2>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			if(USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&hid_output_data, sizeof(hid_output_data)) == USBD_OK)
 8000d1e:	220d      	movs	r2, #13
 8000d20:	4910      	ldr	r1, [pc, #64]	; (8000d64 <main+0x2ac>)
 8000d22:	4811      	ldr	r0, [pc, #68]	; (8000d68 <main+0x2b0>)
 8000d24:	f007 fc92 	bl	800864c <USBD_CUSTOM_HID_SendReport>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d120      	bne.n	8000d70 <main+0x2b8>
			{
				failed_tx = 0;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <main+0x2b4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	801a      	strh	r2, [r3, #0]
				//write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
				failed_tx++;
				failed_tx_max = (failed_tx > failed_tx_max) ? failed_tx : failed_tx_max;
				failed_tx_avg = (failed_tx_max + failed_tx) / 2;
			}
			break;
 8000d34:	e038      	b.n	8000da8 <main+0x2f0>
 8000d36:	bf00      	nop
 8000d38:	20000238 	.word	0x20000238
 8000d3c:	20000308 	.word	0x20000308
 8000d40:	20000306 	.word	0x20000306
 8000d44:	20000304 	.word	0x20000304
 8000d48:	20000280 	.word	0x20000280
 8000d4c:	20000300 	.word	0x20000300
 8000d50:	40020000 	.word	0x40020000
 8000d54:	20000344 	.word	0x20000344
 8000d58:	200001a0 	.word	0x200001a0
 8000d5c:	3d4ccccd 	.word	0x3d4ccccd
 8000d60:	46fffe00 	.word	0x46fffe00
 8000d64:	20000350 	.word	0x20000350
 8000d68:	20000368 	.word	0x20000368
 8000d6c:	20000278 	.word	0x20000278
				failed_tx++;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <main+0x364>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <main+0x364>)
 8000d7a:	801a      	strh	r2, [r3, #0]
				failed_tx_max = (failed_tx > failed_tx_max) ? failed_tx : failed_tx_max;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <main+0x368>)
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <main+0x364>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf38      	it	cc
 8000d88:	4613      	movcc	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <main+0x368>)
 8000d8e:	801a      	strh	r2, [r3, #0]
				failed_tx_avg = (failed_tx_max + failed_tx) / 2;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <main+0x368>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <main+0x364>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	0fda      	lsrs	r2, r3, #31
 8000d9e:	4413      	add	r3, r2
 8000da0:	105b      	asrs	r3, r3, #1
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <main+0x36c>)
 8000da6:	801a      	strh	r2, [r3, #0]
			break;
 8000da8:	bf00      	nop
		}

		if (event_index_read != event_index_write) 
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <main+0x370>)
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <main+0x374>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d00d      	beq.n	8000dd2 <main+0x31a>
		{
			event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <main+0x370>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	425a      	negs	r2, r3
 8000dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dc6:	bf58      	it	pl
 8000dc8:	4253      	negpl	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <main+0x370>)
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e002      	b.n	8000dd8 <main+0x320>
		}
		else
		{
			write_next_event_state(EVENT_WAIT);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f9ae 	bl	8001134 <write_next_event_state>
		}

		event_difference = (event_index_write >= event_index_read) ? 
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <main+0x374>)
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <main+0x370>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d306      	bcc.n	8000df2 <main+0x33a>
			event_index_write - event_index_read : 
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <main+0x374>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <main+0x370>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
		event_difference = (event_index_write >= event_index_read) ? 
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	e007      	b.n	8000e02 <main+0x34a>
			event_index_write + (UINT8_MAX - event_index_read);
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <main+0x374>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <main+0x370>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b2db      	uxtb	r3, r3
		event_difference = (event_index_write >= event_index_read) ? 
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <main+0x378>)
 8000e04:	7013      	strb	r3, [r2, #0]
		event_difference_max = (event_difference > event_difference_max) ?
			event_difference : 
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <main+0x37c>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <main+0x378>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	bf38      	it	cc
 8000e12:	4613      	movcc	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
		event_difference_max = (event_difference > event_difference_max) ?
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <main+0x37c>)
 8000e18:	701a      	strb	r2, [r3, #0]
		switch (event_state[event_index_read]) 
 8000e1a:	e68e      	b.n	8000b3a <main+0x82>
 8000e1c:	20000278 	.word	0x20000278
 8000e20:	2000027a 	.word	0x2000027a
 8000e24:	2000027c 	.word	0x2000027c
 8000e28:	20000300 	.word	0x20000300
 8000e2c:	20000301 	.word	0x20000301
 8000e30:	20000302 	.word	0x20000302
 8000e34:	20000303 	.word	0x20000303

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b092      	sub	sp, #72	; 0x48
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2234      	movs	r2, #52	; 0x34
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f009 f91c 	bl	800a084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <SystemClock_Config+0x9c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <SystemClock_Config+0x9c>)
 8000e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e68:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2310      	movs	r3, #16
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000e8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000e8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fa71 	bl	800437c <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ea0:	f000 f98c 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fd8d 	bl	80049dc <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec8:	f000 f978 	bl	80011bc <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3748      	adds	r7, #72	; 0x48
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000eea:	4a2e      	ldr	r2, [pc, #184]	; (8000fa4 <MX_ADC_Init+0xcc>)
 8000eec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f06:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f4c:	f000 fca4 	bl	8001898 <HAL_ADC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8000f56:	f000 f931 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_9CYCLES;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f6c:	f000 ff84 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8000f76:	f000 f921 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_ADC_Init+0xc8>)
 8000f88:	f000 ff76 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000f92:	f000 f913 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001a0 	.word	0x200001a0
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64-1;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fdc:	223f      	movs	r2, #63	; 0x3f
 8000fde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000fec:	4825      	ldr	r0, [pc, #148]	; (8001084 <MX_TIM2_Init+0xdc>)
 8000fee:	f003 ffd3 	bl	8004f98 <HAL_TIM_OC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ff8:	f000 f8e0 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM2_Init+0xdc>)
 800100c:	f004 fbb4 	bl	8005778 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001016:	f000 f8d1 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800101a:	2310      	movs	r3, #16
 800101c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32-1;
 800101e:	231f      	movs	r3, #31
 8001020:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <MX_TIM2_Init+0xdc>)
 8001032:	f004 f9a9 	bl	8005388 <HAL_TIM_OC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800103c:	f000 f8be 	bl	80011bc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_TIM2_Init+0xdc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_TIM2_Init+0xdc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0208 	orr.w	r2, r2, #8
 800104e:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 64-1;
 8001050:	233f      	movs	r3, #63	; 0x3f
 8001052:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2204      	movs	r2, #4
 8001058:	4619      	mov	r1, r3
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <MX_TIM2_Init+0xdc>)
 800105c:	f004 f994 	bl	8005388 <HAL_TIM_OC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001066:	f000 f8a9 	bl	80011bc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_TIM2_Init+0xdc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <MX_TIM2_Init+0xdc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001078:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000238 	.word	0x20000238

08001088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_DMA_Init+0x38>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <MX_DMA_Init+0x38>)
 8001094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_DMA_Init+0x38>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200b      	movs	r0, #11
 80010ac:	f001 f9ed 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b0:	200b      	movs	r0, #11
 80010b2:	f001 fa06 	bl	80024c2 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_GPIO_Init+0x68>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <MX_GPIO_Init+0x68>)
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_GPIO_Init+0x68>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_GPIO_Init+0x68>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <MX_GPIO_Init+0x68>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_GPIO_Init+0x68>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800110a:	2304      	movs	r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_GPIO_Init+0x6c>)
 800111e:	f001 fb81 	bl	8002824 <HAL_GPIO_Init>

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <write_next_event_state+0x3c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	425a      	negs	r2, r3
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800114e:	bf58      	it	pl
 8001150:	4253      	negpl	r3, r2
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <write_next_event_state+0x3c>)
 8001156:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <write_next_event_state+0x3c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <write_next_event_state+0x40>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	5453      	strb	r3, [r2, r1]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000301 	.word	0x20000301
 8001174:	20000280 	.word	0x20000280

08001178 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	switch (htim->Channel) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e1b      	ldrb	r3, [r3, #24]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d002      	beq.n	800118e <HAL_TIM_OC_DelayElapsedCallback+0x16>
 8001188:	2b02      	cmp	r3, #2
 800118a:	d004      	beq.n	8001196 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		break;
	case HAL_TIM_ACTIVE_CHANNEL_2:
		write_next_event_state(TIM_EVENT_2);
		break;
	default:
		break;
 800118c:	e007      	b.n	800119e <HAL_TIM_OC_DelayElapsedCallback+0x26>
		write_next_event_state(TIM_EVENT_1);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ffd0 	bl	8001134 <write_next_event_state>
		break;
 8001194:	e003      	b.n	800119e <HAL_TIM_OC_DelayElapsedCallback+0x26>
		write_next_event_state(TIM_EVENT_2);
 8001196:	2002      	movs	r0, #2
 8001198:	f7ff ffcc 	bl	8001134 <write_next_event_state>
		break;
 800119c:	bf00      	nop
	}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff ffc0 	bl	8001134 <write_next_event_state>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_MspInit+0x58>)
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_MspInit+0x58>)
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	6253      	str	r3, [r2, #36]	; 0x24
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_MspInit+0x58>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_MspInit+0x58>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_MspInit+0x58>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_MspInit+0x58>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_MspInit+0x58>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_MspInit+0x58>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6253      	str	r3, [r2, #36]	; 0x24
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_MspInit+0x58>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <HAL_ADC_MspInit+0xd4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d154      	bne.n	80012f0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001250:	6213      	str	r3, [r2, #32]
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_ADC_MspInit+0xd8>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001276:	2303      	movs	r3, #3
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	481d      	ldr	r0, [pc, #116]	; (8001300 <HAL_ADC_MspInit+0xdc>)
 800128a:	f001 facb 	bl	8002824 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_ADC_MspInit+0xe4>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012c6:	f001 f917 	bl	80024f8 <HAL_DMA_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80012d0:	f7ff ff74 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_ADC_MspInit+0xe0>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2012      	movs	r0, #18
 80012e6:	f001 f8d0 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80012ea:	2012      	movs	r0, #18
 80012ec:	f001 f8e9 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40012400 	.word	0x40012400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	200001f4 	.word	0x200001f4
 8001308:	40026008 	.word	0x40026008

0800130c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d113      	bne.n	8001346 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_TIM_OC_MspInit+0x44>)
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_TIM_OC_MspInit+0x44>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6253      	str	r3, [r2, #36]	; 0x24
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_TIM_OC_MspInit+0x44>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201c      	movs	r0, #28
 800133c:	f001 f8a5 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001340:	201c      	movs	r0, #28
 8001342:	f001 f8be 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f000 fa61 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA1_Channel1_IRQHandler+0x10>)
 80013aa:	f001 f95d 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001f4 	.word	0x200001f4

080013b8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <ADC1_IRQHandler+0x10>)
 80013be:	f000 fc3f 	bl	8001c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001a0 	.word	0x200001a0

080013cc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USB_HP_IRQHandler+0x10>)
 80013d2:	f001 fcc2 	bl	8002d5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000804 	.word	0x20000804

080013e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <USB_LP_IRQHandler+0x10>)
 80013e6:	f001 fcb8 	bl	8002d5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000804 	.word	0x20000804

080013f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <TIM2_IRQHandler+0x10>)
 80013fa:	f003 fee9 	bl	80051d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000238 	.word	0x20000238

08001408 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800143a:	f7ff ffe5 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f008 fdfd 	bl	800a03c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fb39 	bl	8000ab8 <main>
  bx lr
 8001446:	4770      	bx	lr
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001450:	0800a138 	.word	0x0800a138
  ldr r2, =_sbss
 8001454:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001458:	20000b18 	.word	0x20000b18

0800145c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <COMP_IRQHandler>
	...

08001460 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001460:	b4b0      	push	{r4, r5, r7}
 8001462:	b095      	sub	sp, #84	; 0x54
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8001470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001474:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147a:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <Joystick_Init+0x90>)
 8001482:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <Joystick_Init+0x94>)
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8001492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001496:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800149c:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <Joystick_Init+0x90>)
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <Joystick_Init+0x94>)
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 80014c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014c6:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	461d      	mov	r5, r3
 80014cc:	f107 0414 	add.w	r4, r7, #20
 80014d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	3754      	adds	r7, #84	; 0x54
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bcb0      	pop	{r4, r5, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	3ccccccd 	.word	0x3ccccccd
 80014f4:	3f8ccccd 	.word	0x3f8ccccd

080014f8 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001516:	2b00      	cmp	r3, #0
 8001518:	d062      	beq.n	80015e0 <Joystick_Update+0xe8>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d05e      	beq.n	80015e0 <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	891b      	ldrh	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fede 	bl	80002e8 <__aeabi_ui2f>
 800152c:	4604      	mov	r4, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001538:	f7fe fe24 	bl	8000184 <__aeabi_fsub>
 800153c:	4603      	mov	r3, r0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f7fe ff29 	bl	8000398 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	461c      	mov	r4, r3
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fecb 	bl	80002e8 <__aeabi_ui2f>
 8001552:	4602      	mov	r2, r0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7fe ff1c 	bl	8000398 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	4619      	mov	r1, r3
 8001564:	4620      	mov	r0, r4
 8001566:	f7fe fe0f 	bl	8000188 <__addsf3>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f8ff 	bl	8000770 <__aeabi_f2uiz>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8c1b      	ldrh	r3, [r3, #32]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe feb2 	bl	80002e8 <__aeabi_ui2f>
 8001584:	4604      	mov	r4, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001590:	f7fe fdf8 	bl	8000184 <__aeabi_fsub>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	4620      	mov	r0, r4
 800159a:	f7fe fefd 	bl	8000398 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	8bbb      	ldrh	r3, [r7, #28]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9f 	bl	80002e8 <__aeabi_ui2f>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7fe fef0 	bl	8000398 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4620      	mov	r0, r4
 80015be:	f7fe fde3 	bl	8000188 <__addsf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f8d3 	bl	8000770 <__aeabi_f2uiz>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	865a      	strh	r2, [r3, #50]	; 0x32
 80015de:	e008      	b.n	80015f2 <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	8bfa      	ldrh	r2, [r7, #30]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	8c1b      	ldrh	r3, [r3, #32]
 8001602:	8bba      	ldrh	r2, [r7, #28]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	b29b      	uxth	r3, r3
 8001608:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	8bfa      	ldrh	r2, [r7, #30]
 8001610:	4293      	cmp	r3, r2
 8001612:	bf28      	it	cs
 8001614:	4613      	movcs	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	88db      	ldrh	r3, [r3, #6]
 8001620:	8bfa      	ldrh	r2, [r7, #30]
 8001622:	4293      	cmp	r3, r2
 8001624:	bf38      	it	cc
 8001626:	4613      	movcc	r3, r2
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8b9b      	ldrh	r3, [r3, #28]
 8001632:	8bba      	ldrh	r2, [r7, #28]
 8001634:	4293      	cmp	r3, r2
 8001636:	bf28      	it	cs
 8001638:	4613      	movcs	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	8bdb      	ldrh	r3, [r3, #30]
 8001644:	8bba      	ldrh	r2, [r7, #28]
 8001646:	4293      	cmp	r3, r2
 8001648:	bf38      	it	cc
 800164a:	4613      	movcc	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8001652:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001656:	2b00      	cmp	r3, #0
 8001658:	dd15      	ble.n	8001686 <Joystick_Update+0x18e>
 800165a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fe46 	bl	80002f0 <__aeabi_i2f>
 8001664:	4604      	mov	r4, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	891b      	ldrh	r3, [r3, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe3c 	bl	80002f0 <__aeabi_i2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f7fe ff3f 	bl	8000500 <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	e016      	b.n	80016b4 <Joystick_Update+0x1bc>
 8001686:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fe30 	bl	80002f0 <__aeabi_i2f>
 8001690:	4603      	mov	r3, r0
 8001692:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	891b      	ldrh	r3, [r3, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fe24 	bl	80002f0 <__aeabi_i2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7fe ff27 	bl	8000500 <__aeabi_fdiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 80016b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dd15      	ble.n	80016ea <Joystick_Update+0x1f2>
 80016be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fe14 	bl	80002f0 <__aeabi_i2f>
 80016c8:	4604      	mov	r4, r0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8bdb      	ldrh	r3, [r3, #30]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8c1b      	ldrh	r3, [r3, #32]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe0a 	bl	80002f0 <__aeabi_i2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7fe ff0d 	bl	8000500 <__aeabi_fdiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	e016      	b.n	8001718 <Joystick_Update+0x220>
 80016ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fdfe 	bl	80002f0 <__aeabi_i2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8b9b      	ldrh	r3, [r3, #28]
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8c1b      	ldrh	r3, [r3, #32]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fdf2 	bl	80002f0 <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4619      	mov	r1, r3
 8001710:	4620      	mov	r0, r4
 8001712:	f7fe fef5 	bl	8000500 <__aeabi_fdiv>
 8001716:	4603      	mov	r3, r0
 8001718:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7fe fff6 	bl	8000710 <__aeabi_fcmpgt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <Joystick_Update+0x236>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	e002      	b.n	8001734 <Joystick_Update+0x23c>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001734:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	6938      	ldr	r0, [r7, #16]
 800173c:	f7fe ffe8 	bl	8000710 <__aeabi_fcmpgt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <Joystick_Update+0x252>
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	e002      	b.n	8001750 <Joystick_Update+0x258>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001750:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4619      	mov	r1, r3
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7fe ffd9 	bl	8000710 <__aeabi_fcmpgt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <Joystick_Update+0x282>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4619      	mov	r1, r3
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7fe ffb2 	bl	80006d4 <__aeabi_fcmplt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <Joystick_Update+0x282>
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	e001      	b.n	800177e <Joystick_Update+0x286>
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	68b8      	ldr	r0, [r7, #8]
 800178a:	f7fe ffc1 	bl	8000710 <__aeabi_fcmpgt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00a      	beq.n	80017aa <Joystick_Update+0x2b2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	4619      	mov	r1, r3
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f7fe ff9a 	bl	80006d4 <__aeabi_fcmplt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <Joystick_Update+0x2b2>
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	e001      	b.n	80017ae <Joystick_Update+0x2b6>
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80017b2:	bf00      	nop
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}

080017ba <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 fe55 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f80e 	bl	80017ec <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	e001      	b.n	80017e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017dc:	f7ff fcf4 	bl	80011c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e0:	79fb      	ldrb	r3, [r7, #7]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_InitTick+0x68>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d022      	beq.n	8001846 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_InitTick+0x6c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_InitTick+0x68>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fe62 	bl	80024de <HAL_SYSTICK_Config>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10f      	bne.n	8001840 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	d809      	bhi.n	800183a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001826:	2200      	movs	r2, #0
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	f04f 30ff 	mov.w	r0, #4294967295
 800182e:	f000 fe2c 	bl	800248a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_InitTick+0x70>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e007      	b.n	800184a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e004      	b.n	800184a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e001      	b.n	800184a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000008 	.word	0x20000008
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_IncTick+0x1c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x20>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4413      	add	r3, r2
 800186e:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_IncTick+0x1c>)
 8001870:	6013      	str	r3, [r2, #0]
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000360 	.word	0x20000360
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <HAL_GetTick+0x10>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000360 	.word	0x20000360

08001898 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e127      	b.n	8001b08 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <HAL_ADC_Init+0x278>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a8d      	ldr	r2, [pc, #564]	; (8001b10 <HAL_ADC_Init+0x278>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_ADC_Init+0x278>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fc99 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 80ff 	bne.w	8001afe <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001914:	4b7f      	ldr	r3, [pc, #508]	; (8001b14 <HAL_ADC_Init+0x27c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	497c      	ldr	r1, [pc, #496]	; (8001b14 <HAL_ADC_Init+0x27c>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800192e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001936:	4619      	mov	r1, r3
 8001938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001952:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001958:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800197a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	4313      	orrs	r3, r2
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001986:	2b10      	cmp	r3, #16
 8001988:	d007      	beq.n	800199a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001992:	4313      	orrs	r3, r2
 8001994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001996:	4313      	orrs	r3, r2
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b40      	cmp	r3, #64	; 0x40
 80019a6:	d04f      	beq.n	8001a48 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	4313      	orrs	r3, r2
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019ba:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6912      	ldr	r2, [r2, #16]
 80019c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80019c4:	d003      	beq.n	80019ce <HAL_ADC_Init+0x136>
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6912      	ldr	r2, [r2, #16]
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d102      	bne.n	80019d4 <HAL_ADC_Init+0x13c>
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	e000      	b.n	80019d6 <HAL_ADC_Init+0x13e>
 80019d4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80019d6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019da:	4313      	orrs	r3, r2
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d125      	bne.n	8001a34 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d114      	bne.n	8001a1c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	fa92 f2a2 	rbit	r2, r2
 8001a04:	617a      	str	r2, [r7, #20]
  return result;
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a16:	4313      	orrs	r3, r2
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_ADC_Init+0x280>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_ADC_Init+0x284>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_Init+0x1d6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d119      	bne.n	8001aa2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	fa03 f202 	lsl.w	r2, r3, r2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa0:	e007      	b.n	8001ab2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_ADC_Init+0x288>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d10b      	bne.n	8001ada <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f023 0303 	bic.w	r3, r3, #3
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ad8:	e014      	b.n	8001b04 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f023 0312 	bic.w	r3, r3, #18
 8001ae2:	f043 0210 	orr.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3738      	adds	r7, #56	; 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40012700 	.word	0x40012700
 8001b18:	fcfc16ff 	.word	0xfcfc16ff
 8001b1c:	c0fff18d 	.word	0xc0fff18d
 8001b20:	bf80fffe 	.word	0xbf80fffe

08001b24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x1e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e074      	b.n	8001c2c <HAL_ADC_Start_DMA+0x108>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fae4 	bl	8002118 <ADC_Enable>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d167      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9e:	f023 0206 	bic.w	r2, r3, #6
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ba6:	e002      	b.n	8001bae <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_ADC_Start_DMA+0x110>)
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_ADC_Start_DMA+0x114>)
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_ADC_Start_DMA+0x118>)
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001be6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3358      	adds	r3, #88	; 0x58
 8001c02:	4619      	mov	r1, r3
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f000 fcce 	bl	80025a8 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c28:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	080021d1 	.word	0x080021d1
 8001c38:	08002279 	.word	0x08002279
 8001c3c:	08002295 	.word	0x08002295

08001c40 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d14e      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d147      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12c      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d127      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d119      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0220 	bic.w	r2, r2, #32
 8001cbe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fa5e 	bl	80011a6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0212 	mvn.w	r2, #18
 8001cf2:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d15c      	bne.n	8001dbc <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d155      	bne.n	8001dbc <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13a      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d12c      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d125      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d11e      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d119      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fa8b 	bl	80022c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 020c 	mvn.w	r2, #12
 8001dba:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d114      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10d      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f834 	bl	8001e52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f06f 0201 	mvn.w	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e02:	d119      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d112      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0220 	mvn.w	r2, #32
 8001e26:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f81b 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0220 	mvn.w	r2, #32
 8001e36:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x20>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e134      	b.n	8002102 <HAL_ADC_ConfigChannel+0x28a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d81c      	bhi.n	8001ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b05      	subs	r3, #5
 8001eba:	221f      	movs	r2, #31
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4019      	ands	r1, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b05      	subs	r3, #5
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee0:	e07e      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d81c      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b23      	subs	r3, #35	; 0x23
 8001efc:	221f      	movs	r2, #31
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4019      	ands	r1, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b23      	subs	r3, #35	; 0x23
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f22:	e05d      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b12      	cmp	r3, #18
 8001f2a:	d81c      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b41      	subs	r3, #65	; 0x41
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4019      	ands	r1, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b41      	subs	r3, #65	; 0x41
 8001f58:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
 8001f64:	e03c      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	d81c      	bhi.n	8001fa8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b5f      	subs	r3, #95	; 0x5f
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4019      	ands	r1, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b5f      	subs	r3, #95	; 0x5f
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa6:	e01b      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b7d      	subs	r3, #125	; 0x7d
 8001fba:	221f      	movs	r2, #31
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b7d      	subs	r3, #125	; 0x7d
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d81a      	bhi.n	800201e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6959      	ldr	r1, [r3, #20]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4019      	ands	r1, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6898      	ldr	r0, [r3, #8]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	615a      	str	r2, [r3, #20]
 800201c:	e042      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b13      	cmp	r3, #19
 8002024:	d81c      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6919      	ldr	r1, [r3, #16]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	3b1e      	subs	r3, #30
 8002038:	2207      	movs	r2, #7
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	4019      	ands	r1, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6898      	ldr	r0, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	e021      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b1a      	cmp	r3, #26
 8002066:	d81c      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3b3c      	subs	r3, #60	; 0x3c
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6898      	ldr	r0, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	3b3c      	subs	r3, #60	; 0x3c
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	e000      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80020a2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d003      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020b0:	2b11      	cmp	r3, #17
 80020b2:	d121      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_ADC_ConfigChannel+0x294>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d11b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_ADC_ConfigChannel+0x294>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_ADC_ConfigChannel+0x294>)
 80020c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ca:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d111      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_ADC_ConfigChannel+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_ADC_ConfigChannel+0x29c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9a      	lsrs	r2, r3, #18
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020ea:	e002      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	40012700 	.word	0x40012700
 8002110:	20000000 	.word	0x20000000
 8002114:	431bde83 	.word	0x431bde83

08002118 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	d043      	beq.n	80021be <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <ADC_Enable+0xb0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <ADC_Enable+0xb4>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9a      	lsrs	r2, r3, #18
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800215a:	e002      	b.n	8002162 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002168:	f7ff fb8c 	bl	8001884 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800216e:	e01f      	b.n	80021b0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002170:	f7ff fb88 	bl	8001884 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d918      	bls.n	80021b0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d011      	beq.n	80021b0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d1d8      	bne.n	8002170 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000000 	.word	0x20000000
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d13d      	bne.n	8002266 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d12c      	bne.n	800225e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d127      	bne.n	800225e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002226:	2b00      	cmp	r3, #0
 8002228:	d119      	bne.n	800225e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7fe ffa1 	bl	80011a6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002264:	e004      	b.n	8002270 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fdda 	bl	8001e40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fdd2 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
	...

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <__NVIC_EnableIRQ+0x34>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff90 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff2d 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff42 	bl	8002324 <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff90 	bl	80023cc <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5f 	bl	8002378 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff35 	bl	8002340 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e043      	b.n	8002592 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_DMA_Init+0xa4>)
 8002512:	4413      	add	r3, r2
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_DMA_Init+0xa8>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	009a      	lsls	r2, r3, #2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_DMA_Init+0xac>)
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800253e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002542:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	bffd9ff8 	.word	0xbffd9ff8
 80025a0:	cccccccd 	.word	0xcccccccd
 80025a4:	40026000 	.word	0x40026000

080025a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_DMA_Start_IT+0x20>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e04b      	b.n	8002660 <HAL_DMA_Start_IT+0xb8>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d13a      	bne.n	8002652 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f8e0 	bl	80027c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 020e 	orr.w	r2, r2, #14
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e00f      	b.n	8002640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0204 	bic.w	r2, r2, #4
 800262e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 020a 	orr.w	r2, r2, #10
 800263e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e005      	b.n	800265e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 031c 	and.w	r3, r3, #28
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d026      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x7a>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d021      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 021c 	and.w	r2, r3, #28
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	2104      	movs	r1, #4
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d071      	beq.n	80027bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026e0:	e06c      	b.n	80027bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 031c 	and.w	r3, r3, #28
 80026ea:	2202      	movs	r2, #2
 80026ec:	409a      	lsls	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d02e      	beq.n	8002754 <HAL_DMA_IRQHandler+0xec>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d029      	beq.n	8002754 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 020a 	bic.w	r2, r2, #10
 800271c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 021c 	and.w	r2, r3, #28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	2102      	movs	r1, #2
 8002734:	fa01 f202 	lsl.w	r2, r1, r2
 8002738:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	d038      	beq.n	80027bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002752:	e033      	b.n	80027bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f003 031c 	and.w	r3, r3, #28
 800275c:	2208      	movs	r2, #8
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02a      	beq.n	80027be <HAL_DMA_IRQHandler+0x156>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d025      	beq.n	80027be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 021c 	and.w	r2, r3, #28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
}
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 021c 	and.w	r2, r3, #28
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d108      	bne.n	800280a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002808:	e007      	b.n	800281a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	60da      	str	r2, [r3, #12]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800283a:	e154      	b.n	8002ae6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8146 	beq.w	8002ae0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d005      	beq.n	800286c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002868:	2b02      	cmp	r3, #2
 800286a:	d130      	bne.n	80028ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0201 	and.w	r2, r3, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d017      	beq.n	800290a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d123      	bne.n	800295e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a0 	beq.w	8002ae0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2e0>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80029b8:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_GPIO_Init+0x2e4>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d019      	beq.n	8002a18 <HAL_GPIO_Init+0x1f4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_GPIO_Init+0x1f0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2f0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00d      	beq.n	8002a10 <HAL_GPIO_Init+0x1ec>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <HAL_GPIO_Init+0x1e8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_GPIO_Init+0x1e4>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e008      	b.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2e4>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a86:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aea3 	bne.w	800283c <HAL_GPIO_Init+0x18>
  }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b54:	b08b      	sub	sp, #44	; 0x2c
 8002b56:	af06      	add	r7, sp, #24
 8002b58:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d0      	b.n	8002d06 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f006 ffd3 	bl	8009b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fe68 	bl	8005860 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e04c      	b.n	8002c30 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	b298      	uxth	r0, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3336      	adds	r3, #54	; 0x36
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3303      	adds	r3, #3
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3338      	adds	r3, #56	; 0x38
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333c      	adds	r3, #60	; 0x3c
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3340      	adds	r3, #64	; 0x40
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3ad      	bcc.n	8002b96 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e044      	b.n	8002cca <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3b5      	bcc.n	8002c40 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	687e      	ldr	r6, [r7, #4]
 8002cdc:	466d      	mov	r5, sp
 8002cde:	f106 0410 	add.w	r4, r6, #16
 8002ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	602b      	str	r3, [r5, #0]
 8002cea:	1d33      	adds	r3, r6, #4
 8002cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f002 fdd0 	bl	8005894 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_PCD_Start+0x16>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e016      	b.n	8002d52 <HAL_PCD_Start+0x44>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fd7f 	bl	8005834 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d36:	2101      	movs	r1, #1
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f006 fed5 	bl	8009ae8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f005 fa64 	bl	8008210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f005 fa5c 	bl	8008224 <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d102      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fade 	bl	800333a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fa4e 	bl	8008224 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d112      	bne.n	8002dba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	b292      	uxth	r2, r2
 8002da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f006 ff3c 	bl	8009c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002db2:	2100      	movs	r1, #0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8c7 	bl	8002f48 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f005 fa30 	bl	8008224 <USB_ReadInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dce:	d10b      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de2:	b292      	uxth	r2, r2
 8002de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 fa19 	bl	8008224 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfc:	d10b      	bne.n	8002e16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f005 fa02 	bl	8008224 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	d126      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0208 	bic.w	r2, r2, #8
 8002e56:	b292      	uxth	r2, r2
 8002e58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 ff1d 	bl	8009c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e74:	b292      	uxth	r2, r2
 8002e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 f9d0 	bl	8008224 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8e:	d126      	bne.n	8002ede <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0204 	orr.w	r2, r2, #4
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f006 fec5 	bl	8009c68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f005 f99e 	bl	8008224 <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef2:	d10e      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f006 fe7e 	bl	8009c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 f984 	bl	8008224 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d10b      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_PCD_SetAddress+0x1a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e013      	b.n	8002f8a <HAL_PCD_SetAddress+0x42>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f005 f935 	bl	80081ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	4608      	mov	r0, r1
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	70fb      	strb	r3, [r7, #3]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	803b      	strh	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0e      	bge.n	8002fd6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	705a      	strb	r2, [r3, #1]
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 0207 	and.w	r2, r3, #7
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003000:	883a      	ldrh	r2, [r7, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	78ba      	ldrb	r2, [r7, #2]
 800300a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d102      	bne.n	800302a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_PCD_EP_Open+0xa6>
 8003034:	2302      	movs	r3, #2
 8003036:	e00e      	b.n	8003056 <HAL_PCD_EP_Open+0xc4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fc44 	bl	80058d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003054:	7afb      	ldrb	r3, [r7, #11]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800306a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da0e      	bge.n	8003090 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	705a      	strb	r2, [r3, #1]
 800308e:	e00e      	b.n	80030ae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 0207 	and.w	r2, r3, #7
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_PCD_EP_Close+0x6a>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e00e      	b.n	80030e6 <HAL_PCD_EP_Close+0x88>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 ff66 	bl	8005fa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	460b      	mov	r3, r1
 80030fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	f003 0207 	and.w	r2, r3, #7
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	b2da      	uxtb	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6979      	ldr	r1, [r7, #20]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 f918 	bl	8006380 <USB_EPStartXfer>
 8003150:	e005      	b.n	800315e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	4618      	mov	r0, r3
 800315a:	f003 f911 	bl	8006380 <USB_EPStartXfer>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	460b      	mov	r3, r1
 8003176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6979      	ldr	r1, [r7, #20]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f8d5 	bl	8006380 <USB_EPStartXfer>
 80031d6:	e005      	b.n	80031e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 f8ce 	bl	8006380 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 0207 	and.w	r2, r3, #7
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e03e      	b.n	800328a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0e      	bge.n	8003232 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	705a      	strb	r2, [r3, #1]
 8003230:	e00c      	b.n	800324c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_PCD_EP_SetStall+0x7e>
 8003268:	2302      	movs	r3, #2
 800326a:	e00e      	b.n	800328a <HAL_PCD_EP_SetStall+0x9c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 feb8 	bl	8007ff0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d901      	bls.n	80032b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e040      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0e      	bge.n	80032d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
 80032d4:	e00e      	b.n	80032f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 0207 	and.w	r2, r3, #7
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_EP_ClrStall+0x82>
 8003310:	2302      	movs	r3, #2
 8003312:	e00e      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 feb4 	bl	8008090 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08e      	sub	sp, #56	; 0x38
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003342:	e2ec      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800334c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800334e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800335a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8161 	bne.w	8003626 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003364:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d152      	bne.n	8003414 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	81fb      	strh	r3, [r7, #14]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800338e:	b29b      	uxth	r3, r3
 8003390:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3328      	adds	r3, #40	; 0x28
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	3302      	adds	r3, #2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	441a      	add	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033d2:	2100      	movs	r1, #0
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f006 fc00 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 829b 	beq.w	800391e <PCD_EP_ISR_Handler+0x5e4>
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 8296 	bne.w	800391e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b292      	uxth	r2, r2
 8003406:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003412:	e284      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	2b00      	cmp	r3, #0
 800342c:	d034      	beq.n	8003498 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	3306      	adds	r3, #6
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800346c:	b29b      	uxth	r3, r3
 800346e:	f004 ff2d 	bl	80082cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29a      	uxth	r2, r3
 800347a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800347e:	4013      	ands	r3, r2
 8003480:	823b      	strh	r3, [r7, #16]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	8a3a      	ldrh	r2, [r7, #16]
 8003488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800348c:	b292      	uxth	r2, r2
 800348e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f006 fb75 	bl	8009b80 <HAL_PCD_SetupStageCallback>
 8003496:	e242      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003498:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800349c:	2b00      	cmp	r3, #0
 800349e:	f280 823e 	bge.w	800391e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034ae:	4013      	ands	r3, r2
 80034b0:	83bb      	strh	r3, [r7, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	8bba      	ldrh	r2, [r7, #28]
 80034b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034bc:	b292      	uxth	r2, r2
 80034be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	3306      	adds	r3, #6
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d019      	beq.n	8003528 <PCD_EP_ISR_Handler+0x1ee>
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	6959      	ldr	r1, [r3, #20]
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800350c:	b29b      	uxth	r3, r3
 800350e:	f004 fedd 	bl	80082cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	441a      	add	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003520:	2100      	movs	r1, #0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f006 fb3e 	bl	8009ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 81f2 	bne.w	800391e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d112      	bne.n	8003588 <PCD_EP_ISR_Handler+0x24e>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800356c:	b29a      	uxth	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800357c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003580:	b29a      	uxth	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	e02f      	b.n	80035e8 <PCD_EP_ISR_Handler+0x2ae>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b3e      	cmp	r3, #62	; 0x3e
 800358e:	d813      	bhi.n	80035b8 <PCD_EP_ISR_Handler+0x27e>
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <PCD_EP_ISR_Handler+0x270>
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	3301      	adds	r3, #1
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e017      	b.n	80035e8 <PCD_EP_ISR_Handler+0x2ae>
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <PCD_EP_ISR_Handler+0x298>
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	3b01      	subs	r3, #1
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	b29b      	uxth	r3, r3
 80035da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	827b      	strh	r3, [r7, #18]
 80035fa:	8a7b      	ldrh	r3, [r7, #18]
 80035fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003600:	827b      	strh	r3, [r7, #18]
 8003602:	8a7b      	ldrh	r3, [r7, #18]
 8003604:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003608:	827b      	strh	r3, [r7, #18]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	8a7b      	ldrh	r3, [r7, #18]
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
 8003624:	e17b      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003638:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800363c:	2b00      	cmp	r3, #0
 800363e:	f280 80ea 	bge.w	8003816 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29a      	uxth	r2, r3
 8003654:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003658:	4013      	ands	r3, r2
 800365a:	853b      	strh	r3, [r7, #40]	; 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800366c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003670:	b292      	uxth	r2, r2
 8003672:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003674:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	7b1b      	ldrb	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d122      	bne.n	80036d8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	3306      	adds	r3, #6
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ba:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80036bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8087 	beq.w	80037d2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	6959      	ldr	r1, [r3, #20]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	88da      	ldrh	r2, [r3, #6]
 80036d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036d2:	f004 fdfb 	bl	80082cc <USB_ReadPMA>
 80036d6:	e07c      	b.n	80037d2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	78db      	ldrb	r3, [r3, #3]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d108      	bne.n	80036f2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036e2:	461a      	mov	r2, r3
 80036e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f927 	bl	800393a <HAL_PCD_EP_DB_Receive>
 80036ec:	4603      	mov	r3, r0
 80036ee:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036f0:	e06f      	b.n	80037d2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	847b      	strh	r3, [r7, #34]	; 0x22
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800371e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800372e:	b29b      	uxth	r3, r3
 8003730:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003754:	b29b      	uxth	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	3302      	adds	r3, #2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003774:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003778:	2b00      	cmp	r3, #0
 800377a:	d02a      	beq.n	80037d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6959      	ldr	r1, [r3, #20]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	891a      	ldrh	r2, [r3, #8]
 8003788:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800378a:	f004 fd9f 	bl	80082cc <USB_ReadPMA>
 800378e:	e020      	b.n	80037d2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	3306      	adds	r3, #6
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6959      	ldr	r1, [r3, #20]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	895a      	ldrh	r2, [r3, #10]
 80037cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037ce:	f004 fd7d 	bl	80082cc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037d8:	441a      	add	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037e4:	441a      	add	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <PCD_EP_ISR_Handler+0x4c2>
 80037f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d206      	bcs.n	800380a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f006 f9ce 	bl	8009ba4 <HAL_PCD_DataOutStageCallback>
 8003808:	e005      	b.n	8003816 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003810:	4618      	mov	r0, r3
 8003812:	f002 fdb5 	bl	8006380 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d07e      	beq.n	800391e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003820:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	843b      	strh	r3, [r7, #32]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	441a      	add	r2, r3
 800385e:	8c3b      	ldrh	r3, [r7, #32]
 8003860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003868:	b29b      	uxth	r3, r3
 800386a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	78db      	ldrb	r3, [r3, #3]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d00c      	beq.n	800388e <PCD_EP_ISR_Handler+0x554>
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003880:	2b02      	cmp	r3, #2
 8003882:	d146      	bne.n	8003912 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003884:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d141      	bne.n	8003912 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	3302      	adds	r3, #2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	8bfb      	ldrh	r3, [r7, #30]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d906      	bls.n	80038d0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	8bfb      	ldrh	r3, [r7, #30]
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	619a      	str	r2, [r3, #24]
 80038ce:	e002      	b.n	80038d6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f006 f978 	bl	8009bda <HAL_PCD_DataInStageCallback>
 80038ea:	e018      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	8bfb      	ldrh	r3, [r7, #30]
 80038f2:	441a      	add	r2, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	8bfb      	ldrh	r3, [r7, #30]
 80038fe:	441a      	add	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fd38 	bl	8006380 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003910:	e005      	b.n	800391e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003914:	461a      	mov	r2, r3
 8003916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f91b 	bl	8003b54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003926:	b29b      	uxth	r3, r3
 8003928:	b21b      	sxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	f6ff ad0a 	blt.w	8003344 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3738      	adds	r7, #56	; 0x38
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d07e      	beq.n	8003a50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	3302      	adds	r3, #2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	8b7b      	ldrh	r3, [r7, #26]
 8003982:	429a      	cmp	r2, r3
 8003984:	d306      	bcc.n	8003994 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	8b7b      	ldrh	r3, [r7, #26]
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e002      	b.n	800399a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d123      	bne.n	80039ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039bc:	833b      	strh	r3, [r7, #24]
 80039be:	8b3b      	ldrh	r3, [r7, #24]
 80039c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039c4:	833b      	strh	r3, [r7, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	8b3b      	ldrh	r3, [r7, #24]
 80039d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01f      	beq.n	8003a34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	82fb      	strh	r3, [r7, #22]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	8afb      	ldrh	r3, [r7, #22]
 8003a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a34:	8b7b      	ldrh	r3, [r7, #26]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8087 	beq.w	8003b4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6959      	ldr	r1, [r3, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	891a      	ldrh	r2, [r3, #8]
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	f004 fc3f 	bl	80082cc <USB_ReadPMA>
 8003a4e:	e07c      	b.n	8003b4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	3306      	adds	r3, #6
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d306      	bcc.n	8003a92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	8b7b      	ldrh	r3, [r7, #26]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	e002      	b.n	8003a98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d123      	bne.n	8003ae8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	83fb      	strh	r3, [r7, #30]
 8003abc:	8bfb      	ldrh	r3, [r7, #30]
 8003abe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ac2:	83fb      	strh	r3, [r7, #30]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11f      	bne.n	8003b32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	83bb      	strh	r3, [r7, #28]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	8bbb      	ldrh	r3, [r7, #28]
 8003b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	895a      	ldrh	r2, [r3, #10]
 8003b44:	8b7b      	ldrh	r3, [r7, #26]
 8003b46:	f004 fbc1 	bl	80082cc <USB_ReadPMA>
    }
  }

  return count;
 8003b4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b0a2      	sub	sp, #136	; 0x88
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 81c7 	beq.w	8003efc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	3302      	adds	r3, #2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d907      	bls.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	619a      	str	r2, [r3, #24]
 8003bb4:	e002      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 80b9 	bne.w	8003d38 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d126      	bne.n	8003c1c <HAL_PCD_EP_DB_Transmit+0xc8>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	4413      	add	r3, r2
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	011a      	lsls	r2, r3, #4
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	4413      	add	r3, r2
 8003bf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e01a      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d116      	bne.n	8003c52 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	4413      	add	r3, r2
 8003c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	011a      	lsls	r2, r3, #4
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	4413      	add	r3, r2
 8003c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2200      	movs	r2, #0
 8003c50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d126      	bne.n	8003cae <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	e017      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d113      	bne.n	8003cde <HAL_PCD_EP_DB_Transmit+0x18a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f005 ff78 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 82d4 	beq.w	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	827b      	strh	r3, [r7, #18]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	441a      	add	r2, r3
 8003d20:	8a7b      	ldrh	r3, [r7, #18]
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
 8003d36:	e2b2      	b.n	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 8286 	bne.w	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003da8:	441a      	add	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d309      	bcc.n	8003dce <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	621a      	str	r2, [r3, #32]
 8003dcc:	e015      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003de4:	e009      	b.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d155      	bne.n	8003eae <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	4413      	add	r3, r2
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	011a      	lsls	r2, r3, #4
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	4413      	add	r3, r2
 8003e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d112      	bne.n	8003e56 <HAL_PCD_EP_DB_Transmit+0x302>
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e047      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e58:	2b3e      	cmp	r3, #62	; 0x3e
 8003e5a:	d811      	bhi.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	3301      	adds	r3, #1
 8003e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	029b      	lsls	r3, r3, #10
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	e032      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x342>
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	3b01      	subs	r3, #1
 8003e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	e01b      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d117      	bne.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eca:	4413      	add	r3, r2
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	011a      	lsls	r2, r3, #4
 8003ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6959      	ldr	r1, [r3, #20]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	891a      	ldrh	r2, [r3, #8]
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f004 f9a4 	bl	8008242 <USB_WritePMA>
 8003efa:	e1d0      	b.n	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	3306      	adds	r3, #6
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d307      	bcc.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f3c:	1ad2      	subs	r2, r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	619a      	str	r2, [r3, #24]
 8003f42:	e002      	b.n	8003f4a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80c4 	bne.w	80040dc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d126      	bne.n	8003faa <HAL_PCD_EP_DB_Transmit+0x456>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	4413      	add	r3, r2
 8003f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e01a      	b.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d116      	bne.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	4413      	add	r3, r2
 8003fc8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fdc:	2200      	movs	r2, #0
 8003fde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d12f      	bne.n	800404e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004006:	4413      	add	r3, r2
 8004008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004016:	4413      	add	r3, r2
 8004018:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800402c:	b29a      	uxth	r2, r3
 800402e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004044:	b29a      	uxth	r2, r3
 8004046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e017      	b.n	800407e <HAL_PCD_EP_DB_Transmit+0x52a>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d113      	bne.n	800407e <HAL_PCD_EP_DB_Transmit+0x52a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004064:	4413      	add	r3, r2
 8004066:	67bb      	str	r3, [r7, #120]	; 0x78
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	011a      	lsls	r2, r3, #4
 800406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004070:	4413      	add	r3, r2
 8004072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004076:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800407a:	2200      	movs	r2, #0
 800407c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f005 fda8 	bl	8009bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8104 	bne.w	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	8013      	strh	r3, [r2, #0]
 80040da:	e0e0      	b.n	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d121      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 80b4 	bne.w	800429e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800413e:	441a      	add	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800414c:	441a      	add	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d309      	bcc.n	8004172 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	621a      	str	r2, [r3, #32]
 8004170:	e015      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800417a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004188:	e009      	b.n	800419e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	667b      	str	r3, [r7, #100]	; 0x64
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d155      	bne.n	8004258 <HAL_PCD_EP_DB_Transmit+0x704>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	4413      	add	r3, r2
 80041c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d112      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80041da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	e044      	b.n	800428a <HAL_PCD_EP_DB_Transmit+0x736>
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	2b3e      	cmp	r3, #62	; 0x3e
 8004204:	d811      	bhi.n	800422a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	657b      	str	r3, [r7, #84]	; 0x54
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004218:	3301      	adds	r3, #1
 800421a:	657b      	str	r3, [r7, #84]	; 0x54
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	b29b      	uxth	r3, r3
 8004220:	029b      	lsls	r3, r3, #10
 8004222:	b29a      	uxth	r2, r3
 8004224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004226:	801a      	strh	r2, [r3, #0]
 8004228:	e02f      	b.n	800428a <HAL_PCD_EP_DB_Transmit+0x736>
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	657b      	str	r3, [r7, #84]	; 0x54
 8004230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800423a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423c:	3b01      	subs	r3, #1
 800423e:	657b      	str	r3, [r7, #84]	; 0x54
 8004240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004242:	b29b      	uxth	r3, r3
 8004244:	029b      	lsls	r3, r3, #10
 8004246:	b29b      	uxth	r3, r3
 8004248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004250:	b29a      	uxth	r2, r3
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e018      	b.n	800428a <HAL_PCD_EP_DB_Transmit+0x736>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d114      	bne.n	800428a <HAL_PCD_EP_DB_Transmit+0x736>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004268:	b29b      	uxth	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800426e:	4413      	add	r3, r2
 8004270:	667b      	str	r3, [r7, #100]	; 0x64
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	011a      	lsls	r2, r3, #4
 8004278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427a:	4413      	add	r3, r2
 800427c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004280:	663b      	str	r3, [r7, #96]	; 0x60
 8004282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004284:	b29a      	uxth	r2, r3
 8004286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004288:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6959      	ldr	r1, [r3, #20]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	895a      	ldrh	r2, [r3, #10]
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	f003 ffd2 	bl	8008242 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b8:	823b      	strh	r3, [r7, #16]
 80042ba:	8a3b      	ldrh	r3, [r7, #16]
 80042bc:	f083 0310 	eor.w	r3, r3, #16
 80042c0:	823b      	strh	r3, [r7, #16]
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	f083 0320 	eor.w	r3, r3, #32
 80042c8:	823b      	strh	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	8a3b      	ldrh	r3, [r7, #16]
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3788      	adds	r7, #136	; 0x88
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	817b      	strh	r3, [r7, #10]
 8004306:	4613      	mov	r3, r2
 8004308:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e009      	b.n	8004342 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800432e:	897a      	ldrh	r2, [r7, #10]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	b29a      	uxth	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	80da      	strh	r2, [r3, #6]
 8004356:	e00b      	b.n	8004370 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2201      	movs	r2, #1
 800435c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	b29a      	uxth	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b29a      	uxth	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e31d      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438e:	4b94      	ldr	r3, [pc, #592]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004398:	4b91      	ldr	r3, [pc, #580]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07b      	beq.n	80044a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d006      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d10f      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b87      	ldr	r3, [pc, #540]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d06a      	beq.n	80044a4 <HAL_RCC_OscConfig+0x128>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d166      	bne.n	80044a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e2f7      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d106      	bne.n	80043f0 <HAL_RCC_OscConfig+0x74>
 80043e2:	4b7f      	ldr	r3, [pc, #508]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7e      	ldr	r2, [pc, #504]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e02d      	b.n	800444c <HAL_RCC_OscConfig+0xd0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_OscConfig+0x96>
 80043f8:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a78      	ldr	r2, [pc, #480]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a75      	ldr	r2, [pc, #468]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e01c      	b.n	800444c <HAL_RCC_OscConfig+0xd0>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b05      	cmp	r3, #5
 8004418:	d10c      	bne.n	8004434 <HAL_RCC_OscConfig+0xb8>
 800441a:	4b71      	ldr	r3, [pc, #452]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a70      	ldr	r2, [pc, #448]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b6e      	ldr	r3, [pc, #440]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6d      	ldr	r2, [pc, #436]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0xd0>
 8004434:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a69      	ldr	r2, [pc, #420]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800443a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a66      	ldr	r2, [pc, #408]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd fa16 	bl	8001884 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fd fa12 	bl	8001884 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e2ad      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800446e:	4b5c      	ldr	r3, [pc, #368]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0xe0>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fa02 	bl	8001884 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd f9fe 	bl	8001884 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e299      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004496:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x108>
 80044a2:	e000      	b.n	80044a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d05a      	beq.n	8004568 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d119      	bne.n	80044f2 <HAL_RCC_OscConfig+0x176>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_OscConfig+0x160>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e276      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	493d      	ldr	r1, [pc, #244]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f0:	e03a      	b.n	8004568 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044fa:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x268>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd f9c0 	bl	8001884 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004508:	f7fd f9bc 	bl	8001884 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e257      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	492a      	ldr	r1, [pc, #168]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
 800453a:	e015      	b.n	8004568 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453c:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x268>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fd f99f 	bl	8001884 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454a:	f7fd f99b 	bl	8001884 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e236      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800455c:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80b8 	beq.w	80046e6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d170      	bne.n	800465e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x218>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e21a      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d921      	bls.n	80045e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fc4b 	bl	8004e44 <RCC_SetFlashLatencyFromMSIRange>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e208      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	4901      	ldr	r1, [pc, #4]	; (80045e0 <HAL_RCC_OscConfig+0x264>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
 80045de:	e020      	b.n	8004622 <HAL_RCC_OscConfig+0x2a6>
 80045e0:	40023800 	.word	0x40023800
 80045e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e8:	4b99      	ldr	r3, [pc, #612]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4996      	ldr	r1, [pc, #600]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fa:	4b95      	ldr	r3, [pc, #596]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	4991      	ldr	r1, [pc, #580]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fc16 	bl	8004e44 <RCC_SetFlashLatencyFromMSIRange>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e1d3      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	0b5b      	lsrs	r3, r3, #13
 8004628:	3301      	adds	r3, #1
 800462a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004632:	4a87      	ldr	r2, [pc, #540]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	0912      	lsrs	r2, r2, #4
 8004638:	f002 020f 	and.w	r2, r2, #15
 800463c:	4985      	ldr	r1, [pc, #532]	; (8004854 <HAL_RCC_OscConfig+0x4d8>)
 800463e:	5c8a      	ldrb	r2, [r1, r2]
 8004640:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004642:	4a85      	ldr	r2, [pc, #532]	; (8004858 <HAL_RCC_OscConfig+0x4dc>)
 8004644:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_RCC_OscConfig+0x4e0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd f8ce 	bl	80017ec <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d045      	beq.n	80046e6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	e1b5      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d029      	beq.n	80046ba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004666:	4b7e      	ldr	r3, [pc, #504]	; (8004860 <HAL_RCC_OscConfig+0x4e4>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fd f90a 	bl	8001884 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004674:	f7fd f906 	bl	8001884 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1a1      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004692:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	496c      	ldr	r1, [pc, #432]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	4967      	ldr	r1, [pc, #412]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	e015      	b.n	80046e6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046ba:	4b69      	ldr	r3, [pc, #420]	; (8004860 <HAL_RCC_OscConfig+0x4e4>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fd f8e0 	bl	8001884 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046c8:	f7fd f8dc 	bl	8001884 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e177      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80046da:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d030      	beq.n	8004754 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fd f8c0 	bl	8001884 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004708:	f7fd f8bc 	bl	8001884 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e157      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800471a:	4b4d      	ldr	r3, [pc, #308]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x38c>
 8004726:	e015      	b.n	8004754 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004728:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <HAL_RCC_OscConfig+0x4e8>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472e:	f7fd f8a9 	bl	8001884 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004736:	f7fd f8a5 	bl	8001884 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e140      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004748:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80b5 	beq.w	80048cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004762:	2300      	movs	r3, #0
 8004764:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	4a36      	ldr	r2, [pc, #216]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6253      	str	r3, [r2, #36]	; 0x24
 800477e:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b36      	ldr	r3, [pc, #216]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a32      	ldr	r2, [pc, #200]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fd f86d 	bl	8001884 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fd f869 	bl	8001884 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b64      	cmp	r3, #100	; 0x64
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e104      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCC_OscConfig+0x4ec>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x466>
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047de:	6353      	str	r3, [r2, #52]	; 0x34
 80047e0:	e02d      	b.n	800483e <HAL_RCC_OscConfig+0x4c2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x488>
 80047ea:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	6353      	str	r3, [r2, #52]	; 0x34
 80047f6:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 80047fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004800:	6353      	str	r3, [r2, #52]	; 0x34
 8004802:	e01c      	b.n	800483e <HAL_RCC_OscConfig+0x4c2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d10c      	bne.n	8004826 <HAL_RCC_OscConfig+0x4aa>
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	4a0f      	ldr	r2, [pc, #60]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004816:	6353      	str	r3, [r2, #52]	; 0x34
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6353      	str	r3, [r2, #52]	; 0x34
 8004824:	e00b      	b.n	800483e <HAL_RCC_OscConfig+0x4c2>
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 800482c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004830:	6353      	str	r3, [r2, #52]	; 0x34
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	4a06      	ldr	r2, [pc, #24]	; (8004850 <HAL_RCC_OscConfig+0x4d4>)
 8004838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d024      	beq.n	8004890 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fd f81d 	bl	8001884 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800484c:	e019      	b.n	8004882 <HAL_RCC_OscConfig+0x506>
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	0800a118 	.word	0x0800a118
 8004858:	20000000 	.word	0x20000000
 800485c:	20000004 	.word	0x20000004
 8004860:	42470020 	.word	0x42470020
 8004864:	42470680 	.word	0x42470680
 8004868:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f80a 	bl	8001884 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0a3      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004882:	4b54      	ldr	r3, [pc, #336]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RCC_OscConfig+0x4f0>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fc fff8 	bl	8001884 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fc fff4 	bl	8001884 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e08d      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048ae:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ee      	bne.n	8004898 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d079      	beq.n	80049c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d056      	beq.n	8004988 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d13b      	bne.n	800495a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x65c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fc ffcc 	bl	8001884 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fc ffc8 	bl	8001884 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e063      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4319      	orrs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	430b      	orrs	r3, r1
 8004926:	492b      	ldr	r1, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x65c>)
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7fc ffa7 	bl	8001884 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493a:	f7fc ffa3 	bl	8001884 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e03e      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800494c:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x5be>
 8004958:	e036      	b.n	80049c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_RCC_OscConfig+0x65c>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fc ff90 	bl	8001884 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7fc ff8c 	bl	8001884 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e027      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x5ec>
 8004986:	e01f      	b.n	80049c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e01a      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCC_OscConfig+0x658>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470060 	.word	0x42470060

080049dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e11a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f0:	4b8f      	ldr	r3, [pc, #572]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d919      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x34>
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a89      	ldr	r2, [pc, #548]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 0201 	bic.w	r2, r3, #1
 8004a18:	4985      	ldr	r1, [pc, #532]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a20:	4b83      	ldr	r3, [pc, #524]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0f9      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3e:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	497a      	ldr	r1, [pc, #488]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 808e 	beq.w	8004b7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d121      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0d7      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a7e:	4b6d      	ldr	r3, [pc, #436]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d115      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0cb      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a96:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0bf      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004aa6:	4b63      	ldr	r3, [pc, #396]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0b7      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ab6:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 0203 	bic.w	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	495c      	ldr	r1, [pc, #368]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac8:	f7fc fedc 	bl	8001884 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d112      	bne.n	8004afc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fc fed4 	bl	8001884 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e09b      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aee:	4b51      	ldr	r3, [pc, #324]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xfc>
 8004afa:	e03e      	b.n	8004b7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d112      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b06:	f7fc febd 	bl	8001884 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e084      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1c:	4b45      	ldr	r3, [pc, #276]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x12a>
 8004b28:	e027      	b.n	8004b7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d11d      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fc fea6 	bl	8001884 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e06d      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d1ee      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x158>
 8004b56:	e010      	b.n	8004b7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fc fe94 	bl	8001884 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e05b      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1ee      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d219      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x1be>
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a27      	ldr	r2, [pc, #156]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0201 	bic.w	r2, r3, #1
 8004ba2:	4923      	ldr	r1, [pc, #140]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <HAL_RCC_ClockConfig+0x254>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e034      	b.n	8004c26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4917      	ldr	r1, [pc, #92]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490f      	ldr	r1, [pc, #60]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f823 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_RCC_ClockConfig+0x258>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490b      	ldr	r1, [pc, #44]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x264>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc fde6 	bl	80017ec <HAL_InitTick>
 8004c20:	4603      	mov	r3, r0
 8004c22:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c24:	7afb      	ldrb	r3, [r7, #11]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023c00 	.word	0x40023c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	0800a118 	.word	0x0800a118
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	20000004 	.word	0x20000004

08004c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b092      	sub	sp, #72	; 0x48
 8004c4a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c4c:	4b79      	ldr	r3, [pc, #484]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d00d      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f200 80d5 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x1c8>
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d002      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x28>
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0x2e>
 8004c6a:	e0cf      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c70:	e0da      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c72:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004c74:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004c76:	e0d7      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004c82:	5c9b      	ldrb	r3, [r3, r2]
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c88:	0d9b      	lsrs	r3, r3, #22
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c92:	4b68      	ldr	r3, [pc, #416]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d05d      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	460d      	mov	r5, r1
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	f04f 0000 	mov.w	r0, #0
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbc:	0150      	lsls	r0, r2, #5
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	1a51      	subs	r1, r2, r1
 8004cc6:	6139      	str	r1, [r7, #16]
 8004cc8:	4629      	mov	r1, r5
 8004cca:	eb63 0301 	sbc.w	r3, r3, r1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cdc:	4659      	mov	r1, fp
 8004cde:	018b      	lsls	r3, r1, #6
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	018a      	lsls	r2, r1, #6
 8004cea:	46d4      	mov	ip, sl
 8004cec:	ebb2 080c 	subs.w	r8, r2, ip
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0a:	4690      	mov	r8, r2
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	4623      	mov	r3, r4
 8004d10:	eb18 0303 	adds.w	r3, r8, r3
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	462b      	mov	r3, r5
 8004d18:	eb49 0303 	adc.w	r3, r9, r3
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	024b      	lsls	r3, r1, #9
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	4604      	mov	r4, r0
 8004d34:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004d38:	4601      	mov	r1, r0
 8004d3a:	024a      	lsls	r2, r1, #9
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	2200      	movs	r2, #0
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d4c:	f7fb fd30 	bl	80007b0 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44
 8004d58:	e055      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	627a      	str	r2, [r7, #36]	; 0x24
 8004d62:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d66:	4642      	mov	r2, r8
 8004d68:	464b      	mov	r3, r9
 8004d6a:	f04f 0000 	mov.w	r0, #0
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	0159      	lsls	r1, r3, #5
 8004d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d78:	0150      	lsls	r0, r2, #5
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	46c4      	mov	ip, r8
 8004d80:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	468c      	mov	ip, r1
 8004d8a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d9a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d9e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004da2:	ebb2 040a 	subs.w	r4, r2, sl
 8004da6:	eb63 050b 	sbc.w	r5, r3, fp
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	00eb      	lsls	r3, r5, #3
 8004db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db8:	00e2      	lsls	r2, r4, #3
 8004dba:	4614      	mov	r4, r2
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	18e3      	adds	r3, r4, r3
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	eb45 0303 	adc.w	r3, r5, r3
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd8:	4629      	mov	r1, r5
 8004dda:	028b      	lsls	r3, r1, #10
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	4604      	mov	r4, r0
 8004de2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004de6:	4601      	mov	r1, r0
 8004de8:	028a      	lsls	r2, r1, #10
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	2200      	movs	r2, #0
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	61fa      	str	r2, [r7, #28]
 8004df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dfa:	f7fb fcd9 	bl	80007b0 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4613      	mov	r3, r2
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e08:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004e0a:	e00d      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0b5b      	lsrs	r3, r3, #13
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3748      	adds	r7, #72	; 0x48
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	007a1200 	.word	0x007a1200
 8004e40:	0800a10c 	.word	0x0800a10c

08004e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e50:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d12c      	bne.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e016      	b.n	8004ea2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6253      	str	r3, [r2, #36]	; 0x24
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e94:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004ea8:	d105      	bne.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eb0:	d101      	bne.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 0201 	bic.w	r2, r3, #1
 8004ed0:	490b      	ldr	r1, [pc, #44]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40007000 	.word	0x40007000
 8004f00:	40023c00 	.word	0x40023c00

08004f04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d001      	beq.n	8004f1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e032      	b.n	8004f82 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d00e      	beq.n	8004f4c <HAL_TIM_Base_Start+0x48>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <HAL_TIM_Base_Start+0x88>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_TIM_Base_Start+0x48>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <HAL_TIM_Base_Start+0x8c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_Base_Start+0x48>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <HAL_TIM_Base_Start+0x90>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d111      	bne.n	8004f70 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d010      	beq.n	8004f80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	e007      	b.n	8004f80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40010800 	.word	0x40010800

08004f98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e031      	b.n	800500e <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc f9a4 	bl	800130c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fa52 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_TIM_OC_Start_IT+0x24>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_OC_Start_IT+0x6a>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d109      	bne.n	8005056 <HAL_TIM_OC_Start_IT+0x3e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_OC_Start_IT+0x6a>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d109      	bne.n	8005070 <HAL_TIM_OC_Start_IT+0x58>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_OC_Start_IT+0x6a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e097      	b.n	80051ba <HAL_TIM_OC_Start_IT+0x1a2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_OC_Start_IT+0x82>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005098:	e013      	b.n	80050c2 <HAL_TIM_OC_Start_IT+0xaa>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_OC_Start_IT+0x92>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80050a8:	e00b      	b.n	80050c2 <HAL_TIM_OC_Start_IT+0xaa>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_OC_Start_IT+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050b8:	e003      	b.n	80050c2 <HAL_TIM_OC_Start_IT+0xaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d841      	bhi.n	800514c <HAL_TIM_OC_Start_IT+0x134>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <HAL_TIM_OC_Start_IT+0xb8>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005105 	.word	0x08005105
 80050d4:	0800514d 	.word	0x0800514d
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	08005117 	.word	0x08005117
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	08005129 	.word	0x08005129
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	0800514d 	.word	0x0800514d
 8005100:	0800513b 	.word	0x0800513b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0202 	orr.w	r2, r2, #2
 8005112:	60da      	str	r2, [r3, #12]
      break;
 8005114:	e01b      	b.n	800514e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0204 	orr.w	r2, r2, #4
 8005124:	60da      	str	r2, [r3, #12]
      break;
 8005126:	e012      	b.n	800514e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0208 	orr.w	r2, r2, #8
 8005136:	60da      	str	r2, [r3, #12]
      break;
 8005138:	e009      	b.n	800514e <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0210 	orr.w	r2, r2, #16
 8005148:	60da      	str	r2, [r3, #12]
      break;
 800514a:	e000      	b.n	800514e <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800514c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fae9 	bl	800572e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d00e      	beq.n	8005184 <HAL_TIM_OC_Start_IT+0x16c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <HAL_TIM_OC_Start_IT+0x1ac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_TIM_OC_Start_IT+0x16c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a14      	ldr	r2, [pc, #80]	; (80051c8 <HAL_TIM_OC_Start_IT+0x1b0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_TIM_OC_Start_IT+0x16c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <HAL_TIM_OC_Start_IT+0x1b4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_TIM_OC_Start_IT+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b06      	cmp	r3, #6
 8005194:	d010      	beq.n	80051b8 <HAL_TIM_OC_Start_IT+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e007      	b.n	80051b8 <HAL_TIM_OC_Start_IT+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40010800 	.word	0x40010800

080051d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0202 	mvn.w	r2, #2
 80051fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f919 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fb ffac 	bl	8001178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f91b 	bl	800545c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b04      	cmp	r3, #4
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0204 	mvn.w	r2, #4
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8ef 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb ff82 	bl	8001178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8f1 	bl	800545c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b08      	cmp	r3, #8
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0208 	mvn.w	r2, #8
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2204      	movs	r2, #4
 80052aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8c5 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fb ff58 	bl	8001178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8c7 	bl	800545c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0210 	mvn.w	r2, #16
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2208      	movs	r2, #8
 80052fe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f89b 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb ff2e 	bl	8001178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f89d 	bl	800545c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0201 	mvn.w	r2, #1
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f872 	bl	8005438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f877 	bl	800546e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800539e:	2302      	movs	r3, #2
 80053a0:	e046      	b.n	8005430 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b0c      	cmp	r3, #12
 80053ae:	d839      	bhi.n	8005424 <HAL_TIM_OC_ConfigChannel+0x9c>
 80053b0:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053ed 	.word	0x080053ed
 80053bc:	08005425 	.word	0x08005425
 80053c0:	08005425 	.word	0x08005425
 80053c4:	08005425 	.word	0x08005425
 80053c8:	080053fb 	.word	0x080053fb
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005425 	.word	0x08005425
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005409 	.word	0x08005409
 80053dc:	08005425 	.word	0x08005425
 80053e0:	08005425 	.word	0x08005425
 80053e4:	08005425 	.word	0x08005425
 80053e8:	08005417 	.word	0x08005417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f8a6 	bl	8005544 <TIM_OC1_SetConfig>
      break;
 80053f8:	e015      	b.n	8005426 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f8db 	bl	80055bc <TIM_OC2_SetConfig>
      break;
 8005406:	e00e      	b.n	8005426 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f912 	bl	8005638 <TIM_OC3_SetConfig>
      break;
 8005414:	e007      	b.n	8005426 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f948 	bl	80056b2 <TIM_OC4_SetConfig>
      break;
 8005422:	e000      	b.n	8005426 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x28>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a25      	ldr	r2, [pc, #148]	; (8005530 <TIM_Base_SetConfig+0xb0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x28>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a24      	ldr	r2, [pc, #144]	; (8005534 <TIM_Base_SetConfig+0xb4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0x6a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <TIM_Base_SetConfig+0xb0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0x6a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <TIM_Base_SetConfig+0xb4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0x6a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <TIM_Base_SetConfig+0xb8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0x6a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <TIM_Base_SetConfig+0xbc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0x6a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <TIM_Base_SetConfig+0xc0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40010800 	.word	0x40010800
 800553c:	40010c00 	.word	0x40010c00
 8005540:	40011000 	.word	0x40011000

08005544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0320 	bic.w	r3, r3, #32
 8005606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	031b      	lsls	r3, r3, #12
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2201      	movs	r2, #1
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	43db      	mvns	r3, r3
 8005750:	401a      	ands	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	431a      	orrs	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr
	...

08005778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800578c:	2302      	movs	r3, #2
 800578e:	e046      	b.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a10      	ldr	r2, [pc, #64]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10c      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4313      	orrs	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40010800 	.word	0x40010800

08005834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005844:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005848:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005868:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800586c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	b29b      	uxth	r3, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	b29b      	uxth	r3, r3
 800587e:	4013      	ands	r3, r2
 8005880:	b29a      	uxth	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005894:	b084      	sub	sp, #16
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	f107 0014 	add.w	r0, r7, #20
 80058a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	b004      	add	sp, #16
 80058d2:	4770      	bx	lr

080058d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b09b      	sub	sp, #108	; 0x6c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d81f      	bhi.n	8005946 <USB_ActivateEndpoint+0x72>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <USB_ActivateEndpoint+0x38>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005939 	.word	0x08005939
 8005914:	0800594f 	.word	0x0800594f
 8005918:	0800592b 	.word	0x0800592b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800591c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005924:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005928:	e012      	b.n	8005950 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800592a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800592e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005932:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005936:	e00b      	b.n	8005950 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005938:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800593c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005940:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005944:	e004      	b.n	8005950 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800594c:	e000      	b.n	8005950 <USB_ActivateEndpoint+0x7c>
      break;
 800594e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800595e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596e:	b29b      	uxth	r3, r3
 8005970:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	b29a      	uxth	r2, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	7b1b      	ldrb	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 8149 	bne.w	8005c54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8084 	beq.w	8005ad4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	88db      	ldrh	r3, [r3, #6]
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	81fb      	strh	r3, [r7, #14]
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <USB_ActivateEndpoint+0x17c>
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	81bb      	strh	r3, [r7, #12]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	89bb      	ldrh	r3, [r7, #12]
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d020      	beq.n	8005a9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	813b      	strh	r3, [r7, #8]
 8005a70:	893b      	ldrh	r3, [r7, #8]
 8005a72:	f083 0320 	eor.w	r3, r3, #32
 8005a76:	813b      	strh	r3, [r7, #8]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	893b      	ldrh	r3, [r7, #8]
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]
 8005a98:	e27f      	b.n	8005f9a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	441a      	add	r2, r3
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8013      	strh	r3, [r2, #0]
 8005ad2:	e262      	b.n	8005f9a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	4413      	add	r3, r2
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	88db      	ldrh	r3, [r3, #6]
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	4413      	add	r3, r2
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	011a      	lsls	r2, r3, #4
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d112      	bne.n	8005b5a <USB_ActivateEndpoint+0x286>
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e02f      	b.n	8005bba <USB_ActivateEndpoint+0x2e6>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b60:	d813      	bhi.n	8005b8a <USB_ActivateEndpoint+0x2b6>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <USB_ActivateEndpoint+0x2a8>
 8005b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b78:	3301      	adds	r3, #1
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e017      	b.n	8005bba <USB_ActivateEndpoint+0x2e6>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	663b      	str	r3, [r7, #96]	; 0x60
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <USB_ActivateEndpoint+0x2d0>
 8005b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	83fb      	strh	r3, [r7, #30]
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01b      	beq.n	8005c0a <USB_ActivateEndpoint+0x336>
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	83bb      	strh	r3, [r7, #28]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	8bbb      	ldrh	r3, [r7, #28]
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c20:	837b      	strh	r3, [r7, #26]
 8005c22:	8b7b      	ldrh	r3, [r7, #26]
 8005c24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c28:	837b      	strh	r3, [r7, #26]
 8005c2a:	8b7b      	ldrh	r3, [r7, #26]
 8005c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c30:	837b      	strh	r3, [r7, #26]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	8b7b      	ldrh	r3, [r7, #26]
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
 8005c52:	e1a2      	b.n	8005f9a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca0:	4413      	add	r3, r2
 8005ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	011a      	lsls	r2, r3, #4
 8005caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	891b      	ldrh	r3, [r3, #8]
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	4413      	add	r3, r2
 8005cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	895b      	ldrh	r3, [r3, #10]
 8005cec:	085b      	lsrs	r3, r3, #1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f040 8091 	bne.w	8005e24 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01b      	beq.n	8005d52 <USB_ActivateEndpoint+0x47e>
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01b      	beq.n	8005da2 <USB_ActivateEndpoint+0x4ce>
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	441a      	add	r2, r3
 8005d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e00:	867b      	strh	r3, [r7, #50]	; 0x32
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
 8005e22:	e0ba      	b.n	8005f9a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01d      	beq.n	8005e7c <USB_ActivateEndpoint+0x5a8>
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01d      	beq.n	8005ed4 <USB_ActivateEndpoint+0x600>
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d024      	beq.n	8005f26 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005efa:	f083 0320 	eor.w	r3, r3, #32
 8005efe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
 8005f24:	e01d      	b.n	8005f62 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	376c      	adds	r7, #108	; 0x6c
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b08d      	sub	sp, #52	; 0x34
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	7b1b      	ldrb	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 808e 	bne.w	80060d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d044      	beq.n	800604e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	81bb      	strh	r3, [r7, #12]
 8005fd2:	89bb      	ldrh	r3, [r7, #12]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <USB_DeactivateEndpoint+0x6c>
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	817b      	strh	r3, [r7, #10]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	897b      	ldrh	r3, [r7, #10]
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602a:	813b      	strh	r3, [r7, #8]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	893b      	ldrh	r3, [r7, #8]
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]
 800604c:	e192      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	827b      	strh	r3, [r7, #18]
 800605c:	8a7b      	ldrh	r3, [r7, #18]
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_DeactivateEndpoint+0xf6>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	823b      	strh	r3, [r7, #16]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8a3b      	ldrh	r3, [r7, #16]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	81fb      	strh	r3, [r7, #14]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
 80060d6:	e14d      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 80a5 	bne.w	800622c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	843b      	strh	r3, [r7, #32]
 80060f0:	8c3b      	ldrh	r3, [r7, #32]
 80060f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <USB_DeactivateEndpoint+0x18a>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	83fb      	strh	r3, [r7, #30]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8bfb      	ldrh	r3, [r7, #30]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	83bb      	strh	r3, [r7, #28]
 8006140:	8bbb      	ldrh	r3, [r7, #28]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01b      	beq.n	8006182 <USB_DeactivateEndpoint+0x1da>
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	837b      	strh	r3, [r7, #26]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	8b7b      	ldrh	r3, [r7, #26]
 800616e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800617e:	b29b      	uxth	r3, r3
 8006180:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	833b      	strh	r3, [r7, #24]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	441a      	add	r2, r3
 80061a4:	8b3b      	ldrh	r3, [r7, #24]
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	82fb      	strh	r3, [r7, #22]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006208:	82bb      	strh	r3, [r7, #20]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8abb      	ldrh	r3, [r7, #20]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]
 800622a:	e0a3      	b.n	8006374 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800623a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <USB_DeactivateEndpoint+0x2d4>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	857b      	strh	r3, [r7, #42]	; 0x2a
 800628a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <USB_DeactivateEndpoint+0x324>
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	847b      	strh	r3, [r7, #34]	; 0x22
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3734      	adds	r7, #52	; 0x34
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b0cc      	sub	sp, #304	; 0x130
 8006384:	af00      	add	r7, sp, #0
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638e:	6018      	str	r0, [r3, #0]
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006398:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	785b      	ldrb	r3, [r3, #1]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	f041 817d 	bne.w	80076a6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d908      	bls.n	80063da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80063d8:	e007      	b.n	80063ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	7b1b      	ldrb	r3, [r3, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d152      	bne.n	80064a0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6959      	ldr	r1, [r3, #20]
 8006406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	88da      	ldrh	r2, [r3, #6]
 8006412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006416:	b29b      	uxth	r3, r3
 8006418:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800641c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006420:	6800      	ldr	r0, [r0, #0]
 8006422:	f001 ff0e 	bl	8008242 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800642e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006432:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006448:	b29b      	uxth	r3, r3
 800644a:	4619      	mov	r1, r3
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006458:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	440a      	add	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	011a      	lsls	r2, r3, #4
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4413      	add	r3, r2
 800647c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648e:	b29a      	uxth	r2, r3
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	801a      	strh	r2, [r3, #0]
 800649c:	f001 b8b5 	b.w	800760a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f040 84c6 	bne.w	8006e3e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	f240 8443 	bls.w	8006d56 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653c:	1ad2      	subs	r2, r2, r3
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800654a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 823e 	beq.w	80069ee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006576:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800657a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800657e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 809a 	bne.w	80066cc <USB_EPStartXfer+0x34c>
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4619      	mov	r1, r3
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	440a      	add	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	011a      	lsls	r2, r3, #4
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80065f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d122      	bne.n	800664a <USB_EPStartXfer+0x2ca>
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006616:	b29a      	uxth	r2, r3
 8006618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663a:	b29a      	uxth	r2, r3
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e079      	b.n	800673e <USB_EPStartXfer+0x3be>
 800664a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800664e:	2b3e      	cmp	r3, #62	; 0x3e
 8006650:	d81b      	bhi.n	800668a <USB_EPStartXfer+0x30a>
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800665c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <USB_EPStartXfer+0x2f2>
 8006668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800666c:	3301      	adds	r3, #1
 800666e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29a      	uxth	r2, r3
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e059      	b.n	800673e <USB_EPStartXfer+0x3be>
 800668a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <USB_EPStartXfer+0x32a>
 80066a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066a4:	3b01      	subs	r3, #1
 80066a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e038      	b.n	800673e <USB_EPStartXfer+0x3be>
 80066cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d130      	bne.n	800673e <USB_EPStartXfer+0x3be>
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	440a      	add	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006716:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4413      	add	r3, r2
 800671e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	b29a      	uxth	r2, r3
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	895b      	ldrh	r3, [r3, #10]
 800674a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6959      	ldr	r1, [r3, #20]
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	b29b      	uxth	r3, r3
 8006760:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006764:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006768:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f001 fd68 	bl	8008242 <USB_WritePMA>
            ep->xfer_buff += len;
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695a      	ldr	r2, [r3, #20]
 800677e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006782:	441a      	add	r2, r3
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6a1a      	ldr	r2, [r3, #32]
 800679c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d90f      	bls.n	80067cc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a1a      	ldr	r2, [r3, #32]
 80067b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	621a      	str	r2, [r3, #32]
 80067ca:	e00e      	b.n	80067ea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f040 809a 	bne.w	8006930 <USB_EPStartXfer+0x5b0>
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006804:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006808:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	4619      	mov	r1, r3
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800682a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800682e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	440a      	add	r2, r1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4413      	add	r3, r2
 8006852:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d122      	bne.n	80068ae <USB_EPStartXfer+0x52e>
 8006868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800687a:	b29a      	uxth	r2, r3
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	e083      	b.n	80069b6 <USB_EPStartXfer+0x636>
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b2:	2b3e      	cmp	r3, #62	; 0x3e
 80068b4:	d81b      	bhi.n	80068ee <USB_EPStartXfer+0x56e>
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <USB_EPStartXfer+0x556>
 80068cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068d0:	3301      	adds	r3, #1
 80068d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068da:	b29b      	uxth	r3, r3
 80068dc:	029b      	lsls	r3, r3, #10
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e063      	b.n	80069b6 <USB_EPStartXfer+0x636>
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <USB_EPStartXfer+0x58e>
 8006904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006908:	3b01      	subs	r3, #1
 800690a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800690e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006912:	b29b      	uxth	r3, r3
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e042      	b.n	80069b6 <USB_EPStartXfer+0x636>
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d13a      	bne.n	80069b6 <USB_EPStartXfer+0x636>
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006948:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800694c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006958:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800696e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006972:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	440a      	add	r2, r1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4413      	add	r3, r2
 8006996:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	891b      	ldrh	r3, [r3, #8]
 80069c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6959      	ldr	r1, [r3, #20]
 80069d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069e4:	6800      	ldr	r0, [r0, #0]
 80069e6:	f001 fc2c 	bl	8008242 <USB_WritePMA>
 80069ea:	f000 be0e 	b.w	800760a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d16d      	bne.n	8006ada <USB_EPStartXfer+0x75a>
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	4413      	add	r3, r2
 8006a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d112      	bne.n	8006a68 <USB_EPStartXfer+0x6e8>
 8006a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e063      	b.n	8006b30 <USB_EPStartXfer+0x7b0>
 8006a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6e:	d817      	bhi.n	8006aa0 <USB_EPStartXfer+0x720>
 8006a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <USB_EPStartXfer+0x710>
 8006a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e047      	b.n	8006b30 <USB_EPStartXfer+0x7b0>
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <USB_EPStartXfer+0x740>
 8006ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006aba:	3b01      	subs	r3, #1
 8006abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e02a      	b.n	8006b30 <USB_EPStartXfer+0x7b0>
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d122      	bne.n	8006b30 <USB_EPStartXfer+0x7b0>
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	653b      	str	r3, [r7, #80]	; 0x50
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0a:	4413      	add	r3, r2
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	011a      	lsls	r2, r3, #4
 8006b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	891b      	ldrh	r3, [r3, #8]
 8006b3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6959      	ldr	r1, [r3, #20]
 8006b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b56:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b5e:	6800      	ldr	r0, [r0, #0]
 8006b60:	f001 fb6f 	bl	8008242 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	441a      	add	r2, r3
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d90f      	bls.n	8006bbe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	621a      	str	r2, [r3, #32]
 8006bbc:	e00e      	b.n	8006bdc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d16d      	bne.n	8006cd4 <USB_EPStartXfer+0x954>
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	4413      	add	r3, r2
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	011a      	lsls	r2, r3, #4
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d112      	bne.n	8006c62 <USB_EPStartXfer+0x8e2>
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e05d      	b.n	8006d1e <USB_EPStartXfer+0x99e>
 8006c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c66:	2b3e      	cmp	r3, #62	; 0x3e
 8006c68:	d817      	bhi.n	8006c9a <USB_EPStartXfer+0x91a>
 8006c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <USB_EPStartXfer+0x90a>
 8006c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c84:	3301      	adds	r3, #1
 8006c86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e041      	b.n	8006d1e <USB_EPStartXfer+0x99e>
 8006c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <USB_EPStartXfer+0x93a>
 8006cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e024      	b.n	8006d1e <USB_EPStartXfer+0x99e>
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d11c      	bne.n	8006d1e <USB_EPStartXfer+0x99e>
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf8:	4413      	add	r3, r2
 8006cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8006cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	011a      	lsls	r2, r3, #4
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	895b      	ldrh	r3, [r3, #10]
 8006d2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6959      	ldr	r1, [r3, #20]
 8006d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f001 fa78 	bl	8008242 <USB_WritePMA>
 8006d52:	f000 bc5a 	b.w	800760a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	441a      	add	r2, r3
 8006daa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de2:	4413      	add	r3, r2
 8006de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	891b      	ldrh	r3, [r3, #8]
 8006e14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6959      	ldr	r1, [r3, #20]
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	f001 fa03 	bl	8008242 <USB_WritePMA>
 8006e3c:	e3e5      	b.n	800760a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 81bc 	beq.w	8007258 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d16d      	bne.n	8006fda <USB_EPStartXfer+0xc5a>
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f1e:	4413      	add	r3, r2
 8006f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	011a      	lsls	r2, r3, #4
 8006f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f38:	677b      	str	r3, [r7, #116]	; 0x74
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d112      	bne.n	8006f68 <USB_EPStartXfer+0xbe8>
 8006f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e060      	b.n	800702a <USB_EPStartXfer+0xcaa>
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f6e:	d817      	bhi.n	8006fa0 <USB_EPStartXfer+0xc20>
 8006f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <USB_EPStartXfer+0xc10>
 8006f86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	029b      	lsls	r3, r3, #10
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9c:	801a      	strh	r2, [r3, #0]
 8006f9e:	e044      	b.n	800702a <USB_EPStartXfer+0xcaa>
 8006fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <USB_EPStartXfer+0xc40>
 8006fb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006fc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e027      	b.n	800702a <USB_EPStartXfer+0xcaa>
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11f      	bne.n	800702a <USB_EPStartXfer+0xcaa>
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007000:	4413      	add	r3, r2
 8007002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	011a      	lsls	r2, r3, #4
 8007014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007018:	4413      	add	r3, r2
 800701a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800701e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007024:	b29a      	uxth	r2, r3
 8007026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007028:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	895b      	ldrh	r3, [r3, #10]
 8007036:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6959      	ldr	r1, [r3, #20]
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	b29b      	uxth	r3, r3
 800704c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007050:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007054:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007058:	6800      	ldr	r0, [r0, #0]
 800705a:	f001 f8f2 	bl	8008242 <USB_WritePMA>
          ep->xfer_buff += len;
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706e:	441a      	add	r2, r3
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a1a      	ldr	r2, [r3, #32]
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	429a      	cmp	r2, r3
 8007096:	d90f      	bls.n	80070b8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6a1a      	ldr	r2, [r3, #32]
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	621a      	str	r2, [r3, #32]
 80070b6:	e00e      	b.n	80070d6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80070d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8295 	beq.w	800760a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d16d      	bne.n	80071cc <USB_EPStartXfer+0xe4c>
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007110:	4413      	add	r3, r2
 8007112:	66bb      	str	r3, [r7, #104]	; 0x68
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	011a      	lsls	r2, r3, #4
 8007122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007124:	4413      	add	r3, r2
 8007126:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800712a:	667b      	str	r3, [r7, #100]	; 0x64
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d112      	bne.n	800715a <USB_EPStartXfer+0xdda>
 8007134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713e:	b29a      	uxth	r2, r3
 8007140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	e063      	b.n	8007222 <USB_EPStartXfer+0xea2>
 800715a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715e:	2b3e      	cmp	r3, #62	; 0x3e
 8007160:	d817      	bhi.n	8007192 <USB_EPStartXfer+0xe12>
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800716c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <USB_EPStartXfer+0xe02>
 8007178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29a      	uxth	r2, r3
 800718c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	e047      	b.n	8007222 <USB_EPStartXfer+0xea2>
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <USB_EPStartXfer+0xe32>
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ac:	3b01      	subs	r3, #1
 80071ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e02a      	b.n	8007222 <USB_EPStartXfer+0xea2>
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d122      	bne.n	8007222 <USB_EPStartXfer+0xea2>
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	673b      	str	r3, [r7, #112]	; 0x70
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071fc:	4413      	add	r3, r2
 80071fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	011a      	lsls	r2, r3, #4
 800720e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007210:	4413      	add	r3, r2
 8007212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721c:	b29a      	uxth	r2, r3
 800721e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	891b      	ldrh	r3, [r3, #8]
 800722e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6959      	ldr	r1, [r3, #20]
 800723e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007242:	b29b      	uxth	r3, r3
 8007244:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007248:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800724c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007250:	6800      	ldr	r0, [r0, #0]
 8007252:	f000 fff6 	bl	8008242 <USB_WritePMA>
 8007256:	e1d8      	b.n	800760a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d178      	bne.n	800735a <USB_EPStartXfer+0xfda>
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007284:	b29b      	uxth	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800728c:	4413      	add	r3, r2
 800728e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	011a      	lsls	r2, r3, #4
 80072a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d116      	bne.n	80072e4 <USB_EPStartXfer+0xf64>
 80072b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e06b      	b.n	80073bc <USB_EPStartXfer+0x103c>
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	2b3e      	cmp	r3, #62	; 0x3e
 80072ea:	d818      	bhi.n	800731e <USB_EPStartXfer+0xf9e>
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <USB_EPStartXfer+0xf8c>
 8007302:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007306:	3301      	adds	r3, #1
 8007308:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800730c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007310:	b29b      	uxth	r3, r3
 8007312:	029b      	lsls	r3, r3, #10
 8007314:	b29a      	uxth	r2, r3
 8007316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e04e      	b.n	80073bc <USB_EPStartXfer+0x103c>
 800731e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <USB_EPStartXfer+0xfbe>
 8007334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007338:	3b01      	subs	r3, #1
 800733a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800733e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e030      	b.n	80073bc <USB_EPStartXfer+0x103c>
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d128      	bne.n	80073bc <USB_EPStartXfer+0x103c>
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800738e:	4413      	add	r3, r2
 8007390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	011a      	lsls	r2, r3, #4
 80073a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	891b      	ldrh	r3, [r3, #8]
 80073c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6959      	ldr	r1, [r3, #20]
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	f000 ff29 	bl	8008242 <USB_WritePMA>
          ep->xfer_buff += len;
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007400:	441a      	add	r2, r3
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	429a      	cmp	r2, r3
 8007428:	d90f      	bls.n	800744a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	621a      	str	r2, [r3, #32]
 8007448:	e00e      	b.n	8007468 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2200      	movs	r2, #0
 8007466:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80cc 	beq.w	800760a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d178      	bne.n	8007582 <USB_EPStartXfer+0x1202>
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074b4:	4413      	add	r3, r2
 80074b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	011a      	lsls	r2, r3, #4
 80074c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d116      	bne.n	800750c <USB_EPStartXfer+0x118c>
 80074de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e064      	b.n	80075d6 <USB_EPStartXfer+0x1256>
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	2b3e      	cmp	r3, #62	; 0x3e
 8007512:	d818      	bhi.n	8007546 <USB_EPStartXfer+0x11c6>
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <USB_EPStartXfer+0x11b4>
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752e:	3301      	adds	r3, #1
 8007530:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007538:	b29b      	uxth	r3, r3
 800753a:	029b      	lsls	r3, r3, #10
 800753c:	b29a      	uxth	r2, r3
 800753e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	e047      	b.n	80075d6 <USB_EPStartXfer+0x1256>
 8007546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <USB_EPStartXfer+0x11e6>
 800755c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007560:	3b01      	subs	r3, #1
 8007562:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007578:	b29a      	uxth	r2, r3
 800757a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800757e:	801a      	strh	r2, [r3, #0]
 8007580:	e029      	b.n	80075d6 <USB_EPStartXfer+0x1256>
 8007582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d121      	bne.n	80075d6 <USB_EPStartXfer+0x1256>
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075a8:	4413      	add	r3, r2
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	011a      	lsls	r2, r3, #4
 80075bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	895b      	ldrh	r3, [r3, #10]
 80075e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6959      	ldr	r1, [r3, #20]
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007600:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	f000 fe1c 	bl	8008242 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800762c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	8013      	strh	r3, [r2, #0]
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007642:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007646:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800764a:	8812      	ldrh	r2, [r2, #0]
 800764c:	f082 0210 	eor.w	r2, r2, #16
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800765a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800765e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007662:	8812      	ldrh	r2, [r2, #0]
 8007664:	f082 0220 	eor.w	r2, r2, #32
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007688:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	f000 bc9f 	b.w	8007fe4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80076a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	7b1b      	ldrb	r3, [r3, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 80ae 	bne.w	8007814 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d917      	bls.n	8007704 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	1ad2      	subs	r2, r2, r3
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	619a      	str	r2, [r3, #24]
 8007702:	e00e      	b.n	8007722 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800774c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	011a      	lsls	r2, r3, #4
 800775a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800775e:	4413      	add	r3, r2
 8007760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <USB_EPStartXfer+0x141e>
 8007770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e3e8      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
 800779e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a2:	2b3e      	cmp	r3, #62	; 0x3e
 80077a4:	d818      	bhi.n	80077d8 <USB_EPStartXfer+0x1458>
 80077a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <USB_EPStartXfer+0x1446>
 80077bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077c0:	3301      	adds	r3, #1
 80077c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	029b      	lsls	r3, r3, #10
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e3cb      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
 80077d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_EPStartXfer+0x1478>
 80077ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780a:	b29a      	uxth	r2, r3
 800780c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	e3ad      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	78db      	ldrb	r3, [r3, #3]
 8007820:	2b02      	cmp	r3, #2
 8007822:	f040 8200 	bne.w	8007c26 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 8091 	bne.w	800795a <USB_EPStartXfer+0x15da>
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007854:	b29b      	uxth	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800785c:	4413      	add	r3, r2
 800785e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	011a      	lsls	r2, r3, #4
 8007870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007874:	4413      	add	r3, r2
 8007876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d116      	bne.n	80078bc <USB_EPStartXfer+0x153c>
 800788e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e083      	b.n	80079c4 <USB_EPStartXfer+0x1644>
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	2b3e      	cmp	r3, #62	; 0x3e
 80078ca:	d820      	bhi.n	800790e <USB_EPStartXfer+0x158e>
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USB_EPStartXfer+0x157c>
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f6:	3301      	adds	r3, #1
 80078f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007900:	b29b      	uxth	r3, r3
 8007902:	029b      	lsls	r3, r3, #10
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	e05a      	b.n	80079c4 <USB_EPStartXfer+0x1644>
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	2b00      	cmp	r3, #0
 8007932:	d104      	bne.n	800793e <USB_EPStartXfer+0x15be>
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007938:	3b01      	subs	r3, #1
 800793a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007942:	b29b      	uxth	r3, r3
 8007944:	029b      	lsls	r3, r3, #10
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007950:	b29a      	uxth	r2, r3
 8007952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e034      	b.n	80079c4 <USB_EPStartXfer+0x1644>
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d12c      	bne.n	80079c4 <USB_EPStartXfer+0x1644>
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800798e:	4413      	add	r3, r2
 8007990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	011a      	lsls	r2, r3, #4
 80079a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079a6:	4413      	add	r3, r2
 80079a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8091 	bne.w	8007b06 <USB_EPStartXfer+0x1786>
 80079e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a08:	4413      	add	r3, r2
 8007a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	011a      	lsls	r2, r3, #4
 8007a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d116      	bne.n	8007a68 <USB_EPStartXfer+0x16e8>
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e07c      	b.n	8007b62 <USB_EPStartXfer+0x17e2>
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b3e      	cmp	r3, #62	; 0x3e
 8007a76:	d820      	bhi.n	8007aba <USB_EPStartXfer+0x173a>
 8007a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USB_EPStartXfer+0x1728>
 8007a9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007aa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	029b      	lsls	r3, r3, #10
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e053      	b.n	8007b62 <USB_EPStartXfer+0x17e2>
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <USB_EPStartXfer+0x176a>
 8007ae0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007aea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	029b      	lsls	r3, r3, #10
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	e02d      	b.n	8007b62 <USB_EPStartXfer+0x17e2>
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d125      	bne.n	8007b62 <USB_EPStartXfer+0x17e2>
 8007b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	011a      	lsls	r2, r3, #4
 8007b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b44:	4413      	add	r3, r2
 8007b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 81fe 	beq.w	8007f70 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <USB_EPStartXfer+0x182c>
 8007ba0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10d      	bne.n	8007bc8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 81db 	bne.w	8007f70 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 81d4 	bne.w	8007f70 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	441a      	add	r2, r3
 8007c0c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	8013      	strh	r3, [r2, #0]
 8007c24:	e1a4      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	78db      	ldrb	r3, [r3, #3]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	f040 819a 	bne.w	8007f6c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d917      	bls.n	8007c84 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699a      	ldr	r2, [r3, #24]
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	1ad2      	subs	r2, r2, r3
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	619a      	str	r2, [r3, #24]
 8007c82:	e00e      	b.n	8007ca2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d178      	bne.n	8007da4 <USB_EPStartXfer+0x1a24>
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	011a      	lsls	r2, r3, #4
 8007cea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cee:	4413      	add	r3, r2
 8007cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d116      	bne.n	8007d2e <USB_EPStartXfer+0x19ae>
 8007d00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	e06b      	b.n	8007e06 <USB_EPStartXfer+0x1a86>
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	2b3e      	cmp	r3, #62	; 0x3e
 8007d34:	d818      	bhi.n	8007d68 <USB_EPStartXfer+0x19e8>
 8007d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <USB_EPStartXfer+0x19d6>
 8007d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d50:	3301      	adds	r3, #1
 8007d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e04e      	b.n	8007e06 <USB_EPStartXfer+0x1a86>
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <USB_EPStartXfer+0x1a08>
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	e030      	b.n	8007e06 <USB_EPStartXfer+0x1a86>
 8007da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d128      	bne.n	8007e06 <USB_EPStartXfer+0x1a86>
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	4413      	add	r3, r2
 8007dda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	011a      	lsls	r2, r3, #4
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	4413      	add	r3, r2
 8007df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007df6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d178      	bne.n	8007f16 <USB_EPStartXfer+0x1b96>
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e48:	4413      	add	r3, r2
 8007e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	011a      	lsls	r2, r3, #4
 8007e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d116      	bne.n	8007ea0 <USB_EPStartXfer+0x1b20>
 8007e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e84:	801a      	strh	r2, [r3, #0]
 8007e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	e067      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ea6:	d818      	bhi.n	8007eda <USB_EPStartXfer+0x1b5a>
 8007ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <USB_EPStartXfer+0x1b48>
 8007ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ed6:	801a      	strh	r2, [r3, #0]
 8007ed8:	e04a      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
 8007eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <USB_EPStartXfer+0x1b7a>
 8007ef0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	029b      	lsls	r3, r3, #10
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e02c      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d124      	bne.n	8007f70 <USB_EPStartXfer+0x1bf0>
 8007f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	011a      	lsls	r2, r3, #4
 8007f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f54:	4413      	add	r3, r2
 8007f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	e001      	b.n	8007f70 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e03a      	b.n	8007fe6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007fa6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007faa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d020      	beq.n	8008044 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008018:	81bb      	strh	r3, [r7, #12]
 800801a:	89bb      	ldrh	r3, [r7, #12]
 800801c:	f083 0310 	eor.w	r3, r3, #16
 8008020:	81bb      	strh	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	441a      	add	r2, r3
 800802c:	89bb      	ldrh	r3, [r7, #12]
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]
 8008042:	e01f      	b.n	8008084 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	81fb      	strh	r3, [r7, #14]
 800805c:	89fb      	ldrh	r3, [r7, #14]
 800805e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008062:	81fb      	strh	r3, [r7, #14]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	441a      	add	r2, r3
 800806e:	89fb      	ldrh	r3, [r7, #14]
 8008070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008080:	b29b      	uxth	r3, r3
 8008082:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr

08008090 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	7b1b      	ldrb	r3, [r3, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 809d 	bne.w	80081de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d04c      	beq.n	8008146 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	823b      	strh	r3, [r7, #16]
 80080ba:	8a3b      	ldrh	r3, [r7, #16]
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01b      	beq.n	80080fc <USB_EPClearStall+0x6c>
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080da:	81fb      	strh	r3, [r7, #14]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	89fb      	ldrh	r3, [r7, #14]
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	78db      	ldrb	r3, [r3, #3]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d06c      	beq.n	80081de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811a:	81bb      	strh	r3, [r7, #12]
 800811c:	89bb      	ldrh	r3, [r7, #12]
 800811e:	f083 0320 	eor.w	r3, r3, #32
 8008122:	81bb      	strh	r3, [r7, #12]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	89bb      	ldrh	r3, [r7, #12]
 8008130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	b29b      	uxth	r3, r3
 8008142:	8013      	strh	r3, [r2, #0]
 8008144:	e04b      	b.n	80081de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	82fb      	strh	r3, [r7, #22]
 8008154:	8afb      	ldrh	r3, [r7, #22]
 8008156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01b      	beq.n	8008196 <USB_EPClearStall+0x106>
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008174:	82bb      	strh	r3, [r7, #20]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	441a      	add	r2, r3
 8008180:	8abb      	ldrh	r3, [r7, #20]
 8008182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800818a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008192:	b29b      	uxth	r3, r3
 8008194:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ac:	827b      	strh	r3, [r7, #18]
 80081ae:	8a7b      	ldrh	r3, [r7, #18]
 80081b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081b4:	827b      	strh	r3, [r7, #18]
 80081b6:	8a7b      	ldrh	r3, [r7, #18]
 80081b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081bc:	827b      	strh	r3, [r7, #18]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	8a7b      	ldrh	r3, [r7, #18]
 80081ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr

080081ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2280      	movs	r2, #128	; 0x80
 8008200:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr

08008224 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008232:	b29b      	uxth	r3, r3
 8008234:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008242:	b480      	push	{r7}
 8008244:	b08d      	sub	sp, #52	; 0x34
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	4611      	mov	r1, r2
 800824e:	461a      	mov	r2, r3
 8008250:	460b      	mov	r3, r1
 8008252:	80fb      	strh	r3, [r7, #6]
 8008254:	4613      	mov	r3, r2
 8008256:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008258:	88bb      	ldrh	r3, [r7, #4]
 800825a:	3301      	adds	r3, #1
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	005a      	lsls	r2, r3, #1
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800827a:	e01e      	b.n	80082ba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	3301      	adds	r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	b29b      	uxth	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	b29a      	uxth	r2, r3
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	3302      	adds	r3, #2
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	3302      	adds	r3, #2
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	3301      	adds	r3, #1
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	3b01      	subs	r3, #1
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1dd      	bne.n	800827c <USB_WritePMA+0x3a>
  }
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	3734      	adds	r7, #52	; 0x34
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b08b      	sub	sp, #44	; 0x2c
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	80fb      	strh	r3, [r7, #6]
 80082de:	4613      	mov	r3, r2
 80082e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082e2:	88bb      	ldrh	r3, [r7, #4]
 80082e4:	085b      	lsrs	r3, r3, #1
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	005a      	lsls	r2, r3, #1
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082fe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
 8008304:	e01b      	b.n	800833e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	3302      	adds	r3, #2
 8008312:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	0a1b      	lsrs	r3, r3, #8
 8008326:	b2da      	uxtb	r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	3301      	adds	r3, #1
 8008330:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	3302      	adds	r3, #2
 8008336:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	3b01      	subs	r3, #1
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e0      	bne.n	8008306 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008344:	88bb      	ldrh	r3, [r7, #4]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	b2da      	uxtb	r2, r3
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	701a      	strb	r2, [r3, #0]
  }
}
 8008360:	bf00      	nop
 8008362:	372c      	adds	r7, #44	; 0x2c
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800837a:	2302      	movs	r3, #2
 800837c:	2203      	movs	r2, #3
 800837e:	2181      	movs	r1, #129	; 0x81
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 fd04 	bl	8009d8e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800838c:	2302      	movs	r3, #2
 800838e:	2203      	movs	r2, #3
 8008390:	2101      	movs	r1, #1
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 fcfb 	bl	8009d8e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80083a0:	2024      	movs	r0, #36	; 0x24
 80083a2:	f001 fe09 	bl	8009fb8 <USBD_static_malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e012      	b.n	80083e4 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083c4:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2020 	strb.w	r2, [r3, #32]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	230d      	movs	r3, #13
 80083dc:	2101      	movs	r1, #1
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fdc6 	bl	8009f70 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80083fa:	2181      	movs	r1, #129	; 0x81
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fcec 	bl	8009dda <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008408:	2101      	movs	r1, #1
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 fce5 	bl	8009dda <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00e      	beq.n	8008440 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008432:	4618      	mov	r0, r3
 8008434:	f001 fdcc 	bl	8009fd0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800845c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008476:	2b00      	cmp	r3, #0
 8008478:	d051      	beq.n	800851e <USBD_CUSTOM_HID_Setup+0xd2>
 800847a:	2b20      	cmp	r3, #32
 800847c:	f040 80d8 	bne.w	8008630 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	3b02      	subs	r3, #2
 8008486:	2b09      	cmp	r3, #9
 8008488:	d841      	bhi.n	800850e <USBD_CUSTOM_HID_Setup+0xc2>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBD_CUSTOM_HID_Setup+0x44>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084c7 	.word	0x080084c7
 8008498:	0800850f 	.word	0x0800850f
 800849c:	0800850f 	.word	0x0800850f
 80084a0:	0800850f 	.word	0x0800850f
 80084a4:	0800850f 	.word	0x0800850f
 80084a8:	0800850f 	.word	0x0800850f
 80084ac:	080084f9 	.word	0x080084f9
 80084b0:	080084d7 	.word	0x080084d7
 80084b4:	080084b9 	.word	0x080084b9
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	611a      	str	r2, [r3, #16]
      break;
 80084c4:	e02a      	b.n	800851c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	3310      	adds	r3, #16
 80084ca:	2201      	movs	r2, #1
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f92b 	bl	800972a <USBD_CtlSendData>
      break;
 80084d4:	e022      	b.n	800851c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	885b      	ldrh	r3, [r3, #2]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	b29b      	uxth	r3, r3
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	615a      	str	r2, [r3, #20]
      break;
 80084e6:	e019      	b.n	800851c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	3314      	adds	r3, #20
 80084ec:	2201      	movs	r2, #1
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f91a 	bl	800972a <USBD_CtlSendData>
      break;
 80084f6:	e011      	b.n	800851c <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2201      	movs	r2, #1
 80084fc:	61da      	str	r2, [r3, #28]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	88db      	ldrh	r3, [r3, #6]
 8008504:	461a      	mov	r2, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f93d 	bl	8009786 <USBD_CtlPrepareRx>
      break;
 800850c:	e006      	b.n	800851c <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f8a0 	bl	8009656 <USBD_CtlError>
      ret = USBD_FAIL;
 8008516:	2302      	movs	r3, #2
 8008518:	75fb      	strb	r3, [r7, #23]
      break;
 800851a:	bf00      	nop
    }
    break;
 800851c:	e08f      	b.n	800863e <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b0b      	cmp	r3, #11
 8008524:	d87c      	bhi.n	8008620 <USBD_CUSTOM_HID_Setup+0x1d4>
 8008526:	a201      	add	r2, pc, #4	; (adr r2, 800852c <USBD_CUSTOM_HID_Setup+0xe0>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	0800855d 	.word	0x0800855d
 8008530:	08008621 	.word	0x08008621
 8008534:	08008621 	.word	0x08008621
 8008538:	08008621 	.word	0x08008621
 800853c:	08008621 	.word	0x08008621
 8008540:	08008621 	.word	0x08008621
 8008544:	08008585 	.word	0x08008585
 8008548:	08008621 	.word	0x08008621
 800854c:	08008621 	.word	0x08008621
 8008550:	08008621 	.word	0x08008621
 8008554:	080085d3 	.word	0x080085d3
 8008558:	080085fb 	.word	0x080085fb
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008562:	2b03      	cmp	r3, #3
 8008564:	d107      	bne.n	8008576 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008566:	f107 030e 	add.w	r3, r7, #14
 800856a:	2202      	movs	r2, #2
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 f8db 	bl	800972a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008574:	e05b      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f86c 	bl	8009656 <USBD_CtlError>
			  ret = USBD_FAIL;
 800857e:	2302      	movs	r3, #2
 8008580:	75fb      	strb	r3, [r7, #23]
      break;
 8008582:	e054      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	2b22      	cmp	r3, #34	; 0x22
 800858e:	d10b      	bne.n	80085a8 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	2b41      	cmp	r3, #65	; 0x41
 8008596:	bf28      	it	cs
 8008598:	2341      	movcs	r3, #65	; 0x41
 800859a:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	e00d      	b.n	80085c4 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	885b      	ldrh	r3, [r3, #2]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b21      	cmp	r3, #33	; 0x21
 80085b2:	d107      	bne.n	80085c4 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80085b4:	4b24      	ldr	r3, [pc, #144]	; (8008648 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80085b6:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	88db      	ldrh	r3, [r3, #6]
 80085bc:	2b09      	cmp	r3, #9
 80085be:	bf28      	it	cs
 80085c0:	2309      	movcs	r3, #9
 80085c2:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80085c4:	8bfb      	ldrh	r3, [r7, #30]
 80085c6:	461a      	mov	r2, r3
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 f8ad 	bl	800972a <USBD_CtlSendData>
      break;
 80085d0:	e02d      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d107      	bne.n	80085ec <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3318      	adds	r3, #24
 80085e0:	2201      	movs	r2, #1
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f8a0 	bl	800972a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80085ea:	e020      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f831 	bl	8009656 <USBD_CtlError>
			  ret = USBD_FAIL;
 80085f4:	2302      	movs	r3, #2
 80085f6:	75fb      	strb	r3, [r7, #23]
      break;
 80085f8:	e019      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008600:	2b03      	cmp	r3, #3
 8008602:	d106      	bne.n	8008612 <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	619a      	str	r2, [r3, #24]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008610:	e00d      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f81e 	bl	8009656 <USBD_CtlError>
			  ret = USBD_FAIL;
 800861a:	2302      	movs	r3, #2
 800861c:	75fb      	strb	r3, [r7, #23]
      break;
 800861e:	e006      	b.n	800862e <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 f817 	bl	8009656 <USBD_CtlError>
      ret = USBD_FAIL;
 8008628:	2302      	movs	r3, #2
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
    }
    break;
 800862e:	e006      	b.n	800863e <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f001 f80f 	bl	8009656 <USBD_CtlError>
    ret = USBD_FAIL;
 8008638:	2302      	movs	r3, #2
 800863a:	75fb      	strb	r3, [r7, #23]
    break;
 800863c:	bf00      	nop
  }
  return ret;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	200000c8 	.word	0x200000c8

0800864c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008660:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008668:	2b03      	cmp	r3, #3
 800866a:	d111      	bne.n	8008690 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2020 	strb.w	r2, [r3, #32]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	2181      	movs	r1, #129	; 0x81
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f001 fc50 	bl	8009f2a <USBD_LL_Transmit>
 800868a:	e001      	b.n	8008690 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2229      	movs	r2, #41	; 0x29
 80086a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000044 	.word	0x20000044

080086bc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2229      	movs	r2, #41	; 0x29
 80086c8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80086ca:	4b03      	ldr	r3, [pc, #12]	; (80086d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000070 	.word	0x20000070

080086dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2229      	movs	r2, #41	; 0x29
 80086e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80086ea:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	2000009c 	.word	0x2000009c

080086fc <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2020 	strb.w	r2, [r3, #32]

  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008732:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	7810      	ldrb	r0, [r2, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	7852      	ldrb	r2, [r2, #1]
 8008744:	4611      	mov	r1, r2
 8008746:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	230d      	movs	r3, #13
 800874c:	2101      	movs	r1, #1
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fc0e 	bl	8009f70 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800876c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10c      	bne.n	8008790 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	7810      	ldrb	r0, [r2, #0]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	7852      	ldrb	r2, [r2, #1]
 8008786:	4611      	mov	r1, r2
 8008788:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	61da      	str	r2, [r3, #28]
  }

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	220a      	movs	r2, #10
 80087a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80087aa:	4b03      	ldr	r3, [pc, #12]	; (80087b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	200000d4 	.word	0x200000d4

080087bc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087c6:	2302      	movs	r3, #2
 80087c8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr

080087e8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087fc:	2302      	movs	r3, #2
 80087fe:	e01a      	b.n	8008836 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	79fa      	ldrb	r2, [r7, #7]
 800882c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f001 fa42 	bl	8009cb8 <USBD_LL_Init>

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d006      	beq.n	8008860 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
 800885e:	e001      	b.n	8008864 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008860:	2302      	movs	r3, #2
 8008862:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 fa6d 	bl	8009d58 <USBD_LL_Start>

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fe63 	bl	80095de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	2b02      	cmp	r3, #2
 800893a:	d016      	beq.n	800896a <USBD_LL_SetupStage+0x6a>
 800893c:	2b02      	cmp	r3, #2
 800893e:	d81c      	bhi.n	800897a <USBD_LL_SetupStage+0x7a>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <USBD_LL_SetupStage+0x4a>
 8008944:	2b01      	cmp	r3, #1
 8008946:	d008      	beq.n	800895a <USBD_LL_SetupStage+0x5a>
 8008948:	e017      	b.n	800897a <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9c6 	bl	8008ce4 <USBD_StdDevReq>
    break;
 8008958:	e01a      	b.n	8008990 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa28 	bl	8008db8 <USBD_StdItfReq>
    break;
 8008968:	e012      	b.n	8008990 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa68 	bl	8008e48 <USBD_StdEPReq>
    break;
 8008978:	e00a      	b.n	8008990 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008980:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fa45 	bl	8009e18 <USBD_LL_StallEP>
    break;
 800898e:	bf00      	nop
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b086      	sub	sp, #24
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	460b      	mov	r3, r1
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d14b      	bne.n	8008a46 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80089b4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d134      	bne.n	8008a2a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d919      	bls.n	8008a00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	1ad2      	subs	r2, r2, r3
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d203      	bcs.n	80089ee <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	e002      	b.n	80089f4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fee2 	bl	80097c2 <USBD_CtlContinueRx>
 80089fe:	e038      	b.n	8008a72 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d105      	bne.n	8008a22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fedf 	bl	80097e6 <USBD_CtlSendStatus>
 8008a28:	e023      	b.n	8008a72 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a30:	2b05      	cmp	r3, #5
 8008a32:	d11e      	bne.n	8008a72 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f9ea 	bl	8009e18 <USBD_LL_StallEP>
 8008a44:	e015      	b.n	8008a72 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00d      	beq.n	8008a6e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d108      	bne.n	8008a6e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	7afa      	ldrb	r2, [r7, #11]
 8008a66:	4611      	mov	r1, r2
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
 8008a6c:	e001      	b.n	8008a72 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e000      	b.n	8008a74 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	460b      	mov	r3, r1
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d17f      	bne.n	8008b90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3314      	adds	r3, #20
 8008a94:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d15c      	bne.n	8008b5a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d915      	bls.n	8008ad8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fe4c 	bl	8009762 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008aca:	2300      	movs	r3, #0
 8008acc:	2200      	movs	r2, #0
 8008ace:	2100      	movs	r1, #0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f001 fa4d 	bl	8009f70 <USBD_LL_PrepareReceive>
 8008ad6:	e04e      	b.n	8008b76 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	6912      	ldr	r2, [r2, #16]
 8008ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ae4:	fb01 f202 	mul.w	r2, r1, r2
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d11c      	bne.n	8008b28 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d316      	bcc.n	8008b28 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d20f      	bcs.n	8008b28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fe28 	bl	8009762 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fa25 	bl	8009f70 <USBD_LL_PrepareReceive>
 8008b26:	e026      	b.n	8008b76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00a      	beq.n	8008b4a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d105      	bne.n	8008b4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b4a:	2180      	movs	r1, #128	; 0x80
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f001 f963 	bl	8009e18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fe5a 	bl	800980c <USBD_CtlReceiveStatus>
 8008b58:	e00d      	b.n	8008b76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d004      	beq.n	8008b6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d103      	bne.n	8008b76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b6e:	2180      	movs	r1, #128	; 0x80
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f001 f951 	bl	8009e18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d11d      	bne.n	8008bbc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fe81 	bl	8008888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008b8e:	e015      	b.n	8008bbc <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00d      	beq.n	8008bb8 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d108      	bne.n	8008bb8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	7afa      	ldrb	r2, [r7, #11]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	4798      	blx	r3
 8008bb6:	e001      	b.n	8008bbc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e000      	b.n	8008bbe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 f8da 	bl	8009d8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2240      	movs	r2, #64	; 0x40
 8008be6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	2200      	movs	r2, #0
 8008bee:	2180      	movs	r1, #128	; 0x80
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f8cc 	bl	8009d8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2240      	movs	r2, #64	; 0x40
 8008c00:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6852      	ldr	r2, [r2, #4]
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	4611      	mov	r1, r2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr

08008c8e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d10b      	bne.n	8008cd8 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d005      	beq.n	8008cd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d005      	beq.n	8008d0a <USBD_StdDevReq+0x26>
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d84f      	bhi.n	8008da2 <USBD_StdDevReq+0xbe>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <USBD_StdDevReq+0x36>
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d14b      	bne.n	8008da2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3
    break;
 8008d18:	e048      	b.n	8008dac <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b09      	cmp	r3, #9
 8008d20:	d839      	bhi.n	8008d96 <USBD_StdDevReq+0xb2>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <USBD_StdDevReq+0x44>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	08008d8d 	.word	0x08008d8d
 8008d30:	08008d97 	.word	0x08008d97
 8008d34:	08008d83 	.word	0x08008d83
 8008d38:	08008d97 	.word	0x08008d97
 8008d3c:	08008d5b 	.word	0x08008d5b
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d97 	.word	0x08008d97
 8008d48:	08008d6f 	.word	0x08008d6f
 8008d4c:	08008d65 	.word	0x08008d65
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9da 	bl	800910c <USBD_GetDescriptor>
      break;
 8008d58:	e022      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 facf 	bl	8009300 <USBD_SetAddress>
      break;
 8008d62:	e01d      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fb0e 	bl	8009388 <USBD_SetConfig>
      break;
 8008d6c:	e018      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb97 	bl	80094a4 <USBD_GetConfig>
      break;
 8008d76:	e013      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbc7 	bl	800950e <USBD_GetStatus>
      break;
 8008d80:	e00e      	b.n	8008da0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fbf5 	bl	8009574 <USBD_SetFeature>
      break;
 8008d8a:	e009      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc04 	bl	800959c <USBD_ClrFeature>
      break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc5c 	bl	8009656 <USBD_CtlError>
      break;
 8008d9e:	bf00      	nop
    }
    break;
 8008da0:	e004      	b.n	8008dac <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fc56 	bl	8009656 <USBD_CtlError>
    break;
 8008daa:	bf00      	nop
  }

  return ret;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d005      	beq.n	8008dde <USBD_StdItfReq+0x26>
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	d82e      	bhi.n	8008e34 <USBD_StdItfReq+0x7c>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <USBD_StdItfReq+0x26>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d12a      	bne.n	8008e34 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d81d      	bhi.n	8008e26 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	889b      	ldrh	r3, [r3, #4]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d813      	bhi.n	8008e1c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d110      	bne.n	8008e30 <USBD_StdItfReq+0x78>
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fce6 	bl	80097e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008e1a:	e009      	b.n	8008e30 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fc19 	bl	8009656 <USBD_CtlError>
      break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fc14 	bl	8009656 <USBD_CtlError>
      break;
 8008e2e:	e000      	b.n	8008e32 <USBD_StdItfReq+0x7a>
      break;
 8008e30:	bf00      	nop
    }
    break;
 8008e32:	e004      	b.n	8008e3e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fc0d 	bl	8009656 <USBD_CtlError>
    break;
 8008e3c:	bf00      	nop
  }

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	889b      	ldrh	r3, [r3, #4]
 8008e5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d007      	beq.n	8008e78 <USBD_StdEPReq+0x30>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	f200 8144 	bhi.w	80090f6 <USBD_StdEPReq+0x2ae>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <USBD_StdEPReq+0x40>
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	f040 813f 	bne.w	80090f6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
    break;
 8008e86:	e13b      	b.n	8009100 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d10a      	bne.n	8008eaa <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	e12b      	b.n	8009102 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d007      	beq.n	8008ec2 <USBD_StdEPReq+0x7a>
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f300 8119 	bgt.w	80090ea <USBD_StdEPReq+0x2a2>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d072      	beq.n	8008fa2 <USBD_StdEPReq+0x15a>
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d03a      	beq.n	8008f36 <USBD_StdEPReq+0xee>
 8008ec0:	e113      	b.n	80090ea <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d002      	beq.n	8008ed2 <USBD_StdEPReq+0x8a>
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d015      	beq.n	8008efc <USBD_StdEPReq+0xb4>
 8008ed0:	e02b      	b.n	8008f2a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00c      	beq.n	8008ef2 <USBD_StdEPReq+0xaa>
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b80      	cmp	r3, #128	; 0x80
 8008edc:	d009      	beq.n	8008ef2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 ff98 	bl	8009e18 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008ee8:	2180      	movs	r1, #128	; 0x80
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ff94 	bl	8009e18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ef0:	e020      	b.n	8008f34 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fbae 	bl	8009656 <USBD_CtlError>
        break;
 8008efa:	e01b      	b.n	8008f34 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10e      	bne.n	8008f22 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <USBD_StdEPReq+0xda>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d008      	beq.n	8008f22 <USBD_StdEPReq+0xda>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	88db      	ldrh	r3, [r3, #6]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 ff7b 	bl	8009e18 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc5f 	bl	80097e6 <USBD_CtlSendStatus>

        break;
 8008f28:	e004      	b.n	8008f34 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb92 	bl	8009656 <USBD_CtlError>
        break;
 8008f32:	bf00      	nop
      }
      break;
 8008f34:	e0de      	b.n	80090f4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d002      	beq.n	8008f46 <USBD_StdEPReq+0xfe>
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d015      	beq.n	8008f70 <USBD_StdEPReq+0x128>
 8008f44:	e026      	b.n	8008f94 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00c      	beq.n	8008f66 <USBD_StdEPReq+0x11e>
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b80      	cmp	r3, #128	; 0x80
 8008f50:	d009      	beq.n	8008f66 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 ff5e 	bl	8009e18 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008f5c:	2180      	movs	r1, #128	; 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 ff5a 	bl	8009e18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008f64:	e01c      	b.n	8008fa0 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb74 	bl	8009656 <USBD_CtlError>
        break;
 8008f6e:	e017      	b.n	8008fa0 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d112      	bne.n	8008f9e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 ff65 	bl	8009e56 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc2a 	bl	80097e6 <USBD_CtlSendStatus>
        }
        break;
 8008f92:	e004      	b.n	8008f9e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fb5d 	bl	8009656 <USBD_CtlError>
        break;
 8008f9c:	e000      	b.n	8008fa0 <USBD_StdEPReq+0x158>
        break;
 8008f9e:	bf00      	nop
      }
      break;
 8008fa0:	e0a8      	b.n	80090f4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d002      	beq.n	8008fb2 <USBD_StdEPReq+0x16a>
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d031      	beq.n	8009014 <USBD_StdEPReq+0x1cc>
 8008fb0:	e095      	b.n	80090de <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <USBD_StdEPReq+0x180>
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b80      	cmp	r3, #128	; 0x80
 8008fbc:	d004      	beq.n	8008fc8 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fb48 	bl	8009656 <USBD_CtlError>
          break;
 8008fc6:	e08f      	b.n	80090e8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da0b      	bge.n	8008fe8 <USBD_StdEPReq+0x1a0>
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	3310      	adds	r3, #16
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	e00a      	b.n	8008ffe <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2202      	movs	r2, #2
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fb8c 	bl	800972a <USBD_CtlSendData>
          break;
 8009012:	e069      	b.n	80090e8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009018:	2b00      	cmp	r3, #0
 800901a:	da11      	bge.n	8009040 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	f003 020f 	and.w	r2, r3, #15
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	3318      	adds	r3, #24
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d117      	bne.n	8009066 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb0c 	bl	8009656 <USBD_CtlError>
            break;
 800903e:	e053      	b.n	80090e8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	f003 020f 	and.w	r2, r3, #15
 8009046:	6879      	ldr	r1, [r7, #4]
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 faf9 	bl	8009656 <USBD_CtlError>
            break;
 8009064:	e040      	b.n	80090e8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800906a:	2b00      	cmp	r3, #0
 800906c:	da0b      	bge.n	8009086 <USBD_StdEPReq+0x23e>
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	3310      	adds	r3, #16
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	3304      	adds	r3, #4
 8009084:	e00a      	b.n	800909c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	4413      	add	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USBD_StdEPReq+0x262>
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b80      	cmp	r3, #128	; 0x80
 80090a8:	d103      	bne.n	80090b2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e00e      	b.n	80090d0 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 feec 	bl	8009e94 <USBD_LL_IsStallEP>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	e002      	b.n	80090d0 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2202      	movs	r2, #2
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fb27 	bl	800972a <USBD_CtlSendData>
          break;
 80090dc:	e004      	b.n	80090e8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fab8 	bl	8009656 <USBD_CtlError>
        break;
 80090e6:	bf00      	nop
      }
      break;
 80090e8:	e004      	b.n	80090f4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fab2 	bl	8009656 <USBD_CtlError>
      break;
 80090f2:	bf00      	nop
    }
    break;
 80090f4:	e004      	b.n	8009100 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 faac 	bl	8009656 <USBD_CtlError>
    break;
 80090fe:	bf00      	nop
  }

  return ret;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	885b      	ldrh	r3, [r3, #2]
 800911a:	0a1b      	lsrs	r3, r3, #8
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	2b06      	cmp	r3, #6
 8009122:	f200 80c9 	bhi.w	80092b8 <USBD_GetDescriptor+0x1ac>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <USBD_GetDescriptor+0x20>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009149 	.word	0x08009149
 8009130:	08009161 	.word	0x08009161
 8009134:	080091a1 	.word	0x080091a1
 8009138:	080092b9 	.word	0x080092b9
 800913c:	080092b9 	.word	0x080092b9
 8009140:	08009265 	.word	0x08009265
 8009144:	0800928b 	.word	0x0800928b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	7c12      	ldrb	r2, [r2, #16]
 8009154:	f107 010a 	add.w	r1, r7, #10
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	60f8      	str	r0, [r7, #12]
    break;
 800915e:	e0b0      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7c1b      	ldrb	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10d      	bne.n	8009184 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f107 020a 	add.w	r2, r7, #10
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	2202      	movs	r2, #2
 8009180:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009182:	e09e      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	f107 020a 	add.w	r2, r7, #10
 8009190:	4610      	mov	r0, r2
 8009192:	4798      	blx	r3
 8009194:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	2202      	movs	r2, #2
 800919c:	701a      	strb	r2, [r3, #0]
    break;
 800919e:	e090      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	885b      	ldrh	r3, [r3, #2]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	d856      	bhi.n	8009258 <USBD_GetDescriptor+0x14c>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <USBD_GetDescriptor+0xa4>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091c9 	.word	0x080091c9
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091f9 	.word	0x080091f9
 80091bc:	08009211 	.word	0x08009211
 80091c0:	08009229 	.word	0x08009229
 80091c4:	08009241 	.word	0x08009241
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7c12      	ldrb	r2, [r2, #16]
 80091d4:	f107 010a 	add.w	r1, r7, #10
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
 80091dc:	60f8      	str	r0, [r7, #12]
      break;
 80091de:	e040      	b.n	8009262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	7c12      	ldrb	r2, [r2, #16]
 80091ec:	f107 010a 	add.w	r1, r7, #10
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
      break;
 80091f6:	e034      	b.n	8009262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 010a 	add.w	r1, r7, #10
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
      break;
 800920e:	e028      	b.n	8009262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	7c12      	ldrb	r2, [r2, #16]
 800921c:	f107 010a 	add.w	r1, r7, #10
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
 8009224:	60f8      	str	r0, [r7, #12]
      break;
 8009226:	e01c      	b.n	8009262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	7c12      	ldrb	r2, [r2, #16]
 8009234:	f107 010a 	add.w	r1, r7, #10
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
      break;
 800923e:	e010      	b.n	8009262 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 010a 	add.w	r1, r7, #10
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
      break;
 8009256:	e004      	b.n	8009262 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f9fb 	bl	8009656 <USBD_CtlError>
      return;
 8009260:	e04b      	b.n	80092fa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009262:	e02e      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7c1b      	ldrb	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009274:	f107 020a 	add.w	r2, r7, #10
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
 800927c:	60f8      	str	r0, [r7, #12]
      break;
 800927e:	e020      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9e7 	bl	8009656 <USBD_CtlError>
      return;
 8009288:	e037      	b.n	80092fa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7c1b      	ldrb	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10d      	bne.n	80092ae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	f107 020a 	add.w	r2, r7, #10
 800929e:	4610      	mov	r0, r2
 80092a0:	4798      	blx	r3
 80092a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	2207      	movs	r2, #7
 80092aa:	701a      	strb	r2, [r3, #0]
      break;
 80092ac:	e009      	b.n	80092c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f9d0 	bl	8009656 <USBD_CtlError>
      return;
 80092b6:	e020      	b.n	80092fa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f9cb 	bl	8009656 <USBD_CtlError>
    return;
 80092c0:	e01b      	b.n	80092fa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80092c2:	897b      	ldrh	r3, [r7, #10]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d011      	beq.n	80092ec <USBD_GetDescriptor+0x1e0>
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	88db      	ldrh	r3, [r3, #6]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00d      	beq.n	80092ec <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88da      	ldrh	r2, [r3, #6]
 80092d4:	897b      	ldrh	r3, [r7, #10]
 80092d6:	4293      	cmp	r3, r2
 80092d8:	bf28      	it	cs
 80092da:	4613      	movcs	r3, r2
 80092dc:	b29b      	uxth	r3, r3
 80092de:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80092e0:	897b      	ldrh	r3, [r7, #10]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68f9      	ldr	r1, [r7, #12]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fa1f 	bl	800972a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	88db      	ldrh	r3, [r3, #6]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa76 	bl	80097e6 <USBD_CtlSendStatus>
  }
}
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	889b      	ldrh	r3, [r3, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d130      	bne.n	8009374 <USBD_SetAddress+0x74>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d12c      	bne.n	8009374 <USBD_SetAddress+0x74>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	2b7f      	cmp	r3, #127	; 0x7f
 8009320:	d828      	bhi.n	8009374 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800932c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009334:	2b03      	cmp	r3, #3
 8009336:	d104      	bne.n	8009342 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f98b 	bl	8009656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009340:	e01d      	b.n	800937e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fdcc 	bl	8009eec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa46 	bl	80097e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009368:	e009      	b.n	800937e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009372:	e004      	b.n	800937e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f96d 	bl	8009656 <USBD_CtlError>
  }
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	4b41      	ldr	r3, [pc, #260]	; (80094a0 <USBD_SetConfig+0x118>)
 800939a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800939c:	4b40      	ldr	r3, [pc, #256]	; (80094a0 <USBD_SetConfig+0x118>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d904      	bls.n	80093ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f955 	bl	8009656 <USBD_CtlError>
 80093ac:	e075      	b.n	800949a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d002      	beq.n	80093be <USBD_SetConfig+0x36>
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d023      	beq.n	8009404 <USBD_SetConfig+0x7c>
 80093bc:	e062      	b.n	8009484 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80093be:	4b38      	ldr	r3, [pc, #224]	; (80094a0 <USBD_SetConfig+0x118>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01a      	beq.n	80093fc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80093c6:	4b36      	ldr	r3, [pc, #216]	; (80094a0 <USBD_SetConfig+0x118>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2203      	movs	r2, #3
 80093d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093d8:	4b31      	ldr	r3, [pc, #196]	; (80094a0 <USBD_SetConfig+0x118>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fa5c 	bl	800889c <USBD_SetClassConfig>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d104      	bne.n	80093f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f932 	bl	8009656 <USBD_CtlError>
          return;
 80093f2:	e052      	b.n	800949a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9f6 	bl	80097e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80093fa:	e04e      	b.n	800949a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9f2 	bl	80097e6 <USBD_CtlSendStatus>
      break;
 8009402:	e04a      	b.n	800949a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009404:	4b26      	ldr	r3, [pc, #152]	; (80094a0 <USBD_SetConfig+0x118>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d112      	bne.n	8009432 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <USBD_SetConfig+0x118>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800941e:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <USBD_SetConfig+0x118>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fa58 	bl	80088da <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9db 	bl	80097e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009430:	e033      	b.n	800949a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009432:	4b1b      	ldr	r3, [pc, #108]	; (80094a0 <USBD_SetConfig+0x118>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d01d      	beq.n	800947c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff fa46 	bl	80088da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800944e:	4b14      	ldr	r3, [pc, #80]	; (80094a0 <USBD_SetConfig+0x118>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <USBD_SetConfig+0x118>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fa1c 	bl	800889c <USBD_SetClassConfig>
 8009464:	4603      	mov	r3, r0
 8009466:	2b02      	cmp	r3, #2
 8009468:	d104      	bne.n	8009474 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f8f2 	bl	8009656 <USBD_CtlError>
          return;
 8009472:	e012      	b.n	800949a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f9b6 	bl	80097e6 <USBD_CtlSendStatus>
      break;
 800947a:	e00e      	b.n	800949a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f9b2 	bl	80097e6 <USBD_CtlSendStatus>
      break;
 8009482:	e00a      	b.n	800949a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f8e5 	bl	8009656 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <USBD_SetConfig+0x118>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fa21 	bl	80088da <USBD_ClrClassConfig>
      break;
 8009498:	bf00      	nop
    }
  }
}
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000364 	.word	0x20000364

080094a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	88db      	ldrh	r3, [r3, #6]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d004      	beq.n	80094c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8cc 	bl	8009656 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80094be:	e022      	b.n	8009506 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	dc02      	bgt.n	80094d0 <USBD_GetConfig+0x2c>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dc03      	bgt.n	80094d6 <USBD_GetConfig+0x32>
 80094ce:	e015      	b.n	80094fc <USBD_GetConfig+0x58>
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d00b      	beq.n	80094ec <USBD_GetConfig+0x48>
 80094d4:	e012      	b.n	80094fc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3308      	adds	r3, #8
 80094e0:	2201      	movs	r2, #1
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f920 	bl	800972a <USBD_CtlSendData>
      break;
 80094ea:	e00c      	b.n	8009506 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	2201      	movs	r2, #1
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f918 	bl	800972a <USBD_CtlSendData>
      break;
 80094fa:	e004      	b.n	8009506 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8a9 	bl	8009656 <USBD_CtlError>
      break;
 8009504:	bf00      	nop
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800951e:	3b01      	subs	r3, #1
 8009520:	2b02      	cmp	r3, #2
 8009522:	d81e      	bhi.n	8009562 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	88db      	ldrh	r3, [r3, #6]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d004      	beq.n	8009536 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f891 	bl	8009656 <USBD_CtlError>
      break;
 8009534:	e01a      	b.n	800956c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f043 0202 	orr.w	r2, r3, #2
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	330c      	adds	r3, #12
 8009556:	2202      	movs	r2, #2
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8e5 	bl	800972a <USBD_CtlSendData>
    break;
 8009560:	e004      	b.n	800956c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f876 	bl	8009656 <USBD_CtlError>
    break;
 800956a:	bf00      	nop
  }
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d106      	bne.n	8009594 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f929 	bl	80097e6 <USBD_CtlSendStatus>
  }

}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80095ac:	3b01      	subs	r3, #1
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d80b      	bhi.n	80095ca <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d10c      	bne.n	80095d4 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f90f 	bl	80097e6 <USBD_CtlSendStatus>
    }
    break;
 80095c8:	e004      	b.n	80095d4 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f842 	bl	8009656 <USBD_CtlError>
    break;
 80095d2:	e000      	b.n	80095d6 <USBD_ClrFeature+0x3a>
    break;
 80095d4:	bf00      	nop
  }
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	785a      	ldrb	r2, [r3, #1]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	3302      	adds	r3, #2
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	3303      	adds	r3, #3
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	b29b      	uxth	r3, r3
 800960c:	4413      	add	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	3304      	adds	r3, #4
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	3305      	adds	r3, #5
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b29b      	uxth	r3, r3
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	b29b      	uxth	r3, r3
 8009628:	4413      	add	r3, r2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	3306      	adds	r3, #6
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b29a      	uxth	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	3307      	adds	r3, #7
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	021b      	lsls	r3, r3, #8
 8009642:	b29b      	uxth	r3, r3
 8009644:	4413      	add	r3, r2
 8009646:	b29a      	uxth	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	80da      	strh	r2, [r3, #6]

}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr

08009656 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009660:	2180      	movs	r1, #128	; 0x80
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fbd8 	bl	8009e18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fbd4 	bl	8009e18 <USBD_LL_StallEP>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d032      	beq.n	80096f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f834 	bl	80096fc <USBD_GetLen>
 8009694:	4603      	mov	r3, r0
 8009696:	3301      	adds	r3, #1
 8009698:	b29b      	uxth	r3, r3
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	b29a      	uxth	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	75fa      	strb	r2, [r7, #23]
 80096a8:	461a      	mov	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4413      	add	r3, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	7812      	ldrb	r2, [r2, #0]
 80096b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	75fa      	strb	r2, [r7, #23]
 80096ba:	461a      	mov	r2, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4413      	add	r3, r2
 80096c0:	2203      	movs	r2, #3
 80096c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096c4:	e012      	b.n	80096ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	60fa      	str	r2, [r7, #12]
 80096cc:	7dfa      	ldrb	r2, [r7, #23]
 80096ce:	1c51      	adds	r1, r2, #1
 80096d0:	75f9      	strb	r1, [r7, #23]
 80096d2:	4611      	mov	r1, r2
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	440a      	add	r2, r1
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	75fa      	strb	r2, [r7, #23]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4413      	add	r3, r2
 80096e8:	2200      	movs	r2, #0
 80096ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e8      	bne.n	80096c6 <USBD_GetString+0x4e>
    }
  }
}
 80096f4:	bf00      	nop
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009708:	e005      	b.n	8009716 <USBD_GetLen+0x1a>
    {
        len++;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	3301      	adds	r3, #1
 800970e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3301      	adds	r3, #1
 8009714:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1f5      	bne.n	800970a <USBD_GetLen+0xe>
    }

    return len;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr

0800972a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	4613      	mov	r3, r2
 8009736:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2202      	movs	r2, #2
 800973c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009740:	88fa      	ldrh	r2, [r7, #6]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009746:	88fa      	ldrh	r2, [r7, #6]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	2100      	movs	r1, #0
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fbe9 	bl	8009f2a <USBD_LL_Transmit>

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	4613      	mov	r3, r2
 800976e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009770:	88fb      	ldrh	r3, [r7, #6]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	2100      	movs	r1, #0
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fbd7 	bl	8009f2a <USBD_LL_Transmit>

  return USBD_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	4613      	mov	r3, r2
 8009792:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2203      	movs	r2, #3
 8009798:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	2100      	movs	r1, #0
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fbdc 	bl	8009f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	4613      	mov	r3, r2
 80097ce:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	2100      	movs	r1, #0
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 fbca 	bl	8009f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2204      	movs	r2, #4
 80097f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097f6:	2300      	movs	r3, #0
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fb94 	bl	8009f2a <USBD_LL_Transmit>

  return USBD_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2205      	movs	r2, #5
 8009818:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800981c:	2300      	movs	r3, #0
 800981e:	2200      	movs	r2, #0
 8009820:	2100      	movs	r1, #0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fba4 	bl	8009f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009838:	2200      	movs	r2, #0
 800983a:	4912      	ldr	r1, [pc, #72]	; (8009884 <MX_USB_DEVICE_Init+0x50>)
 800983c:	4812      	ldr	r0, [pc, #72]	; (8009888 <MX_USB_DEVICE_Init+0x54>)
 800983e:	f7fe ffd3 	bl	80087e8 <USBD_Init>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009848:	f7f7 fcb8 	bl	80011bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800984c:	490f      	ldr	r1, [pc, #60]	; (800988c <MX_USB_DEVICE_Init+0x58>)
 800984e:	480e      	ldr	r0, [pc, #56]	; (8009888 <MX_USB_DEVICE_Init+0x54>)
 8009850:	f7fe fff5 	bl	800883e <USBD_RegisterClass>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800985a:	f7f7 fcaf 	bl	80011bc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800985e:	490c      	ldr	r1, [pc, #48]	; (8009890 <MX_USB_DEVICE_Init+0x5c>)
 8009860:	4809      	ldr	r0, [pc, #36]	; (8009888 <MX_USB_DEVICE_Init+0x54>)
 8009862:	f7fe ffab 	bl	80087bc <USBD_CUSTOM_HID_RegisterInterface>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800986c:	f7f7 fca6 	bl	80011bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009870:	4805      	ldr	r0, [pc, #20]	; (8009888 <MX_USB_DEVICE_Init+0x54>)
 8009872:	f7fe fffd 	bl	8008870 <USBD_Start>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800987c:	f7f7 fc9e 	bl	80011bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009880:	bf00      	nop
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000134 	.word	0x20000134
 8009888:	20000368 	.word	0x20000368
 800988c:	2000000c 	.word	0x2000000c
 8009890:	20000124 	.word	0x20000124

08009894 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr

080098a2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80098a2:	b480      	push	{r7}
 80098a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80098a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bc80      	pop	{r7}
 80098ae:	4770      	bx	lr

080098b0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	460a      	mov	r2, r1
 80098ba:	71fb      	strb	r3, [r7, #7]
 80098bc:	4613      	mov	r3, r2
 80098be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80098c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr

080098cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	6039      	str	r1, [r7, #0]
 80098d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2212      	movs	r2, #18
 80098dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098de:	4b03      	ldr	r3, [pc, #12]	; (80098ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bc80      	pop	{r7}
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000150 	.word	0x20000150

080098f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2204      	movs	r2, #4
 8009900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009902:	4b03      	ldr	r3, [pc, #12]	; (8009910 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	bc80      	pop	{r7}
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	20000164 	.word	0x20000164

08009914 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d105      	bne.n	8009932 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4907      	ldr	r1, [pc, #28]	; (8009948 <USBD_FS_ProductStrDescriptor+0x34>)
 800992a:	4808      	ldr	r0, [pc, #32]	; (800994c <USBD_FS_ProductStrDescriptor+0x38>)
 800992c:	f7ff fea4 	bl	8009678 <USBD_GetString>
 8009930:	e004      	b.n	800993c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <USBD_FS_ProductStrDescriptor+0x34>)
 8009936:	4805      	ldr	r0, [pc, #20]	; (800994c <USBD_FS_ProductStrDescriptor+0x38>)
 8009938:	f7ff fe9e 	bl	8009678 <USBD_GetString>
  }
  return USBD_StrDesc;
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000604 	.word	0x20000604
 800994c:	0800a0ac 	.word	0x0800a0ac

08009950 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	4904      	ldr	r1, [pc, #16]	; (8009970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009960:	4804      	ldr	r0, [pc, #16]	; (8009974 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009962:	f7ff fe89 	bl	8009678 <USBD_GetString>
  return USBD_StrDesc;
 8009966:	4b02      	ldr	r3, [pc, #8]	; (8009970 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000604 	.word	0x20000604
 8009974:	0800a0cc 	.word	0x0800a0cc

08009978 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	221a      	movs	r2, #26
 8009988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800998a:	f000 f843 	bl	8009a14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800998e:	4b02      	ldr	r3, [pc, #8]	; (8009998 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20000168 	.word	0x20000168

0800999c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d105      	bne.n	80099ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4907      	ldr	r1, [pc, #28]	; (80099d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099b2:	4808      	ldr	r0, [pc, #32]	; (80099d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099b4:	f7ff fe60 	bl	8009678 <USBD_GetString>
 80099b8:	e004      	b.n	80099c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	4904      	ldr	r1, [pc, #16]	; (80099d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099be:	4805      	ldr	r0, [pc, #20]	; (80099d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099c0:	f7ff fe5a 	bl	8009678 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000604 	.word	0x20000604
 80099d4:	0800a0e0 	.word	0x0800a0e0

080099d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4907      	ldr	r1, [pc, #28]	; (8009a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ee:	4808      	ldr	r0, [pc, #32]	; (8009a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f0:	f7ff fe42 	bl	8009678 <USBD_GetString>
 80099f4:	e004      	b.n	8009a00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	4904      	ldr	r1, [pc, #16]	; (8009a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099fa:	4805      	ldr	r0, [pc, #20]	; (8009a10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099fc:	f7ff fe3c 	bl	8009678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000604 	.word	0x20000604
 8009a10:	0800a0f4 	.word	0x0800a0f4

08009a14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <Get_SerialNum+0x44>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a20:	4b0e      	ldr	r3, [pc, #56]	; (8009a5c <Get_SerialNum+0x48>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a26:	4b0e      	ldr	r3, [pc, #56]	; (8009a60 <Get_SerialNum+0x4c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	4909      	ldr	r1, [pc, #36]	; (8009a64 <Get_SerialNum+0x50>)
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 f814 	bl	8009a6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a44:	2204      	movs	r2, #4
 8009a46:	4908      	ldr	r1, [pc, #32]	; (8009a68 <Get_SerialNum+0x54>)
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f000 f80f 	bl	8009a6c <IntToUnicode>
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	1ff80050 	.word	0x1ff80050
 8009a5c:	1ff80054 	.word	0x1ff80054
 8009a60:	1ff80058 	.word	0x1ff80058
 8009a64:	2000016a 	.word	0x2000016a
 8009a68:	2000017a 	.word	0x2000017a

08009a6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
 8009a82:	e027      	b.n	8009ad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	0f1b      	lsrs	r3, r3, #28
 8009a88:	2b09      	cmp	r3, #9
 8009a8a:	d80b      	bhi.n	8009aa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	0f1b      	lsrs	r3, r3, #28
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	4619      	mov	r1, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	440b      	add	r3, r1
 8009a9c:	3230      	adds	r2, #48	; 0x30
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	e00a      	b.n	8009aba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0f1b      	lsrs	r3, r3, #28
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4619      	mov	r1, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	440b      	add	r3, r1
 8009ab4:	3237      	adds	r2, #55	; 0x37
 8009ab6:	b2d2      	uxtb	r2, r2
 8009ab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	011b      	lsls	r3, r3, #4
 8009abe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	4413      	add	r3, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	75fb      	strb	r3, [r7, #23]
 8009ad4:	7dfa      	ldrb	r2, [r7, #23]
 8009ad6:	79fb      	ldrb	r3, [r7, #7]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d3d3      	bcc.n	8009a84 <IntToUnicode+0x18>
  }
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d106      	bne.n	8009b08 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009afa:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <HAL_PCDEx_SetConnectionState+0x38>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	4a08      	ldr	r2, [pc, #32]	; (8009b20 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009b06:	e005      	b.n	8009b14 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <HAL_PCDEx_SetConnectionState+0x38>)
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	6053      	str	r3, [r2, #4]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bc80      	pop	{r7}
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40010000 	.word	0x40010000

08009b24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a11      	ldr	r2, [pc, #68]	; (8009b78 <HAL_PCD_MspInit+0x54>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d11b      	bne.n	8009b6e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <HAL_PCD_MspInit+0x58>)
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	4a10      	ldr	r2, [pc, #64]	; (8009b7c <HAL_PCD_MspInit+0x58>)
 8009b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b40:	6253      	str	r3, [r2, #36]	; 0x24
 8009b42:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <HAL_PCD_MspInit+0x58>)
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 1, 0);
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2101      	movs	r1, #1
 8009b52:	2013      	movs	r0, #19
 8009b54:	f7f8 fc99 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8009b58:	2013      	movs	r0, #19
 8009b5a:	f7f8 fcb2 	bl	80024c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2101      	movs	r1, #1
 8009b62:	2014      	movs	r0, #20
 8009b64:	f7f8 fc91 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009b68:	2014      	movs	r0, #20
 8009b6a:	f7f8 fcaa 	bl	80024c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40005c00 	.word	0x40005c00
 8009b7c:	40023800 	.word	0x40023800

08009b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f7fe feb2 	bl	8008900 <USBD_LL_SetupStage>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	440b      	add	r3, r1
 8009bc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f7fe fee4 	bl	800899a <USBD_LL_DataOutStage>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	440b      	add	r3, r1
 8009bfa:	333c      	adds	r3, #60	; 0x3c
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	4619      	mov	r1, r3
 8009c02:	f7fe ff3b 	bl	8008a7c <USBD_LL_DataInStage>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f846 	bl	8008cae <USBD_LL_SOF>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c32:	2301      	movs	r3, #1
 8009c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d001      	beq.n	8009c42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c3e:	f7f7 fabd 	bl	80011bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c48:	7bfa      	ldrb	r2, [r7, #15]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fe fffb 	bl	8008c48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fe ffb4 	bl	8008bc6 <USBD_LL_Reset>
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fff5 	bl	8008c66 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <HAL_PCD_SuspendCallback+0x30>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4a03      	ldr	r2, [pc, #12]	; (8009c98 <HAL_PCD_SuspendCallback+0x30>)
 8009c8a:	f043 0306 	orr.w	r3, r3, #6
 8009c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed00 	.word	0xe000ed00

08009c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe ffef 	bl	8008c8e <USBD_LL_Resume>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009cc0:	4a23      	ldr	r2, [pc, #140]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a21      	ldr	r2, [pc, #132]	; (8009d50 <USBD_LL_Init+0x98>)
 8009ccc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009cd0:	4b1f      	ldr	r3, [pc, #124]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cd2:	4a20      	ldr	r2, [pc, #128]	; (8009d54 <USBD_LL_Init+0x9c>)
 8009cd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009cd6:	4b1e      	ldr	r3, [pc, #120]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cd8:	2208      	movs	r2, #8
 8009cda:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009cdc:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cde:	2202      	movs	r2, #2
 8009ce0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <USBD_LL_Init+0x98>)
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ce8:	4b19      	ldr	r3, [pc, #100]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009cee:	4b18      	ldr	r3, [pc, #96]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009cf4:	4816      	ldr	r0, [pc, #88]	; (8009d50 <USBD_LL_Init+0x98>)
 8009cf6:	f7f8 ff2c 	bl	8002b52 <HAL_PCD_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d00:	f7f7 fa5c 	bl	80011bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d0a:	2318      	movs	r3, #24
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f7fa faf2 	bl	80042f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d1a:	2358      	movs	r3, #88	; 0x58
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	f7fa faea 	bl	80042f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d2a:	2398      	movs	r3, #152	; 0x98
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2181      	movs	r1, #129	; 0x81
 8009d30:	f7fa fae2 	bl	80042f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009d3a:	23d8      	movs	r3, #216	; 0xd8
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2101      	movs	r1, #1
 8009d40:	f7fa fada 	bl	80042f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000804 	.word	0x20000804
 8009d54:	40005c00 	.word	0x40005c00

08009d58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f8 ffcd 	bl	8002d0e <HAL_PCD_Start>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f932 	bl	8009fe4 <USBD_Get_USB_Status>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	70fb      	strb	r3, [r7, #3]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70bb      	strb	r3, [r7, #2]
 8009da4:	4613      	mov	r3, r2
 8009da6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009db6:	78bb      	ldrb	r3, [r7, #2]
 8009db8:	883a      	ldrh	r2, [r7, #0]
 8009dba:	78f9      	ldrb	r1, [r7, #3]
 8009dbc:	f7f9 f8e9 	bl	8002f92 <HAL_PCD_EP_Open>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f90c 	bl	8009fe4 <USBD_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 f930 	bl	800305e <HAL_PCD_EP_Close>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 f8ed 	bl	8009fe4 <USBD_Get_USB_Status>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	4611      	mov	r1, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f9 f9d9 	bl	80031ee <HAL_PCD_EP_SetStall>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f8ce 	bl	8009fe4 <USBD_Get_USB_Status>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009e70:	78fa      	ldrb	r2, [r7, #3]
 8009e72:	4611      	mov	r1, r2
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7f9 fa0c 	bl	8003292 <HAL_PCD_EP_ClrStall>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 f8af 	bl	8009fe4 <USBD_Get_USB_Status>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009ea6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da0c      	bge.n	8009eca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009eb0:	78fb      	ldrb	r3, [r7, #3]
 8009eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	e00b      	b.n	8009ee2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ed0:	68f9      	ldr	r1, [r7, #12]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	440b      	add	r3, r1
 8009edc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ee0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bc80      	pop	{r7}
 8009eea:	4770      	bx	lr

08009eec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009f06:	78fa      	ldrb	r2, [r7, #3]
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f9 f81c 	bl	8002f48 <HAL_PCD_SetAddress>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f864 	bl	8009fe4 <USBD_Get_USB_Status>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	461a      	mov	r2, r3
 8009f36:	460b      	mov	r3, r1
 8009f38:	72fb      	strb	r3, [r7, #11]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f4c:	893b      	ldrh	r3, [r7, #8]
 8009f4e:	7af9      	ldrb	r1, [r7, #11]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f7f9 f909 	bl	8003168 <HAL_PCD_EP_Transmit>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f841 	bl	8009fe4 <USBD_Get_USB_Status>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	607a      	str	r2, [r7, #4]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	72fb      	strb	r3, [r7, #11]
 8009f80:	4613      	mov	r3, r2
 8009f82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009f92:	893b      	ldrh	r3, [r7, #8]
 8009f94:	7af9      	ldrb	r1, [r7, #11]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	f7f9 f8a9 	bl	80030ee <HAL_PCD_EP_Receive>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 f81e 	bl	8009fe4 <USBD_Get_USB_Status>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <USBD_static_malloc+0x14>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bc80      	pop	{r7}
 8009fca:	4770      	bx	lr
 8009fcc:	20000af0 	.word	0x20000af0

08009fd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr
	...

08009fe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d817      	bhi.n	800a028 <USBD_Get_USB_Status+0x44>
 8009ff8:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <USBD_Get_USB_Status+0x1c>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a011 	.word	0x0800a011
 800a004:	0800a017 	.word	0x0800a017
 800a008:	0800a01d 	.word	0x0800a01d
 800a00c:	0800a023 	.word	0x0800a023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	e00b      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	73fb      	strb	r3, [r7, #15]
    break;
 800a01a:	e008      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e005      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a022:	2302      	movs	r3, #2
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e002      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a028:	2302      	movs	r3, #2
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	bf00      	nop
  }
  return usb_status;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop

0800a03c <__libc_init_array>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	2600      	movs	r6, #0
 800a040:	4d0c      	ldr	r5, [pc, #48]	; (800a074 <__libc_init_array+0x38>)
 800a042:	4c0d      	ldr	r4, [pc, #52]	; (800a078 <__libc_init_array+0x3c>)
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	42a6      	cmp	r6, r4
 800a04a:	d109      	bne.n	800a060 <__libc_init_array+0x24>
 800a04c:	f000 f822 	bl	800a094 <_init>
 800a050:	2600      	movs	r6, #0
 800a052:	4d0a      	ldr	r5, [pc, #40]	; (800a07c <__libc_init_array+0x40>)
 800a054:	4c0a      	ldr	r4, [pc, #40]	; (800a080 <__libc_init_array+0x44>)
 800a056:	1b64      	subs	r4, r4, r5
 800a058:	10a4      	asrs	r4, r4, #2
 800a05a:	42a6      	cmp	r6, r4
 800a05c:	d105      	bne.n	800a06a <__libc_init_array+0x2e>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f855 3b04 	ldr.w	r3, [r5], #4
 800a064:	4798      	blx	r3
 800a066:	3601      	adds	r6, #1
 800a068:	e7ee      	b.n	800a048 <__libc_init_array+0xc>
 800a06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06e:	4798      	blx	r3
 800a070:	3601      	adds	r6, #1
 800a072:	e7f2      	b.n	800a05a <__libc_init_array+0x1e>
 800a074:	0800a130 	.word	0x0800a130
 800a078:	0800a130 	.word	0x0800a130
 800a07c:	0800a130 	.word	0x0800a130
 800a080:	0800a134 	.word	0x0800a134

0800a084 <memset>:
 800a084:	4603      	mov	r3, r0
 800a086:	4402      	add	r2, r0
 800a088:	4293      	cmp	r3, r2
 800a08a:	d100      	bne.n	800a08e <memset+0xa>
 800a08c:	4770      	bx	lr
 800a08e:	f803 1b01 	strb.w	r1, [r3], #1
 800a092:	e7f9      	b.n	800a088 <memset+0x4>

0800a094 <_init>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	bf00      	nop
 800a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09a:	bc08      	pop	{r3}
 800a09c:	469e      	mov	lr, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_fini>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	bf00      	nop
 800a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	469e      	mov	lr, r3
 800a0aa:	4770      	bx	lr
