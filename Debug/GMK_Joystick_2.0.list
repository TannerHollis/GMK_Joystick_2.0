
GMK_Joystick_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a3c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf4  08009bf4  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bfc  08009bfc  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bfc  08009bfc  00019bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08009c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000980  20000144  08009d48  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08009d48  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001211e  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323d  00000000  00000000  0003228b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a93  00000000  00000000  000372e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146a0  00000000  00000000  0004ed73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086af0  00000000  00000000  00063413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  000e9f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000144 	.word	0x20000144
 8000158:	00000000 	.word	0x00000000
 800015c:	08009b60 	.word	0x08009b60

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000148 	.word	0x20000148
 8000178:	08009b60 	.word	0x08009b60

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	3a01      	subs	r2, #1
 8000236:	bf28      	it	cs
 8000238:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800023c:	d2ed      	bcs.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_fmul>:
 8000398:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800039c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a0:	bf1e      	ittt	ne
 80003a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a6:	ea92 0f0c 	teqne	r2, ip
 80003aa:	ea93 0f0c 	teqne	r3, ip
 80003ae:	d06f      	beq.n	8000490 <__aeabi_fmul+0xf8>
 80003b0:	441a      	add	r2, r3
 80003b2:	ea80 0c01 	eor.w	ip, r0, r1
 80003b6:	0240      	lsls	r0, r0, #9
 80003b8:	bf18      	it	ne
 80003ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003be:	d01e      	beq.n	80003fe <__aeabi_fmul+0x66>
 80003c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003cc:	fba0 3101 	umull	r3, r1, r0, r1
 80003d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d8:	bf3e      	ittt	cc
 80003da:	0049      	lslcc	r1, r1, #1
 80003dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e0:	005b      	lslcc	r3, r3, #1
 80003e2:	ea40 0001 	orr.w	r0, r0, r1
 80003e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ea:	2afd      	cmp	r2, #253	; 0xfd
 80003ec:	d81d      	bhi.n	800042a <__aeabi_fmul+0x92>
 80003ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f6:	bf08      	it	eq
 80003f8:	f020 0001 	biceq.w	r0, r0, #1
 80003fc:	4770      	bx	lr
 80003fe:	f090 0f00 	teq	r0, #0
 8000402:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000406:	bf08      	it	eq
 8000408:	0249      	lsleq	r1, r1, #9
 800040a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000412:	3a7f      	subs	r2, #127	; 0x7f
 8000414:	bfc2      	ittt	gt
 8000416:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041e:	4770      	bxgt	lr
 8000420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	3a01      	subs	r2, #1
 800042a:	dc5d      	bgt.n	80004e8 <__aeabi_fmul+0x150>
 800042c:	f112 0f19 	cmn.w	r2, #25
 8000430:	bfdc      	itt	le
 8000432:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000436:	4770      	bxle	lr
 8000438:	f1c2 0200 	rsb	r2, r2, #0
 800043c:	0041      	lsls	r1, r0, #1
 800043e:	fa21 f102 	lsr.w	r1, r1, r2
 8000442:	f1c2 0220 	rsb	r2, r2, #32
 8000446:	fa00 fc02 	lsl.w	ip, r0, r2
 800044a:	ea5f 0031 	movs.w	r0, r1, rrx
 800044e:	f140 0000 	adc.w	r0, r0, #0
 8000452:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000456:	bf08      	it	eq
 8000458:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800045c:	4770      	bx	lr
 800045e:	f092 0f00 	teq	r2, #0
 8000462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0040      	lsleq	r0, r0, #1
 800046a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046e:	3a01      	subeq	r2, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xce>
 8000472:	ea40 000c 	orr.w	r0, r0, ip
 8000476:	f093 0f00 	teq	r3, #0
 800047a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047e:	bf02      	ittt	eq
 8000480:	0049      	lsleq	r1, r1, #1
 8000482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000486:	3b01      	subeq	r3, #1
 8000488:	d0f9      	beq.n	800047e <__aeabi_fmul+0xe6>
 800048a:	ea41 010c 	orr.w	r1, r1, ip
 800048e:	e78f      	b.n	80003b0 <__aeabi_fmul+0x18>
 8000490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000494:	ea92 0f0c 	teq	r2, ip
 8000498:	bf18      	it	ne
 800049a:	ea93 0f0c 	teqne	r3, ip
 800049e:	d00a      	beq.n	80004b6 <__aeabi_fmul+0x11e>
 80004a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a4:	bf18      	it	ne
 80004a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	d1d8      	bne.n	800045e <__aeabi_fmul+0xc6>
 80004ac:	ea80 0001 	eor.w	r0, r0, r1
 80004b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	bf17      	itett	ne
 80004bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c0:	4608      	moveq	r0, r1
 80004c2:	f091 0f00 	teqne	r1, #0
 80004c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ca:	d014      	beq.n	80004f6 <__aeabi_fmul+0x15e>
 80004cc:	ea92 0f0c 	teq	r2, ip
 80004d0:	d101      	bne.n	80004d6 <__aeabi_fmul+0x13e>
 80004d2:	0242      	lsls	r2, r0, #9
 80004d4:	d10f      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004d6:	ea93 0f0c 	teq	r3, ip
 80004da:	d103      	bne.n	80004e4 <__aeabi_fmul+0x14c>
 80004dc:	024b      	lsls	r3, r1, #9
 80004de:	bf18      	it	ne
 80004e0:	4608      	movne	r0, r1
 80004e2:	d108      	bne.n	80004f6 <__aeabi_fmul+0x15e>
 80004e4:	ea80 0001 	eor.w	r0, r0, r1
 80004e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f4:	4770      	bx	lr
 80004f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fe:	4770      	bx	lr

08000500 <__aeabi_fdiv>:
 8000500:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000504:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000508:	bf1e      	ittt	ne
 800050a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050e:	ea92 0f0c 	teqne	r2, ip
 8000512:	ea93 0f0c 	teqne	r3, ip
 8000516:	d069      	beq.n	80005ec <__aeabi_fdiv+0xec>
 8000518:	eba2 0203 	sub.w	r2, r2, r3
 800051c:	ea80 0c01 	eor.w	ip, r0, r1
 8000520:	0249      	lsls	r1, r1, #9
 8000522:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000526:	d037      	beq.n	8000598 <__aeabi_fdiv+0x98>
 8000528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800052c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000530:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000534:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000538:	428b      	cmp	r3, r1
 800053a:	bf38      	it	cc
 800053c:	005b      	lslcc	r3, r3, #1
 800053e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000542:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000546:	428b      	cmp	r3, r1
 8000548:	bf24      	itt	cs
 800054a:	1a5b      	subcs	r3, r3, r1
 800054c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000550:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000554:	bf24      	itt	cs
 8000556:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000562:	bf24      	itt	cs
 8000564:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000568:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800056c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000570:	bf24      	itt	cs
 8000572:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000576:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	bf18      	it	ne
 800057e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000582:	d1e0      	bne.n	8000546 <__aeabi_fdiv+0x46>
 8000584:	2afd      	cmp	r2, #253	; 0xfd
 8000586:	f63f af50 	bhi.w	800042a <__aeabi_fmul+0x92>
 800058a:	428b      	cmp	r3, r1
 800058c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800059c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a0:	327f      	adds	r2, #127	; 0x7f
 80005a2:	bfc2      	ittt	gt
 80005a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005ac:	4770      	bxgt	lr
 80005ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	3a01      	subs	r2, #1
 80005b8:	e737      	b.n	800042a <__aeabi_fmul+0x92>
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0040      	lsleq	r0, r0, #1
 80005c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ca:	3a01      	subeq	r2, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xc2>
 80005ce:	ea40 000c 	orr.w	r0, r0, ip
 80005d2:	f093 0f00 	teq	r3, #0
 80005d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005da:	bf02      	ittt	eq
 80005dc:	0049      	lsleq	r1, r1, #1
 80005de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e2:	3b01      	subeq	r3, #1
 80005e4:	d0f9      	beq.n	80005da <__aeabi_fdiv+0xda>
 80005e6:	ea41 010c 	orr.w	r1, r1, ip
 80005ea:	e795      	b.n	8000518 <__aeabi_fdiv+0x18>
 80005ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f0:	ea92 0f0c 	teq	r2, ip
 80005f4:	d108      	bne.n	8000608 <__aeabi_fdiv+0x108>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	f47f af7d 	bne.w	80004f6 <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	f47f af70 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 8000604:	4608      	mov	r0, r1
 8000606:	e776      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	d104      	bne.n	8000618 <__aeabi_fdiv+0x118>
 800060e:	024b      	lsls	r3, r1, #9
 8000610:	f43f af4c 	beq.w	80004ac <__aeabi_fmul+0x114>
 8000614:	4608      	mov	r0, r1
 8000616:	e76e      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000618:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800061c:	bf18      	it	ne
 800061e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000622:	d1ca      	bne.n	80005ba <__aeabi_fdiv+0xba>
 8000624:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000628:	f47f af5c 	bne.w	80004e4 <__aeabi_fmul+0x14c>
 800062c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000630:	f47f af3c 	bne.w	80004ac <__aeabi_fmul+0x114>
 8000634:	e75f      	b.n	80004f6 <__aeabi_fmul+0x15e>
 8000636:	bf00      	nop

08000638 <__gesf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__lesf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpsf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpsf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d011      	beq.n	8000688 <__cmpsf2+0x40>
 8000664:	b001      	add	sp, #4
 8000666:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066a:	bf18      	it	ne
 800066c:	ea90 0f01 	teqne	r0, r1
 8000670:	bf58      	it	pl
 8000672:	ebb2 0003 	subspl.w	r0, r2, r3
 8000676:	bf88      	it	hi
 8000678:	17c8      	asrhi	r0, r1, #31
 800067a:	bf38      	it	cc
 800067c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000680:	bf18      	it	ne
 8000682:	f040 0001 	orrne.w	r0, r0, #1
 8000686:	4770      	bx	lr
 8000688:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800068c:	d102      	bne.n	8000694 <__cmpsf2+0x4c>
 800068e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000692:	d105      	bne.n	80006a0 <__cmpsf2+0x58>
 8000694:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000698:	d1e4      	bne.n	8000664 <__cmpsf2+0x1c>
 800069a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800069e:	d0e1      	beq.n	8000664 <__cmpsf2+0x1c>
 80006a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_cfrcmple>:
 80006a8:	4684      	mov	ip, r0
 80006aa:	4608      	mov	r0, r1
 80006ac:	4661      	mov	r1, ip
 80006ae:	e7ff      	b.n	80006b0 <__aeabi_cfcmpeq>

080006b0 <__aeabi_cfcmpeq>:
 80006b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b2:	f7ff ffc9 	bl	8000648 <__cmpsf2>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	bf48      	it	mi
 80006ba:	f110 0f00 	cmnmi.w	r0, #0
 80006be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c0 <__aeabi_fcmpeq>:
 80006c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c4:	f7ff fff4 	bl	80006b0 <__aeabi_cfcmpeq>
 80006c8:	bf0c      	ite	eq
 80006ca:	2001      	moveq	r0, #1
 80006cc:	2000      	movne	r0, #0
 80006ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d2:	bf00      	nop

080006d4 <__aeabi_fcmplt>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff ffea 	bl	80006b0 <__aeabi_cfcmpeq>
 80006dc:	bf34      	ite	cc
 80006de:	2001      	movcc	r0, #1
 80006e0:	2000      	movcs	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_fcmple>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffe0 	bl	80006b0 <__aeabi_cfcmpeq>
 80006f0:	bf94      	ite	ls
 80006f2:	2001      	movls	r0, #1
 80006f4:	2000      	movhi	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_fcmpge>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffd2 	bl	80006a8 <__aeabi_cfrcmple>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_fcmpgt>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffc8 	bl	80006a8 <__aeabi_cfrcmple>
 8000718:	bf34      	ite	cc
 800071a:	2001      	movcc	r0, #1
 800071c:	2000      	movcs	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_f2uiz>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	d20e      	bcs.n	8000746 <__aeabi_f2uiz+0x22>
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800072c:	d30b      	bcc.n	8000746 <__aeabi_f2uiz+0x22>
 800072e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d409      	bmi.n	800074c <__aeabi_f2uiz+0x28>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	4770      	bx	lr
 8000746:	f04f 0000 	mov.w	r0, #0
 800074a:	4770      	bx	lr
 800074c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000750:	d101      	bne.n	8000756 <__aeabi_f2uiz+0x32>
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	d102      	bne.n	800075c <__aeabi_f2uiz+0x38>
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <__aeabi_uldivmod>:
 8000764:	b953      	cbnz	r3, 800077c <__aeabi_uldivmod+0x18>
 8000766:	b94a      	cbnz	r2, 800077c <__aeabi_uldivmod+0x18>
 8000768:	2900      	cmp	r1, #0
 800076a:	bf08      	it	eq
 800076c:	2800      	cmpeq	r0, #0
 800076e:	bf1c      	itt	ne
 8000770:	f04f 31ff 	movne.w	r1, #4294967295
 8000774:	f04f 30ff 	movne.w	r0, #4294967295
 8000778:	f000 b976 	b.w	8000a68 <__aeabi_idiv0>
 800077c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000780:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000784:	f000 f806 	bl	8000794 <__udivmoddi4>
 8000788:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	9e08      	ldr	r6, [sp, #32]
 800079a:	460d      	mov	r5, r1
 800079c:	4604      	mov	r4, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14d      	bne.n	8000840 <__udivmoddi4+0xac>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4694      	mov	ip, r2
 80007a8:	d968      	bls.n	800087c <__udivmoddi4+0xe8>
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	b152      	cbz	r2, 80007c6 <__udivmoddi4+0x32>
 80007b0:	fa01 f302 	lsl.w	r3, r1, r2
 80007b4:	f1c2 0120 	rsb	r1, r2, #32
 80007b8:	fa20 f101 	lsr.w	r1, r0, r1
 80007bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007c0:	ea41 0803 	orr.w	r8, r1, r3
 80007c4:	4094      	lsls	r4, r2
 80007c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	fb01 8817 	mls	r8, r1, r7, r8
 80007d6:	fb07 f00e 	mul.w	r0, r7, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x66>
 80007e4:	eb1c 0303 	adds.w	r3, ip, r3
 80007e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80007ec:	f080 811e 	bcs.w	8000a2c <__udivmoddi4+0x298>
 80007f0:	4298      	cmp	r0, r3
 80007f2:	f240 811b 	bls.w	8000a2c <__udivmoddi4+0x298>
 80007f6:	3f02      	subs	r7, #2
 80007f8:	4463      	add	r3, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000800:	fb01 3310 	mls	r3, r1, r0, r3
 8000804:	fb00 fe0e 	mul.w	lr, r0, lr
 8000808:	b2a4      	uxth	r4, r4
 800080a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800080e:	45a6      	cmp	lr, r4
 8000810:	d90a      	bls.n	8000828 <__udivmoddi4+0x94>
 8000812:	eb1c 0404 	adds.w	r4, ip, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	f080 8109 	bcs.w	8000a30 <__udivmoddi4+0x29c>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8106 	bls.w	8000a30 <__udivmoddi4+0x29c>
 8000824:	4464      	add	r4, ip
 8000826:	3802      	subs	r0, #2
 8000828:	2100      	movs	r1, #0
 800082a:	eba4 040e 	sub.w	r4, r4, lr
 800082e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000832:	b11e      	cbz	r6, 800083c <__udivmoddi4+0xa8>
 8000834:	2300      	movs	r3, #0
 8000836:	40d4      	lsrs	r4, r2
 8000838:	e9c6 4300 	strd	r4, r3, [r6]
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	428b      	cmp	r3, r1
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0xc2>
 8000844:	2e00      	cmp	r6, #0
 8000846:	f000 80ee 	beq.w	8000a26 <__udivmoddi4+0x292>
 800084a:	2100      	movs	r1, #0
 800084c:	e9c6 0500 	strd	r0, r5, [r6]
 8000850:	4608      	mov	r0, r1
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f183 	clz	r1, r3
 800085a:	2900      	cmp	r1, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x160>
 800085e:	42ab      	cmp	r3, r5
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0xd4>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80fc 	bhi.w	8000a60 <__udivmoddi4+0x2cc>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb65 0303 	sbc.w	r3, r5, r3
 800086e:	2001      	movs	r0, #1
 8000870:	4698      	mov	r8, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d0e2      	beq.n	800083c <__udivmoddi4+0xa8>
 8000876:	e9c6 4800 	strd	r4, r8, [r6]
 800087a:	e7df      	b.n	800083c <__udivmoddi4+0xa8>
 800087c:	b902      	cbnz	r2, 8000880 <__udivmoddi4+0xec>
 800087e:	deff      	udf	#255	; 0xff
 8000880:	fab2 f282 	clz	r2, r2
 8000884:	2a00      	cmp	r2, #0
 8000886:	f040 8091 	bne.w	80009ac <__udivmoddi4+0x218>
 800088a:	eba1 000c 	sub.w	r0, r1, ip
 800088e:	2101      	movs	r1, #1
 8000890:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000894:	fa1f fe8c 	uxth.w	lr, ip
 8000898:	fbb0 f3f7 	udiv	r3, r0, r7
 800089c:	fb07 0013 	mls	r0, r7, r3, r0
 80008a0:	0c25      	lsrs	r5, r4, #16
 80008a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008a6:	fb0e f003 	mul.w	r0, lr, r3
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x12c>
 80008ae:	eb1c 0505 	adds.w	r5, ip, r5
 80008b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80008b6:	d202      	bcs.n	80008be <__udivmoddi4+0x12a>
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	f200 80ce 	bhi.w	8000a5a <__udivmoddi4+0x2c6>
 80008be:	4643      	mov	r3, r8
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80008c6:	fb07 5510 	mls	r5, r7, r0, r5
 80008ca:	fb0e fe00 	mul.w	lr, lr, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008d4:	45a6      	cmp	lr, r4
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x156>
 80008d8:	eb1c 0404 	adds.w	r4, ip, r4
 80008dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80008e0:	d202      	bcs.n	80008e8 <__udivmoddi4+0x154>
 80008e2:	45a6      	cmp	lr, r4
 80008e4:	f200 80b6 	bhi.w	8000a54 <__udivmoddi4+0x2c0>
 80008e8:	4628      	mov	r0, r5
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008f2:	e79e      	b.n	8000832 <__udivmoddi4+0x9e>
 80008f4:	f1c1 0720 	rsb	r7, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80008fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000902:	fa25 fa07 	lsr.w	sl, r5, r7
 8000906:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800090a:	fbba f8f9 	udiv	r8, sl, r9
 800090e:	fa20 f307 	lsr.w	r3, r0, r7
 8000912:	fb09 aa18 	mls	sl, r9, r8, sl
 8000916:	408d      	lsls	r5, r1
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	431d      	orrs	r5, r3
 800091e:	fa00 f301 	lsl.w	r3, r0, r1
 8000922:	fb08 f00e 	mul.w	r0, r8, lr
 8000926:	0c2c      	lsrs	r4, r5, #16
 8000928:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800092c:	42a0      	cmp	r0, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d90b      	bls.n	800094c <__udivmoddi4+0x1b8>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f108 3aff 	add.w	sl, r8, #4294967295
 800093c:	f080 8088 	bcs.w	8000a50 <__udivmoddi4+0x2bc>
 8000940:	42a0      	cmp	r0, r4
 8000942:	f240 8085 	bls.w	8000a50 <__udivmoddi4+0x2bc>
 8000946:	f1a8 0802 	sub.w	r8, r8, #2
 800094a:	4464      	add	r4, ip
 800094c:	1a24      	subs	r4, r4, r0
 800094e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000952:	fb09 4410 	mls	r4, r9, r0, r4
 8000956:	fb00 fe0e 	mul.w	lr, r0, lr
 800095a:	b2ad      	uxth	r5, r5
 800095c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000960:	45a6      	cmp	lr, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1e2>
 8000964:	eb1c 0404 	adds.w	r4, ip, r4
 8000968:	f100 35ff 	add.w	r5, r0, #4294967295
 800096c:	d26c      	bcs.n	8000a48 <__udivmoddi4+0x2b4>
 800096e:	45a6      	cmp	lr, r4
 8000970:	d96a      	bls.n	8000a48 <__udivmoddi4+0x2b4>
 8000972:	3802      	subs	r0, #2
 8000974:	4464      	add	r4, ip
 8000976:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800097a:	fba0 9502 	umull	r9, r5, r0, r2
 800097e:	eba4 040e 	sub.w	r4, r4, lr
 8000982:	42ac      	cmp	r4, r5
 8000984:	46c8      	mov	r8, r9
 8000986:	46ae      	mov	lr, r5
 8000988:	d356      	bcc.n	8000a38 <__udivmoddi4+0x2a4>
 800098a:	d053      	beq.n	8000a34 <__udivmoddi4+0x2a0>
 800098c:	2e00      	cmp	r6, #0
 800098e:	d069      	beq.n	8000a64 <__udivmoddi4+0x2d0>
 8000990:	ebb3 0208 	subs.w	r2, r3, r8
 8000994:	eb64 040e 	sbc.w	r4, r4, lr
 8000998:	fa22 f301 	lsr.w	r3, r2, r1
 800099c:	fa04 f707 	lsl.w	r7, r4, r7
 80009a0:	431f      	orrs	r7, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c6 7400 	strd	r7, r4, [r6]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e747      	b.n	800083c <__udivmoddi4+0xa8>
 80009ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b0:	f1c2 0120 	rsb	r1, r2, #32
 80009b4:	fa25 f301 	lsr.w	r3, r5, r1
 80009b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009bc:	fa20 f101 	lsr.w	r1, r0, r1
 80009c0:	4095      	lsls	r5, r2
 80009c2:	430d      	orrs	r5, r1
 80009c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80009c8:	fb07 3311 	mls	r3, r7, r1, r3
 80009cc:	fa1f fe8c 	uxth.w	lr, ip
 80009d0:	0c28      	lsrs	r0, r5, #16
 80009d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d6:	fb01 f30e 	mul.w	r3, r1, lr
 80009da:	4283      	cmp	r3, r0
 80009dc:	fa04 f402 	lsl.w	r4, r4, r2
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x260>
 80009e2:	eb1c 0000 	adds.w	r0, ip, r0
 80009e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80009ea:	d22f      	bcs.n	8000a4c <__udivmoddi4+0x2b8>
 80009ec:	4283      	cmp	r3, r0
 80009ee:	d92d      	bls.n	8000a4c <__udivmoddi4+0x2b8>
 80009f0:	3902      	subs	r1, #2
 80009f2:	4460      	add	r0, ip
 80009f4:	1ac0      	subs	r0, r0, r3
 80009f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80009fa:	fb07 0013 	mls	r0, r7, r3, r0
 80009fe:	b2ad      	uxth	r5, r5
 8000a00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a04:	fb03 f00e 	mul.w	r0, r3, lr
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x28a>
 8000a0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a10:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a14:	d216      	bcs.n	8000a44 <__udivmoddi4+0x2b0>
 8000a16:	42a8      	cmp	r0, r5
 8000a18:	d914      	bls.n	8000a44 <__udivmoddi4+0x2b0>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	4465      	add	r5, ip
 8000a1e:	1a28      	subs	r0, r5, r0
 8000a20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a24:	e738      	b.n	8000898 <__udivmoddi4+0x104>
 8000a26:	4631      	mov	r1, r6
 8000a28:	4630      	mov	r0, r6
 8000a2a:	e707      	b.n	800083c <__udivmoddi4+0xa8>
 8000a2c:	462f      	mov	r7, r5
 8000a2e:	e6e4      	b.n	80007fa <__udivmoddi4+0x66>
 8000a30:	4618      	mov	r0, r3
 8000a32:	e6f9      	b.n	8000828 <__udivmoddi4+0x94>
 8000a34:	454b      	cmp	r3, r9
 8000a36:	d2a9      	bcs.n	800098c <__udivmoddi4+0x1f8>
 8000a38:	ebb9 0802 	subs.w	r8, r9, r2
 8000a3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a40:	3801      	subs	r0, #1
 8000a42:	e7a3      	b.n	800098c <__udivmoddi4+0x1f8>
 8000a44:	4643      	mov	r3, r8
 8000a46:	e7ea      	b.n	8000a1e <__udivmoddi4+0x28a>
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e794      	b.n	8000976 <__udivmoddi4+0x1e2>
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	e7d1      	b.n	80009f4 <__udivmoddi4+0x260>
 8000a50:	46d0      	mov	r8, sl
 8000a52:	e77b      	b.n	800094c <__udivmoddi4+0x1b8>
 8000a54:	4464      	add	r4, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	e747      	b.n	80008ea <__udivmoddi4+0x156>
 8000a5a:	3b02      	subs	r3, #2
 8000a5c:	4465      	add	r5, ip
 8000a5e:	e72f      	b.n	80008c0 <__udivmoddi4+0x12c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e706      	b.n	8000872 <__udivmoddi4+0xde>
 8000a64:	4631      	mov	r1, r6
 8000a66:	e6e9      	b.n	800083c <__udivmoddi4+0xa8>

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b092      	sub	sp, #72	; 0x48
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fd90 	bl	8001596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f89d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f9fd 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7e:	f000 f9dd 	bl	8000e3c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000a82:	f008 fc37 	bl	80092f4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000a86:	f000 f94b 	bl	8000d20 <MX_TIM2_Init>
  MX_ADC_Init();
 8000a8a:	f000 f8e3 	bl	8000c54 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000a8e:	483f      	ldr	r0, [pc, #252]	; (8000b8c <main+0x120>)
 8000a90:	f004 f83c 	bl	8004b0c <HAL_TIM_Base_Start>

  joystick = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000a94:	4c3e      	ldr	r4, [pc, #248]	; (8000b90 <main+0x124>)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <main+0x128>)
 8000a9a:	493f      	ldr	r1, [pc, #252]	; (8000b98 <main+0x12c>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fbcd 	bl	800123c <Joystick_Init>
 8000aa2:	4625      	mov	r5, r4
 8000aa4:	463c      	mov	r4, r7
 8000aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ab6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ac0:	e009      	b.n	8000ad6 <main+0x6a>
  	  event_state[i] = EVENT_WAIT;
 8000ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ac6:	4a35      	ldr	r2, [pc, #212]	; (8000b9c <main+0x130>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ad6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	daf1      	bge.n	8000ac2 <main+0x56>
    }

  while (1)
  {
	  switch(event_state[event_index_read]){
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <main+0x134>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <main+0x130>)
 8000ae6:	5c9b      	ldrb	r3, [r3, r2]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d81f      	bhi.n	8000b2c <main+0xc0>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <main+0x88>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b2d 	.word	0x08000b2d
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000b15 	.word	0x08000b15
 8000b00:	08000b1d 	.word	0x08000b1d
 8000b04:	08000b25 	.word	0x08000b25
		case EVENT_WAIT:
			// Do nothing...
			break;
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, 2); //Trigger Joystick ADC read
 8000b08:	2202      	movs	r2, #2
 8000b0a:	4923      	ldr	r1, [pc, #140]	; (8000b98 <main+0x12c>)
 8000b0c:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <main+0x138>)
 8000b0e:	f000 fef7 	bl	8001900 <HAL_ADC_Start_DMA>
			break;
 8000b12:	e00b      	b.n	8000b2c <main+0xc0>
		case TIM_EVENT_2:
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f000 f9d1 	bl	8000ebc <write_next_event_state>
			break;
 8000b1a:	e007      	b.n	8000b2c <main+0xc0>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick);
 8000b1c:	481c      	ldr	r0, [pc, #112]	; (8000b90 <main+0x124>)
 8000b1e:	f000 fbd9 	bl	80012d4 <Joystick_Update>
			break;
 8000b22:	e003      	b.n	8000b2c <main+0xc0>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000b24:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <main+0x13c>)
 8000b26:	f000 f9f7 	bl	8000f18 <Send_HID_Data>
			break;
 8000b2a:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <main+0x134>)
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <main+0x140>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d00d      	beq.n	8000b54 <main+0xe8>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <main+0x134>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	425a      	negs	r2, r3
 8000b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000b48:	bf58      	it	pl
 8000b4a:	4253      	negpl	r3, r2
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <main+0x134>)
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	e002      	b.n	8000b5a <main+0xee>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f9b1 	bl	8000ebc <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <main+0x140>)
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <main+0x134>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d306      	bcc.n	8000b74 <main+0x108>
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <main+0x140>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <main+0x134>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	e007      	b.n	8000b84 <main+0x118>
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <main+0x140>)
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <main+0x134>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <main+0x144>)
 8000b86:	7013      	strb	r3, [r2, #0]
	  switch(event_state[event_index_read]){
 8000b88:	e7a9      	b.n	8000ade <main+0x72>
 8000b8a:	bf00      	nop
 8000b8c:	200001f8 	.word	0x200001f8
 8000b90:	200002c0 	.word	0x200002c0
 8000b94:	200002be 	.word	0x200002be
 8000b98:	200002bc 	.word	0x200002bc
 8000b9c:	20000238 	.word	0x20000238
 8000ba0:	200002b8 	.word	0x200002b8
 8000ba4:	20000160 	.word	0x20000160
 8000ba8:	200002fc 	.word	0x200002fc
 8000bac:	200002b9 	.word	0x200002b9
 8000bb0:	200002ba 	.word	0x200002ba

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b092      	sub	sp, #72	; 0x48
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2234      	movs	r2, #52	; 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 ffc4 	bl	8009b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <SystemClock_Config+0x9c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <SystemClock_Config+0x9c>)
 8000be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000be6:	2303      	movs	r3, #3
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000c06:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f977 	bl	8003f04 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000c1c:	f000 f9ea 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2303      	movs	r3, #3
 8000c26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fc93 	bl	8004564 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c44:	f000 f9d6 	bl	8000ff4 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3748      	adds	r7, #72	; 0x48
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <MX_ADC_Init+0xc8>)
 8000c68:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c70:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c84:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cc8:	4813      	ldr	r0, [pc, #76]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cca:	f000 fcd3 	bl	8001674 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000cd4:	f000 f98e 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000cea:	f000 fea9 	bl	8001a40 <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000cf4:	f000 f97e 	bl	8000ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_ADC_Init+0xc4>)
 8000d02:	f000 fe9d 	bl	8001a40 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000d0c:	f000 f972 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000160 	.word	0x20000160
 8000d1c:	40012400 	.word	0x40012400

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d60:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d72:	4831      	ldr	r0, [pc, #196]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d74:	f003 fe8a 	bl	8004a8c <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000d7e:	f000 f939 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482a      	ldr	r0, [pc, #168]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000d90:	f003 ffa6 	bl	8004ce0 <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 f92b 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000d9e:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000da0:	f003 fefe 	bl	8004ba0 <HAL_TIM_OC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000daa:	f000 f923 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000dbe:	f004 fa41 	bl	8005244 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000dc8:	f000 f914 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000-1;
 8000dd0:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000de6:	f003 ff23 	bl	8004c30 <HAL_TIM_OC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000df0:	f000 f900 	bl	8000ff4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0208 	orr.w	r2, r2, #8
 8000e02:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 32000-1;
 8000e04:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000e12:	f003 ff0d 	bl	8004c30 <HAL_TIM_OC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000e1c:	f000 f8ea 	bl	8000ff4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <MX_TIM2_Init+0x118>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e2e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001f8 	.word	0x200001f8

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_DMA_Init+0x38>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <MX_DMA_Init+0x38>)
 8000e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_DMA_Init+0x38>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200b      	movs	r0, #11
 8000e60:	f001 f8ed 	bl	800203e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e64:	200b      	movs	r0, #11
 8000e66:	f001 f906 	bl	8002076 <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800

08000ebc <write_next_event_state>:

/* USER CODE BEGIN 4 */

void write_next_event_state(State_TypeDef next_state){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <write_next_event_state+0x3c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	425a      	negs	r2, r3
 8000ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ed6:	bf58      	it	pl
 8000ed8:	4253      	negpl	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <write_next_event_state+0x3c>)
 8000ede:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <write_next_event_state+0x3c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <write_next_event_state+0x40>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	5453      	strb	r3, [r2, r1]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200002b9 	.word	0x200002b9
 8000efc:	20000238 	.word	0x20000238

08000f00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff ffd7 	bl	8000ebc <write_next_event_state>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Send_HID_Data>:

void Send_HID_Data(Controller_HandleTypeDef* controller){
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8000f1e:	afa6      	add	r7, sp, #664	; 0x298
 8000f20:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <Send_HID_Data+0xd4>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <Send_HID_Data+0xd4>)
 8000f30:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <Send_HID_Data+0xd4>)
 8000f3e:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <Send_HID_Data+0xd4>)
 8000f4a:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f52:	121b      	asrs	r3, r3, #8
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <Send_HID_Data+0xd4>)
 8000f5a:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <Send_HID_Data+0xd4>)
 8000f66:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f6e:	121b      	asrs	r3, r3, #8
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <Send_HID_Data+0xd4>)
 8000f76:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <Send_HID_Data+0xd4>)
 8000f82:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f8a:	121b      	asrs	r3, r3, #8
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <Send_HID_Data+0xd4>)
 8000f92:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <Send_HID_Data+0xd4>)
 8000f9e:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fa6:	121b      	asrs	r3, r3, #8
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <Send_HID_Data+0xd4>)
 8000fae:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a9a      	ldrb	r2, [r3, #10]
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <Send_HID_Data+0xd4>)
 8000fb6:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7ada      	ldrb	r2, [r3, #11]
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <Send_HID_Data+0xd4>)
 8000fbe:	731a      	strb	r2, [r3, #12]
	USBD_CUSTOM_HID_SendReport(hUsbDeviceFS, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <Send_HID_Data+0xd8>)
 8000fc2:	230d      	movs	r3, #13
 8000fc4:	93a4      	str	r3, [sp, #656]	; 0x290
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <Send_HID_Data+0xd4>)
 8000fc8:	93a3      	str	r3, [sp, #652]	; 0x28c
 8000fca:	4668      	mov	r0, sp
 8000fcc:	f104 0310 	add.w	r3, r4, #16
 8000fd0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 fdad 	bl	8009b34 <memcpy>
 8000fda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fde:	f007 f899 	bl	8008114 <USBD_CUSTOM_HID_SendReport>
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000308 	.word	0x20000308
 8000ff0:	20000320 	.word	0x20000320

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <Error_Handler+0x8>
	...

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_MspInit+0x58>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_MspInit+0x58>)
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	6253      	str	r3, [r2, #36]	; 0x24
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_MspInit+0x58>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_MspInit+0x58>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_MspInit+0x58>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_MspInit+0x58>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_MspInit+0x58>)
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_MspInit+0x58>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6253      	str	r3, [r2, #36]	; 0x24
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_MspInit+0x58>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <HAL_ADC_MspInit+0xc4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d14c      	bne.n	8001118 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a28      	ldr	r2, [pc, #160]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 8001084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_ADC_MspInit+0xc8>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ae:	2303      	movs	r3, #3
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <HAL_ADC_MspInit+0xcc>)
 80010c2:	f001 f989 	bl	80023d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_ADC_MspInit+0xd4>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_ADC_MspInit+0xd0>)
 80010fe:	f000 ffd5 	bl	80020ac <HAL_DMA_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001108:	f7ff ff74 	bl	8000ff4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_ADC_MspInit+0xd0>)
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_ADC_MspInit+0xd0>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40012400 	.word	0x40012400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	200001b4 	.word	0x200001b4
 8001130:	40026008 	.word	0x40026008

08001134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001144:	d10b      	bne.n	800115e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_TIM_Base_MspInit+0x34>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_TIM_Base_MspInit+0x34>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_TIM_Base_MspInit+0x34>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b2:	f000 fa43 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Channel1_IRQHandler+0x10>)
 80011c2:	f001 f82b 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001b4 	.word	0x200001b4

080011d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <USB_LP_IRQHandler+0x10>)
 80011d6:	f001 fb83 	bl	80028e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200007bc 	.word	0x200007bc

080011e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001216:	f7ff ffe5 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f008 fc67 	bl	8009aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121e:	f7ff fc25 	bl	8000a6c <main>
  bx lr
 8001222:	4770      	bx	lr
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 800122c:	08009c04 	.word	0x08009c04
  ldr r2, =_sbss
 8001230:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8001234:	20000ac4 	.word	0x20000ac4

08001238 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_IRQHandler>
	...

0800123c <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 800123c:	b4b0      	push	{r4, r5, r7}
 800123e:	b095      	sub	sp, #84	; 0x54
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 800124c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001250:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 8001252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001256:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <Joystick_Init+0x90>)
 800125e:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <Joystick_Init+0x94>)
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 800126e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001272:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 8001274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001278:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <Joystick_Init+0x90>)
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <Joystick_Init+0x94>)
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 800129e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	461d      	mov	r5, r3
 80012a8:	f107 0414 	add.w	r4, r7, #20
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	3754      	adds	r7, #84	; 0x54
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bcb0      	pop	{r4, r5, r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	3ccccccd 	.word	0x3ccccccd
 80012d0:	3f8ccccd 	.word	0x3f8ccccd

080012d4 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d062      	beq.n	80013bc <Joystick_Update+0xe8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d05e      	beq.n	80013bc <Joystick_Update+0xe8>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	891b      	ldrh	r3, [r3, #8]
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe fff0 	bl	80002e8 <__aeabi_ui2f>
 8001308:	4604      	mov	r4, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001314:	f7fe ff36 	bl	8000184 <__aeabi_fsub>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff f83b 	bl	8000398 <__aeabi_fmul>
 8001322:	4603      	mov	r3, r0
 8001324:	461c      	mov	r4, r3
 8001326:	8bfb      	ldrh	r3, [r7, #30]
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ffdd 	bl	80002e8 <__aeabi_ui2f>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001334:	4619      	mov	r1, r3
 8001336:	4610      	mov	r0, r2
 8001338:	f7ff f82e 	bl	8000398 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	4619      	mov	r1, r3
 8001340:	4620      	mov	r0, r4
 8001342:	f7fe ff21 	bl	8000188 <__addsf3>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f9eb 	bl	8000724 <__aeabi_f2uiz>
 800134e:	4603      	mov	r3, r0
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8c1b      	ldrh	r3, [r3, #32]
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ffc4 	bl	80002e8 <__aeabi_ui2f>
 8001360:	4604      	mov	r4, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800136c:	f7fe ff0a 	bl	8000184 <__aeabi_fsub>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff f80f 	bl	8000398 <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	461c      	mov	r4, r3
 800137e:	8bbb      	ldrh	r3, [r7, #28]
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ffb1 	bl	80002e8 <__aeabi_ui2f>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	4619      	mov	r1, r3
 800138e:	4610      	mov	r0, r2
 8001390:	f7ff f802 	bl	8000398 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7fe fef5 	bl	8000188 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f9bf 	bl	8000724 <__aeabi_f2uiz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	865a      	strh	r2, [r3, #50]	; 0x32
 80013ba:	e008      	b.n	80013ce <Joystick_Update+0xfa>
	}
	else if(js->calibrate.flag){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <Joystick_Update+0xfa>
		js->calibrate.flag = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	891b      	ldrh	r3, [r3, #8]
 80013d2:	8bfa      	ldrh	r2, [r7, #30]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	8c1b      	ldrh	r3, [r3, #32]
 80013de:	8bba      	ldrh	r2, [r7, #28]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	889b      	ldrh	r3, [r3, #4]
 80013ea:	8bfa      	ldrh	r2, [r7, #30]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf28      	it	cs
 80013f0:	4613      	movcs	r3, r2
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	88db      	ldrh	r3, [r3, #6]
 80013fc:	8bfa      	ldrh	r2, [r7, #30]
 80013fe:	4293      	cmp	r3, r2
 8001400:	bf38      	it	cc
 8001402:	4613      	movcc	r3, r2
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8b9b      	ldrh	r3, [r3, #28]
 800140e:	8bba      	ldrh	r2, [r7, #28]
 8001410:	4293      	cmp	r3, r2
 8001412:	bf28      	it	cs
 8001414:	4613      	movcs	r3, r2
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	8bdb      	ldrh	r3, [r3, #30]
 8001420:	8bba      	ldrh	r2, [r7, #28]
 8001422:	4293      	cmp	r3, r2
 8001424:	bf38      	it	cc
 8001426:	4613      	movcc	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 800142e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dd15      	ble.n	8001462 <Joystick_Update+0x18e>
 8001436:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe ff58 	bl	80002f0 <__aeabi_i2f>
 8001440:	4604      	mov	r4, r0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	88db      	ldrh	r3, [r3, #6]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	891b      	ldrh	r3, [r3, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff4e 	bl	80002f0 <__aeabi_i2f>
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff f851 	bl	8000500 <__aeabi_fdiv>
 800145e:	4603      	mov	r3, r0
 8001460:	e016      	b.n	8001490 <Joystick_Update+0x1bc>
 8001462:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ff42 	bl	80002f0 <__aeabi_i2f>
 800146c:	4603      	mov	r3, r0
 800146e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	889b      	ldrh	r3, [r3, #4]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff36 	bl	80002f0 <__aeabi_i2f>
 8001484:	4603      	mov	r3, r0
 8001486:	4619      	mov	r1, r3
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff f839 	bl	8000500 <__aeabi_fdiv>
 800148e:	4603      	mov	r3, r0
 8001490:	617b      	str	r3, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001492:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	dd15      	ble.n	80014c6 <Joystick_Update+0x1f2>
 800149a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ff26 	bl	80002f0 <__aeabi_i2f>
 80014a4:	4604      	mov	r4, r0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	8bdb      	ldrh	r3, [r3, #30]
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c1b      	ldrh	r3, [r3, #32]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ff1c 	bl	80002f0 <__aeabi_i2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff f81f 	bl	8000500 <__aeabi_fdiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	e016      	b.n	80014f4 <Joystick_Update+0x220>
 80014c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff10 	bl	80002f0 <__aeabi_i2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8b9b      	ldrh	r3, [r3, #28]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8c1b      	ldrh	r3, [r3, #32]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff04 	bl	80002f0 <__aeabi_i2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff f807 	bl	8000500 <__aeabi_fdiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff f908 	bl	8000710 <__aeabi_fcmpgt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <Joystick_Update+0x236>
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	e002      	b.n	8001510 <Joystick_Update+0x23c>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001510:	60fb      	str	r3, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	6938      	ldr	r0, [r7, #16]
 8001518:	f7ff f8fa 	bl	8000710 <__aeabi_fcmpgt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <Joystick_Update+0x252>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	e002      	b.n	800152c <Joystick_Update+0x258>
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800152c:	60bb      	str	r3, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	4619      	mov	r1, r3
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f8eb 	bl	8000710 <__aeabi_fcmpgt>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00a      	beq.n	8001556 <Joystick_Update+0x282>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff f8c4 	bl	80006d4 <__aeabi_fcmplt>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <Joystick_Update+0x282>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	e001      	b.n	800155a <Joystick_Update+0x286>
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7ff f8d3 	bl	8000710 <__aeabi_fcmpgt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00a      	beq.n	8001586 <Joystick_Update+0x2b2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	4619      	mov	r1, r3
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f7ff f8ac 	bl	80006d4 <__aeabi_fcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <Joystick_Update+0x2b2>
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	e001      	b.n	800158a <Joystick_Update+0x2b6>
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fd41 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f80e 	bl	80015c8 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e001      	b.n	80015bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015b8:	f7ff fd22 	bl	8001000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_InitTick+0x68>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d022      	beq.n	8001622 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_InitTick+0x6c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_InitTick+0x68>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd4e 	bl	8002092 <HAL_SYSTICK_Config>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10f      	bne.n	800161c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d809      	bhi.n	8001616 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001602:	2200      	movs	r2, #0
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	f04f 30ff 	mov.w	r0, #4294967295
 800160a:	f000 fd18 	bl	800203e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_InitTick+0x70>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e007      	b.n	8001626 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e004      	b.n	8001626 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000008 	.word	0x20000008
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_IncTick+0x1c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_IncTick+0x20>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4413      	add	r3, r2
 800164a:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_IncTick+0x1c>)
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000318 	.word	0x20000318
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_GetTick+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000318 	.word	0x20000318

08001674 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e127      	b.n	80018e4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d115      	bne.n	80016ce <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b8e      	ldr	r3, [pc, #568]	; (80018ec <HAL_ADC_Init+0x278>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a8d      	ldr	r2, [pc, #564]	; (80018ec <HAL_ADC_Init+0x278>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <HAL_ADC_Init+0x278>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fcc7 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80ff 	bne.w	80018da <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e4:	f023 0302 	bic.w	r3, r3, #2
 80016e8:	f043 0202 	orr.w	r2, r3, #2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_ADC_Init+0x27c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	497c      	ldr	r1, [pc, #496]	; (80018f0 <HAL_ADC_Init+0x27c>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800170a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001712:	4619      	mov	r1, r3
 8001714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001718:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800172e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001734:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	2302      	movs	r3, #2
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001756:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	4313      	orrs	r3, r2
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	2b10      	cmp	r3, #16
 8001764:	d007      	beq.n	8001776 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800176e:	4313      	orrs	r3, r2
 8001770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001772:	4313      	orrs	r3, r2
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d04f      	beq.n	8001824 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178a:	4313      	orrs	r3, r2
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001796:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6912      	ldr	r2, [r2, #16]
 800179c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_Init+0x136>
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6912      	ldr	r2, [r2, #16]
 80017a6:	2a01      	cmp	r2, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_ADC_Init+0x13c>
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_Init+0x13e>
 80017b0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80017b2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b6:	4313      	orrs	r3, r2
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d125      	bne.n	8001810 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d114      	bne.n	80017f8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	fa92 f2a2 	rbit	r2, r2
 80017e0:	617a      	str	r2, [r7, #20]
  return result;
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f2:	4313      	orrs	r3, r2
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
 80017f6:	e00b      	b.n	8001810 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_ADC_Init+0x280>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001820:	430b      	orrs	r3, r1
 8001822:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_ADC_Init+0x284>)
 800182c:	4013      	ands	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001834:	430b      	orrs	r3, r1
 8001836:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001840:	d003      	beq.n	800184a <HAL_ADC_Init+0x1d6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d119      	bne.n	800187e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	3b01      	subs	r3, #1
 800185a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800185e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	fa92 f2a2 	rbit	r2, r2
 8001866:	60fa      	str	r2, [r7, #12]
  return result;
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	fa03 f202 	lsl.w	r2, r3, r2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
 800187c:	e007      	b.n	800188e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_ADC_Init+0x288>)
 8001896:	4013      	ands	r3, r2
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	429a      	cmp	r2, r3
 800189c:	d10b      	bne.n	80018b6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b4:	e014      	b.n	80018e0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f023 0312 	bic.w	r3, r3, #18
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3738      	adds	r7, #56	; 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40012700 	.word	0x40012700
 80018f4:	fcfc16ff 	.word	0xfcfc16ff
 80018f8:	c0fff18d 	.word	0xc0fff18d
 80018fc:	bf80fffe 	.word	0xbf80fffe

08001900 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADC_Start_DMA+0x1e>
 800191a:	2302      	movs	r3, #2
 800191c:	e074      	b.n	8001a08 <HAL_ADC_Start_DMA+0x108>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f9da 	bl	8001ce0 <ADC_Enable>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d167      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001960:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001974:	d106      	bne.n	8001984 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197a:	f023 0206 	bic.w	r2, r3, #6
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	651a      	str	r2, [r3, #80]	; 0x50
 8001982:	e002      	b.n	800198a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_ADC_Start_DMA+0x110>)
 8001998:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_ADC_Start_DMA+0x114>)
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_ADC_Start_DMA+0x118>)
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3358      	adds	r3, #88	; 0x58
 80019de:	4619      	mov	r1, r3
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f000 fbba 	bl	800215c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a04:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	08001d99 	.word	0x08001d99
 8001a14:	08001e41 	.word	0x08001e41
 8001a18:	08001e5d 	.word	0x08001e5d

08001a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x20>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e134      	b.n	8001cca <HAL_ADC_ConfigChannel+0x28a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d81c      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b05      	subs	r3, #5
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b05      	subs	r3, #5
 8001a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa8:	e07e      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d81c      	bhi.n	8001aec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b23      	subs	r3, #35	; 0x23
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4019      	ands	r1, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b23      	subs	r3, #35	; 0x23
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aea:	e05d      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b12      	cmp	r3, #18
 8001af2:	d81c      	bhi.n	8001b2e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b41      	subs	r3, #65	; 0x41
 8001b06:	221f      	movs	r2, #31
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4019      	ands	r1, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b41      	subs	r3, #65	; 0x41
 8001b20:	fa00 f203 	lsl.w	r2, r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b2c:	e03c      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d81c      	bhi.n	8001b70 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b5f      	subs	r3, #95	; 0x5f
 8001b48:	221f      	movs	r2, #31
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4019      	ands	r1, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b5f      	subs	r3, #95	; 0x5f
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6e:	e01b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b7d      	subs	r3, #125	; 0x7d
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b7d      	subs	r3, #125	; 0x7d
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d81a      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6959      	ldr	r1, [r3, #20]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6898      	ldr	r0, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	e042      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b13      	cmp	r3, #19
 8001bec:	d81c      	bhi.n	8001c28 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6919      	ldr	r1, [r3, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	2207      	movs	r2, #7
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6898      	ldr	r0, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	e021      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b1a      	cmp	r3, #26
 8001c2e:	d81c      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68d9      	ldr	r1, [r3, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b3c      	subs	r3, #60	; 0x3c
 8001c42:	2207      	movs	r2, #7
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6898      	ldr	r0, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b3c      	subs	r3, #60	; 0x3c
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001c6a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d003      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c78:	2b11      	cmp	r3, #17
 8001c7a:	d121      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_ADC_ConfigChannel+0x294>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11b      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_ADC_ConfigChannel+0x294>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_ADC_ConfigChannel+0x294>)
 8001c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c92:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d111      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_ADC_ConfigChannel+0x298>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_ADC_ConfigChannel+0x29c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9a      	lsrs	r2, r3, #18
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40012700 	.word	0x40012700
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d043      	beq.n	8001d86 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <ADC_Enable+0xb0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <ADC_Enable+0xb4>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9a      	lsrs	r2, r3, #18
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d22:	e002      	b.n	8001d2a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001d30:	f7ff fc96 	bl	8001660 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d36:	e01f      	b.n	8001d78 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001d38:	f7ff fc92 	bl	8001660 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d918      	bls.n	8001d78 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d011      	beq.n	8001d78 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d1d8      	bne.n	8001d38 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d13d      	bne.n	8001e2e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12c      	bne.n	8001e26 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d127      	bne.n	8001e26 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d119      	bne.n	8001e26 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0220 	bic.w	r2, r2, #32
 8001e00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff f86a 	bl	8000f00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e2c:	e004      	b.n	8001e38 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fde4 	bl	8001a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	f043 0204 	orr.w	r2, r3, #4
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff fdd3 	bl	8001a2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4906      	ldr	r1, [pc, #24]	; (8001f28 <__NVIC_EnableIRQ+0x34>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff90 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff2d 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff42 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff35 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e043      	b.n	8002146 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_DMA_Init+0xa4>)
 80020c6:	4413      	add	r3, r2
 80020c8:	4a22      	ldr	r2, [pc, #136]	; (8002154 <HAL_DMA_Init+0xa8>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	009a      	lsls	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_DMA_Init+0xac>)
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	bffd9ff8 	.word	0xbffd9ff8
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	40026000 	.word	0x40026000

0800215c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_DMA_Start_IT+0x20>
 8002178:	2302      	movs	r3, #2
 800217a:	e04b      	b.n	8002214 <HAL_DMA_Start_IT+0xb8>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d13a      	bne.n	8002206 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f8e0 	bl	800237a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 020e 	orr.w	r2, r2, #14
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e00f      	b.n	80021f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 020a 	orr.w	r2, r2, #10
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e005      	b.n	8002212 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 031c 	and.w	r3, r3, #28
 800223c:	2204      	movs	r2, #4
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d026      	beq.n	8002296 <HAL_DMA_IRQHandler+0x7a>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d021      	beq.n	8002296 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 021c 	and.w	r2, r3, #28
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	2104      	movs	r1, #4
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d071      	beq.n	8002370 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002294:	e06c      	b.n	8002370 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 031c 	and.w	r3, r3, #28
 800229e:	2202      	movs	r2, #2
 80022a0:	409a      	lsls	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02e      	beq.n	8002308 <HAL_DMA_IRQHandler+0xec>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d029      	beq.n	8002308 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10b      	bne.n	80022da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020a 	bic.w	r2, r2, #10
 80022d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 021c 	and.w	r2, r3, #28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2102      	movs	r1, #2
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d038      	beq.n	8002370 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002306:	e033      	b.n	8002370 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f003 031c 	and.w	r3, r3, #28
 8002310:	2208      	movs	r2, #8
 8002312:	409a      	lsls	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02a      	beq.n	8002372 <HAL_DMA_IRQHandler+0x156>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d025      	beq.n	8002372 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 020e 	bic.w	r2, r2, #14
 8002334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 021c 	and.w	r2, r3, #28
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002370:	bf00      	nop
 8002372:	bf00      	nop
}
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f003 021c 	and.w	r2, r3, #28
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d108      	bne.n	80023be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023bc:	e007      	b.n	80023ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	60da      	str	r2, [r3, #12]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023ee:	e154      	b.n	800269a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8146 	beq.w	8002694 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d005      	beq.n	8002420 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800241c:	2b02      	cmp	r3, #2
 800241e:	d130      	bne.n	8002482 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002456:	2201      	movs	r2, #1
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0201 	and.w	r2, r3, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d017      	beq.n	80024be <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d123      	bne.n	8002512 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	6939      	ldr	r1, [r7, #16]
 800250e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a0 	beq.w	8002694 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HAL_GPIO_Init+0x2e0>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <HAL_GPIO_Init+0x2e0>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_GPIO_Init+0x2e0>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800256c:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_GPIO_Init+0x2e4>)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3302      	adds	r3, #2
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d019      	beq.n	80025cc <HAL_GPIO_Init+0x1f4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a4a      	ldr	r2, [pc, #296]	; (80026c4 <HAL_GPIO_Init+0x2ec>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_GPIO_Init+0x1f0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2f0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x1ec>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x1e8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a47      	ldr	r2, [pc, #284]	; (80026d0 <HAL_GPIO_Init+0x2f8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e008      	b.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025bc:	2305      	movs	r3, #5
 80025be:	e006      	b.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025c0:	2303      	movs	r3, #3
 80025c2:	e004      	b.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e002      	b.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025cc:	2300      	movs	r3, #0
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	f002 0203 	and.w	r2, r2, #3
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	4093      	lsls	r3, r2
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025de:	4937      	ldr	r1, [pc, #220]	; (80026bc <HAL_GPIO_Init+0x2e4>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002610:	4a30      	ldr	r2, [pc, #192]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800263a:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002664:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3301      	adds	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f aea3 	bne.w	80023f0 <HAL_GPIO_Init+0x18>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	b08b      	sub	sp, #44	; 0x2c
 80026dc:	af06      	add	r7, sp, #24
 80026de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0d0      	b.n	800288c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f006 ff70 	bl	80095e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2203      	movs	r2, #3
 8002708:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f002 fe0b 	bl	800532c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e04c      	b.n	80027b6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	3301      	adds	r3, #1
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	b298      	uxth	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	3336      	adds	r3, #54	; 0x36
 800275a:	4602      	mov	r2, r0
 800275c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3303      	adds	r3, #3
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3338      	adds	r3, #56	; 0x38
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	333c      	adds	r3, #60	; 0x3c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3340      	adds	r3, #64	; 0x40
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3ad      	bcc.n	800271c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e044      	b.n	8002850 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3301      	adds	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b5      	bcc.n	80027c6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	687e      	ldr	r6, [r7, #4]
 8002862:	466d      	mov	r5, sp
 8002864:	f106 0410 	add.w	r4, r6, #16
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	1d33      	adds	r3, r6, #4
 8002872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f002 fd73 	bl	8005360 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002894 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_PCD_Start+0x16>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e016      	b.n	80028d8 <HAL_PCD_Start+0x44>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fd22 	bl	8005300 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028bc:	2101      	movs	r1, #1
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f006 fe72 	bl	80095a8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f005 fa07 	bl	8007cdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f005 f9ff 	bl	8007cf0 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fade 	bl	8002ec0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 f9f1 	bl	8007cf0 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d112      	bne.n	8002940 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292c:	b292      	uxth	r2, r2
 800292e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f006 fed1 	bl	80096da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002938:	2100      	movs	r1, #0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8c7 	bl	8002ace <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f005 f9d3 	bl	8007cf0 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002954:	d10b      	bne.n	800296e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002968:	b292      	uxth	r2, r2
 800296a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f005 f9bc 	bl	8007cf0 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002982:	d10b      	bne.n	800299c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002996:	b292      	uxth	r2, r2
 8002998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 f9a5 	bl	8007cf0 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b0:	d126      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f006 feb2 	bl	800974c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029fa:	b292      	uxth	r2, r2
 80029fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f005 f973 	bl	8007cf0 <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a14:	d126      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0208 	orr.w	r2, r2, #8
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a40:	b292      	uxth	r2, r2
 8002a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0204 	orr.w	r2, r2, #4
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f006 fe5a 	bl	8009718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 f941 	bl	8007cf0 <USB_ReadInterrupts>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a78:	d10e      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f006 fe13 	bl	80096be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f005 f927 	bl	8007cf0 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aac:	d10b      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_SetAddress+0x1a>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e013      	b.n	8002b10 <HAL_PCD_SetAddress+0x42>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f005 f8d8 	bl	8007cb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	70fb      	strb	r3, [r7, #3]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	803b      	strh	r3, [r7, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0e      	bge.n	8002b5c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00e      	b.n	8002b7a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b86:	883a      	ldrh	r2, [r7, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	78ba      	ldrb	r2, [r7, #2]
 8002b90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba4:	78bb      	ldrb	r3, [r7, #2]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_EP_Open+0xa6>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_Open+0xc4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fbe7 	bl	80053a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002bda:	7afb      	ldrb	r3, [r7, #11]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da0e      	bge.n	8002c16 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	705a      	strb	r2, [r3, #1]
 8002c14:	e00e      	b.n	8002c34 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 0207 	and.w	r2, r3, #7
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_PCD_EP_Close+0x6a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e00e      	b.n	8002c6c <HAL_PCD_EP_Close+0x88>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 ff09 	bl	8005a74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f8bb 	bl	8005e4c <USB_EPStartXfer>
 8002cd6:	e005      	b.n	8002ce4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6979      	ldr	r1, [r7, #20]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 f8b4 	bl	8005e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2201      	movs	r2, #1
 8002d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 f878 	bl	8005e4c <USB_EPStartXfer>
 8002d5c:	e005      	b.n	8002d6a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f871 	bl	8005e4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d901      	bls.n	8002d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e03e      	b.n	8002e10 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0e      	bge.n	8002db8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
 8002db6:	e00c      	b.n	8002dd2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_EP_SetStall+0x7e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e00e      	b.n	8002e10 <HAL_PCD_EP_SetStall+0x9c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fe5b 	bl	8007abc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d901      	bls.n	8002e36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e040      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da0e      	bge.n	8002e5c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00e      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0207 	and.w	r2, r3, #7
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_ClrStall+0x82>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e00e      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0xa0>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fe57 	bl	8007b5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08e      	sub	sp, #56	; 0x38
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ec8:	e2ec      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f040 8161 	bne.w	80031ac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d152      	bne.n	8002f9a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	81fb      	strh	r3, [r7, #14]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	89fb      	ldrh	r3, [r7, #14]
 8002f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	3302      	adds	r3, #2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	441a      	add	r2, r3
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f58:	2100      	movs	r1, #0
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f006 fb95 	bl	800968a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 829b 	beq.w	80034a4 <PCD_EP_ISR_Handler+0x5e4>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8296 	bne.w	80034a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f98:	e284      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002faa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d034      	beq.n	800301e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3306      	adds	r3, #6
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f004 fed0 	bl	8007d98 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003004:	4013      	ands	r3, r2
 8003006:	823b      	strh	r3, [r7, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	8a3a      	ldrh	r2, [r7, #16]
 800300e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003012:	b292      	uxth	r2, r2
 8003014:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 fb0a 	bl	8009630 <HAL_PCD_SetupStageCallback>
 800301c:	e242      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800301e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003022:	2b00      	cmp	r3, #0
 8003024:	f280 823e 	bge.w	80034a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29a      	uxth	r2, r3
 8003030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003034:	4013      	ands	r3, r2
 8003036:	83bb      	strh	r3, [r7, #28]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	8bba      	ldrh	r2, [r7, #28]
 800303e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003042:	b292      	uxth	r2, r2
 8003044:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	3306      	adds	r3, #6
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <PCD_EP_ISR_Handler+0x1ee>
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d015      	beq.n	80030ae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	6959      	ldr	r1, [r3, #20]
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003092:	b29b      	uxth	r3, r3
 8003094:	f004 fe80 	bl	8007d98 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	441a      	add	r2, r3
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030a6:	2100      	movs	r1, #0
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fad3 	bl	8009654 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 81f2 	bne.w	80034a4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d112      	bne.n	800310e <PCD_EP_ISR_Handler+0x24e>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29a      	uxth	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e02f      	b.n	800316e <PCD_EP_ISR_Handler+0x2ae>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b3e      	cmp	r3, #62	; 0x3e
 8003114:	d813      	bhi.n	800313e <PCD_EP_ISR_Handler+0x27e>
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <PCD_EP_ISR_Handler+0x270>
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	3301      	adds	r3, #1
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	b29b      	uxth	r3, r3
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	b29a      	uxth	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	e017      	b.n	800316e <PCD_EP_ISR_Handler+0x2ae>
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <PCD_EP_ISR_Handler+0x298>
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3b01      	subs	r3, #1
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	b29b      	uxth	r3, r3
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	b29b      	uxth	r3, r3
 8003160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003168:	b29a      	uxth	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	827b      	strh	r3, [r7, #18]
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003186:	827b      	strh	r3, [r7, #18]
 8003188:	8a7b      	ldrh	r3, [r7, #18]
 800318a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800318e:	827b      	strh	r3, [r7, #18]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	8a7b      	ldrh	r3, [r7, #18]
 8003196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8013      	strh	r3, [r2, #0]
 80031aa:	e17b      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f280 80ea 	bge.w	800339c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031de:	4013      	ands	r3, r2
 80031e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	7b1b      	ldrb	r3, [r3, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d122      	bne.n	800325e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	3306      	adds	r3, #6
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003240:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003242:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8087 	beq.w	8003358 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	6959      	ldr	r1, [r3, #20]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	88da      	ldrh	r2, [r3, #6]
 8003256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003258:	f004 fd9e 	bl	8007d98 <USB_ReadPMA>
 800325c:	e07c      	b.n	8003358 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d108      	bne.n	8003278 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003268:	461a      	mov	r2, r3
 800326a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f927 	bl	80034c0 <HAL_PCD_EP_DB_Receive>
 8003272:	4603      	mov	r3, r0
 8003274:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003276:	e06f      	b.n	8003358 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	847b      	strh	r3, [r7, #34]	; 0x22
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d021      	beq.n	8003316 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	3302      	adds	r3, #2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80032fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02a      	beq.n	8003358 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	6959      	ldr	r1, [r3, #20]
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	891a      	ldrh	r2, [r3, #8]
 800330e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003310:	f004 fd42 	bl	8007d98 <USB_ReadPMA>
 8003314:	e020      	b.n	8003358 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	3306      	adds	r3, #6
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	6959      	ldr	r1, [r3, #20]
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	895a      	ldrh	r2, [r3, #10]
 8003352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003354:	f004 fd20 	bl	8007d98 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800335e:	441a      	add	r2, r3
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800336a:	441a      	add	r2, r3
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <PCD_EP_ISR_Handler+0x4c2>
 8003378:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	429a      	cmp	r2, r3
 8003380:	d206      	bcs.n	8003390 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f006 f963 	bl	8009654 <HAL_PCD_DataOutStageCallback>
 800338e:	e005      	b.n	800339c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fd58 	bl	8005e4c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800339c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d07e      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80033a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	843b      	strh	r3, [r7, #32]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8c3b      	ldrh	r3, [r7, #32]
 80033e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d00c      	beq.n	8003414 <PCD_EP_ISR_Handler+0x554>
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003406:	2b02      	cmp	r3, #2
 8003408:	d146      	bne.n	8003498 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800340a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d141      	bne.n	8003498 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	3302      	adds	r3, #2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	8bfb      	ldrh	r3, [r7, #30]
 8003444:	429a      	cmp	r2, r3
 8003446:	d906      	bls.n	8003456 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	8bfb      	ldrh	r3, [r7, #30]
 800344e:	1ad2      	subs	r2, r2, r3
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	619a      	str	r2, [r3, #24]
 8003454:	e002      	b.n	800345c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f006 f90d 	bl	800968a <HAL_PCD_DataInStageCallback>
 8003470:	e018      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	8bfb      	ldrh	r3, [r7, #30]
 8003478:	441a      	add	r2, r3
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	441a      	add	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f002 fcdb 	bl	8005e4c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003496:	e005      	b.n	80034a4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800349a:	461a      	mov	r2, r3
 800349c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f91b 	bl	80036da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f6ff ad0a 	blt.w	8002eca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3738      	adds	r7, #56	; 0x38
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d07e      	beq.n	80035d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	3302      	adds	r3, #2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003500:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	8b7b      	ldrh	r3, [r7, #26]
 8003508:	429a      	cmp	r2, r3
 800350a:	d306      	bcc.n	800351a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	619a      	str	r2, [r3, #24]
 8003518:	e002      	b.n	8003520 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d123      	bne.n	8003570 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	833b      	strh	r3, [r7, #24]
 8003544:	8b3b      	ldrh	r3, [r7, #24]
 8003546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800354a:	833b      	strh	r3, [r7, #24]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	8b3b      	ldrh	r3, [r7, #24]
 800355c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01f      	beq.n	80035ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	82fb      	strh	r3, [r7, #22]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035ba:	8b7b      	ldrh	r3, [r7, #26]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8087 	beq.w	80036d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6959      	ldr	r1, [r3, #20]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	891a      	ldrh	r2, [r3, #8]
 80035ce:	8b7b      	ldrh	r3, [r7, #26]
 80035d0:	f004 fbe2 	bl	8007d98 <USB_ReadPMA>
 80035d4:	e07c      	b.n	80036d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	3306      	adds	r3, #6
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	8b7b      	ldrh	r3, [r7, #26]
 8003606:	429a      	cmp	r2, r3
 8003608:	d306      	bcc.n	8003618 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	8b7b      	ldrh	r3, [r7, #26]
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	619a      	str	r2, [r3, #24]
 8003616:	e002      	b.n	800361e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d123      	bne.n	800366e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	83fb      	strh	r3, [r7, #30]
 8003642:	8bfb      	ldrh	r3, [r7, #30]
 8003644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003648:	83fb      	strh	r3, [r7, #30]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	8bfb      	ldrh	r3, [r7, #30]
 800365a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11f      	bne.n	80036b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	83bb      	strh	r3, [r7, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	8bbb      	ldrh	r3, [r7, #28]
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6959      	ldr	r1, [r3, #20]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	895a      	ldrh	r2, [r3, #10]
 80036ca:	8b7b      	ldrh	r3, [r7, #26]
 80036cc:	f004 fb64 	bl	8007d98 <USB_ReadPMA>
    }
  }

  return count;
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b0a2      	sub	sp, #136	; 0x88
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 81c7 	beq.w	8003a82 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	3302      	adds	r3, #2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003728:	429a      	cmp	r2, r3
 800372a:	d907      	bls.n	800373c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003734:	1ad2      	subs	r2, r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	619a      	str	r2, [r3, #24]
 800373a:	e002      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80b9 	bne.w	80038be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d126      	bne.n	80037a2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	4413      	add	r3, r2
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	011a      	lsls	r2, r3, #4
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	4413      	add	r3, r2
 8003776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003786:	b29a      	uxth	r2, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379a:	b29a      	uxth	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	e01a      	b.n	80037d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d116      	bne.n	80037d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	4413      	add	r3, r2
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	011a      	lsls	r2, r3, #4
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	4413      	add	r3, r2
 80037cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d126      	bne.n	8003834 <HAL_PCD_EP_DB_Transmit+0x15a>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	011a      	lsls	r2, r3, #4
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003818:	b29a      	uxth	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382c:	b29a      	uxth	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	e017      	b.n	8003864 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d113      	bne.n	8003864 <HAL_PCD_EP_DB_Transmit+0x18a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003844:	b29b      	uxth	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	4413      	add	r3, r2
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	011a      	lsls	r2, r3, #4
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	4413      	add	r3, r2
 8003858:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f005 ff0d 	bl	800968a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 82d4 	beq.w	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	827b      	strh	r3, [r7, #18]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	8a7b      	ldrh	r3, [r7, #18]
 80038a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8013      	strh	r3, [r2, #0]
 80038bc:	e2b2      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d021      	beq.n	800390c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	441a      	add	r2, r3
 80038f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003912:	2b01      	cmp	r3, #1
 8003914:	f040 8286 	bne.w	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	441a      	add	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800392e:	441a      	add	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d309      	bcc.n	8003954 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	621a      	str	r2, [r3, #32]
 8003952:	e015      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800395c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003960:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800396a:	e009      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d155      	bne.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	4413      	add	r3, r2
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	011a      	lsls	r2, r3, #4
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
 80039b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d112      	bne.n	80039dc <HAL_PCD_EP_DB_Transmit+0x302>
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	e047      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x392>
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	2b3e      	cmp	r3, #62	; 0x3e
 80039e0:	d811      	bhi.n	8003a06 <HAL_PCD_EP_DB_Transmit+0x32c>
 80039e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	3301      	adds	r3, #1
 80039f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	e032      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x342>
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	029b      	lsls	r3, r3, #10
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e01b      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d117      	bne.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x392>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a50:	4413      	add	r3, r2
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	011a      	lsls	r2, r3, #4
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6959      	ldr	r1, [r3, #20]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	891a      	ldrh	r2, [r3, #8]
 8003a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f004 f947 	bl	8007d0e <USB_WritePMA>
 8003a80:	e1d0      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	3306      	adds	r3, #6
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aaa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d307      	bcc.n	8003aca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	619a      	str	r2, [r3, #24]
 8003ac8:	e002      	b.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 80c4 	bne.w	8003c62 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d126      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x456>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	4413      	add	r3, r2
 8003af8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011a      	lsls	r2, r3, #4
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e01a      	b.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d116      	bne.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4c:	4413      	add	r3, r2
 8003b4e:	677b      	str	r3, [r7, #116]	; 0x74
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	011a      	lsls	r2, r3, #4
 8003b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b62:	2200      	movs	r2, #0
 8003b64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d12f      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	011a      	lsls	r2, r3, #4
 8003b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	e017      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d113      	bne.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bea:	4413      	add	r3, r2
 8003bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	011a      	lsls	r2, r3, #4
 8003bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c00:	2200      	movs	r2, #0
 8003c02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f005 fd3d 	bl	800968a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 8104 	bne.w	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	441a      	add	r2, r3
 8003c48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]
 8003c60:	e0e0      	b.n	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d121      	bne.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 80b4 	bne.w	8003e24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d309      	bcc.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf0:	1ad2      	subs	r2, r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e015      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d0e:	e009      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d155      	bne.n	8003dde <HAL_PCD_EP_DB_Transmit+0x704>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d46:	4413      	add	r3, r2
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	011a      	lsls	r2, r3, #4
 8003d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d52:	4413      	add	r3, r2
 8003d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d112      	bne.n	8003d86 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	e044      	b.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d88:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8a:	d811      	bhi.n	8003db0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	657b      	str	r3, [r7, #84]	; 0x54
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9e:	3301      	adds	r3, #1
 8003da0:	657b      	str	r3, [r7, #84]	; 0x54
 8003da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	029b      	lsls	r3, r3, #10
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	e02f      	b.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	657b      	str	r3, [r7, #84]	; 0x54
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e018      	b.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d114      	bne.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df4:	4413      	add	r3, r2
 8003df6:	667b      	str	r3, [r7, #100]	; 0x64
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	011a      	lsls	r2, r3, #4
 8003dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e00:	4413      	add	r3, r2
 8003e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e06:	663b      	str	r3, [r7, #96]	; 0x60
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6959      	ldr	r1, [r3, #20]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	895a      	ldrh	r2, [r3, #10]
 8003e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f003 ff75 	bl	8007d0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3e:	823b      	strh	r3, [r7, #16]
 8003e40:	8a3b      	ldrh	r3, [r7, #16]
 8003e42:	f083 0310 	eor.w	r3, r3, #16
 8003e46:	823b      	strh	r3, [r7, #16]
 8003e48:	8a3b      	ldrh	r3, [r7, #16]
 8003e4a:	f083 0320 	eor.w	r3, r3, #32
 8003e4e:	823b      	strh	r3, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	8a3b      	ldrh	r3, [r7, #16]
 8003e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3788      	adds	r7, #136	; 0x88
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	817b      	strh	r3, [r7, #10]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e90:	897b      	ldrh	r3, [r7, #10]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e009      	b.n	8003ec8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eb4:	897a      	ldrh	r2, [r7, #10]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	80da      	strh	r2, [r3, #6]
 8003edc:	e00b      	b.n	8003ef6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e31d      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4b94      	ldr	r3, [pc, #592]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	4b91      	ldr	r3, [pc, #580]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d07b      	beq.n	800402e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d006      	beq.n	8003f4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d10f      	bne.n	8003f62 <HAL_RCC_OscConfig+0x5e>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4a:	4b87      	ldr	r3, [pc, #540]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d06a      	beq.n	800402c <HAL_RCC_OscConfig+0x128>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d166      	bne.n	800402c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e2f7      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d106      	bne.n	8003f78 <HAL_RCC_OscConfig+0x74>
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e02d      	b.n	8003fd4 <HAL_RCC_OscConfig+0xd0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10c      	bne.n	8003f9a <HAL_RCC_OscConfig+0x96>
 8003f80:	4b79      	ldr	r3, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a78      	ldr	r2, [pc, #480]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a75      	ldr	r2, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e01c      	b.n	8003fd4 <HAL_RCC_OscConfig+0xd0>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCC_OscConfig+0xb8>
 8003fa2:	4b71      	ldr	r3, [pc, #452]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a70      	ldr	r2, [pc, #448]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4b6e      	ldr	r3, [pc, #440]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6d      	ldr	r2, [pc, #436]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCC_OscConfig+0xd0>
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a69      	ldr	r2, [pc, #420]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a66      	ldr	r2, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fb40 	bl	8001660 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fb3c 	bl	8001660 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e2ad      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff6:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0xe0>
 8004002:	e014      	b.n	800402e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fd fb2c 	bl	8001660 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd fb28 	bl	8001660 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e299      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800401e:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x108>
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d05a      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d119      	bne.n	800407a <HAL_RCC_OscConfig+0x176>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d116      	bne.n	800407a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x160>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e276      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	493d      	ldr	r1, [pc, #244]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004078:	e03a      	b.n	80040f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004082:	4b3a      	ldr	r3, [pc, #232]	; (800416c <HAL_RCC_OscConfig+0x268>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd faea 	bl	8001660 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7fd fae6 	bl	8001660 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e257      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a2:	4b31      	ldr	r3, [pc, #196]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	492a      	ldr	r1, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
 80040c2:	e015      	b.n	80040f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_OscConfig+0x268>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fd fac9 	bl	8001660 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d2:	f7fd fac5 	bl	8001660 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e236      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e4:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80b8 	beq.w	800426e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d170      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x218>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e21a      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004128:	429a      	cmp	r2, r3
 800412a:	d921      	bls.n	8004170 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fc4b 	bl	80049cc <RCC_SetFlashLatencyFromMSIRange>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e208      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4906      	ldr	r1, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	061b      	lsls	r3, r3, #24
 8004160:	4901      	ldr	r1, [pc, #4]	; (8004168 <HAL_RCC_OscConfig+0x264>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
 8004166:	e020      	b.n	80041aa <HAL_RCC_OscConfig+0x2a6>
 8004168:	40023800 	.word	0x40023800
 800416c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004170:	4b99      	ldr	r3, [pc, #612]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4996      	ldr	r1, [pc, #600]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004182:	4b95      	ldr	r3, [pc, #596]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	4991      	ldr	r1, [pc, #580]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc16 	bl	80049cc <RCC_SetFlashLatencyFromMSIRange>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e1d3      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	0b5b      	lsrs	r3, r3, #13
 80041b0:	3301      	adds	r3, #1
 80041b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80041ba:	4a87      	ldr	r2, [pc, #540]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80041bc:	6892      	ldr	r2, [r2, #8]
 80041be:	0912      	lsrs	r2, r2, #4
 80041c0:	f002 020f 	and.w	r2, r2, #15
 80041c4:	4985      	ldr	r1, [pc, #532]	; (80043dc <HAL_RCC_OscConfig+0x4d8>)
 80041c6:	5c8a      	ldrb	r2, [r1, r2]
 80041c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80041ca:	4a85      	ldr	r2, [pc, #532]	; (80043e0 <HAL_RCC_OscConfig+0x4dc>)
 80041cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ce:	4b85      	ldr	r3, [pc, #532]	; (80043e4 <HAL_RCC_OscConfig+0x4e0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fd f9f8 	bl	80015c8 <HAL_InitTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d045      	beq.n	800426e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	e1b5      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d029      	beq.n	8004242 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ee:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <HAL_RCC_OscConfig+0x4e4>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fa34 	bl	8001660 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041fc:	f7fd fa30 	bl	8001660 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1a1      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800420e:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421a:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	496c      	ldr	r1, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	4967      	ldr	r1, [pc, #412]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004242:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <HAL_RCC_OscConfig+0x4e4>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fa0a 	bl	8001660 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004250:	f7fd fa06 	bl	8001660 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e177      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004262:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d030      	beq.n	80042dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <HAL_RCC_OscConfig+0x4e8>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd f9ea 	bl	8001660 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd f9e6 	bl	8001660 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e157      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042a2:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x38c>
 80042ae:	e015      	b.n	80042dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	4b4e      	ldr	r3, [pc, #312]	; (80043ec <HAL_RCC_OscConfig+0x4e8>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fd f9d3 	bl	8001660 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd f9cf 	bl	8001660 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e140      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042d0:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80b5 	beq.w	8004454 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	4a36      	ldr	r2, [pc, #216]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6253      	str	r3, [r2, #36]	; 0x24
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a32      	ldr	r2, [pc, #200]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fd f997 	bl	8001660 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fd f993 	bl	8001660 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	; 0x64
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e104      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCC_OscConfig+0x4ec>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x466>
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6353      	str	r3, [r2, #52]	; 0x34
 8004368:	e02d      	b.n	80043c6 <HAL_RCC_OscConfig+0x4c2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x488>
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437c:	6353      	str	r3, [r2, #52]	; 0x34
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004388:	6353      	str	r3, [r2, #52]	; 0x34
 800438a:	e01c      	b.n	80043c6 <HAL_RCC_OscConfig+0x4c2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d10c      	bne.n	80043ae <HAL_RCC_OscConfig+0x4aa>
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	4a0f      	ldr	r2, [pc, #60]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6353      	str	r3, [r2, #52]	; 0x34
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6353      	str	r3, [r2, #52]	; 0x34
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4c2>
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	6353      	str	r3, [r2, #52]	; 0x34
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x4d4>)
 80043c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d024      	beq.n	8004418 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fd f947 	bl	8001660 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043d4:	e019      	b.n	800440a <HAL_RCC_OscConfig+0x506>
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	08009be4 	.word	0x08009be4
 80043e0:	20000000 	.word	0x20000000
 80043e4:	20000004 	.word	0x20000004
 80043e8:	42470020 	.word	0x42470020
 80043ec:	42470680 	.word	0x42470680
 80043f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fd f934 	bl	8001660 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0a3      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x658>)
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ee      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4f0>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004418:	f7fd f922 	bl	8001660 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd f91e 	bl	8001660 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e08d      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0x658>)
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x658>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	4a43      	ldr	r2, [pc, #268]	; (800455c <HAL_RCC_OscConfig+0x658>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d079      	beq.n	8004550 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d056      	beq.n	8004510 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b02      	cmp	r3, #2
 8004468:	d13b      	bne.n	80044e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <HAL_RCC_OscConfig+0x65c>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd f8f6 	bl	8001660 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd f8f2 	bl	8001660 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e063      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800448a:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x658>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004496:	4b31      	ldr	r3, [pc, #196]	; (800455c <HAL_RCC_OscConfig+0x658>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	4319      	orrs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	430b      	orrs	r3, r1
 80044ae:	492b      	ldr	r1, [pc, #172]	; (800455c <HAL_RCC_OscConfig+0x658>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCC_OscConfig+0x65c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd f8d1 	bl	8001660 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fd f8cd 	bl	8001660 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e03e      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_RCC_OscConfig+0x658>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x5be>
 80044e0:	e036      	b.n	8004550 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <HAL_RCC_OscConfig+0x65c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fd f8ba 	bl	8001660 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd f8b6 	bl	8001660 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e027      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCC_OscConfig+0x658>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x5ec>
 800450e:	e01f      	b.n	8004550 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e01a      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCC_OscConfig+0x658>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	429a      	cmp	r2, r3
 800452e:	d10d      	bne.n	800454c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	42470060 	.word	0x42470060

08004564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e11a      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b8f      	ldr	r3, [pc, #572]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d919      	bls.n	80045ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_ClockConfig+0x34>
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a89      	ldr	r2, [pc, #548]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b87      	ldr	r3, [pc, #540]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0201 	bic.w	r2, r3, #1
 80045a0:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a8:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0f9      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c6:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	497a      	ldr	r1, [pc, #488]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 808e 	beq.w	8004702 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ee:	4b73      	ldr	r3, [pc, #460]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d121      	bne.n	800463e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0d7      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004606:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0cb      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800461e:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0bf      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0b7      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b5f      	ldr	r3, [pc, #380]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	495c      	ldr	r1, [pc, #368]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd f806 	bl	8001660 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d112      	bne.n	8004684 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fc fffe 	bl	8001660 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e09b      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004676:	4b51      	ldr	r3, [pc, #324]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b08      	cmp	r3, #8
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_ClockConfig+0xfc>
 8004682:	e03e      	b.n	8004702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d112      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fc ffe7 	bl	8001660 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e084      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a4:	4b45      	ldr	r3, [pc, #276]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_ClockConfig+0x12a>
 80046b0:	e027      	b.n	8004702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d11d      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fc ffd0 	bl	8001660 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e06d      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_ClockConfig+0x158>
 80046de:	e010      	b.n	8004702 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fc ffbe 	bl	8001660 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e05b      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ee      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004702:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d219      	bcs.n	8004744 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCC_ClockConfig+0x1be>
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 0201 	bic.w	r2, r3, #1
 800472a:	4923      	ldr	r1, [pc, #140]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_ClockConfig+0x254>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e034      	b.n	80047ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4917      	ldr	r1, [pc, #92]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	490f      	ldr	r1, [pc, #60]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004782:	f000 f823 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <HAL_RCC_ClockConfig+0x258>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	490b      	ldr	r1, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x25c>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x260>)
 800479c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x264>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc ff10 	bl	80015c8 <HAL_InitTick>
 80047a8:	4603      	mov	r3, r0
 80047aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80047ac:	7afb      	ldrb	r3, [r7, #11]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023c00 	.word	0x40023c00
 80047bc:	40023800 	.word	0x40023800
 80047c0:	08009be4 	.word	0x08009be4
 80047c4:	20000000 	.word	0x20000000
 80047c8:	20000004 	.word	0x20000004

080047cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b092      	sub	sp, #72	; 0x48
 80047d2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80047d4:	4b79      	ldr	r3, [pc, #484]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d00d      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x34>
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	f200 80d5 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x1c8>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x28>
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x2e>
 80047f2:	e0cf      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b72      	ldr	r3, [pc, #456]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80047f8:	e0da      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047fa:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80047fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80047fe:	e0d7      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004802:	0c9b      	lsrs	r3, r3, #18
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800480a:	5c9b      	ldrb	r3, [r3, r2]
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	0d9b      	lsrs	r3, r3, #22
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481a:	4b68      	ldr	r3, [pc, #416]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d05d      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	4618      	mov	r0, r3
 800482c:	4611      	mov	r1, r2
 800482e:	4604      	mov	r4, r0
 8004830:	460d      	mov	r5, r1
 8004832:	4622      	mov	r2, r4
 8004834:	462b      	mov	r3, r5
 8004836:	f04f 0000 	mov.w	r0, #0
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	0159      	lsls	r1, r3, #5
 8004840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004844:	0150      	lsls	r0, r2, #5
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4621      	mov	r1, r4
 800484c:	1a51      	subs	r1, r2, r1
 800484e:	6139      	str	r1, [r7, #16]
 8004850:	4629      	mov	r1, r5
 8004852:	eb63 0301 	sbc.w	r3, r3, r1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004864:	4659      	mov	r1, fp
 8004866:	018b      	lsls	r3, r1, #6
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486e:	4651      	mov	r1, sl
 8004870:	018a      	lsls	r2, r1, #6
 8004872:	46d4      	mov	ip, sl
 8004874:	ebb2 080c 	subs.w	r8, r2, ip
 8004878:	4659      	mov	r1, fp
 800487a:	eb63 0901 	sbc.w	r9, r3, r1
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004892:	4690      	mov	r8, r2
 8004894:	4699      	mov	r9, r3
 8004896:	4623      	mov	r3, r4
 8004898:	eb18 0303 	adds.w	r3, r8, r3
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	462b      	mov	r3, r5
 80048a0:	eb49 0303 	adc.w	r3, r9, r3
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048b2:	4629      	mov	r1, r5
 80048b4:	024b      	lsls	r3, r1, #9
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	4604      	mov	r4, r0
 80048bc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80048c0:	4601      	mov	r1, r0
 80048c2:	024a      	lsls	r2, r1, #9
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	2200      	movs	r2, #0
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048d4:	f7fb ff46 	bl	8000764 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	e055      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2200      	movs	r2, #0
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	627a      	str	r2, [r7, #36]	; 0x24
 80048ea:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004900:	0150      	lsls	r0, r2, #5
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	46c4      	mov	ip, r8
 8004908:	ebb2 0a0c 	subs.w	sl, r2, ip
 800490c:	4640      	mov	r0, r8
 800490e:	4649      	mov	r1, r9
 8004910:	468c      	mov	ip, r1
 8004912:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004922:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004926:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800492a:	ebb2 040a 	subs.w	r4, r2, sl
 800492e:	eb63 050b 	sbc.w	r5, r3, fp
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	00eb      	lsls	r3, r5, #3
 800493c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004940:	00e2      	lsls	r2, r4, #3
 8004942:	4614      	mov	r4, r2
 8004944:	461d      	mov	r5, r3
 8004946:	4603      	mov	r3, r0
 8004948:	18e3      	adds	r3, r4, r3
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	460b      	mov	r3, r1
 800494e:	eb45 0303 	adc.w	r3, r5, r3
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004960:	4629      	mov	r1, r5
 8004962:	028b      	lsls	r3, r1, #10
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	4604      	mov	r4, r0
 800496a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800496e:	4601      	mov	r1, r0
 8004970:	028a      	lsls	r2, r1, #10
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	2200      	movs	r2, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	61fa      	str	r2, [r7, #28]
 800497e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004982:	f7fb feef 	bl	8000764 <__aeabi_uldivmod>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4613      	mov	r3, r2
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800498e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004992:	e00d      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0b5b      	lsrs	r3, r3, #13
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	3301      	adds	r3, #1
 80049a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80049ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3748      	adds	r7, #72	; 0x48
 80049b6:	46bd      	mov	sp, r7
 80049b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200
 80049c8:	08009bd8 	.word	0x08009bd8

080049cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049d8:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d12c      	bne.n	8004a3e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049e4:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80049f0:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e016      	b.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a06:	6253      	str	r3, [r2, #36]	; 0x24
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004a1c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004a30:	d105      	bne.n	8004a3e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a38:	d101      	bne.n	8004a3e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 0201 	bic.w	r2, r3, #1
 8004a58:	490b      	ldr	r1, [pc, #44]	; (8004a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d001      	beq.n	8004a72 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	40023c00 	.word	0x40023c00

08004a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e031      	b.n	8004b02 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fb3e 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 f9cc 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e032      	b.n	8004b8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_Base_Start+0x48>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIM_Base_Start+0x88>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIM_Base_Start+0x48>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_TIM_Base_Start+0x8c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIM_Base_Start+0x48>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_TIM_Base_Start+0x90>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d010      	beq.n	8004b88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	e007      	b.n	8004b88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40010800 	.word	0x40010800

08004ba0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e031      	b.n	8004c16 <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f829 	bl	8004c1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f000 f942 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e046      	b.n	8004cd8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b0c      	cmp	r3, #12
 8004c56:	d839      	bhi.n	8004ccc <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004ccd 	.word	0x08004ccd
 8004c6c:	08004ccd 	.word	0x08004ccd
 8004c70:	08004ca3 	.word	0x08004ca3
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004cb1 	.word	0x08004cb1
 8004c84:	08004ccd 	.word	0x08004ccd
 8004c88:	08004ccd 	.word	0x08004ccd
 8004c8c:	08004ccd 	.word	0x08004ccd
 8004c90:	08004cbf 	.word	0x08004cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f946 	bl	8004f2c <TIM_OC1_SetConfig>
      break;
 8004ca0:	e015      	b.n	8004cce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f97b 	bl	8004fa4 <TIM_OC2_SetConfig>
      break;
 8004cae:	e00e      	b.n	8004cce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f9b2 	bl	8005020 <TIM_OC3_SetConfig>
      break;
 8004cbc:	e007      	b.n	8004cce <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f9e8 	bl	800509a <TIM_OC4_SetConfig>
      break;
 8004cca:	e000      	b.n	8004cce <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004ccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_ConfigClockSource+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e0b3      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x180>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d30:	d03e      	beq.n	8004db0 <HAL_TIM_ConfigClockSource+0xd0>
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d36:	f200 8087 	bhi.w	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	f000 8085 	beq.w	8004e4c <HAL_TIM_ConfigClockSource+0x16c>
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	d87f      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d48:	2b70      	cmp	r3, #112	; 0x70
 8004d4a:	d01a      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xa2>
 8004d4c:	2b70      	cmp	r3, #112	; 0x70
 8004d4e:	d87b      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d50:	2b60      	cmp	r3, #96	; 0x60
 8004d52:	d050      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x116>
 8004d54:	2b60      	cmp	r3, #96	; 0x60
 8004d56:	d877      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d58:	2b50      	cmp	r3, #80	; 0x50
 8004d5a:	d03c      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0xf6>
 8004d5c:	2b50      	cmp	r3, #80	; 0x50
 8004d5e:	d873      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d058      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x136>
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d86f      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d68:	2b30      	cmp	r3, #48	; 0x30
 8004d6a:	d064      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x156>
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d86b      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d060      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x156>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d867      	bhi.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d05c      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x156>
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d05a      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d80:	e062      	b.n	8004e48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6899      	ldr	r1, [r3, #8]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f000 fa37 	bl	8005204 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004da4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	609a      	str	r2, [r3, #8]
      break;
 8004dae:	e04e      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6899      	ldr	r1, [r3, #8]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f000 fa20 	bl	8005204 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd2:	609a      	str	r2, [r3, #8]
      break;
 8004dd4:	e03b      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f000 f997 	bl	8005116 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2150      	movs	r1, #80	; 0x50
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f9ee 	bl	80051d0 <TIM_ITRx_SetConfig>
      break;
 8004df4:	e02b      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 f9b5 	bl	8005172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2160      	movs	r1, #96	; 0x60
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f9de 	bl	80051d0 <TIM_ITRx_SetConfig>
      break;
 8004e14:	e01b      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 f977 	bl	8005116 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f9ce 	bl	80051d0 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e00b      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f000 f9c5 	bl	80051d0 <TIM_ITRx_SetConfig>
        break;
 8004e46:	e002      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x28>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <TIM_Base_SetConfig+0xb0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x28>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <TIM_Base_SetConfig+0xb4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d013      	beq.n	8004ed2 <TIM_Base_SetConfig+0x6a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <TIM_Base_SetConfig+0xb0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_Base_SetConfig+0x6a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <TIM_Base_SetConfig+0xb4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_Base_SetConfig+0x6a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <TIM_Base_SetConfig+0xb8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_Base_SetConfig+0x6a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <TIM_Base_SetConfig+0xbc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_Base_SetConfig+0x6a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <TIM_Base_SetConfig+0xc0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40010800 	.word	0x40010800
 8004f24:	40010c00 	.word	0x40010c00
 8004f28:	40011000 	.word	0x40011000

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0210 	bic.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0320 	bic.w	r3, r3, #32
 8004fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509a:	b480      	push	{r7}
 800509c:	b087      	sub	sp, #28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	031b      	lsls	r3, r3, #12
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	621a      	str	r2, [r3, #32]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0201 	bic.w	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 030a 	bic.w	r3, r3, #10
 8005152:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005172:	b480      	push	{r7}
 8005174:	b087      	sub	sp, #28
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0210 	bic.w	r2, r3, #16
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800519c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f043 0307 	orr.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
	...

08005244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e046      	b.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d00e      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d10c      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40010800 	.word	0x40010800

08005300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005310:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005334:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005338:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	b29b      	uxth	r3, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	b29b      	uxth	r3, r3
 800534a:	4013      	ands	r3, r2
 800534c:	b29a      	uxth	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 0014 	add.w	r0, r7, #20
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	b004      	add	sp, #16
 800539e:	4770      	bx	lr

080053a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b09b      	sub	sp, #108	; 0x6c
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	78db      	ldrb	r3, [r3, #3]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d81f      	bhi.n	8005412 <USB_ActivateEndpoint+0x72>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <USB_ActivateEndpoint+0x38>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800541b 	.word	0x0800541b
 80053e4:	080053f7 	.word	0x080053f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053f4:	e012      	b.n	800541c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005402:	e00b      	b.n	800541c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005404:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800540c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005410:	e004      	b.n	800541c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005418:	e000      	b.n	800541c <USB_ActivateEndpoint+0x7c>
      break;
 800541a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	b29a      	uxth	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	4313      	orrs	r3, r2
 800545e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	7b1b      	ldrb	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 8149 	bne.w	8005720 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8084 	beq.w	80055a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	011a      	lsls	r2, r3, #4
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	88db      	ldrh	r3, [r3, #6]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	81fb      	strh	r3, [r7, #14]
 80054da:	89fb      	ldrh	r3, [r7, #14]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <USB_ActivateEndpoint+0x17c>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	81bb      	strh	r3, [r7, #12]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	89bb      	ldrh	r3, [r7, #12]
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d020      	beq.n	8005566 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	813b      	strh	r3, [r7, #8]
 800553c:	893b      	ldrh	r3, [r7, #8]
 800553e:	f083 0320 	eor.w	r3, r3, #32
 8005542:	813b      	strh	r3, [r7, #8]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	893b      	ldrh	r3, [r7, #8]
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]
 8005564:	e27f      	b.n	8005a66 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557c:	817b      	strh	r3, [r7, #10]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	897b      	ldrh	r3, [r7, #10]
 800558a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559a:	b29b      	uxth	r3, r3
 800559c:	8013      	strh	r3, [r2, #0]
 800559e:	e262      	b.n	8005a66 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	4413      	add	r3, r2
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	88db      	ldrh	r3, [r3, #6]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	4413      	add	r3, r2
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	011a      	lsls	r2, r3, #4
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d112      	bne.n	8005626 <USB_ActivateEndpoint+0x286>
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800560a:	b29a      	uxth	r2, r3
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e02f      	b.n	8005686 <USB_ActivateEndpoint+0x2e6>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b3e      	cmp	r3, #62	; 0x3e
 800562c:	d813      	bhi.n	8005656 <USB_ActivateEndpoint+0x2b6>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	663b      	str	r3, [r7, #96]	; 0x60
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <USB_ActivateEndpoint+0x2a8>
 8005642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005644:	3301      	adds	r3, #1
 8005646:	663b      	str	r3, [r7, #96]	; 0x60
 8005648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29a      	uxth	r2, r3
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	e017      	b.n	8005686 <USB_ActivateEndpoint+0x2e6>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	663b      	str	r3, [r7, #96]	; 0x60
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <USB_ActivateEndpoint+0x2d0>
 800566a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566c:	3b01      	subs	r3, #1
 800566e:	663b      	str	r3, [r7, #96]	; 0x60
 8005670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005672:	b29b      	uxth	r3, r3
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005680:	b29a      	uxth	r2, r3
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	83fb      	strh	r3, [r7, #30]
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01b      	beq.n	80056d6 <USB_ActivateEndpoint+0x336>
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	83bb      	strh	r3, [r7, #28]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	441a      	add	r2, r3
 80056c0:	8bbb      	ldrh	r3, [r7, #28]
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ec:	837b      	strh	r3, [r7, #26]
 80056ee:	8b7b      	ldrh	r3, [r7, #26]
 80056f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056f4:	837b      	strh	r3, [r7, #26]
 80056f6:	8b7b      	ldrh	r3, [r7, #26]
 80056f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056fc:	837b      	strh	r3, [r7, #26]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	8b7b      	ldrh	r3, [r7, #26]
 800570a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]
 800571e:	e1a2      	b.n	8005a66 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800576c:	4413      	add	r3, r2
 800576e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	011a      	lsls	r2, r3, #4
 8005776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005778:	4413      	add	r3, r2
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	657b      	str	r3, [r7, #84]	; 0x54
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	891b      	ldrh	r3, [r3, #8]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	b29b      	uxth	r3, r3
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	4413      	add	r3, r2
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	895b      	ldrh	r3, [r3, #10]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 8091 	bne.w	80058f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80057dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01b      	beq.n	800581e <USB_ActivateEndpoint+0x47e>
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800580a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581a:	b29b      	uxth	r3, r3
 800581c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	873b      	strh	r3, [r7, #56]	; 0x38
 800582c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01b      	beq.n	800586e <USB_ActivateEndpoint+0x4ce>
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	441a      	add	r2, r3
 8005858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800585a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800586a:	b29b      	uxth	r3, r3
 800586c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005886:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005888:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800588c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800588e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005890:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005894:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	441a      	add	r2, r3
 80058a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80058da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8013      	strh	r3, [r2, #0]
 80058ee:	e0ba      	b.n	8005a66 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01d      	beq.n	8005948 <USB_ActivateEndpoint+0x5a8>
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005958:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01d      	beq.n	80059a0 <USB_ActivateEndpoint+0x600>
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005998:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d024      	beq.n	80059f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059c6:	f083 0320 	eor.w	r3, r3, #32
 80059ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
 80059f0:	e01d      	b.n	8005a2e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005a66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	376c      	adds	r7, #108	; 0x6c
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08d      	sub	sp, #52	; 0x34
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	7b1b      	ldrb	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 808e 	bne.w	8005ba4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d044      	beq.n	8005b1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	81bb      	strh	r3, [r7, #12]
 8005a9e:	89bb      	ldrh	r3, [r7, #12]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <USB_DeactivateEndpoint+0x6c>
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	817b      	strh	r3, [r7, #10]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af6:	813b      	strh	r3, [r7, #8]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	893b      	ldrh	r3, [r7, #8]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
 8005b18:	e192      	b.n	8005e40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	827b      	strh	r3, [r7, #18]
 8005b28:	8a7b      	ldrh	r3, [r7, #18]
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01b      	beq.n	8005b6a <USB_DeactivateEndpoint+0xf6>
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	823b      	strh	r3, [r7, #16]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	8a3b      	ldrh	r3, [r7, #16]
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	81fb      	strh	r3, [r7, #14]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
 8005ba2:	e14d      	b.n	8005e40 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f040 80a5 	bne.w	8005cf8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	843b      	strh	r3, [r7, #32]
 8005bbc:	8c3b      	ldrh	r3, [r7, #32]
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01b      	beq.n	8005bfe <USB_DeactivateEndpoint+0x18a>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	83fb      	strh	r3, [r7, #30]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	8bfb      	ldrh	r3, [r7, #30]
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	83bb      	strh	r3, [r7, #28]
 8005c0c:	8bbb      	ldrh	r3, [r7, #28]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01b      	beq.n	8005c4e <USB_DeactivateEndpoint+0x1da>
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	837b      	strh	r3, [r7, #26]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	8b7b      	ldrh	r3, [r7, #26]
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	833b      	strh	r3, [r7, #24]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8b3b      	ldrh	r3, [r7, #24]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	82fb      	strh	r3, [r7, #22]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd4:	82bb      	strh	r3, [r7, #20]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8abb      	ldrh	r3, [r7, #20]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
 8005cf6:	e0a3      	b.n	8005e40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <USB_DeactivateEndpoint+0x2d4>
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <USB_DeactivateEndpoint+0x324>
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3734      	adds	r7, #52	; 0x34
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b0cc      	sub	sp, #304	; 0x130
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5a:	6018      	str	r0, [r3, #0]
 8005e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e64:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	f041 817d 	bne.w	8007172 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d908      	bls.n	8005ea6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ea4:	e007      	b.n	8005eb6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	7b1b      	ldrb	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d152      	bne.n	8005f6c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6959      	ldr	r1, [r3, #20]
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	88da      	ldrh	r2, [r3, #6]
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ee8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	f001 ff0e 	bl	8007d0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005efa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005efe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f24:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	011a      	lsls	r2, r3, #4
 8005f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	f001 b8b5 	b.w	80070d6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	78db      	ldrb	r3, [r3, #3]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	f040 84c6 	bne.w	800690a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6a1a      	ldr	r2, [r3, #32]
 8005f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	f240 8443 	bls.w	8006822 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006008:	1ad2      	subs	r2, r2, r3
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 823e 	beq.w	80064ba <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006046:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800604a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 809a 	bne.w	8006198 <USB_EPStartXfer+0x34c>
 8006064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006070:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006092:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006096:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	440a      	add	r2, r1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	011a      	lsls	r2, r3, #4
 80060ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d122      	bne.n	8006116 <USB_EPStartXfer+0x2ca>
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006106:	b29a      	uxth	r2, r3
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e079      	b.n	800620a <USB_EPStartXfer+0x3be>
 8006116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611a:	2b3e      	cmp	r3, #62	; 0x3e
 800611c:	d81b      	bhi.n	8006156 <USB_EPStartXfer+0x30a>
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <USB_EPStartXfer+0x2f2>
 8006134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006138:	3301      	adds	r3, #1
 800613a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800613e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006142:	b29b      	uxth	r3, r3
 8006144:	029b      	lsls	r3, r3, #10
 8006146:	b29a      	uxth	r2, r3
 8006148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e059      	b.n	800620a <USB_EPStartXfer+0x3be>
 8006156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <USB_EPStartXfer+0x32a>
 800616c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006170:	3b01      	subs	r3, #1
 8006172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e038      	b.n	800620a <USB_EPStartXfer+0x3be>
 8006198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d130      	bne.n	800620a <USB_EPStartXfer+0x3be>
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80061c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061c6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	440a      	add	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011a      	lsls	r2, r3, #4
 80061de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4413      	add	r3, r2
 80061ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	895b      	ldrh	r3, [r3, #10]
 8006216:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6959      	ldr	r1, [r3, #20]
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	b29b      	uxth	r3, r3
 800622c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006230:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006234:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006238:	6800      	ldr	r0, [r0, #0]
 800623a:	f001 fd68 	bl	8007d0e <USB_WritePMA>
            ep->xfer_buff += len;
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624e:	441a      	add	r2, r3
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800625c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	429a      	cmp	r2, r3
 8006276:	d90f      	bls.n	8006298 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	621a      	str	r2, [r3, #32]
 8006296:	e00e      	b.n	80062b6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80062a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 809a 	bne.w	80063fc <USB_EPStartXfer+0x5b0>
 80062c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80062d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062d4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4619      	mov	r1, r3
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80062f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062fa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	440a      	add	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4413      	add	r3, r2
 800631e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d122      	bne.n	800637a <USB_EPStartXfer+0x52e>
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006346:	b29a      	uxth	r2, r3
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636a:	b29a      	uxth	r2, r3
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	e083      	b.n	8006482 <USB_EPStartXfer+0x636>
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	2b3e      	cmp	r3, #62	; 0x3e
 8006380:	d81b      	bhi.n	80063ba <USB_EPStartXfer+0x56e>
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800638c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_EPStartXfer+0x556>
 8006398:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800639c:	3301      	adds	r3, #1
 800639e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	029b      	lsls	r3, r3, #10
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	801a      	strh	r2, [r3, #0]
 80063b8:	e063      	b.n	8006482 <USB_EPStartXfer+0x636>
 80063ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <USB_EPStartXfer+0x58e>
 80063d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063de:	b29b      	uxth	r3, r3
 80063e0:	029b      	lsls	r3, r3, #10
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	e042      	b.n	8006482 <USB_EPStartXfer+0x636>
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d13a      	bne.n	8006482 <USB_EPStartXfer+0x636>
 800640c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006410:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006414:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006418:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800643a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800643e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	440a      	add	r2, r1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4413      	add	r3, r2
 8006462:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006474:	b29a      	uxth	r2, r3
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	891b      	ldrh	r3, [r3, #8]
 800648e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6959      	ldr	r1, [r3, #20]
 800649e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064b0:	6800      	ldr	r0, [r0, #0]
 80064b2:	f001 fc2c 	bl	8007d0e <USB_WritePMA>
 80064b6:	f000 be0e 	b.w	80070d6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d16d      	bne.n	80065a6 <USB_EPStartXfer+0x75a>
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ea:	4413      	add	r3, r2
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	011a      	lsls	r2, r3, #4
 80064fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fe:	4413      	add	r3, r2
 8006500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d112      	bne.n	8006534 <USB_EPStartXfer+0x6e8>
 800650e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006518:	b29a      	uxth	r2, r3
 800651a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652c:	b29a      	uxth	r2, r3
 800652e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e063      	b.n	80065fc <USB_EPStartXfer+0x7b0>
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006538:	2b3e      	cmp	r3, #62	; 0x3e
 800653a:	d817      	bhi.n	800656c <USB_EPStartXfer+0x720>
 800653c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <USB_EPStartXfer+0x710>
 8006552:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006556:	3301      	adds	r3, #1
 8006558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800655c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006560:	b29b      	uxth	r3, r3
 8006562:	029b      	lsls	r3, r3, #10
 8006564:	b29a      	uxth	r2, r3
 8006566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e047      	b.n	80065fc <USB_EPStartXfer+0x7b0>
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <USB_EPStartXfer+0x740>
 8006582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006586:	3b01      	subs	r3, #1
 8006588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800658c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006590:	b29b      	uxth	r3, r3
 8006592:	029b      	lsls	r3, r3, #10
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e02a      	b.n	80065fc <USB_EPStartXfer+0x7b0>
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d122      	bne.n	80065fc <USB_EPStartXfer+0x7b0>
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	653b      	str	r3, [r7, #80]	; 0x50
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d6:	4413      	add	r3, r2
 80065d8:	653b      	str	r3, [r7, #80]	; 0x50
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	011a      	lsls	r2, r3, #4
 80065e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ea:	4413      	add	r3, r2
 80065ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	891b      	ldrh	r3, [r3, #8]
 8006608:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800660c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6959      	ldr	r1, [r3, #20]
 8006618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661c:	b29b      	uxth	r3, r3
 800661e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006622:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006626:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	f001 fb6f 	bl	8007d0e <USB_WritePMA>
            ep->xfer_buff += len;
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	441a      	add	r2, r3
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800664e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	429a      	cmp	r2, r3
 8006668:	d90f      	bls.n	800668a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	621a      	str	r2, [r3, #32]
 8006688:	e00e      	b.n	80066a8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d16d      	bne.n	80067a0 <USB_EPStartXfer+0x954>
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	4413      	add	r3, r2
 80066e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	011a      	lsls	r2, r3, #4
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d112      	bne.n	800672e <USB_EPStartXfer+0x8e2>
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006712:	b29a      	uxth	r2, r3
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006726:	b29a      	uxth	r2, r3
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e05d      	b.n	80067ea <USB_EPStartXfer+0x99e>
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	2b3e      	cmp	r3, #62	; 0x3e
 8006734:	d817      	bhi.n	8006766 <USB_EPStartXfer+0x91a>
 8006736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <USB_EPStartXfer+0x90a>
 800674c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006750:	3301      	adds	r3, #1
 8006752:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29a      	uxth	r2, r3
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e041      	b.n	80067ea <USB_EPStartXfer+0x99e>
 8006766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0x93a>
 800677c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006786:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800678a:	b29b      	uxth	r3, r3
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e024      	b.n	80067ea <USB_EPStartXfer+0x99e>
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d11c      	bne.n	80067ea <USB_EPStartXfer+0x99e>
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c4:	4413      	add	r3, r2
 80067c6:	643b      	str	r3, [r7, #64]	; 0x40
 80067c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	011a      	lsls	r2, r3, #4
 80067d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d8:	4413      	add	r3, r2
 80067da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	895b      	ldrh	r3, [r3, #10]
 80067f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6959      	ldr	r1, [r3, #20]
 8006806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680a:	b29b      	uxth	r3, r3
 800680c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006810:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006814:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006818:	6800      	ldr	r0, [r0, #0]
 800681a:	f001 fa78 	bl	8007d0e <USB_WritePMA>
 800681e:	f000 bc5a 	b.w	80070d6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006858:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800687a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	b29b      	uxth	r3, r3
 800688c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ae:	4413      	add	r3, r2
 80068b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	011a      	lsls	r2, r3, #4
 80068c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c2:	4413      	add	r3, r2
 80068c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	891b      	ldrh	r3, [r3, #8]
 80068e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6959      	ldr	r1, [r3, #20]
 80068f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006902:	6800      	ldr	r0, [r0, #0]
 8006904:	f001 fa03 	bl	8007d0e <USB_WritePMA>
 8006908:	e3e5      	b.n	80070d6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6a1a      	ldr	r2, [r3, #32]
 8006972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 81bc 	beq.w	8006d24 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d16d      	bne.n	8006aa6 <USB_EPStartXfer+0xc5a>
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ea:	4413      	add	r3, r2
 80069ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	011a      	lsls	r2, r3, #4
 80069fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a04:	677b      	str	r3, [r7, #116]	; 0x74
 8006a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d112      	bne.n	8006a34 <USB_EPStartXfer+0xbe8>
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e060      	b.n	8006af6 <USB_EPStartXfer+0xcaa>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3a:	d817      	bhi.n	8006a6c <USB_EPStartXfer+0xc20>
 8006a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <USB_EPStartXfer+0xc10>
 8006a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a56:	3301      	adds	r3, #1
 8006a58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	e044      	b.n	8006af6 <USB_EPStartXfer+0xcaa>
 8006a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <USB_EPStartXfer+0xc40>
 8006a82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a86:	3b01      	subs	r3, #1
 8006a88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e027      	b.n	8006af6 <USB_EPStartXfer+0xcaa>
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d11f      	bne.n	8006af6 <USB_EPStartXfer+0xcaa>
 8006ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006acc:	4413      	add	r3, r2
 8006ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	011a      	lsls	r2, r3, #4
 8006ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006af4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	895b      	ldrh	r3, [r3, #10]
 8006b02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6959      	ldr	r1, [r3, #20]
 8006b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b24:	6800      	ldr	r0, [r0, #0]
 8006b26:	f001 f8f2 	bl	8007d0e <USB_WritePMA>
          ep->xfer_buff += len;
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3a:	441a      	add	r2, r3
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d90f      	bls.n	8006b84 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	1ad2      	subs	r2, r2, r3
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	621a      	str	r2, [r3, #32]
 8006b82:	e00e      	b.n	8006ba2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8295 	beq.w	80070d6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d16d      	bne.n	8006c98 <USB_EPStartXfer+0xe4c>
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bdc:	4413      	add	r3, r2
 8006bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d112      	bne.n	8006c26 <USB_EPStartXfer+0xdda>
 8006c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e063      	b.n	8006cee <USB_EPStartXfer+0xea2>
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c2c:	d817      	bhi.n	8006c5e <USB_EPStartXfer+0xe12>
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <USB_EPStartXfer+0xe02>
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c48:	3301      	adds	r3, #1
 8006c4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e047      	b.n	8006cee <USB_EPStartXfer+0xea2>
 8006c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <USB_EPStartXfer+0xe32>
 8006c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	e02a      	b.n	8006cee <USB_EPStartXfer+0xea2>
 8006c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d122      	bne.n	8006cee <USB_EPStartXfer+0xea2>
 8006ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8006cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc8:	4413      	add	r3, r2
 8006cca:	673b      	str	r3, [r7, #112]	; 0x70
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	011a      	lsls	r2, r3, #4
 8006cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	891b      	ldrh	r3, [r3, #8]
 8006cfa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6959      	ldr	r1, [r3, #20]
 8006d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f000 fff6 	bl	8007d0e <USB_WritePMA>
 8006d22:	e1d8      	b.n	80070d6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d178      	bne.n	8006e26 <USB_EPStartXfer+0xfda>
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d58:	4413      	add	r3, r2
 8006d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	011a      	lsls	r2, r3, #4
 8006d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d70:	4413      	add	r3, r2
 8006d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d116      	bne.n	8006db0 <USB_EPStartXfer+0xf64>
 8006d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e06b      	b.n	8006e88 <USB_EPStartXfer+0x103c>
 8006db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db4:	2b3e      	cmp	r3, #62	; 0x3e
 8006db6:	d818      	bhi.n	8006dea <USB_EPStartXfer+0xf9e>
 8006db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <USB_EPStartXfer+0xf8c>
 8006dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	e04e      	b.n	8006e88 <USB_EPStartXfer+0x103c>
 8006dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <USB_EPStartXfer+0xfbe>
 8006e00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e04:	3b01      	subs	r3, #1
 8006e06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e030      	b.n	8006e88 <USB_EPStartXfer+0x103c>
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d128      	bne.n	8006e88 <USB_EPStartXfer+0x103c>
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6959      	ldr	r1, [r3, #20]
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006eae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006eb2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006eb6:	6800      	ldr	r0, [r0, #0]
 8006eb8:	f000 ff29 	bl	8007d0e <USB_WritePMA>
          ep->xfer_buff += len;
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	441a      	add	r2, r3
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d90f      	bls.n	8006f16 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	621a      	str	r2, [r3, #32]
 8006f14:	e00e      	b.n	8006f34 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80cc 	beq.w	80070d6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d178      	bne.n	800704e <USB_EPStartXfer+0x1202>
 8006f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f80:	4413      	add	r3, r2
 8006f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	011a      	lsls	r2, r3, #4
 8006f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f98:	4413      	add	r3, r2
 8006f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d116      	bne.n	8006fd8 <USB_EPStartXfer+0x118c>
 8006faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e064      	b.n	80070a2 <USB_EPStartXfer+0x1256>
 8006fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8006fde:	d818      	bhi.n	8007012 <USB_EPStartXfer+0x11c6>
 8006fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <USB_EPStartXfer+0x11b4>
 8006ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007004:	b29b      	uxth	r3, r3
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e047      	b.n	80070a2 <USB_EPStartXfer+0x1256>
 8007012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800701c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <USB_EPStartXfer+0x11e6>
 8007028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702c:	3b01      	subs	r3, #1
 800702e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007036:	b29b      	uxth	r3, r3
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007044:	b29a      	uxth	r2, r3
 8007046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	e029      	b.n	80070a2 <USB_EPStartXfer+0x1256>
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d121      	bne.n	80070a2 <USB_EPStartXfer+0x1256>
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706c:	b29b      	uxth	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007074:	4413      	add	r3, r2
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	011a      	lsls	r2, r3, #4
 8007088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800708c:	4413      	add	r3, r2
 800708e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	895b      	ldrh	r3, [r3, #10]
 80070ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6959      	ldr	r1, [r3, #20]
 80070be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070d0:	6800      	ldr	r0, [r0, #0]
 80070d2:	f000 fe1c 	bl	8007d0e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070f8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80070fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007104:	8013      	strh	r3, [r2, #0]
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800710e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007112:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	f082 0210 	eor.w	r2, r2, #16
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007122:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007126:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800712a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	f082 0220 	eor.w	r2, r2, #32
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
 800716e:	f000 bc9f 	b.w	8007ab0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	7b1b      	ldrb	r3, [r3, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 80ae 	bne.w	80072e0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d917      	bls.n	80071d0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c0:	1ad2      	subs	r2, r2, r3
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	619a      	str	r2, [r3, #24]
 80071ce:	e00e      	b.n	80071ee <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2200      	movs	r2, #0
 80071ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007212:	4413      	add	r3, r2
 8007214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	011a      	lsls	r2, r3, #4
 8007226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800722a:	4413      	add	r3, r2
 800722c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d116      	bne.n	800726a <USB_EPStartXfer+0x141e>
 800723c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007260:	b29a      	uxth	r2, r3
 8007262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e3e8      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	2b3e      	cmp	r3, #62	; 0x3e
 8007270:	d818      	bhi.n	80072a4 <USB_EPStartXfer+0x1458>
 8007272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800727c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <USB_EPStartXfer+0x1446>
 8007288:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800728c:	3301      	adds	r3, #1
 800728e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007292:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007296:	b29b      	uxth	r3, r3
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	b29a      	uxth	r2, r3
 800729c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	e3cb      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <USB_EPStartXfer+0x1478>
 80072ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072be:	3b01      	subs	r3, #1
 80072c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e3ad      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	78db      	ldrb	r3, [r3, #3]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	f040 8200 	bne.w	80076f2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f040 8091 	bne.w	8007426 <USB_EPStartXfer+0x15da>
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007328:	4413      	add	r3, r2
 800732a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007340:	4413      	add	r3, r2
 8007342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800734a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d116      	bne.n	8007388 <USB_EPStartXfer+0x153c>
 800735a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007366:	b29a      	uxth	r2, r3
 8007368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e083      	b.n	8007490 <USB_EPStartXfer+0x1644>
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	2b3e      	cmp	r3, #62	; 0x3e
 8007396:	d820      	bhi.n	80073da <USB_EPStartXfer+0x158e>
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <USB_EPStartXfer+0x157c>
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c2:	3301      	adds	r3, #1
 80073c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	029b      	lsls	r3, r3, #10
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e05a      	b.n	8007490 <USB_EPStartXfer+0x1644>
 80073da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USB_EPStartXfer+0x15be>
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	3b01      	subs	r3, #1
 8007406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740e:	b29b      	uxth	r3, r3
 8007410:	029b      	lsls	r3, r3, #10
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e034      	b.n	8007490 <USB_EPStartXfer+0x1644>
 8007426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d12c      	bne.n	8007490 <USB_EPStartXfer+0x1644>
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800745a:	4413      	add	r3, r2
 800745c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007472:	4413      	add	r3, r2
 8007474:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800747c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 8091 	bne.w	80075d2 <USB_EPStartXfer+0x1786>
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074d4:	4413      	add	r3, r2
 80074d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	011a      	lsls	r2, r3, #4
 80074e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d116      	bne.n	8007534 <USB_EPStartXfer+0x16e8>
 8007506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007512:	b29a      	uxth	r2, r3
 8007514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007518:	801a      	strh	r2, [r3, #0]
 800751a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	e07c      	b.n	800762e <USB_EPStartXfer+0x17e2>
 8007534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b3e      	cmp	r3, #62	; 0x3e
 8007542:	d820      	bhi.n	8007586 <USB_EPStartXfer+0x173a>
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	085b      	lsrs	r3, r3, #1
 8007552:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <USB_EPStartXfer+0x1728>
 800756a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800756e:	3301      	adds	r3, #1
 8007570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007574:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007578:	b29b      	uxth	r3, r3
 800757a:	029b      	lsls	r3, r3, #10
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e053      	b.n	800762e <USB_EPStartXfer+0x17e2>
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <USB_EPStartXfer+0x176a>
 80075ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e02d      	b.n	800762e <USB_EPStartXfer+0x17e2>
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d125      	bne.n	800762e <USB_EPStartXfer+0x17e2>
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	461a      	mov	r2, r3
 80075f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075f8:	4413      	add	r3, r2
 80075fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	011a      	lsls	r2, r3, #4
 800760c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007610:	4413      	add	r3, r2
 8007612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	b29a      	uxth	r2, r3
 8007628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800762c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 81fe 	beq.w	8007a3c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007644:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007660:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <USB_EPStartXfer+0x182c>
 800766c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10d      	bne.n	8007694 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007678:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800767c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 81db 	bne.w	8007a3c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007686:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 81d4 	bne.w	8007a3c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80076be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	441a      	add	r2, r3
 80076d8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]
 80076f0:	e1a4      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	f040 819a 	bne.w	8007a38 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	429a      	cmp	r2, r3
 800771e:	d917      	bls.n	8007750 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007740:	1ad2      	subs	r2, r2, r3
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	619a      	str	r2, [r3, #24]
 800774e:	e00e      	b.n	800776e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d178      	bne.n	8007870 <USB_EPStartXfer+0x1a24>
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077a2:	4413      	add	r3, r2
 80077a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	011a      	lsls	r2, r3, #4
 80077b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d116      	bne.n	80077fa <USB_EPStartXfer+0x19ae>
 80077cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	e06b      	b.n	80078d2 <USB_EPStartXfer+0x1a86>
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007800:	d818      	bhi.n	8007834 <USB_EPStartXfer+0x19e8>
 8007802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007806:	085b      	lsrs	r3, r3, #1
 8007808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <USB_EPStartXfer+0x19d6>
 8007818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800781c:	3301      	adds	r3, #1
 800781e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007826:	b29b      	uxth	r3, r3
 8007828:	029b      	lsls	r3, r3, #10
 800782a:	b29a      	uxth	r2, r3
 800782c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	e04e      	b.n	80078d2 <USB_EPStartXfer+0x1a86>
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800783e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <USB_EPStartXfer+0x1a08>
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800784e:	3b01      	subs	r3, #1
 8007850:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007858:	b29b      	uxth	r3, r3
 800785a:	029b      	lsls	r3, r3, #10
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e030      	b.n	80078d2 <USB_EPStartXfer+0x1a86>
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d128      	bne.n	80078d2 <USB_EPStartXfer+0x1a86>
 8007880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800788e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	4413      	add	r3, r2
 80078a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	011a      	lsls	r2, r3, #4
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	4413      	add	r3, r2
 80078be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d178      	bne.n	80079e2 <USB_EPStartXfer+0x1b96>
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007914:	4413      	add	r3, r2
 8007916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	011a      	lsls	r2, r3, #4
 8007928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800792c:	4413      	add	r3, r2
 800792e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <USB_EPStartXfer+0x1b20>
 800793e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800794a:	b29a      	uxth	r2, r3
 800794c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007962:	b29a      	uxth	r2, r3
 8007964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	e067      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
 800796c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007970:	2b3e      	cmp	r3, #62	; 0x3e
 8007972:	d818      	bhi.n	80079a6 <USB_EPStartXfer+0x1b5a>
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800797e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <USB_EPStartXfer+0x1b48>
 800798a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800798e:	3301      	adds	r3, #1
 8007990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007994:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007998:	b29b      	uxth	r3, r3
 800799a:	029b      	lsls	r3, r3, #10
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e04a      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <USB_EPStartXfer+0x1b7a>
 80079bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079c0:	3b01      	subs	r3, #1
 80079c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e02c      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d124      	bne.n	8007a3c <USB_EPStartXfer+0x1bf0>
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	4413      	add	r3, r2
 8007a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	011a      	lsls	r2, r3, #4
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e001      	b.n	8007a3c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e03a      	b.n	8007ab2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007a66:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007a72:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d020      	beq.n	8007b10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	81bb      	strh	r3, [r7, #12]
 8007ae6:	89bb      	ldrh	r3, [r7, #12]
 8007ae8:	f083 0310 	eor.w	r3, r3, #16
 8007aec:	81bb      	strh	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	441a      	add	r2, r3
 8007af8:	89bb      	ldrh	r3, [r7, #12]
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]
 8007b0e:	e01f      	b.n	8007b50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	81fb      	strh	r3, [r7, #14]
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b2e:	81fb      	strh	r3, [r7, #14]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	441a      	add	r2, r3
 8007b3a:	89fb      	ldrh	r3, [r7, #14]
 8007b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	7b1b      	ldrb	r3, [r3, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 809d 	bne.w	8007caa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d04c      	beq.n	8007c12 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	823b      	strh	r3, [r7, #16]
 8007b86:	8a3b      	ldrh	r3, [r7, #16]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01b      	beq.n	8007bc8 <USB_EPClearStall+0x6c>
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	81fb      	strh	r3, [r7, #14]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	78db      	ldrb	r3, [r3, #3]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d06c      	beq.n	8007caa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be6:	81bb      	strh	r3, [r7, #12]
 8007be8:	89bb      	ldrh	r3, [r7, #12]
 8007bea:	f083 0320 	eor.w	r3, r3, #32
 8007bee:	81bb      	strh	r3, [r7, #12]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	441a      	add	r2, r3
 8007bfa:	89bb      	ldrh	r3, [r7, #12]
 8007bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	8013      	strh	r3, [r2, #0]
 8007c10:	e04b      	b.n	8007caa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	82fb      	strh	r3, [r7, #22]
 8007c20:	8afb      	ldrh	r3, [r7, #22]
 8007c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01b      	beq.n	8007c62 <USB_EPClearStall+0x106>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	82bb      	strh	r3, [r7, #20]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	8abb      	ldrh	r3, [r7, #20]
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c78:	827b      	strh	r3, [r7, #18]
 8007c7a:	8a7b      	ldrh	r3, [r7, #18]
 8007c7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c80:	827b      	strh	r3, [r7, #18]
 8007c82:	8a7b      	ldrh	r3, [r7, #18]
 8007c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c88:	827b      	strh	r3, [r7, #18]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	8a7b      	ldrh	r3, [r7, #18]
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2280      	movs	r2, #128	; 0x80
 8007ccc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b08d      	sub	sp, #52	; 0x34
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	80fb      	strh	r3, [r7, #6]
 8007d20:	4613      	mov	r3, r2
 8007d22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d24:	88bb      	ldrh	r3, [r7, #4]
 8007d26:	3301      	adds	r3, #1
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	005a      	lsls	r2, r3, #1
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d46:	e01e      	b.n	8007d86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	3301      	adds	r3, #1
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	3302      	adds	r3, #2
 8007d72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	3302      	adds	r3, #2
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	3b01      	subs	r3, #1
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1dd      	bne.n	8007d48 <USB_WritePMA+0x3a>
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3734      	adds	r7, #52	; 0x34
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b08b      	sub	sp, #44	; 0x2c
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	4611      	mov	r1, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	460b      	mov	r3, r1
 8007da8:	80fb      	strh	r3, [r7, #6]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007dae:	88bb      	ldrh	r3, [r7, #4]
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	005a      	lsls	r2, r3, #1
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd0:	e01b      	b.n	8007e0a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	3302      	adds	r3, #2
 8007e02:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e0      	bne.n	8007dd2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e10:	88bb      	ldrh	r3, [r7, #4]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	372c      	adds	r7, #44	; 0x2c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr

08007e36 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007e46:	2302      	movs	r3, #2
 8007e48:	2203      	movs	r2, #3
 8007e4a:	2181      	movs	r1, #129	; 0x81
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fcf6 	bl	800983e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007e58:	2302      	movs	r3, #2
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fced 	bl	800983e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8007e6c:	2018      	movs	r0, #24
 8007e6e:	f001 fdfb 	bl	8009a68 <USBD_static_malloc>
 8007e72:	4602      	mov	r2, r0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	e011      	b.n	8007eae <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e90:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fdb9 	bl	8009a20 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007ec4:	2181      	movs	r1, #129	; 0x81
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 fcdf 	bl	800988a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fcd8 	bl	800988a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00e      	beq.n	8007f0a <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 fdbf 	bl	8009a80 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f24:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d051      	beq.n	8007fe6 <USBD_CUSTOM_HID_Setup+0xd2>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	f040 80d8 	bne.w	80080f8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	3b02      	subs	r3, #2
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d841      	bhi.n	8007fd6 <USBD_CUSTOM_HID_Setup+0xc2>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <USBD_CUSTOM_HID_Setup+0x44>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007fb1 	.word	0x08007fb1
 8007f5c:	08007f8f 	.word	0x08007f8f
 8007f60:	08007fd7 	.word	0x08007fd7
 8007f64:	08007fd7 	.word	0x08007fd7
 8007f68:	08007fd7 	.word	0x08007fd7
 8007f6c:	08007fd7 	.word	0x08007fd7
 8007f70:	08007fd7 	.word	0x08007fd7
 8007f74:	08007fc1 	.word	0x08007fc1
 8007f78:	08007f9f 	.word	0x08007f9f
 8007f7c:	08007f81 	.word	0x08007f81
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	605a      	str	r2, [r3, #4]
      break;
 8007f8c:	e02a      	b.n	8007fe4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3304      	adds	r3, #4
 8007f92:	2201      	movs	r2, #1
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 f927 	bl	80091ea <USBD_CtlSendData>
      break;
 8007f9c:	e022      	b.n	8007fe4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	885b      	ldrh	r3, [r3, #2]
 8007fa2:	0a1b      	lsrs	r3, r3, #8
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]
      break;
 8007fae:	e019      	b.n	8007fe4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f916 	bl	80091ea <USBD_CtlSendData>
      break;
 8007fbe:	e011      	b.n	8007fe4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	611a      	str	r2, [r3, #16]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007fc6:	6939      	ldr	r1, [r7, #16]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f939 	bl	8009246 <USBD_CtlPrepareRx>
      break;
 8007fd4:	e006      	b.n	8007fe4 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f89c 	bl	8009116 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe2:	bf00      	nop
    }
    break;
 8007fe4:	e08f      	b.n	8008106 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b0b      	cmp	r3, #11
 8007fec:	d87c      	bhi.n	80080e8 <USBD_CUSTOM_HID_Setup+0x1d4>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <USBD_CUSTOM_HID_Setup+0xe0>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	08008025 	.word	0x08008025
 8007ff8:	080080e9 	.word	0x080080e9
 8007ffc:	080080e9 	.word	0x080080e9
 8008000:	080080e9 	.word	0x080080e9
 8008004:	080080e9 	.word	0x080080e9
 8008008:	080080e9 	.word	0x080080e9
 800800c:	0800804d 	.word	0x0800804d
 8008010:	080080e9 	.word	0x080080e9
 8008014:	080080e9 	.word	0x080080e9
 8008018:	080080e9 	.word	0x080080e9
 800801c:	0800809b 	.word	0x0800809b
 8008020:	080080c3 	.word	0x080080c3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800802a:	2b03      	cmp	r3, #3
 800802c:	d107      	bne.n	800803e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800802e:	f107 030e 	add.w	r3, r7, #14
 8008032:	2202      	movs	r2, #2
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f8d7 	bl	80091ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800803c:	e05b      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f868 	bl	8009116 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008046:	2302      	movs	r3, #2
 8008048:	75fb      	strb	r3, [r7, #23]
      break;
 800804a:	e054      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	0a1b      	lsrs	r3, r3, #8
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b22      	cmp	r3, #34	; 0x22
 8008056:	d10b      	bne.n	8008070 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	88db      	ldrh	r3, [r3, #6]
 800805c:	2b02      	cmp	r3, #2
 800805e:	bf28      	it	cs
 8008060:	2302      	movcs	r3, #2
 8008062:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e00d      	b.n	800808c <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	885b      	ldrh	r3, [r3, #2]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b21      	cmp	r3, #33	; 0x21
 800807a:	d107      	bne.n	800808c <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800807e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	88db      	ldrh	r3, [r3, #6]
 8008084:	2b09      	cmp	r3, #9
 8008086:	bf28      	it	cs
 8008088:	2309      	movcs	r3, #9
 800808a:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 800808c:	8bfb      	ldrh	r3, [r7, #30]
 800808e:	461a      	mov	r2, r3
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f8a9 	bl	80091ea <USBD_CtlSendData>
      break;
 8008098:	e02d      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d107      	bne.n	80080b4 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	330c      	adds	r3, #12
 80080a8:	2201      	movs	r2, #1
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 f89c 	bl	80091ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80080b2:	e020      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f82d 	bl	8009116 <USBD_CtlError>
			  ret = USBD_FAIL;
 80080bc:	2302      	movs	r3, #2
 80080be:	75fb      	strb	r3, [r7, #23]
      break;
 80080c0:	e019      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d106      	bne.n	80080da <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	885b      	ldrh	r3, [r3, #2]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	461a      	mov	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80080d8:	e00d      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f81a 	bl	8009116 <USBD_CtlError>
			  ret = USBD_FAIL;
 80080e2:	2302      	movs	r3, #2
 80080e4:	75fb      	strb	r3, [r7, #23]
      break;
 80080e6:	e006      	b.n	80080f6 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f813 	bl	8009116 <USBD_CtlError>
      ret = USBD_FAIL;
 80080f0:	2302      	movs	r3, #2
 80080f2:	75fb      	strb	r3, [r7, #23]
      break;
 80080f4:	bf00      	nop
    }
    break;
 80080f6:	e006      	b.n	8008106 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f80b 	bl	8009116 <USBD_CtlError>
    ret = USBD_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	75fb      	strb	r3, [r7, #23]
    break;
 8008104:	bf00      	nop
  }
  return ret;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200000c8 	.word	0x200000c8

08008114 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008128:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008130:	2b03      	cmp	r3, #3
 8008132:	d10f      	bne.n	8008154 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2201      	movs	r2, #1
 8008140:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	2181      	movs	r1, #129	; 0x81
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f001 fc46 	bl	80099da <USBD_LL_Transmit>
 800814e:	e001      	b.n	8008154 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2229      	movs	r2, #41	; 0x29
 800816c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800816e:	4b03      	ldr	r3, [pc, #12]	; (800817c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000044 	.word	0x20000044

08008180 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2229      	movs	r2, #41	; 0x29
 800818c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800818e:	4b03      	ldr	r3, [pc, #12]	; (800819c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000070 	.word	0x20000070

080081a0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2229      	movs	r2, #41	; 0x29
 80081ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	2000009c 	.word	0x2000009c

080081c0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081d2:	2200      	movs	r2, #0
 80081d4:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081f4:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	7810      	ldrb	r0, [r2, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	7852      	ldrb	r2, [r2, #1]
 8008206:	4611      	mov	r1, r2
 8008208:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	2302      	movs	r3, #2
 800820e:	2101      	movs	r1, #1
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fc05 	bl	8009a20 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800822e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d10c      	bne.n	8008252 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	7810      	ldrb	r0, [r2, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	7852      	ldrb	r2, [r2, #1]
 8008248:	4611      	mov	r1, r2
 800824a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220a      	movs	r2, #10
 8008268:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200000d4 	.word	0x200000d4

0800827c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008286:	2302      	movs	r3, #2
 8008288:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr

080082a8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082bc:	2302      	movs	r3, #2
 80082be:	e01a      	b.n	80082f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	79fa      	ldrb	r2, [r7, #7]
 80082ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f001 fa3a 	bl	8009768 <USBD_LL_Init>

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d006      	beq.n	8008320 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	e001      	b.n	8008324 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008320:	2302      	movs	r3, #2
 8008322:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fa65 	bl	8009808 <USBD_LL_Start>

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008368:	2302      	movs	r3, #2
 800836a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00c      	beq.n	8008390 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	4611      	mov	r1, r2
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	4611      	mov	r1, r2
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fe63 	bl	800909e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80083f4:	f003 031f 	and.w	r3, r3, #31
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d016      	beq.n	800842a <USBD_LL_SetupStage+0x6a>
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d81c      	bhi.n	800843a <USBD_LL_SetupStage+0x7a>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <USBD_LL_SetupStage+0x4a>
 8008404:	2b01      	cmp	r3, #1
 8008406:	d008      	beq.n	800841a <USBD_LL_SetupStage+0x5a>
 8008408:	e017      	b.n	800843a <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f9c6 	bl	80087a4 <USBD_StdDevReq>
    break;
 8008418:	e01a      	b.n	8008450 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa28 	bl	8008878 <USBD_StdItfReq>
    break;
 8008428:	e012      	b.n	8008450 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa68 	bl	8008908 <USBD_StdEPReq>
    break;
 8008438:	e00a      	b.n	8008450 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008444:	b2db      	uxtb	r3, r3
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 fa3d 	bl	80098c8 <USBD_LL_StallEP>
    break;
 800844e:	bf00      	nop
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	460b      	mov	r3, r1
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d14b      	bne.n	8008506 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008474:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800847c:	2b03      	cmp	r3, #3
 800847e:	d134      	bne.n	80084ea <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	429a      	cmp	r2, r3
 800848a:	d919      	bls.n	80084c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	1ad2      	subs	r2, r2, r3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d203      	bcs.n	80084ae <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	e002      	b.n	80084b4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fee2 	bl	8009282 <USBD_CtlContinueRx>
 80084be:	e038      	b.n	8008532 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d105      	bne.n	80084e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fedf 	bl	80092a6 <USBD_CtlSendStatus>
 80084e8:	e023      	b.n	8008532 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	d11e      	bne.n	8008532 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 f9e2 	bl	80098c8 <USBD_LL_StallEP>
 8008504:	e015      	b.n	8008532 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00d      	beq.n	800852e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008518:	2b03      	cmp	r3, #3
 800851a:	d108      	bne.n	800852e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	7afa      	ldrb	r2, [r7, #11]
 8008526:	4611      	mov	r1, r2
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	4798      	blx	r3
 800852c:	e001      	b.n	8008532 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	e000      	b.n	8008534 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	460b      	mov	r3, r1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d17f      	bne.n	8008650 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3314      	adds	r3, #20
 8008554:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800855c:	2b02      	cmp	r3, #2
 800855e:	d15c      	bne.n	800861a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	429a      	cmp	r2, r3
 800856a:	d915      	bls.n	8008598 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	b29b      	uxth	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fe4c 	bl	8009222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800858a:	2300      	movs	r3, #0
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 fa45 	bl	8009a20 <USBD_LL_PrepareReceive>
 8008596:	e04e      	b.n	8008636 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	6912      	ldr	r2, [r2, #16]
 80085a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a4:	fb01 f202 	mul.w	r2, r1, r2
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d11c      	bne.n	80085e8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d316      	bcc.n	80085e8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d20f      	bcs.n	80085e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fe28 	bl	8009222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f001 fa1d 	bl	8009a20 <USBD_LL_PrepareReceive>
 80085e6:	e026      	b.n	8008636 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d105      	bne.n	800860a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 f95b 	bl	80098c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fe5a 	bl	80092cc <USBD_CtlReceiveStatus>
 8008618:	e00d      	b.n	8008636 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008620:	2b04      	cmp	r3, #4
 8008622:	d004      	beq.n	800862e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f001 f949 	bl	80098c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800863c:	2b01      	cmp	r3, #1
 800863e:	d11d      	bne.n	800867c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff fe81 	bl	8008348 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800864e:	e015      	b.n	800867c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00d      	beq.n	8008678 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008662:	2b03      	cmp	r3, #3
 8008664:	d108      	bne.n	8008678 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	7afa      	ldrb	r2, [r7, #11]
 8008670:	4611      	mov	r1, r2
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	4798      	blx	r3
 8008676:	e001      	b.n	800867c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008678:	2302      	movs	r3, #2
 800867a:	e000      	b.n	800867e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800868e:	2340      	movs	r3, #64	; 0x40
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f8d2 	bl	800983e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2240      	movs	r2, #64	; 0x40
 80086a6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	2200      	movs	r2, #0
 80086ae:	2180      	movs	r1, #128	; 0x80
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f8c4 	bl	800983e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2240      	movs	r2, #64	; 0x40
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6852      	ldr	r2, [r2, #4]
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	4611      	mov	r1, r2
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
  }

  return USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr

08008726 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2204      	movs	r2, #4
 800873e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	bc80      	pop	{r7}
 800876c:	4770      	bx	lr

0800876e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800877c:	2b03      	cmp	r3, #3
 800877e:	d10b      	bne.n	8008798 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d005      	beq.n	80087ca <USBD_StdDevReq+0x26>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d84f      	bhi.n	8008862 <USBD_StdDevReq+0xbe>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <USBD_StdDevReq+0x36>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d14b      	bne.n	8008862 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
    break;
 80087d8:	e048      	b.n	800886c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b09      	cmp	r3, #9
 80087e0:	d839      	bhi.n	8008856 <USBD_StdDevReq+0xb2>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_StdDevReq+0x44>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008839 	.word	0x08008839
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	08008857 	.word	0x08008857
 80087f4:	08008843 	.word	0x08008843
 80087f8:	08008857 	.word	0x08008857
 80087fc:	0800881b 	.word	0x0800881b
 8008800:	08008811 	.word	0x08008811
 8008804:	08008857 	.word	0x08008857
 8008808:	0800882f 	.word	0x0800882f
 800880c:	08008825 	.word	0x08008825
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9da 	bl	8008bcc <USBD_GetDescriptor>
      break;
 8008818:	e022      	b.n	8008860 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 facf 	bl	8008dc0 <USBD_SetAddress>
      break;
 8008822:	e01d      	b.n	8008860 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb0e 	bl	8008e48 <USBD_SetConfig>
      break;
 800882c:	e018      	b.n	8008860 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fb97 	bl	8008f64 <USBD_GetConfig>
      break;
 8008836:	e013      	b.n	8008860 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fbc7 	bl	8008fce <USBD_GetStatus>
      break;
 8008840:	e00e      	b.n	8008860 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fbf5 	bl	8009034 <USBD_SetFeature>
      break;
 800884a:	e009      	b.n	8008860 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc04 	bl	800905c <USBD_ClrFeature>
      break;
 8008854:	e004      	b.n	8008860 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fc5c 	bl	8009116 <USBD_CtlError>
      break;
 800885e:	bf00      	nop
    }
    break;
 8008860:	e004      	b.n	800886c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc56 	bl	8009116 <USBD_CtlError>
    break;
 800886a:	bf00      	nop
  }

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop

08008878 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d005      	beq.n	800889e <USBD_StdItfReq+0x26>
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d82e      	bhi.n	80088f4 <USBD_StdItfReq+0x7c>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <USBD_StdItfReq+0x26>
 800889a:	2b20      	cmp	r3, #32
 800889c:	d12a      	bne.n	80088f4 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088a4:	3b01      	subs	r3, #1
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d81d      	bhi.n	80088e6 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	889b      	ldrh	r3, [r3, #4]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d813      	bhi.n	80088dc <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d110      	bne.n	80088f0 <USBD_StdItfReq+0x78>
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10d      	bne.n	80088f0 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fce6 	bl	80092a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80088da:	e009      	b.n	80088f0 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fc19 	bl	8009116 <USBD_CtlError>
      break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc14 	bl	8009116 <USBD_CtlError>
      break;
 80088ee:	e000      	b.n	80088f2 <USBD_StdItfReq+0x7a>
      break;
 80088f0:	bf00      	nop
    }
    break;
 80088f2:	e004      	b.n	80088fe <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc0d 	bl	8009116 <USBD_CtlError>
    break;
 80088fc:	bf00      	nop
  }

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	889b      	ldrh	r3, [r3, #4]
 800891a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d007      	beq.n	8008938 <USBD_StdEPReq+0x30>
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	f200 8144 	bhi.w	8008bb6 <USBD_StdEPReq+0x2ae>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <USBD_StdEPReq+0x40>
 8008932:	2b20      	cmp	r3, #32
 8008934:	f040 813f 	bne.w	8008bb6 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
    break;
 8008946:	e13b      	b.n	8008bc0 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008950:	2b20      	cmp	r3, #32
 8008952:	d10a      	bne.n	800896a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	e12b      	b.n	8008bc2 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	2b03      	cmp	r3, #3
 8008970:	d007      	beq.n	8008982 <USBD_StdEPReq+0x7a>
 8008972:	2b03      	cmp	r3, #3
 8008974:	f300 8119 	bgt.w	8008baa <USBD_StdEPReq+0x2a2>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d072      	beq.n	8008a62 <USBD_StdEPReq+0x15a>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d03a      	beq.n	80089f6 <USBD_StdEPReq+0xee>
 8008980:	e113      	b.n	8008baa <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008988:	2b02      	cmp	r3, #2
 800898a:	d002      	beq.n	8008992 <USBD_StdEPReq+0x8a>
 800898c:	2b03      	cmp	r3, #3
 800898e:	d015      	beq.n	80089bc <USBD_StdEPReq+0xb4>
 8008990:	e02b      	b.n	80089ea <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00c      	beq.n	80089b2 <USBD_StdEPReq+0xaa>
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d009      	beq.n	80089b2 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 ff90 	bl	80098c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80089a8:	2180      	movs	r1, #128	; 0x80
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 ff8c 	bl	80098c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089b0:	e020      	b.n	80089f4 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbae 	bl	8009116 <USBD_CtlError>
        break;
 80089ba:	e01b      	b.n	80089f4 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	885b      	ldrh	r3, [r3, #2]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10e      	bne.n	80089e2 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <USBD_StdEPReq+0xda>
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b80      	cmp	r3, #128	; 0x80
 80089ce:	d008      	beq.n	80089e2 <USBD_StdEPReq+0xda>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	88db      	ldrh	r3, [r3, #6]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 ff73 	bl	80098c8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc5f 	bl	80092a6 <USBD_CtlSendStatus>

        break;
 80089e8:	e004      	b.n	80089f4 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fb92 	bl	8009116 <USBD_CtlError>
        break;
 80089f2:	bf00      	nop
      }
      break;
 80089f4:	e0de      	b.n	8008bb4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d002      	beq.n	8008a06 <USBD_StdEPReq+0xfe>
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d015      	beq.n	8008a30 <USBD_StdEPReq+0x128>
 8008a04:	e026      	b.n	8008a54 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <USBD_StdEPReq+0x11e>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	d009      	beq.n	8008a26 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 ff56 	bl	80098c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 ff52 	bl	80098c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a24:	e01c      	b.n	8008a60 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb74 	bl	8009116 <USBD_CtlError>
        break;
 8008a2e:	e017      	b.n	8008a60 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	885b      	ldrh	r3, [r3, #2]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d112      	bne.n	8008a5e <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 ff5d 	bl	8009906 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fc2a 	bl	80092a6 <USBD_CtlSendStatus>
        }
        break;
 8008a52:	e004      	b.n	8008a5e <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fb5d 	bl	8009116 <USBD_CtlError>
        break;
 8008a5c:	e000      	b.n	8008a60 <USBD_StdEPReq+0x158>
        break;
 8008a5e:	bf00      	nop
      }
      break;
 8008a60:	e0a8      	b.n	8008bb4 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d002      	beq.n	8008a72 <USBD_StdEPReq+0x16a>
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d031      	beq.n	8008ad4 <USBD_StdEPReq+0x1cc>
 8008a70:	e095      	b.n	8008b9e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <USBD_StdEPReq+0x180>
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d004      	beq.n	8008a88 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fb48 	bl	8009116 <USBD_CtlError>
          break;
 8008a86:	e08f      	b.n	8008ba8 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0b      	bge.n	8008aa8 <USBD_StdEPReq+0x1a0>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	e00a      	b.n	8008abe <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fb8c 	bl	80091ea <USBD_CtlSendData>
          break;
 8008ad2:	e069      	b.n	8008ba8 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da11      	bge.n	8008b00 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3318      	adds	r3, #24
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d117      	bne.n	8008b26 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb0c 	bl	8009116 <USBD_CtlError>
            break;
 8008afe:	e053      	b.n	8008ba8 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 faf9 	bl	8009116 <USBD_CtlError>
            break;
 8008b24:	e040      	b.n	8008ba8 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da0b      	bge.n	8008b46 <USBD_StdEPReq+0x23e>
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	3304      	adds	r3, #4
 8008b44:	e00a      	b.n	8008b5c <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <USBD_StdEPReq+0x262>
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b80      	cmp	r3, #128	; 0x80
 8008b68:	d103      	bne.n	8008b72 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
 8008b70:	e00e      	b.n	8008b90 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fee4 	bl	8009944 <USBD_LL_IsStallEP>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e002      	b.n	8008b90 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2202      	movs	r2, #2
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fb27 	bl	80091ea <USBD_CtlSendData>
          break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fab8 	bl	8009116 <USBD_CtlError>
        break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fab2 	bl	8009116 <USBD_CtlError>
      break;
 8008bb2:	bf00      	nop
    }
    break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 faac 	bl	8009116 <USBD_CtlError>
    break;
 8008bbe:	bf00      	nop
  }

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	2b06      	cmp	r3, #6
 8008be2:	f200 80c9 	bhi.w	8008d78 <USBD_GetDescriptor+0x1ac>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_GetDescriptor+0x20>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c21 	.word	0x08008c21
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008d79 	.word	0x08008d79
 8008bfc:	08008d79 	.word	0x08008d79
 8008c00:	08008d25 	.word	0x08008d25
 8008c04:	08008d4b 	.word	0x08008d4b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	7c12      	ldrb	r2, [r2, #16]
 8008c14:	f107 010a 	add.w	r1, r7, #10
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4798      	blx	r3
 8008c1c:	60f8      	str	r0, [r7, #12]
    break;
 8008c1e:	e0b0      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	7c1b      	ldrb	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10d      	bne.n	8008c44 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	f107 020a 	add.w	r2, r7, #10
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c42:	e09e      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	f107 020a 	add.w	r2, r7, #10
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	701a      	strb	r2, [r3, #0]
    break;
 8008c5e:	e090      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	d856      	bhi.n	8008d18 <USBD_GetDescriptor+0x14c>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <USBD_GetDescriptor+0xa4>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c89 	.word	0x08008c89
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	08008cb9 	.word	0x08008cb9
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008d01 	.word	0x08008d01
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7c12      	ldrb	r2, [r2, #16]
 8008c94:	f107 010a 	add.w	r1, r7, #10
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	60f8      	str	r0, [r7, #12]
      break;
 8008c9e:	e040      	b.n	8008d22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 010a 	add.w	r1, r7, #10
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      break;
 8008cb6:	e034      	b.n	8008d22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 010a 	add.w	r1, r7, #10
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
      break;
 8008cce:	e028      	b.n	8008d22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	7c12      	ldrb	r2, [r2, #16]
 8008cdc:	f107 010a 	add.w	r1, r7, #10
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
      break;
 8008ce6:	e01c      	b.n	8008d22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 010a 	add.w	r1, r7, #10
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
      break;
 8008cfe:	e010      	b.n	8008d22 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	7c12      	ldrb	r2, [r2, #16]
 8008d0c:	f107 010a 	add.w	r1, r7, #10
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
      break;
 8008d16:	e004      	b.n	8008d22 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f9fb 	bl	8009116 <USBD_CtlError>
      return;
 8008d20:	e04b      	b.n	8008dba <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008d22:	e02e      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7c1b      	ldrb	r3, [r3, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d109      	bne.n	8008d40 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	f107 020a 	add.w	r2, r7, #10
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
      break;
 8008d3e:	e020      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f9e7 	bl	8009116 <USBD_CtlError>
      return;
 8008d48:	e037      	b.n	8008dba <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7c1b      	ldrb	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10d      	bne.n	8008d6e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	f107 020a 	add.w	r2, r7, #10
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4798      	blx	r3
 8008d62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3301      	adds	r3, #1
 8008d68:	2207      	movs	r2, #7
 8008d6a:	701a      	strb	r2, [r3, #0]
      break;
 8008d6c:	e009      	b.n	8008d82 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f9d0 	bl	8009116 <USBD_CtlError>
      return;
 8008d76:	e020      	b.n	8008dba <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9cb 	bl	8009116 <USBD_CtlError>
    return;
 8008d80:	e01b      	b.n	8008dba <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008d82:	897b      	ldrh	r3, [r7, #10]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d011      	beq.n	8008dac <USBD_GetDescriptor+0x1e0>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	88db      	ldrh	r3, [r3, #6]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88da      	ldrh	r2, [r3, #6]
 8008d94:	897b      	ldrh	r3, [r7, #10]
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bf28      	it	cs
 8008d9a:	4613      	movcs	r3, r2
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008da0:	897b      	ldrh	r3, [r7, #10]
 8008da2:	461a      	mov	r2, r3
 8008da4:	68f9      	ldr	r1, [r7, #12]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa1f 	bl	80091ea <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	88db      	ldrh	r3, [r3, #6]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fa76 	bl	80092a6 <USBD_CtlSendStatus>
  }
}
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	889b      	ldrh	r3, [r3, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d130      	bne.n	8008e34 <USBD_SetAddress+0x74>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d12c      	bne.n	8008e34 <USBD_SetAddress+0x74>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b7f      	cmp	r3, #127	; 0x7f
 8008de0:	d828      	bhi.n	8008e34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	885b      	ldrh	r3, [r3, #2]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d104      	bne.n	8008e02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f98b 	bl	8009116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e00:	e01d      	b.n	8008e3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	7bfa      	ldrb	r2, [r7, #15]
 8008e06:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fdc4 	bl	800999c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa46 	bl	80092a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e28:	e009      	b.n	8008e3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e32:	e004      	b.n	8008e3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f96d 	bl	8009116 <USBD_CtlError>
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <USBD_SetConfig+0x118>)
 8008e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e5c:	4b40      	ldr	r3, [pc, #256]	; (8008f60 <USBD_SetConfig+0x118>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d904      	bls.n	8008e6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f955 	bl	8009116 <USBD_CtlError>
 8008e6c:	e075      	b.n	8008f5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d002      	beq.n	8008e7e <USBD_SetConfig+0x36>
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d023      	beq.n	8008ec4 <USBD_SetConfig+0x7c>
 8008e7c:	e062      	b.n	8008f44 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008e7e:	4b38      	ldr	r3, [pc, #224]	; (8008f60 <USBD_SetConfig+0x118>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01a      	beq.n	8008ebc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008e86:	4b36      	ldr	r3, [pc, #216]	; (8008f60 <USBD_SetConfig+0x118>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e98:	4b31      	ldr	r3, [pc, #196]	; (8008f60 <USBD_SetConfig+0x118>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fa5c 	bl	800835c <USBD_SetClassConfig>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d104      	bne.n	8008eb4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f932 	bl	8009116 <USBD_CtlError>
          return;
 8008eb2:	e052      	b.n	8008f5a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f9f6 	bl	80092a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008eba:	e04e      	b.n	8008f5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9f2 	bl	80092a6 <USBD_CtlSendStatus>
      break;
 8008ec2:	e04a      	b.n	8008f5a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ec4:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <USBD_SetConfig+0x118>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d112      	bne.n	8008ef2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008ed4:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <USBD_SetConfig+0x118>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ede:	4b20      	ldr	r3, [pc, #128]	; (8008f60 <USBD_SetConfig+0x118>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fa58 	bl	800839a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9db 	bl	80092a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008ef0:	e033      	b.n	8008f5a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008ef2:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <USBD_SetConfig+0x118>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d01d      	beq.n	8008f3c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff fa46 	bl	800839a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f0e:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <USBD_SetConfig+0x118>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f18:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <USBD_SetConfig+0x118>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fa1c 	bl	800835c <USBD_SetClassConfig>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d104      	bne.n	8008f34 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8f2 	bl	8009116 <USBD_CtlError>
          return;
 8008f32:	e012      	b.n	8008f5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f9b6 	bl	80092a6 <USBD_CtlSendStatus>
      break;
 8008f3a:	e00e      	b.n	8008f5a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9b2 	bl	80092a6 <USBD_CtlSendStatus>
      break;
 8008f42:	e00a      	b.n	8008f5a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f8e5 	bl	8009116 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <USBD_SetConfig+0x118>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fa21 	bl	800839a <USBD_ClrClassConfig>
      break;
 8008f58:	bf00      	nop
    }
  }
}
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000031c 	.word	0x2000031c

08008f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	88db      	ldrh	r3, [r3, #6]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d004      	beq.n	8008f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8cc 	bl	8009116 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008f7e:	e022      	b.n	8008fc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	dc02      	bgt.n	8008f90 <USBD_GetConfig+0x2c>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dc03      	bgt.n	8008f96 <USBD_GetConfig+0x32>
 8008f8e:	e015      	b.n	8008fbc <USBD_GetConfig+0x58>
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d00b      	beq.n	8008fac <USBD_GetConfig+0x48>
 8008f94:	e012      	b.n	8008fbc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f920 	bl	80091ea <USBD_CtlSendData>
      break;
 8008faa:	e00c      	b.n	8008fc6 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f918 	bl	80091ea <USBD_CtlSendData>
      break;
 8008fba:	e004      	b.n	8008fc6 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f8a9 	bl	8009116 <USBD_CtlError>
      break;
 8008fc4:	bf00      	nop
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d81e      	bhi.n	8009022 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	88db      	ldrh	r3, [r3, #6]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d004      	beq.n	8008ff6 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f891 	bl	8009116 <USBD_CtlError>
      break;
 8008ff4:	e01a      	b.n	800902c <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f043 0202 	orr.w	r2, r3, #2
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	330c      	adds	r3, #12
 8009016:	2202      	movs	r2, #2
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8e5 	bl	80091ea <USBD_CtlSendData>
    break;
 8009020:	e004      	b.n	800902c <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f876 	bl	8009116 <USBD_CtlError>
    break;
 800902a:	bf00      	nop
  }
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d106      	bne.n	8009054 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f929 	bl	80092a6 <USBD_CtlSendStatus>
  }

}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800906c:	3b01      	subs	r3, #1
 800906e:	2b02      	cmp	r3, #2
 8009070:	d80b      	bhi.n	800908a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d10c      	bne.n	8009094 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f90f 	bl	80092a6 <USBD_CtlSendStatus>
    }
    break;
 8009088:	e004      	b.n	8009094 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f842 	bl	8009116 <USBD_CtlError>
    break;
 8009092:	e000      	b.n	8009096 <USBD_ClrFeature+0x3a>
    break;
 8009094:	bf00      	nop
  }
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781a      	ldrb	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	785a      	ldrb	r2, [r3, #1]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	3302      	adds	r3, #2
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	3303      	adds	r3, #3
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	4413      	add	r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	3304      	adds	r3, #4
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b29a      	uxth	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	3305      	adds	r3, #5
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	3306      	adds	r3, #6
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	3307      	adds	r3, #7
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b29b      	uxth	r3, r3
 8009104:	4413      	add	r3, r2
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	80da      	strh	r2, [r3, #6]

}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	bc80      	pop	{r7}
 8009114:	4770      	bx	lr

08009116 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009120:	2180      	movs	r1, #128	; 0x80
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fbd0 	bl	80098c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009128:	2100      	movs	r1, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fbcc 	bl	80098c8 <USBD_LL_StallEP>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d032      	beq.n	80091b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f834 	bl	80091bc <USBD_GetLen>
 8009154:	4603      	mov	r3, r0
 8009156:	3301      	adds	r3, #1
 8009158:	b29b      	uxth	r3, r3
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	75fa      	strb	r2, [r7, #23]
 8009168:	461a      	mov	r2, r3
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4413      	add	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	7812      	ldrb	r2, [r2, #0]
 8009172:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	75fa      	strb	r2, [r7, #23]
 800917a:	461a      	mov	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4413      	add	r3, r2
 8009180:	2203      	movs	r2, #3
 8009182:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009184:	e012      	b.n	80091ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	60fa      	str	r2, [r7, #12]
 800918c:	7dfa      	ldrb	r2, [r7, #23]
 800918e:	1c51      	adds	r1, r2, #1
 8009190:	75f9      	strb	r1, [r7, #23]
 8009192:	4611      	mov	r1, r2
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	440a      	add	r2, r1
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	75fa      	strb	r2, [r7, #23]
 80091a2:	461a      	mov	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	4413      	add	r3, r2
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e8      	bne.n	8009186 <USBD_GetString+0x4e>
    }
  }
}
 80091b4:	bf00      	nop
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80091c8:	e005      	b.n	80091d6 <USBD_GetLen+0x1a>
    {
        len++;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	3301      	adds	r3, #1
 80091ce:	73fb      	strb	r3, [r7, #15]
        buf++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3301      	adds	r3, #1
 80091d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1f5      	bne.n	80091ca <USBD_GetLen+0xe>
    }

    return len;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr

080091ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fbe1 	bl	80099da <USBD_LL_Transmit>

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	4613      	mov	r3, r2
 800922e:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	2100      	movs	r1, #0
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 fbcf 	bl	80099da <USBD_LL_Transmit>

  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	4613      	mov	r3, r2
 8009252:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2203      	movs	r2, #3
 8009258:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	2100      	movs	r1, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fbd4 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	4613      	mov	r3, r2
 800928e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	2100      	movs	r1, #0
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fbc2 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2204      	movs	r2, #4
 80092b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092b6:	2300      	movs	r3, #0
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fb8c 	bl	80099da <USBD_LL_Transmit>

  return USBD_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2205      	movs	r2, #5
 80092d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	2100      	movs	r1, #0
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fb9c 	bl	8009a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092f8:	2200      	movs	r2, #0
 80092fa:	4912      	ldr	r1, [pc, #72]	; (8009344 <MX_USB_DEVICE_Init+0x50>)
 80092fc:	4812      	ldr	r0, [pc, #72]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 80092fe:	f7fe ffd3 	bl	80082a8 <USBD_Init>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009308:	f7f7 fe74 	bl	8000ff4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800930c:	490f      	ldr	r1, [pc, #60]	; (800934c <MX_USB_DEVICE_Init+0x58>)
 800930e:	480e      	ldr	r0, [pc, #56]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009310:	f7fe fff5 	bl	80082fe <USBD_RegisterClass>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800931a:	f7f7 fe6b 	bl	8000ff4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800931e:	490c      	ldr	r1, [pc, #48]	; (8009350 <MX_USB_DEVICE_Init+0x5c>)
 8009320:	4809      	ldr	r0, [pc, #36]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009322:	f7fe ffab 	bl	800827c <USBD_CUSTOM_HID_RegisterInterface>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800932c:	f7f7 fe62 	bl	8000ff4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009330:	4805      	ldr	r0, [pc, #20]	; (8009348 <MX_USB_DEVICE_Init+0x54>)
 8009332:	f7fe fffd 	bl	8008330 <USBD_Start>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800933c:	f7f7 fe5a 	bl	8000ff4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009340:	bf00      	nop
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200000f4 	.word	0x200000f4
 8009348:	20000320 	.word	0x20000320
 800934c:	2000000c 	.word	0x2000000c
 8009350:	200000e4 	.word	0x200000e4

08009354 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009358:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800935a:	4618      	mov	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009362:	b480      	push	{r7}
 8009364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009368:	4618      	mov	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	460a      	mov	r2, r1
 800937a:	71fb      	strb	r3, [r7, #7]
 800937c:	4613      	mov	r3, r2
 800937e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr

0800938c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2212      	movs	r2, #18
 800939c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800939e:	4b03      	ldr	r3, [pc, #12]	; (80093ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000110 	.word	0x20000110

080093b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2204      	movs	r2, #4
 80093c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093c2:	4b03      	ldr	r3, [pc, #12]	; (80093d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20000124 	.word	0x20000124

080093d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <USBD_FS_ProductStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	; (800940c <USBD_FS_ProductStrDescriptor+0x38>)
 80093ec:	f7ff fea4 	bl	8009138 <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <USBD_FS_ProductStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <USBD_FS_ProductStrDescriptor+0x38>)
 80093f8:	f7ff fe9e 	bl	8009138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200005bc 	.word	0x200005bc
 800940c:	08009b78 	.word	0x08009b78

08009410 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	4904      	ldr	r1, [pc, #16]	; (8009430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009420:	4804      	ldr	r0, [pc, #16]	; (8009434 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009422:	f7ff fe89 	bl	8009138 <USBD_GetString>
  return USBD_StrDesc;
 8009426:	4b02      	ldr	r3, [pc, #8]	; (8009430 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	200005bc 	.word	0x200005bc
 8009434:	08009b98 	.word	0x08009b98

08009438 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	221a      	movs	r2, #26
 8009448:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800944a:	f000 f843 	bl	80094d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800944e:	4b02      	ldr	r3, [pc, #8]	; (8009458 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000128 	.word	0x20000128

0800945c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009468:	79fb      	ldrb	r3, [r7, #7]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d105      	bne.n	800947a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4907      	ldr	r1, [pc, #28]	; (8009490 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009472:	4808      	ldr	r0, [pc, #32]	; (8009494 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009474:	f7ff fe60 	bl	8009138 <USBD_GetString>
 8009478:	e004      	b.n	8009484 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4904      	ldr	r1, [pc, #16]	; (8009490 <USBD_FS_ConfigStrDescriptor+0x34>)
 800947e:	4805      	ldr	r0, [pc, #20]	; (8009494 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009480:	f7ff fe5a 	bl	8009138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200005bc 	.word	0x200005bc
 8009494:	08009bac 	.word	0x08009bac

08009498 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4907      	ldr	r1, [pc, #28]	; (80094cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094ae:	4808      	ldr	r0, [pc, #32]	; (80094d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b0:	f7ff fe42 	bl	8009138 <USBD_GetString>
 80094b4:	e004      	b.n	80094c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4904      	ldr	r1, [pc, #16]	; (80094cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094ba:	4805      	ldr	r0, [pc, #20]	; (80094d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094bc:	f7ff fe3c 	bl	8009138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094c0:	4b02      	ldr	r3, [pc, #8]	; (80094cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200005bc 	.word	0x200005bc
 80094d0:	08009bc0 	.word	0x08009bc0

080094d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <Get_SerialNum+0x44>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094e0:	4b0e      	ldr	r3, [pc, #56]	; (800951c <Get_SerialNum+0x48>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094e6:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <Get_SerialNum+0x4c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4413      	add	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094fa:	2208      	movs	r2, #8
 80094fc:	4909      	ldr	r1, [pc, #36]	; (8009524 <Get_SerialNum+0x50>)
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f814 	bl	800952c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009504:	2204      	movs	r2, #4
 8009506:	4908      	ldr	r1, [pc, #32]	; (8009528 <Get_SerialNum+0x54>)
 8009508:	68b8      	ldr	r0, [r7, #8]
 800950a:	f000 f80f 	bl	800952c <IntToUnicode>
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	1ff80050 	.word	0x1ff80050
 800951c:	1ff80054 	.word	0x1ff80054
 8009520:	1ff80058 	.word	0x1ff80058
 8009524:	2000012a 	.word	0x2000012a
 8009528:	2000013a 	.word	0x2000013a

0800952c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
 8009542:	e027      	b.n	8009594 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	0f1b      	lsrs	r3, r3, #28
 8009548:	2b09      	cmp	r3, #9
 800954a:	d80b      	bhi.n	8009564 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	0f1b      	lsrs	r3, r3, #28
 8009550:	b2da      	uxtb	r2, r3
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	4619      	mov	r1, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	440b      	add	r3, r1
 800955c:	3230      	adds	r2, #48	; 0x30
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e00a      	b.n	800957a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	0f1b      	lsrs	r3, r3, #28
 8009568:	b2da      	uxtb	r2, r3
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	4619      	mov	r1, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	440b      	add	r3, r1
 8009574:	3237      	adds	r2, #55	; 0x37
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	3301      	adds	r3, #1
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	3301      	adds	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
 8009594:	7dfa      	ldrb	r2, [r7, #23]
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	429a      	cmp	r2, r3
 800959a:	d3d3      	bcc.n	8009544 <IntToUnicode+0x18>
  }
}
 800959c:	bf00      	nop
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr

080095a8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d106      	bne.n	80095c8 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80095c0:	f043 0301 	orr.w	r3, r3, #1
 80095c4:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80095c6:	e005      	b.n	80095d4 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <HAL_PCDEx_SetConnectionState+0x38>)
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	6053      	str	r3, [r2, #4]
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40010000 	.word	0x40010000

080095e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <HAL_PCD_MspInit+0x44>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d113      	bne.n	800961e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095f6:	4b0d      	ldr	r3, [pc, #52]	; (800962c <HAL_PCD_MspInit+0x48>)
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	4a0c      	ldr	r2, [pc, #48]	; (800962c <HAL_PCD_MspInit+0x48>)
 80095fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009600:	6253      	str	r3, [r2, #36]	; 0x24
 8009602:	4b0a      	ldr	r3, [pc, #40]	; (800962c <HAL_PCD_MspInit+0x48>)
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800960e:	2200      	movs	r2, #0
 8009610:	2100      	movs	r1, #0
 8009612:	2014      	movs	r0, #20
 8009614:	f7f8 fd13 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009618:	2014      	movs	r0, #20
 800961a:	f7f8 fd2c 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	40005c00 	.word	0x40005c00
 800962c:	40023800 	.word	0x40023800

08009630 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7fe feba 	bl	80083c0 <USBD_LL_SetupStage>
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009666:	78fa      	ldrb	r2, [r7, #3]
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	440b      	add	r3, r1
 8009674:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	4619      	mov	r1, r3
 800967e:	f7fe feec 	bl	800845a <USBD_LL_DataOutStage>
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	440b      	add	r3, r1
 80096aa:	333c      	adds	r3, #60	; 0x3c
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	4619      	mov	r1, r3
 80096b2:	f7fe ff43 	bl	800853c <USBD_LL_DataInStage>
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff f84e 	bl	800876e <USBD_LL_SOF>
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096e2:	2301      	movs	r3, #1
 80096e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d001      	beq.n	80096f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096ee:	f7f7 fc81 	bl	8000ff4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096f8:	7bfa      	ldrb	r2, [r7, #15]
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff f803 	bl	8008708 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe ffbc 	bl	8008686 <USBD_LL_Reset>
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fffd 	bl	8008726 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009734:	4b04      	ldr	r3, [pc, #16]	; (8009748 <HAL_PCD_SuspendCallback+0x30>)
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	4a03      	ldr	r2, [pc, #12]	; (8009748 <HAL_PCD_SuspendCallback+0x30>)
 800973a:	f043 0306 	orr.w	r3, r3, #6
 800973e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	e000ed00 	.word	0xe000ed00

0800974c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fff7 	bl	800874e <USBD_LL_Resume>
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009770:	4a23      	ldr	r2, [pc, #140]	; (8009800 <USBD_LL_Init+0x98>)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a21      	ldr	r2, [pc, #132]	; (8009800 <USBD_LL_Init+0x98>)
 800977c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8009780:	4b1f      	ldr	r3, [pc, #124]	; (8009800 <USBD_LL_Init+0x98>)
 8009782:	4a20      	ldr	r2, [pc, #128]	; (8009804 <USBD_LL_Init+0x9c>)
 8009784:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009786:	4b1e      	ldr	r3, [pc, #120]	; (8009800 <USBD_LL_Init+0x98>)
 8009788:	2208      	movs	r2, #8
 800978a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800978c:	4b1c      	ldr	r3, [pc, #112]	; (8009800 <USBD_LL_Init+0x98>)
 800978e:	2202      	movs	r2, #2
 8009790:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009792:	4b1b      	ldr	r3, [pc, #108]	; (8009800 <USBD_LL_Init+0x98>)
 8009794:	2202      	movs	r2, #2
 8009796:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009798:	4b19      	ldr	r3, [pc, #100]	; (8009800 <USBD_LL_Init+0x98>)
 800979a:	2200      	movs	r2, #0
 800979c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800979e:	4b18      	ldr	r3, [pc, #96]	; (8009800 <USBD_LL_Init+0x98>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097a4:	4816      	ldr	r0, [pc, #88]	; (8009800 <USBD_LL_Init+0x98>)
 80097a6:	f7f8 ff97 	bl	80026d8 <HAL_PCD_Init>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80097b0:	f7f7 fc20 	bl	8000ff4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097ba:	2318      	movs	r3, #24
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	f7fa fb5d 	bl	8003e7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097ca:	2358      	movs	r3, #88	; 0x58
 80097cc:	2200      	movs	r2, #0
 80097ce:	2180      	movs	r1, #128	; 0x80
 80097d0:	f7fa fb55 	bl	8003e7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097da:	2398      	movs	r3, #152	; 0x98
 80097dc:	2200      	movs	r2, #0
 80097de:	2181      	movs	r1, #129	; 0x81
 80097e0:	f7fa fb4d 	bl	8003e7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097ea:	23d8      	movs	r3, #216	; 0xd8
 80097ec:	2200      	movs	r2, #0
 80097ee:	2101      	movs	r1, #1
 80097f0:	f7fa fb45 	bl	8003e7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	200007bc 	.word	0x200007bc
 8009804:	40005c00 	.word	0x40005c00

08009808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800981e:	4618      	mov	r0, r3
 8009820:	f7f9 f838 	bl	8002894 <HAL_PCD_Start>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 f932 	bl	8009a94 <USBD_Get_USB_Status>
 8009830:	4603      	mov	r3, r0
 8009832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009834:	7bbb      	ldrb	r3, [r7, #14]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	461a      	mov	r2, r3
 800984c:	4603      	mov	r3, r0
 800984e:	70fb      	strb	r3, [r7, #3]
 8009850:	460b      	mov	r3, r1
 8009852:	70bb      	strb	r3, [r7, #2]
 8009854:	4613      	mov	r3, r2
 8009856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009866:	78bb      	ldrb	r3, [r7, #2]
 8009868:	883a      	ldrh	r2, [r7, #0]
 800986a:	78f9      	ldrb	r1, [r7, #3]
 800986c:	f7f9 f954 	bl	8002b18 <HAL_PCD_EP_Open>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f90c 	bl	8009a94 <USBD_Get_USB_Status>
 800987c:	4603      	mov	r3, r0
 800987e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009880:	7bbb      	ldrb	r3, [r7, #14]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	460b      	mov	r3, r1
 8009894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7f9 f99b 	bl	8002be4 <HAL_PCD_EP_Close>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f8ed 	bl	8009a94 <USBD_Get_USB_Status>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098be:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098e2:	78fa      	ldrb	r2, [r7, #3]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f9 fa44 	bl	8002d74 <HAL_PCD_EP_SetStall>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 f8ce 	bl	8009a94 <USBD_Get_USB_Status>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7f9 fa77 	bl	8002e18 <HAL_PCD_EP_ClrStall>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 f8af 	bl	8009a94 <USBD_Get_USB_Status>
 8009936:	4603      	mov	r3, r0
 8009938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993a:	7bbb      	ldrb	r3, [r7, #14]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800995c:	2b00      	cmp	r3, #0
 800995e:	da0c      	bge.n	800997a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	00db      	lsls	r3, r3, #3
 8009972:	440b      	add	r3, r1
 8009974:	3302      	adds	r3, #2
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	e00b      	b.n	8009992 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009980:	68f9      	ldr	r1, [r7, #12]
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	440b      	add	r3, r1
 800998c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009990:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	4611      	mov	r1, r2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f9 f887 	bl	8002ace <HAL_PCD_SetAddress>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f864 	bl	8009a94 <USBD_Get_USB_Status>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b086      	sub	sp, #24
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	461a      	mov	r2, r3
 80099e6:	460b      	mov	r3, r1
 80099e8:	72fb      	strb	r3, [r7, #11]
 80099ea:	4613      	mov	r3, r2
 80099ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80099fc:	893b      	ldrh	r3, [r7, #8]
 80099fe:	7af9      	ldrb	r1, [r7, #11]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	f7f9 f974 	bl	8002cee <HAL_PCD_EP_Transmit>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f841 	bl	8009a94 <USBD_Get_USB_Status>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	72fb      	strb	r3, [r7, #11]
 8009a30:	4613      	mov	r3, r2
 8009a32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009a42:	893b      	ldrh	r3, [r7, #8]
 8009a44:	7af9      	ldrb	r1, [r7, #11]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	f7f9 f914 	bl	8002c74 <HAL_PCD_EP_Receive>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f81e 	bl	8009a94 <USBD_Get_USB_Status>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <USBD_static_malloc+0x14>)
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	20000aa8 	.word	0x20000aa8

08009a80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
	...

08009a94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d817      	bhi.n	8009ad8 <USBD_Get_USB_Status+0x44>
 8009aa8:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USBD_Get_USB_Status+0x1c>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009ac7 	.word	0x08009ac7
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009ad3 	.word	0x08009ad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac4:	e00b      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aca:	e008      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e005      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e002      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	bf00      	nop
  }
  return usb_status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop

08009aec <__libc_init_array>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	2600      	movs	r6, #0
 8009af0:	4d0c      	ldr	r5, [pc, #48]	; (8009b24 <__libc_init_array+0x38>)
 8009af2:	4c0d      	ldr	r4, [pc, #52]	; (8009b28 <__libc_init_array+0x3c>)
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	42a6      	cmp	r6, r4
 8009afa:	d109      	bne.n	8009b10 <__libc_init_array+0x24>
 8009afc:	f000 f830 	bl	8009b60 <_init>
 8009b00:	2600      	movs	r6, #0
 8009b02:	4d0a      	ldr	r5, [pc, #40]	; (8009b2c <__libc_init_array+0x40>)
 8009b04:	4c0a      	ldr	r4, [pc, #40]	; (8009b30 <__libc_init_array+0x44>)
 8009b06:	1b64      	subs	r4, r4, r5
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	42a6      	cmp	r6, r4
 8009b0c:	d105      	bne.n	8009b1a <__libc_init_array+0x2e>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b14:	4798      	blx	r3
 8009b16:	3601      	adds	r6, #1
 8009b18:	e7ee      	b.n	8009af8 <__libc_init_array+0xc>
 8009b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1e:	4798      	blx	r3
 8009b20:	3601      	adds	r6, #1
 8009b22:	e7f2      	b.n	8009b0a <__libc_init_array+0x1e>
 8009b24:	08009bfc 	.word	0x08009bfc
 8009b28:	08009bfc 	.word	0x08009bfc
 8009b2c:	08009bfc 	.word	0x08009bfc
 8009b30:	08009c00 	.word	0x08009c00

08009b34 <memcpy>:
 8009b34:	440a      	add	r2, r1
 8009b36:	4291      	cmp	r1, r2
 8009b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b3c:	d100      	bne.n	8009b40 <memcpy+0xc>
 8009b3e:	4770      	bx	lr
 8009b40:	b510      	push	{r4, lr}
 8009b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b46:	4291      	cmp	r1, r2
 8009b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4c:	d1f9      	bne.n	8009b42 <memcpy+0xe>
 8009b4e:	bd10      	pop	{r4, pc}

08009b50 <memset>:
 8009b50:	4603      	mov	r3, r0
 8009b52:	4402      	add	r2, r0
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d100      	bne.n	8009b5a <memset+0xa>
 8009b58:	4770      	bx	lr
 8009b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b5e:	e7f9      	b.n	8009b54 <memset+0x4>

08009b60 <_init>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr

08009b6c <_fini>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	bf00      	nop
 8009b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b72:	bc08      	pop	{r3}
 8009b74:	469e      	mov	lr, r3
 8009b76:	4770      	bx	lr
